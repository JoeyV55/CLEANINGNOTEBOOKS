issueNumber,prNumber,Util,NLP,APM,Network,DB,Interpreter,Error Handling,Logging,Lang,Data Structure,DevOps,i18n,Setup,Logic,Microservices,ML,Test,Search,IO,UI,Parser,Security,Cloud,Big Data,Event Handling,App,GIS,Multimedia,CG,corpus
38,39,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix uninitialized variables this is basically a recreation of   without any stylistic changes only fixing the uninitialized variables
946,43,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,prevent stereo mono effects from causing a crash if an effect has two input channels but only one output channel we cannot read from the second output buffer as there isn t onethis hopefully fixes   http  bugzillaaudacityteamorg show bugcgiid  good sleuthing on this one as well and it has pointed out a bigger problem the current code doesnt properly handle fewer inputs than outputs and fewer outputs than inputsim gonna see if theres a quick solution to the bigger problem and if not ill merge your request since it does fix the immediate problem the bigger fix is much too disruptive this late in the   cycle so id like to merge your change but instead of duplicating the left channel to the right can you make it clear the right channel instead that way the right channel wont play a role in future processing like playback or mixingthanks much for finding this issue and the fix doesn t it play a bigger role if it s cleared for example when mixing wouldn t the result be half what it should be as long as the track is left as a stereo track after the effect is done then yes and until i can get to actually removing the right channel your patch is perfect as is you have a name i could throw into the bug report and contribution list
163,165,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,openmp trackartist drawspectrum take   update to pr   using vector now instead of dynamic array size ive never seen where this didnt work in years but better to keep standard compliant this is not critical to performance so better to forget using alloca as wellalso w  w  recalculated every iteration so it can work with new fisheye feature i did not special case this for the non openmp as it was before since its very small component of the total and i imagine the compiler can do that for usi left the const ref change alone per james comment imo it is just a bizarre thing to do i think we can be pretty sure the code generated is not any worse as there is nothing to dereference in the loops i will relent then on the question of removing   though i would be curious to know if  o  removes the difference in code and stack sizebut again i suggest using paramt  intead of t  etc everywhere and seeing if this improves the generated code even more at  o  or  o however  closer review shows me another problem that makes this still unacceptablesee the variable fisheyecolumn now at line   observe what happens to it yes there is still a loop carry dependency i see that you were careful to fix such dependencies involving w  and w  and correctedx but this one remainsto fix it right we would need first to identify the columns that are in the fisheye using zoominfo getfisheyeleftboundary and getfisheyerightboundary   there will be columns before in and after then where fisheyecolumn  is used inside the loop instead write some arithmetic with xx and the known start and end of fisheyeon the other hand fisheye isnt real yet there are lots of unused hooks in the code waiting for a user interface to make them accessible so i wont insist on fixing that now but good for you if you do for me it in advance after all i have left myself another related todo because fisheye and reassignment still dont play nicely together it can be my problem at such time as we try to bring that project onlineso you can just make a loud screaming comment with todo in it or addifdef  openmpwxassert infisheye   one more thing please consider alloca it avoids the free store operations of vector and i think it is more portable than using a non constant expression in a built in array dimension i suspect that latter is simply not standard c  what is the type of the array variable without decay to pointer it cant be described in the type system and may not be accepted by all the compilers we want to use but i saw how clang compiled that non standard thing on mac and it worked and i think alloca will generate just the samefinally i request that you rebase these commits onto a more recent master and squash them into one so that the graph will be neater i do hope to merge this soon its almost there so at  o  the picture changes this diff  is const ref vs const value it is smaller but not by a lot   lines for ref version   for copy value version this diff  is ref version left vs de refd const locals removed smaller still   lines i timed each version and found no appreciable difference between them based on that finding i think the best is to remove the local variables completely and go through the class struct i would prefer this since it reduces line count significantly and i think it would be easier to understand the codeon the squashing can you do it when  merging the pr  im happy to do whatever but not sure if you knew about this option rebased and squashed removed the references change for now added fisheye support i am satisfied with the changes now thank you and thank you for alerting me to the squash and merge buttonthe failed test noted on this github page was a compilation error unrelated to this changei have also learned that the variable sized arrays you originally used cause a warning with appropriate clang options that it is a c  feature i am not acquainted with c  but it is not standard c  though it seems some compilers incorporate some of its features as nonstandard extensions which is why the construct might never have been a problem in your experience but for portability i would rather avoid it
464,465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,fix filedialog compilation error gtk    oopssorry about that
602,603,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,sqlite open bugs if pull request   isnt yet reviewed and accepted please review and merge this smaller one firstfix possible memory leaks and crashes when opening of sqlite database failsthere are now exceptions thrown in some new places with messages for the user that might be improved
699,700,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,fix cve  this fixes cve  by setting the permissions for the user tmp folder to   closes   soft bump on this is there an eta i am very concerned about the mainte ce of an application used by millions of people in which there is no response from a maintainer to a one line fix for a security vulnerability in six months ping can someone review this please thank you  crsib
984,986,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,errorreportingdialog does not support screen readers resolves   fix uses the approach proposed by david bailes  short description of the changes and the motivation to make the changes     i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1048,1050,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,check for updates dialog will not interrupt recordings resolves   check for updates dialog will very probably not unexpectedly interrupt recordings possibly spoiling them if there is a screen reader there is one slender timing possibility mentioned in code comments where it might yet happen more thread synchronizations might fix that but do not seem worth the extra effort now i signed cla i made sure the code compiles on my machine i made sure there are no unnecessary changes in the code i made sure the title of the pr reflects the core meaning of the issue you are solving i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1164,1167,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,check for updates will not interrupt the timer record wait dialog resolves   check for updates has been so that its modal dialog will wait until any recording in progress finishes but that was not enough it should also not interrupt the timer recording wait dialog this commit fixes that too i have tested it with amodified build making more frequent checks  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1191,1192,1,0,1,1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,opt out of check for updates persists after preference resets resolves    these can happen in only two ways using the application  from the toolsmenu or using the windows intaller programa review of all uses of wxfileconfig deleteall proves thisthe one special boolsetting object was moved from updatemanager to prefscpp toavoid a dependency cycle among source code files   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements the checks are still running so im not merging right now
1200,1204,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,fixes handling of invalid updatescheduledtime resolves      i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1181,1207,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,track affordances resolves   resolves      adds affordances to a wave clips note track item labels   contains requested fixes and improvements link above   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements i have cherry picked and merged parts of this pull requesti mentioned a few points that are still unresolved i dont approve the edit cursor change yet and i must still review all the label track changesplease rebase your branch onto recent master and force push it again
1251,1207,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,track affordances resolves   resolves      adds affordances to a wave clips note track item labels   contains requested fixes and improvements link above   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements i have cherry picked and merged parts of this pull requesti mentioned a few points that are still unresolved i dont approve the edit cursor change yet and i must still review all the label track changesplease rebase your branch onto recent master and force push it again
1042,1208,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,same custom over aligned allocation routine on all platforms in particular so that warnings on exit in the debug build on windows aresuppressedmaybe its not important to suppress them or maybe they suggest all is notcorrect in the msvc implementation of this c  featureresolves    i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements  davidbailes please tell me whether this works i think it will suppress the warning while not disabling all of the memory debugging on windows    davidbailes please tell me whether this works i think it will suppress the warning while not disabling all of the memory debugging on windowsit works  davidbailes please do the formality of approving this pull request before i merge it
1174,1219,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,add additional checks for macro output directory this bug still available in case  using old settings file or manual set it into settings fileresolves      i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements i tested this on w  with audacity win alpha cef bitthis is a branch build  clear audacity settings folder  launch   directories preferences  set the macro output directory to be c  exit audacity  launch   branch alpha with the fix  tools macros  choose the shipped mp  conversion macro  apply macro to  files  choose any audio file for processing  observe  audacity does not crash but displays the following error message when it reaches the export step in the macro a black box test perspective i think this can be pulled in master for
1183,1265,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,fix recording starting position refs   resolves      i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1268,1271,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,move privacy policy url to a different tab to improve its visibility resolves      i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1243,1297,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,fix bug   resolves      i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvementswindows with error information for temporary directory cases  https  user imagesentcom    d cc eb a b e b ec e png we usually aim to have a help button on error dialogs to take you to the manual for more information       we usually aim to have a help button on error dialogs to take you to the manual for more informationwe have a link in this dialog to audacity manual that followed to directory preferences description or you means button used usual for this purpose link to manual not a link seems i understand what you means i will add a changes an example i like the new use of the html window in an error dialog as it gives easy option of hyperlink cut and paste ability and wrapping that does not depend on the translatorsnotice that peters example also has an informative title for the dialog   i like the new use of the html window in an error dialog as it gives easy option of hyperlinkunfortunately the hyperlink wont be accessible to keyboard users the error dialog is changed to
1298,1300,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,sequence of audioio and networkmanager shutdowns fixes crash at exit resolves   stack trace showed main thread was shutting down network manager which was waiting to join a response thread which was executing the lambda in updatemanager which was using the global audioio object   which was destroyed before that at least on the main threadthis is a simple fix  destroy audioio after that not before  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1305,1306,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,fixes writability check for the macro output directory the check for macro directory now only happens if directory is selected and existsresolves    short description of the changes and the motivation to make the changes     i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1312,1313,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,fix dangling pointers to project from lyricswindowcpp resolves   the bug is difficult to reproduce but this is a plausible fix for it given what we know from a stack trace  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1294,1314,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,fix scriptables commands which broke at  b  problem was the loss of an override of pluginmanager getid for a morespecific pointer typeresolves    short description of the changes and the motivation to make the changes   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements  stevedaulton please review and approve if it fixes the bug you may need a clean pluginregistrycfg to verify it works for me
1162,1322,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,extract lib exceptions  toolkit neutral library for audacitys exception handling system  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1199,1323,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,install updates resolves      i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements squash these commits into one then address my recent suggestions for checking that you re enable update checking on all possible failure pathsthat is all the change i will request
1060,1328,1,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,extract lib preferences resolves   a library of classes that manage global variable settings that persist between runs of the application  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1329,1344,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,shift drag of clips between tracks was never allowed up to   and in   started crashing instead just disallow it again nofunctionality lostresolves    i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1159,1345,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,extract lib math resolves   depends on pr   extract a tool kit neutral library for some mathematical and sample processing utilities make only the library directly dependent on libsoxrnote that only the last five commits are proper to this pr  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1160,1359,1,0,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,extract lib files resolves   a library for general file handling utilities and definitions of certain significant file paths which does not depend on wxcore though it does still depend heavily on wxbase  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1376,1377,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,stereo track affordance resolves      i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements your approach is founded on a memory of the origin of a channel as aligned or not rather than computing it as neededi would prefer that you compute alignment as neededdefining the condition will take some work you must sort clips of each channel becauase they are not necessarily in sorted order and they you must iterate corresponding clips comparing start and end times probably with a tolerance  let times differ by    rate this is extra work and extra calculation but i believe the calculation will be small in practice because clips will be fewthe advantage is greater confidence that there are not surprising corner cases where things will not work as expectedfor instance  i just made a mono track duplicated it then made a stereo track from them the affordance of the right channel did not disappear as expected in your branch it would under this other approachthere are also other commands like swap stereo tracks this did not produce the expected result it would if aligned ness is computed instead of stored   your approach is founded on a memory of the origin of a channel as aligned or not rather than computing it as needed    i would prefer that you compute alignment as needed    defining the condition will take some work you must sort clips of each channel becauase they are not necessarily in sorted order and they you must iterate corresponding clips comparing start and end times probably with a tolerance  let times differ by    rate     this is extra work and extra calculation but i believe the calculation will be small in practice because clips will be few    the advantage is greater confidence that there are not surprising corner cases where things will not work as expected    for instance  i just made a mono track duplicated it then made a stereo track from them the affordance of the right channel did not disappear as expected in your branch it would under this other approach    there are also other commands like swap stereo tracks this did not produce the expected result it would if aligned ness is computed instead of storedi dont agree with that ive considered that possibility but the problem is that matching clips isnt enough the result should be cached anyway moreover the first case isnt valid this behaviour was requested the second case should be also i see a problem with definition of matching clips  it will probably change in the nearest feature   i dont agree with that ive considered that possibility but the problem is that matching clips isnt enough the result should be cached anyway moreover the first case isnt valid this behaviour was requested the second case should be fixed also i see a problem with definition of matching clips  it will probably change in the nearest featureif matching clips is not enough what is your more precise description of the criterion you are guessing it will probably change but that is speculation even if it does change defining it in one place in a test seems to me to be the less fragile approach more lines of code to implement the complicated test but fewer places in the code will need changes to guarantee the consistency of the cache with changes of the trackcaches are useful but problematic when there are many things that could happen to invalidate them   if matching clips is not enough what is your more precise description of the criterionit is described here the check you propose is actually answers the question we dont need to answer are clips aligned or not from the description of the task i understand that the sequence of track transformation determines whether the track should be considered aligned or not consider case when user have stereo track with misalligned clips then user makes them aligned by dragging should we consider track aligned now if yes then affordance should disappear if no then user can split stereo track and merge it back to get completely another appearance this was my question for designers and as i understand the currently implemented behaviour is exactly what was requested except second scenario youve provided     if matching clips is not enough what is your more precise description of the criterion    it is described here   the check you propose is actually answers the question we dont need to answer are clips aligned or not from the description of the task i understand that the sequence of track transformation determines whether the track should be considered aligned or not consider case when user have stereo track with misalligned clips then user makes them aligned by dragging should we consider track aligned now if yes then affordance should disappear if no then user can split stereo track and merge it back to get completely another appearance this was my question for designers and as i understand the currently implemented behaviour is exactly what was requested except second scenario youve provided you are right that you tried to implement literally what is now in the text box in the first picture at that issuereally i think that specification should be disputed and corrected so lets raise this at the next design reviewi believe that if mono tracks have aligned clips according to the numerical criteria then they should merge into a stereo track without the second affordance area the branch needs a rebase and force push and conflict resolution
1403,1416,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,experimental qa journalling basics resolves   beginnings of built in tools for easy creation of automated functional regression tests in alpha builds onlycertain events can be recorded to journaltxt in the folder with audacitycfg if this has been enabled in the tools menu and then played back if that file is specified with the  j command line optionso far only menu items that require no dialogs or their shortcut keystroke equivalents or certain toolbar buttons that invoke those commands can be played back some simple sessions   such as just exiting the program   can replayaudacity returns a non zero status to the shell if journal playback fails because the programs state is out of sync with what the journal file expects no examples yet of how to force that failure   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements thanks for the approvalyou noticed then how the journal language is definedthose details may be up for change but its enough for the minimal version
1163,1429,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,extract lib registries resolves   library of useful utilities for decoupling of sub systems and making them open ended   the big o of solidbeware here be dragons much use of c  templates  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1363,1437,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,fix update on uihandle change within cell resolves      i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements excellent detective workmy only small objection is that i would make the new move constructors non inline myself not important enough to block this
1421,1441,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,fix event types used in prefslistener singalling which broke at a f dresolves    resolves   events were failing to be processed because event types were set incorrectly  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements   is for good
1369,1441,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,fix event types used in prefslistener singalling which broke at a f dresolves    resolves   events were failing to be processed because event types were set incorrectly  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements   is for good
1375,1475,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,stereo wave track channel resizing resolves    resizing area added to the wavetrackview and wavetrackaffordancecontrol making possible to have an enlarged resizing area with  px distance between channels   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1158,1478,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,0,1,0,extract lib xml resolves   extract a library for serialization and deserialization of objects in xml form and a registry for serializable objectsattached directly to the project  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1404,1482,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,experimental dialog journalling resolves   the journalling system is now enhanced enough that it can replay some interactions with modal dialogs including pushbuttons choice controls text boxes and sliders   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements const correctness is the wrong word   im not cheating with c style casts or const castunnecessarily non const arguments is what you mean for some predicates fair point
1496,1495,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,rewrite dither resolves   rewrite dithercpp more clearly with c  functions not macrosjust a preliminary to a preliminary to some audioio cleanup   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements could this have a negative impact on performance dither is one place that speed is important currently there is virtually no difference in time taken to export a long track with dither or without dither tested on linux   could this have a negative impact on performance dither is one place that speed is important currently there is virtually no difference in time taken to export a long track with dither or without dither tested on linux i invite you to experimentall relevant functions are declared inline and compilers can be pretty smart     could this have a negative impact on performance dither is one place that speed is important currently there is virtually no difference in time taken to export a long track with dither or without dither tested on linux     i invite you to experiment    all relevant functions are declared inline and compilers can be pretty smarti rewrote all of my branch with only static inline functions and no pointer to member functions
1501,1502,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix     resolves   resolves     i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1476,1502,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix     resolves   resolves     i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1477,1502,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix     resolves   resolves     i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1144,1527,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,1,1,0,extract lib audio devices resolves   extract a library of utilities for querying the available audio devices finding their preferred sample rates holding certain related global preferences variables and also the interface class meter for transferring buffers of samples for purposes of display updatesthis does not contain the complete playback and recording audio engine when wavetrack is a library it will need only this part to set default sample rates of wave tracks appropriatelydoing this separation now is also desirable as a prelude to other refactorings of the audio engine  i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1182,1533,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,clip names resolves        i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements please see  nomenclature for default clip names could be improved as audio clip   all is well in the last commit just rebase nothing yet the i n changes are good i suggest better comments about the logic of the binary search but there is a possible crash bug in split cut of tracks which was introduced in a later force push i think you write rightclip where you meant leftclipfix that and the comments test split cut edit   remove special   split cut rebase and force push and i will approve
1153,1586,1,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,extract lib project resolves    platform neutral library defining the audacityproject object and associated projectstatus which just holds some strings there is also some fixing of some possible null pointer dereferences of the global active project   which might be null on macos   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1152,1587,1,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,extract lib screen geometry resolves    depends on pr  extract a toolkit neutral library for mapping of screen x coordinates to times and y coordinates to amplitudes or frequencies   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1143,1588,1,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,0,1,1,extract lib project rate resolves    depends on   a library holding the global preferences for project rate and sample format and defining the per project holding sample rate it depend on lib audio devices to decide the default ratewhen wave tracks are separated into a library that will depend on this for construction of tracks but will avoid dependency on all of audioio   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1580,1594,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,some audio io refactoring resolves   some refactoring tasks in audioio before disentangling the midi playback parts   i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1590,1602,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,audacitymessagebox button presses can now be replayed in journal the dialog wont actually reappear but the same value will be returned tothe programthese message boxes are special native ones that dont use the wxwidgets eventframework therefore the system for journalling of mouse button presses doesnot work with them treat them speciallya generalized facility added to namespace journal in case this pattern needs tobe repeated for other actionsresolves    short description of the changes and the motivation to make the changes     i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements
1258,1614,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,wave clip rename resolves      short description of the changes and the motivation to make the changes     i signed  cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message s contain a description and answer the question why do those changes fix that particular issue or why are those changes really necessary as improvements this round of review is now complete the overall approach is sound but i flagged many details that need attention none of these is difficult by itself
1444,1616,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,label track  shift drag resolves        short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior i just tested the label drag bars with  vsverchinskys latest branch build  audacity win alpha e e b bit i confirm that the icon now properly changes to the drag hand when cursor is over the labels drag bar a open hand while hovering over b closed drag hand when clicking and draggingnote that this is good much better   but it now makes the old way of moving resizing labels with the chevron and dot inconsistent as they still use the arrow icon approved please rebase and force pushc
1544,1616,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,label track  shift drag resolves        short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior i just tested the label drag bars with  vsverchinskys latest branch build  audacity win alpha e e b bit i confirm that the icon now properly changes to the drag hand when cursor is over the labels drag bar a open hand while hovering over b closed drag hand when clicking and draggingnote that this is good much better   but it now makes the old way of moving resizing labels with the chevron and dot inconsistent as they still use the arrow icon approved please rebase and force pushc
398,1623,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,ffmpeg update  resolves   resolves   resolves  resolves   resolves  resolves  supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library provided functionsthis pr  allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented  provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in  inl  files which are later included in c  files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version dependent code   fixes few incompatibilities between ffmpeg versions  sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat  and avformat  are supported i dont see much reason to support   and   when   will be released and current dev branches are   it will be added to the list this should be a trivial taskbuilds were tested against      and   surprisingly   support was different and the most difficult from   while the major version stayed the same ffmpeg   was downloaded from the official page  the system library on manjaro     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior one more push of commits and some in line comments and questions and this completes my reviewact on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on i missed the infinite loops with getnextcodec and getnextoutputformat i see how you corrected them was it testing that discovered it i re approve the latest force pushonly small suggestions  initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top   which ought to be stated at least informally in the header files of the class as preconditionsand thats all
1034,1623,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,ffmpeg update  resolves   resolves   resolves  resolves   resolves  resolves  supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library provided functionsthis pr  allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented  provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in  inl  files which are later included in c  files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version dependent code   fixes few incompatibilities between ffmpeg versions  sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat  and avformat  are supported i dont see much reason to support   and   when   will be released and current dev branches are   it will be added to the list this should be a trivial taskbuilds were tested against      and   surprisingly   support was different and the most difficult from   while the major version stayed the same ffmpeg   was downloaded from the official page  the system library on manjaro     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior one more push of commits and some in line comments and questions and this completes my reviewact on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on i missed the infinite loops with getnextcodec and getnextoutputformat i see how you corrected them was it testing that discovered it i re approve the latest force pushonly small suggestions  initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top   which ought to be stated at least informally in the header files of the class as preconditionsand thats all
1170,1623,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,ffmpeg update  resolves   resolves   resolves  resolves   resolves  resolves  supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library provided functionsthis pr  allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented  provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in  inl  files which are later included in c  files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version dependent code   fixes few incompatibilities between ffmpeg versions  sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat  and avformat  are supported i dont see much reason to support   and   when   will be released and current dev branches are   it will be added to the list this should be a trivial taskbuilds were tested against      and   surprisingly   support was different and the most difficult from   while the major version stayed the same ffmpeg   was downloaded from the official page  the system library on manjaro     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior one more push of commits and some in line comments and questions and this completes my reviewact on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on i missed the infinite loops with getnextcodec and getnextoutputformat i see how you corrected them was it testing that discovered it i re approve the latest force pushonly small suggestions  initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top   which ought to be stated at least informally in the header files of the class as preconditionsand thats all
1201,1623,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,ffmpeg update  resolves   resolves   resolves  resolves   resolves  resolves  supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library provided functionsthis pr  allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented  provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in  inl  files which are later included in c  files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version dependent code   fixes few incompatibilities between ffmpeg versions  sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat  and avformat  are supported i dont see much reason to support   and   when   will be released and current dev branches are   it will be added to the list this should be a trivial taskbuilds were tested against      and   surprisingly   support was different and the most difficult from   while the major version stayed the same ffmpeg   was downloaded from the official page  the system library on manjaro     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior one more push of commits and some in line comments and questions and this completes my reviewact on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on i missed the infinite loops with getnextcodec and getnextoutputformat i see how you corrected them was it testing that discovered it i re approve the latest force pushonly small suggestions  initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top   which ought to be stated at least informally in the header files of the class as preconditionsand thats all
1331,1623,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,ffmpeg update  resolves   resolves   resolves  resolves   resolves  resolves  supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library provided functionsthis pr  allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented  provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in  inl  files which are later included in c  files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version dependent code   fixes few incompatibilities between ffmpeg versions  sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat  and avformat  are supported i dont see much reason to support   and   when   will be released and current dev branches are   it will be added to the list this should be a trivial taskbuilds were tested against      and   surprisingly   support was different and the most difficult from   while the major version stayed the same ffmpeg   was downloaded from the official page  the system library on manjaro     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior one more push of commits and some in line comments and questions and this completes my reviewact on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on i missed the infinite loops with getnextcodec and getnextoutputformat i see how you corrected them was it testing that discovered it i re approve the latest force pushonly small suggestions  initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top   which ought to be stated at least informally in the header files of the class as preconditionsand thats all
1433,1623,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,ffmpeg update  resolves   resolves   resolves  resolves   resolves  resolves  supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library provided functionsthis pr  allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented  provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in  inl  files which are later included in c  files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version dependent code   fixes few incompatibilities between ffmpeg versions  sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat  and avformat  are supported i dont see much reason to support   and   when   will be released and current dev branches are   it will be added to the list this should be a trivial taskbuilds were tested against      and   surprisingly   support was different and the most difficult from   while the major version stayed the same ffmpeg   was downloaded from the official page  the system library on manjaro     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior one more push of commits and some in line comments and questions and this completes my reviewact on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on i missed the infinite loops with getnextcodec and getnextoutputformat i see how you corrected them was it testing that discovered it i re approve the latest force pushonly small suggestions  initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top   which ought to be stated at least informally in the header files of the class as preconditionsand thats all
1466,1623,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,ffmpeg update  resolves   resolves   resolves  resolves   resolves  resolves  supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library provided functionsthis pr  allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented  provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in  inl  files which are later included in c  files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version dependent code   fixes few incompatibilities between ffmpeg versions  sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat  and avformat  are supported i dont see much reason to support   and   when   will be released and current dev branches are   it will be added to the list this should be a trivial taskbuilds were tested against      and   surprisingly   support was different and the most difficult from   while the major version stayed the same ffmpeg   was downloaded from the official page  the system library on manjaro     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior one more push of commits and some in line comments and questions and this completes my reviewact on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on i missed the infinite loops with getnextcodec and getnextoutputformat i see how you corrected them was it testing that discovered it i re approve the latest force pushonly small suggestions  initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top   which ought to be stated at least informally in the header files of the class as preconditionsand thats all
1333,1630,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,not move clip on insertion by default changing editing a clip can move other clips option default value to falseresolves   changing editing a clip can move other clips option default value to false   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1581,1637,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,disentangle midi play from audio io resolves   next refactoring steps for audioioall of the logic specific to midi playback is removed from audioiocpp and invoked instead through an abstract base class audioioext a new separate file midiplaycpp registers its extension policy with audioiothese steps shrink the big file audioiocpp from   to   lines and are also preparations for putting note track into its own optional extension modulethe unnecessary separate thread for midi playback is removed for simplicity and some callbacks happen directly in the portaudio thread that means some memory allocations may happen on that thread when midi plays see preparemidiiterator but future refactorings will correct thatthe dependency of lib audio devices on portmidi is severeda few other changes remove some dependencies on notetrack and use settings objects from prefscpp to eliminate some duplicated literals and direct use of gprefs in midiplaycpp   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior now rebased with build fixes and also removing use of deprecated std iterator
1582,1638,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,generalize play head position updates resolves   the play head position is drawn on screen by the main thread which is told the track time corresponding to the last played samples by the portaudio threadthat thread in turn sometimes got this value from information in a queue from the third worker thread which reads from the tracks in larger batches of samples as when scrubbing but other times did its own calculations taking into account whether pay is straight or looping assuming loop bounds and whether it uses a time track as wellthis pull request changes that so that the portaudio thread never calculates but always takes the value from the queuethis is a preparation so that the producer of that queue can vary the correspondence of samples in transit with points on the time ruler in yet other ways   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1631,1639,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,fix journal of return key invoking default dialog button on mac and some other caseswherever audacity simulates button press events set the event object to be thebutton so that windoweventserialization in journaleventscpp can determinea pathname for the window associated with the eventthe change in keyboardcapture is enough for the default buttons of dialogs theother changes are necessary but not sufficient for fixing journalling of some ofaudacitys custom widgets on any operating systemresolves    short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1658,1664,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,1,1,1,playback policy classes   resolves    depends on    more refactoring of audioiocpp and playbackschedulecpp so that there is less of the logic for special playback cases like looping and scrubbing in those files   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1382,1675,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,restore missing localizations for linux appimage resolves    ensure install prefix is set correctly   the cmake variable install prefix is now correctly passed into the program  make audacity portable   audacity now checks for resources at a location relative to the executable instead of a location each time works fine with appimage
1644,1677,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,the setclip command can set the clip name resolves    the set clip macro command now can change a clip name toothe command is also accessible in menus under extra   scriptables i you must first enable the extra menus in the interface preferences  lwinterberg see this manual page needing update use x to fill the checkboxes below like   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1660,1678,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,clip renaming context menu item resolves   this makes   and   more completeadd an item to the wave clip context menu for renaming   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior i have changed the function name and also check other channelsi still do not understand why event notifications should be used here you used them so that changed of track selection state could be detected by textedithelper and that was proper for avoidance of dependency cycles tracklist should not depend on the code that reacts to the event i dont see a problem with cycles in this commit that needs this technique to break them the problem of pushing the undo history stack isnt solved so i mark this as a draft until i do that i dont recall why i thought undo history was sometimes not pushed   maybe i was confusedbut it can be unnecessarily pushed   if you just hit enter with no changes to the text i changed that case it should affect behavior of clicking on the name as well as the new context menu itemesc key works as you would expect discarding any changes you may have made without hitting enter
998,1678,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,clip renaming context menu item resolves   this makes   and   more completeadd an item to the wave clip context menu for renaming   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior i have changed the function name and also check other channelsi still do not understand why event notifications should be used here you used them so that changed of track selection state could be detected by textedithelper and that was proper for avoidance of dependency cycles tracklist should not depend on the code that reacts to the event i dont see a problem with cycles in this commit that needs this technique to break them the problem of pushing the undo history stack isnt solved so i mark this as a draft until i do that i dont recall why i thought undo history was sometimes not pushed   maybe i was confusedbut it can be unnecessarily pushed   if you just hit enter with no changes to the text i changed that case it should affect behavior of clicking on the name as well as the new context menu itemesc key works as you would expect discarding any changes you may have made without hitting enter
1400,1679,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,smart clips resolves   resolves   work in progress   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior i see this is rebased onto more recent master nowi like the more detailed explanation in commit commentsin commit comments if you write more than one line then always make the second line blank and after it use line breaks at about   columns at last i consider this review complete
1401,1679,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,smart clips resolves   resolves   work in progress   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior i see this is rebased onto more recent master nowi like the more detailed explanation in commit commentsin commit comments if you write more than one line then always make the second line blank and after it use line breaks at about   columns at last i consider this review complete
1613,1711,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,wave time shift tool hit testing fix resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior when was the bug introduced  davidbailes said after   likely in work i did in the commit range c bf c b d fa e c e b f eea d ae dcc b f a c e e f fc  where i did a lot of work to make a polymorphic track shifter abstraction so that timeshifthandle would not be build dependent on subclasses of trackbut where more exactly in there commit  d f cd a f d b  is where the old and more correct selection logic was deleted see function  findclipattime  which used  waveclip getclipatsample  which does not have the off by  error but it may not be the first commit where the bug happened the function became unused and was replaced with a different call at an earlier place in this complicated sequence of commits transforming the time shifting code   commit  d  is where the old and more correct selection logic was deleted see function  findclipattime  which used  waveclip getclipatsample  which does not have the off by  error but it may not be the first commit where the bug happened the function became unused and was replaced with a different call at an earlier place in this complicated sequence of commits transforming the time shifting codei think that bug was introduced here
1427,1717,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,makes selection tool available at affordance area resolves    i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior i approve the changes if you are not going to make more fixes i wasnt sure from your comment then you may rebase and merge this pr
1689,1736,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,fix clip frame drawing resolves   also fixes clipping usage  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1755,1756,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,loop play button resolves    add a new toggle button to the control toolbar   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1751,1758,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix for ffmpeg loading on macos resolves    on macos   the dynamic library loader behaves differentlyall dyld  environment variables are read only during the application startup this premulates the behavior of other os by manually trying to load every library from every directory listed   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1702,1766,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix cut preview resolves   resolves   resolves   resolves   reimplement the cut preview feature the c shortcut key also ctrl click on play button less special casely by using another subclass of playbackpolicy it means cut preview will also interact nicely with the time track and respond like otherplayback to changes of mute solo gain and pan controlsno more temporary tracks in the implementation   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1703,1766,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix cut preview resolves   resolves   resolves   resolves   reimplement the cut preview feature the c shortcut key also ctrl click on play button less special casely by using another subclass of playbackpolicy it means cut preview will also interact nicely with the time track and respond like otherplayback to changes of mute solo gain and pan controlsno more temporary tracks in the implementation   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1568,1766,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix cut preview resolves   resolves   resolves   resolves   reimplement the cut preview feature the c shortcut key also ctrl click on play button less special casely by using another subclass of playbackpolicy it means cut preview will also interact nicely with the time track and respond like otherplayback to changes of mute solo gain and pan controlsno more temporary tracks in the implementation   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1566,1766,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix cut preview resolves   resolves   resolves   resolves   reimplement the cut preview feature the c shortcut key also ctrl click on play button less special casely by using another subclass of playbackpolicy it means cut preview will also interact nicely with the time track and respond like otherplayback to changes of mute solo gain and pan controlsno more temporary tracks in the implementation   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1411,1779,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,brush tool improvements resolves    resolves   resolves   resolves   resolves   resolves   resolves   most of the recently requested changes to ux for the spectral brush dialog   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1772,1779,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,brush tool improvements resolves    resolves   resolves   resolves   resolves   resolves   resolves   most of the recently requested changes to ux for the spectral brush dialog   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1773,1779,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,brush tool improvements resolves    resolves   resolves   resolves   resolves   resolves   resolves   most of the recently requested changes to ux for the spectral brush dialog   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1775,1779,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,brush tool improvements resolves    resolves   resolves   resolves   resolves   resolves   resolves   most of the recently requested changes to ux for the spectral brush dialog   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1776,1779,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,brush tool improvements resolves    resolves   resolves   resolves   resolves   resolves   resolves   most of the recently requested changes to ux for the spectral brush dialog   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1777,1779,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,brush tool improvements resolves    resolves   resolves   resolves   resolves   resolves   resolves   most of the recently requested changes to ux for the spectral brush dialog   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1651,1793,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,fix auto clip naming resolves    also fixes wrong name assigned to a clip when recording to a new track  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1459,1799,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,set the page size for aup  files using pragma this change ensures that page size will be  k even if system sqlite  was used mostly relevant for linux resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1460,1802,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,remove the requirement for the sqlite enable dbpage vtab resolves   this pr introduces a different approach to estimating the sampleblock size on disk it does not account for the sqlite  internal structures size so well but the difference is relatively negligible we use this estimation to decide if we need to compact the database on disk as we do not allow database vacuuming for performance reasons the performance of the heuristic can be further improved as  used blocks   total blocks  should work just fine however this would require more changes to the code projectfileio gettotalusage   and  projectfileio getcurrentusage   are also used in now disabled compaction dialog however using  gettotalusage   was probably not the idea anyway because it never accounted for the project and autosave tables  getcurrentusage   still gives a very good estimate of how much disk space is used   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1704,1808,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,adjusting loop playback resolves    start looping play then adjust the bounds of the selection   the looping play will respond to those changes   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1157,1816,1,0,0,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,extract lib theme resolves    extract a library for the theme system   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1698,1832,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,new clip naming scheme resolves    i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1825,1836,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,change default spectrogram settings resolves   change default settings for scale type to mel top of scale to   hz window size to   and zero padding to  also cleaning up a lot of preference usage in spectrogram settings to avoid repetition of literals for paths and defaults   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1759,1840,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,fix event handling in wavetrackaffordancecontrol resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1813,1841,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,adds whats new link to the splash dialog resolves   the whats new section will be shown only if  show whats new section  is passedthe update dialog is populated dynamically from the  latestxml  contents   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior should you resize the splash window taller now should you resize the splash window taller nowi think not      should you resize the splash window taller now    i think not    should you resize the splash window taller now    i think not  why was my screenshot unlike yours i still see get official released etc above the imageget official release is shown when build level is not   so it is not the case for real world users       should you resize the splash window taller now            i think not        should you resize the splash window taller now            i think not      why was my screenshot unlike yours i still see get official released etc above the image    get official release is shown when build level is not   so it is not the case for real world usersyou edited my comment well i understand now         should you resize the splash window taller now                  i think not                should you resize the splash window taller now                  i think not              why was my screenshot unlike yours i still see get official released etc above the image            get official release is shown when build level is not   so it is not the case for real world users    you edited my comment well i understand nowsorry got confused by ui   you may rebase and merge after addressing leos question if that is needed i cant judge that i will merge now i think the image and the link will change anyway
1803,1843,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,multi tool shortcut is again f  not f  resolves    make the shortcut key for multi tool again f  as in   and forever before that  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1820,1848,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,right channel delete key behavior resolves   resolves   this would fix the failure of delete to work in right channel for the brush tool if that is enabled in the buildit also fixes the non functionality of delete   and all other keystrokes   for editing the title of a clip in a right channel of a stereo track with nonaligned clips   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1847,1848,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,right channel delete key behavior resolves   resolves   this would fix the failure of delete to work in right channel for the brush tool if that is enabled in the buildit also fixes the non functionality of delete   and all other keystrokes   for editing the title of a clip in a right channel of a stereo track with nonaligned clips   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1838,1854,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,issue   screen readers should read labels when tabbing resolves  that when a label track is the focus tab and shift tab only select a label rather than opening it for editing in a custom text box which is not accessible for screen readers its useful for the name of the label to be readstraightforward fixalso added i n hint in transportmenuscpp where there is the same message for screen readers   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1710,1857,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,issue   compromise resolves   this does not resolve all as suggested in the issue description but may offer satisfactory workaroundsfor label track behavior the esc key already removes the insertion cursor if there is one but now if there no insertion cursor but there is a label navigated to by tab then esc clears the navigation state this allows esc and then return to change the selected state of the label trackfor wave track behavior the return or number pad enter key behavior will remain hard coded it is also hard coded for label track text editing about which there isnt a complaintnote that if a clip is not selected then pressing enter does nothing i assume thats just a bug in the implementation this is the return key will be intercepted for editing only in case the selection coincides with the extent of a clipwith this change you can change the selection such as with j or left arrow in default key bindings so it becomes a point then return toggles the selected state of the wave trackyou may be unsatisfied that restoring the time selection to what it was before requires further tab key presses maybe further improvement is possible and you  davidbailes might suggest another commit to accomplish that   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior   resolves      this does not resolve all as suggested in the issue description but may offer satisfactory workaroundsthis does not offer satisfactory workaroundsi am at a loss as to how this issue has been handled this was the initial design  you can see i raised the issue of enter being a duplicate on   jul and there was a reply from  jounih davidbailes makes sense to have customisable commands for selecting clips and editing names rather than hardcode these shortcuts  vsverchinsky can you do this pleaseand here we are on   oct with a duplicate shortcuthave the designers said that there has be a duplicate shortcutwhy cant this be properly with a command and a user assignable shortcut with a default which is not a duplicate like its done in the rest of audacityi really dont understand what is going on here shortcuts are generally context sensitive i agree that ideally this should be implemented as a configurable shortcut workaround paul proposes solves the problem of context switching and it is almost see below satisfactory in case we wont be able to implement the configurable shortcut in time for  however after testing i found out that it is not possible to deselect a clip with an esc key and i think this should be fixed to  paul licameli  penikov cc  anitabats   shortcuts are generally context sensitivesure shortcuts can be context sensitive but this is not a good case for that the user would not expect to have to deselect a clip in order to change the selection of the track  i agree that ideally this should be implemented as a configurable shortcut workaround paul proposes solves the problem of   context switching and it is almost see below satisfactoryit is not almost satisfactory  in case we wont be able to implement the configurable shortcut in time for  is getting the keyboard user interface right less important than getting the mouse interface rightisnt accessibility a high priority for this project  tantacrul what are your views on this i think we can solve this issue at the spot with another esc push lets say if the clip name edit mode is on the first esc turns off this mode another one esc removes a clip track selectionif there is no clip name editing the esc button removes the selection only  the user would not expect to have to deselect a clipi dont think that track selection toggling with  enter  is expected by most of the users anyway the current track selection behavior is really confusing as it is and there are issues there already for example shift arrows behaves differently depending on the track count  agree that there are users that are familiar with this behaviour and may rely on it and using enter for renaming is familiar only to macos users so probably there should be a better default shortcut for renaming rather than the enter key given that f  is already in the global scope i would say ctrl f isnt accessibility a high priority for this projectit is a top priority indeed but there is no commitment that we will never change the behavior of the application this includes the potential changes to the selection behavior otherwise there is no point in development and in any case i believe esc should remove the selection from the clip  paul licameli  tantacrul  vsverchinsky     the user would not expect to have to deselect a clip    i dont think that track selection toggling with  enter  is expected by most of the users anyway the current track selection behavior is really confusing as it is and there are issues there already for example shift arrows behaves differently depending on the track count    i agree that there are users that are familiar with this behaviour and may rely on it and using enter for renaming is familiar only to macos users so probably there should be a better default shortcut for renaming rather than the enter key given that f  is already in the global scope i would say ctrl f ctrl f  would be fine i suggested it in september      isnt accessibility a high priority for this project    it is a top priority indeedthats reassuring to hear  but there is no commitment that we will never change the behavior of the application this includes the potential changes to  the selection behavior otherwise there is no point in developmenti dont have a problem with the behaviour of the application being changed i dont have a problem with the selection behaviour being changed i am aware that the behaviour of the shift arrows is rubbish   it has been discussed in the past but unfortunately there was never agreement as to what it should be changed tomy problem is with having this duplicate use the the enter key which makes it harder for keyboard users to use the program   i dont think that track selection toggling with  enter  is expected by most of the users anywayim pretty sure that it is very much expected by many millions of current audacity users there are also countless references to using enter to toggle track selection in audacity documentation and on the forumexample to select tracks           click on track   down cursor twice then enter  repeat step   as necessaryit can be a one handed operation and second nature to millions of existing usersalternatives such as esc are less convenient and esc to select a track is counterintuitive   i agree that there are users that are familiar with this behaviour and may rely on itabsolutely and thats a vast number of users considering that this feature has been present for   years  esc to select a track is counterintuitiveesc unrolls selection stack it is not used for selection per se thanks  davidbailes  this was very useful for me to understand our accessibility a little better we just discussed a stopgap solution that will   not mess with existing experience with the enter key     will provide a for now key binding for renaming clipsultimately this will be solved when we move to the next step of our work on altering clip behaviour that will involve a more distinct selection state for clips that is different to selecting wave data more to come about this will share designs when they are ready for your feedback the notion of selectedness or focus of a clip distinct from a time selection coindident with the clip boundaries needs to become a real thing in the code but it needs thought and work and no short fix is going to do it nowi have raised the idea that the set of keystroke bindings should not be a single global one as now but might more usefully by contextual that is return might be customized for one thing in general changing track selection but a different set of customizations could apply and override the meaning of return when a clip or label or other thing is focused starting the editing of a name thats a nice idea that has occurred to me before still worth considering but it might take a lot of elaboration to make it work both in restructuring our commandmanager and in making a convenient way to customize the keystrokes in preferences and it presupposes that the notion of clip focus is properly implemented first this pull request was approved and merged it has been judged insufficient for the issue but i ask again whether anyone thinks it contained anything wrong that should be reverted no one has said so   we just discussed a stopgap solution that will   not mess with existingexperience with the enter keythanks  tantacrul wrote  thanks  davidbailes useful for me to understand our accessibility a little better we just  discussed a stopgap solution that will   not mess with existing experience  with the enter key     will provide a for now key binding  ultimately this will be solved when we move to the next step of our work  on altering clip behaviour that will involve a more distinct selection  state for clips that is different to selecting wave data more to come  about this will share designs when ready for feedback    you are receiving this because you were mentioned  reply to this email directly view it on github  triage notifications on the go with github mobile for ios
1863,1864,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,issue   add names of clips to messages for screen readers resolves  that there are clip names they should be added to messages sent to screen readersthis commit adds the clip names to the messages sent by various existing clip commands   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1833,1865,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,fix text edit shortcuts resolves   also select all command is available when label is edited  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior done reviewing maybe the generality is okay for ctrl a and ctrl c which do not need to push new undo items but i have shown definite problems in case of paste are there other problems to demonstrate with cut too maybe i didnt experiment enough to decide that some experiments with ctrl x when text is selected in a label track box will easily show that proper undo redo handling was already an omission even in   and earlier was paste already badly handled too actually dopastetext used to handle the case of insertion of text at the edit cursor of a label always correctly pushing the undo stack but this pr causes a definite regression of that behavior preempting dopastetext   actually dopastetext used to handle the case of insertion of text at the edit cursor of a label always correctly pushing the undo stack but this pr causes a definite regression of that behavior preempting dopastetext yet another thing i overlooked but the fix seems to be quite simple  move project history modification code to  labeltrackview pastetext  and remove it from  onpastenewlabel   labeltrackview oncontextmenu  though history item text will change and  dopastetext  becomes unneeded so it can be removed also ive noticed that there is some gtk specific code that does not modify undo history as well if evtmiddledown   paste text making a new label if none is selected wxtheclipboard useprimaryselection true viewpasteselectedtext project newselt  newselt  wxtheclipboard useprimaryselection false  and it will be too if the history modification code is moved to  labeltrackview pastetext  also  labeltrackview cutselectedtext  may be fixed same waydo you think it would be better now to avoid changing existing code for labels and add some workarounds to handle text shortcuts in wave track
1870,1871,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,issue   feedback for screen readers when tabbing to clips resolves  a user presses tab or shift tab to select the next previous clip a message is sent to any screen reader   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1858,1872,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,exit editing of clip a name and redraw when a trackpanel loses focus resolves   exit clip name editing when a mouse click causes the trackpanel to lose focusnote that this implementation commits any unfinished text edit with a undo history item   it doesnt cancel it as if by the escape key  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1835,1874,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,fix clip name editing resolves   resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior tested on w  with audacity windows bit f f    branch build by  vsverchinsky this fix by vitaly looks good   the clip name is highlighted for editing when you double click on the clip
1834,1874,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,fix clip name editing resolves   resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior tested on w  with audacity windows bit f f    branch build by  vsverchinsky this fix by vitaly looks good   the clip name is highlighted for editing when you double click on the clip
1814,1883,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,avoid drawing text outside the clipping rectangle if possible resolves    i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1890,1894,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,less laggy response of looping playback to change of region bounds resolves    some lagginess has to be tolerated because there must be a queue of somelength between the trackbufferexchange thread and the portaudio thread buthow short can it bein case of playback looping that lag is now set to an arbitrary hard coded    second in loopingplaybackpolicy suggestedbuffertimes which is less thanthe old default latency of   seconds see playbackpolicy suggestedbuffertimes which perhaps was a value motivated by older generations of hardwareso if you adjust looping play bounds while the play head is within     secondof the end of the loop thats     second of real time not track time in caseyou also have a time warping time track   then you might yet notice the playhead not doing quite what you want should we make that latency user tunable or more challengingly for usdetect hardware limitations and make it adaptive   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1842,1898,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,customizable ctrl f  not hard coded return to edit clip names this inserts a menu item under editalso share code with the clip context menuresolves      short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior thanks for this but it only partially resolves as stated in the steps to reproduce the problem occurs in label tracks as well as audio tracks   thanks for this but it only partially   as stated in the steps to reproduce the problem occurs in label tracks as well as audio tracksperhaps a separate issue number for that case theni offered esc to un focus a label so that return has its usual meaning and i still like this idea myself but it needs elaborationi think shortcut keys should be overloadable with different meanings when the program is in different states its not a bad principle after all   whenever you open a drop down or pop up menu you are in a temporary state where keystrokes do different things they invoke accelerators of menu items i have said and will say again that i think that what we need what will take more development than a bug fix is an improved system of hierarchical foci and context sensitive assignment of shortcuts to actions  develop a proper notion of nested foci track panel track clip or label   have easy keystroke navigation among them not just tabbing among peers but up  and down hierarchy like what i can do with voiceover on mac but built in to audacity even without screen readers   let return and other keys scope differently depending on what is focused  advantage is not running out of scarce keystrokes as more functionality is added or having to use very un mnemonic ones or modifier key chords just to avoid conflicts in a single flat scopeyour opinions of that i believe that label tracks behavior is present in   as well i dont think we have the capacity or time to change this behavior for     i believe that label tracks behavior is present in   as well i dont think we have the capacity or time to change this behavior for  its differentin   tabbing to a label also put a text insertion cursor in the box hitting return exits text editing repeated return then toggles selection of the label track on and off tab key brings back an insertion cursor  davidbailes didnt strongly object that i know ofin   we have sort of another level of focus   one for the label as a whole the horizontal bar brightens another for the label boxin   tabbing cycles among labels but does not put an insertion cursor in them another return keystroke does that instead repeated return shows and hides this cursori offered esc as escape from this the horizontal bar becomes dark as a visual clue if you can see visual clues then return changes track selectiondavid isnt satisfied with this but i want to resist the appropriation of yet more un mnemonic keystrokes i didnt really like ctrl f  either   i think there should just be a contextually different f  action so instead we could make return key with edit cursor visible exit label editing and exit label focusso if you tab to a label you would return three times instead of two to change track selection stateone more keystroke but no new key is assigned anythinggood enough   so instead we could make return key with edit cursor visible exit label editing and exit label focus    so if you tab to a label you would return three times instead of two to change track selection state    one more keystroke but no new key is assigned anything    good enoughi think that sounds confusingtaking a step back the original design spec had the same shortcut enter for renaming clips and labelsthis commit changes the default keystroke for renaming clips to ctrl   f assuming that the designers still want the same keystroke then why keep using enter for renaming labelsif there is a shortage of time since there are no existing commands with the default shortcut ctrl   f  then in the case of labels hardcoding it wouldnt be the end of the world though doing it properly would be better   i have said and will say again that i think that what we need what will take more development than a bug fix is an improved system of hierarchical foci and context sensitive assignment of shortcuts to actions      develop a proper notion of nested foci track panel track clip or label     have easy keystroke navigation among them not just tabbing among peers but up  and down hierarchy like what i can do with voiceover on mac but built in to audacity even without screen readers     let return and other keys scope differently depending on what is focused    advantage is not running out of scarce keystrokes as more functionality is added or having to use very un mnemonic ones or modifier key chords just to avoid conflicts in a single flat scope    your opinions of thati think you mentioned somewhere else that you were going to create an issue discussion for this i think that would be a better way of getting feedback rather than on this pull request     so instead we could make return key with edit cursor visible exit label editing and exit label focus    so if you tab to a label you would return three times instead of two to change track selection state    one more keystroke but no new key is assigned anything    good enough    i think that sounds confusingi pushed another commit try it  taking a step back the original design spec had the same shortcut enter for renaming clips and labels this commit changes the default keystroke for renaming clips to ctrl   f there was mention of that keystroke elsewhere and some unwritten agreement with  tantacrul that we can compromise with a new keystroke  assuming that the designers still want the same keystroke then why keep using enter for renaming labels if there is a shortage of time since there are no existing commands with the default shortcut ctrl   f  then in the case of labels hardcoding it wouldnt be the end of the world though doing it properly would be better i do not understand what you mean by properlymy notion of properly but not easily is outlined in my previous commenti want a compromise that satisfies you and us in short time  tantacrul could you please confirm whether or not you think the shortcuts for renaming a selected clip and a selected label should be the same    tantacrul could you please confirm whether or not you think the shortcuts for renaming a selected clip and a selected label should be the sameif they were the same then when clips have a selected attribute it will be possible for both clips and labels to be selected at the same time in that case when if a user pressed the rename shortcut which type of items are renamed could be determined using the context of the type of track being the focus ie audio or label   i pushed another commit try iti tried the commit and still think its confusing  i still think that its not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected  a keyboard user can quite easily not know that a label is selected   either because it is off screen or the user is using a screen reader  in your commit when a user pressed enter to finish an edit of a label this now deselects the label i dont think a user would expect that  i want a compromise that satisfies you and us in short timei think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels and as ive said if they do im happy for ctrl f  to be hardcoded for labels as a temporary measure if time is short    tantacrul could you please confirm whether or not you think the shortcuts for renaming a selected clip and a selected label should be the samei think that would make sense and reduce cognitive load yes ctrl   f  sounds reasonable to me actually there is a problem  we can only associate one command name with the keystroke what should this shared clip label renaming thing be called rename is too general rename clip too specific rename clip or label is ugly maybe alt f  for the labelmy opinion about the ideal longer term solution needing much work is that simply f  can mean different things in different contexts and the system of associating keystrokes with commands needs more elaboration to allow that overloadingi still dont know if  davidbailes agrees with that ideal     i pushed another commit try it    i tried the commit and still think its confusing      i still think that its not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selectedkeystrokes might vary what they do according to the kind of focus why not    a keyboard user can quite easily not know that a label is selected   either because it is off screen or the user is using a screen readerthen is the answer to be sure to announce every change of focus letting each label be a focus letting the label track be a higher order one    in your commit when a user pressed enter to finish an edit of a label this now deselects the label i dont think a user would expect thatis this not just a return to the   and earlier behavior which you did not object to return key while edit cursor is visible returns focus to the track      i want a compromise that satisfies you and us in short time    i think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels and as ive said if they do im happy for ctrl f  to be hardcoded for labels as a temporary measure if time is short actually i am bothered by some implications in the implementation if the customizable keystroke is the same the function handling it must be the same under present limitations there must also be one name given to that commandbut labels and clips are very different things the need for a single handler function that must know about both   conflicts with other work i m trying to do with modularization which aims to separate things like label track support in general from the program entirely as a drop in modulei say again a better system with contextual overloading of keystrokes so they map to handler functions one to many is a thing to develop please tell me you agree or no   actually there is a problem  we can only associate one command name with the keystroke what should this shared clip label renaming thing be called rename is too general rename clip too specific rename clip or label is ugly maybe alt f  for the label  i think there should be one command with the default shortcut ctrl f  its a context dependent command and the user has only to remember one shortcuti dont see a problem with a command with the name rename clip or label but maybe others could come up with a better suggestion for the name  my opinion about the ideal longer term solution needing much work is that simply f  can mean different things in different contexts and the system of associating keystrokes with commands needs more elaboration to allow that overloading    i still dont know if  davidbailes agrees with that idealas ive said already i think your ideas for a longer term solution would be better discussed in a separate issue discussionwhat is being suggested here by me and i think  tantacrul is a command which is context sensitive   what is being suggested here by me and i think  tantacrul is a command which is context sensitiveyes that is what i was saying too unless there is a technical time objection that i havent considered of course from a user perspective i have no problem with context sensitive keyboard shortcuts so long as there is also consistencyfor example ok for one shortcut to be used to  zoom in on timeline  zoom in on db scale  zoom in on spectrogram  zoom in on plot spectrum scale  but not ok for one shortcut to  zoom in on timeline  open label for editing  toggle selectionthough even with consistency context sensitivity could be confusing as users are often unaware of which element has focus or even the concept of focus if something is not obvious to users then thats a design problemjust my  c         i pushed another commit try it            i tried the commit and still think its confusing          i still think that its not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected    keystrokes might vary what they do according to the kind of focus why notclearly in general the actions of keystrokes can vary depending on what object is the focusbut here the focus is the track a label never is the focus and i think thats appropriateagain if you want to continue discuss you idea of having a focus hierarchy within the track panel please open an issue discussion about it        a keyboard user can quite easily not know that a label is selected   either because it is off screen or the user is using a screen reader    then is the answer to be sure to announce every change of focus letting each label be a focus letting the label track be a higher order one  as ive said above i dont think a label should be the focus and in this case its a question of one or more than one being selected not being the focus the rename command should act on the selected items not the focused item      in your commit when a user pressed enter to finish an edit of a label this now deselects the label i dont think a user would expect that    is this not just a return to the   and earlier behavior which you did not object to return key while edit cursor is visible returns focus to the track  in   and earlier using tab and shift tab opened a custom text box for editing this text box was not accessible for users of screen readers in my guide to audacity for screen readers ive always advised users of screen readers to not use the tab and shift tab keystrokes in a label tracknow that in   tab and shift tab just select a label i was hoping that might make more functionality safely available to users of screen readers in particular the work that you did so that a selected label could be moved on its own however for that to be the case then this current issue of the use of enter needs to be sorted out and the bug with creating a label by typing  i have a pr for this bug but it was written assuming that the hardcoded enter was going to be removed      i want a compromise that satisfies you and us in short time            i think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels and as ive said if they do im happy for ctrl f  to be hardcoded for labels as a temporary measure if time is short     actually i am bothered by some implications in the implementation if the customizable keystroke is the same the function handling it must be the same under present limitations there must also be one name given to that command    but labels and clips are very different things the need for a single handler function that must know about both   conflicts with other work i m trying to do with modularization which aims to separate things like label track support in general from the program entirely as a drop in module  as far as i can see the command could be implemented now and that implementation can be changed in the future so that it fits in with whatever code restructuring that youre designing   i say again a better system with contextual overloading of keystrokes so they map to handler functions one to many is a thing to develop please tell me you agree or noyou are expecting me to say yes of no to a sentence which i dont fully understandcommands may be context sensitive but i dont know what you mean by the contextual overloading of keystrokes it could mean many things   from a user perspective i have no problem with context sensitive keyboard shortcuts so long as there is also consistency for example ok for one shortcut to be used to      zoom in on timeline    zoom in on db scale    zoom in on spectrogram    zoom in on plot spectrum scale        but not ok for one shortcut to      zoom in on timeline    open label for editing    toggle selection  this might define whats ok or not in a set of default bindings but users should be free to customize bindings in lower levels of the focus tree as they choosefor now we have just one global mapping of keystrokes to commandids internal string identifiers that are paired with functions that execute themi think we might want something like different mappings of keystrokes to commandids and from commandids to actions both mappings dependent on focus a mapping at a lower level of focus might inherit mappings from a higher level of focus and override mappings selectivelyfor instance define ctrl c   copy just once in a high level mapping but lower level mappings might reassociate copy   function differently and appropriately we wont need just one copy function that has to switch on the kind of focus and do unrelated things         i pushed another commit try it                  i tried the commit and still think its confusing              i still think that its not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected            keystrokes might vary what they do according to the kind of focus why not    clearly in general the actions of keystrokes can vary depending on what object is the focus but here the focus is the track a label never is the focus and i think thats appropriatestrong disagreement the absence of but need for a proper notion of sub track focus for clip or for label feels very obvious to me now consider also the new context menu items for clips and some problems of that new design that peter has pointed out a notion of the focused clip independent of what the time selection is is needed   this might define whats ok or not in a set of default bindings but users should be free to customize bindings in lower levels of the focus tree as they chooseyes of course im referring to default bindingswhether or not users are free to customize bindings in lower levels of the focus tree as they choose is a design option   i do not see that as a necessary requirementdont forget that it is only a small minority of users that customize their key bindings with carefully selected key bindings there should be no need for the vast majority of users to customize them     this might define whats ok or not in a set of default bindings but users should be free to customize bindings in lower levels of the focus tree as they choose    yes of course im referring to default bindings whether or not users are free to customize bindings in lower levels of the focus tree as they choose is a design option   i do not see that as a necessary requirement dont forget that it is only a small minority of users that customize their key bindings with carefully selected key bindings there should be no need for the vast majority of users to customize themtrue but also  having the mapping from keystrokes to dispatch functions being not necessarily one to one as now but possibly one to many based on focus context will have advantages from my point of view advantages for better compatibility with modularization efforts and other nicer structurekeeping things implemented in separate functions but allowing overloading of keystrokes would also let us re use more mnemonic keystrokes for things rather than all the disambiguating modifier key chords and other uglinessf  is a recent example   we want it to remain the key for envelope tool but if its also a natural key for renaming following some other application conventions then really it would be nicest to use it for that too when a clip is focused not ctrl f      as ive said above i dont think a label should be the focus and in this case its a question of one or more than one being selected not being the focus the rename command should act on the selected items not the focused item  again i dont see why a label shoudnt be focus but ah you mention selection different from focusreview the abstract class wxaccessible see that what its really for is defining and navigating a hierarchy of objects that are focusable or selectablecompare getfocus with getselections focus is unique among sisters under a node but selection is allowed to be any subset of themlabels within a track can easily conform to this model  why noti think audacity needs to define its own abstract classes and implementations of them to represent a tree of navigable items and map that onto wxaccessiblei think trackpanelax needs reimplementation and generalization this way   will have advantages from my point of view advantages for better compatibility with modularization efforts and other nicer structurebe careful to not conflate desirable for developers and desirable for users they are different though not mutually exclusive things and the latter must take priority as users are the raison d tre for the app     in   and earlier using tab and shift tab opened a custom text box for editing this text box was not accessible for users of screen readers in my guide to audacity for screen readers ive always advised users of screen readers to not use the tab and shift tab keystrokes in a label trackoh that was my omission   not observing behavior when you change the preference to open a dialog box      i say again a better system with contextual overloading of keystrokes so they map to handler functions one to many is a thing to develop please tell me you agree or no    you are expecting me to say yes of no to a sentence which i dont fully understand commands may be context sensitive but i dont know what you mean by the contextual overloading of keystrokes it could mean many thingsall right you agree about context sensitivitywhat im thinking would involve some further elaboration of the keyboard preferences dialog so that there is not one but multple mappings of keys to commands dependent on different kinds of context and accessible to the user for customization as i mentioned recently in a replay to steve a mapping for a subsidiary focus context might inherit mappings from a parent scope by default but also give some special overridesyes i need to elaborate these ideas in writing in more detail when i have more freedom thanks for approval  vsverchinsky my decision about this i will merge the first commit only not the change for labeltrackview that  davidbailes didnt likei will make a small change adding ellipsis to the new menu command item because it may open a dialog rename clip lwinterberg note the new item under the edit menu which must be in the manualthis will   but still not resolve   fullyi will later make another pr to resolve   well enough for   i will use the hard coded ctrl f  which  davidbailes said is good enough its awful for the long term and not customizable of course it will not add any new internationalized string to the menus  paul licameli   i will later make another pr to resolve   well enough for   i will use the hard coded ctrl f  which  davidbailes said is good enough its awful for the long term and not customizable of course it will not add any new internationalized string to the menusgiven that the developers are short for time before   ive assumed that it would be helpful if i created a pull request for this     paul licameli      i will later make another pr to resolve   well enough for   i will use the hard coded ctrl f  which  davidbailes said is good enough its awful for the long term and not customizable of course it will not add any new internationalized string to the menus    given that the developers are short for time before   ive assumed that it would be helpful if i created a pull request for this   thank you
1752,1914,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,allow the application appearance to match the theme on macos currently this is implemented for macos users onlywindows has not yet published the api linux requires gtk  and we build against gtk  currentlyresolves    short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior can we become a working build with gtk    wxgtk    python wxpython  i use the packages above with a stable audacity    plugins enabled but can notbuilding a clean and working since the  x release of audacityif more info needed i can post the contents of spec files  ohquait you may want to ask in the  forum  or the  dev discord  about this instead of some random pull request that already is merged
1739,1916,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix bug with lof unicode using resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior thanks for looking at this  gera gas unfortunately this does not fix the problem for me tested on xubuntu   in fact it prevents audacity from importing from any lof file even those that contain lower ascii characters onlythe problem here is that  if buf i  maybe you need this to guess the encoding or maybe theres no need to check other than ensuring that it isnt a huge file wxtextfile seems to be pretty robust wrt opening files that dont contain text if the file isnt readable as text the import will fail so we just need to tell the user that it failedits unfortunate that lof files were not defined to have a standard header of some sort so that we could easily recognize them something to keep in mind if the lof format is ever extended as it is about the only thing that we know a lof file  must  have is at least one occurrence of the word file as the first non whitespace word on a line  stevedaulton i add new checking control and test it on ascii utf  with and without bom and utf  with and without bom file formats too on my pc all work fine
1896,1930,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,click away from trackpanel still in audacity ends clip name edit resolves    this is unlike the case of loss of focus when clicking outside of audacitywhich was the case at ec e  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1927,1936,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,fix recording to a new track resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior now merged into master and release branches
1884,1938,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,fix tab usage in wavetrack resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior my review is complete i don t approve yet i m not sure how i tell github to retract my mistaken approval i approve understanding that another issue will be opened for the problem of the tab key cycle for the right channel in case clips do not align
1903,1940,0,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,adds an ability to change projects user version based on features used this commit introduces a new mechanism to allow projects components to specify the audacity version they require to be loaded it is possible to set the version based on the features that are currently in use smart clips use this new approach to require at least audacity   if there are trimmed clips in the projectresolves    short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1934,1947,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,issue   renaming clip using the keyboard resolves  the keyboard to rename a clip in an audio track regardless of which clip is selected the same clip in the audio track is always renamedfix in wavetrackaffordancecontrols starteditnameofmatchingclip the call to starteditclipname edits the name of mfocusclip so set the value of mfocusclip not meditedclip   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1260,1950,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,playback looping drags resolves   resolves   resolves   this completes the user interface for playback looping with three click and drag actions in the timeline  dragging a completely new play region arrow cursor   resizing an existing region east west arrows   moving an existing region hand please observe also  the context menu item to make selection follow play region drags works  yellow snap guidelines at edges of labels or clips and of the selection when it isnt following the play region  escape key aborts all drags  left click without drag still starts playback  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1706,1950,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,playback looping drags resolves   resolves   resolves   this completes the user interface for playback looping with three click and drag actions in the timeline  dragging a completely new play region arrow cursor   resizing an existing region east west arrows   moving an existing region hand please observe also  the context menu item to make selection follow play region drags works  yellow snap guidelines at edges of labels or clips and of the selection when it isnt following the play region  escape key aborts all drags  left click without drag still starts playback  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1707,1950,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,playback looping drags resolves   resolves   resolves   this completes the user interface for playback looping with three click and drag actions in the timeline  dragging a completely new play region arrow cursor   resizing an existing region east west arrows   moving an existing region hand please observe also  the context menu item to make selection follow play region drags works  yellow snap guidelines at edges of labels or clips and of the selection when it isnt following the play region  escape key aborts all drags  left click without drag still starts playback  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1946,1958,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,fixes splash screen size when whats new is shown also real link to the video is now addedresolves    short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1822,1965,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,fix crash on looping play seen on windows resolves    a recurrence of bugs   and   these worked around a bug in the soxrlibrary recent rearrangements of playback engine sometimes failed to do theworkaround   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior i can confirm that   is related to this issue too it is even easier to reproduce on jack however it happens without looping as well looking into the fix makes me not so sure that this will help we need to wait for the appimage to be built first as the bug is much easier to catch in release build   however it happens without looping as well looking into the fix makes me not so sure that this will help we need to wait for the appimage to be built first as the bug is much easier to catch in release buildif the call stack doesnt involve the soxr library its something else  soxr deinterleave f is on top for windows as wellanyway i can confirm that issue with jack is as well works for me with  alpha that is it doesnt crash there is still a glitch at the start of playback but thats a different issue
1961,1967,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,snapping when dragging whole play region leaves length unchanged resolves    moving the whole play region should never change its length when it snaps either end   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1962,1976,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,fixes alt key behavior if track is present there are still edge cases left while editing the clip name the fix for them will be complex and is out of scope for the release branch hotfixresolves      short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1780,1978,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,change shortcut for renaming label to hardcoded ctrl f  resolves  for label tracks enter hardcoded for renaming the selected label is the same shortcut used by default by the command for toggling the selectedness of the trackfix  use the shortcut ctrl f  for renaming the selected labelwarning  this has been implemented by hardcoding this shortcut rather than providing a context sensitive command for renaming both clips and labels this was done due to a shortage of time this hardcoded shortcut should be removed after the release of  in changing the shortcut from enter to ctrl f  in labeltrackview docapturekey in the line if isvalidindex mtexteditindex project isvalidindex mnavigationindex project  the case isvalidindex mnavigationindex project was removed this had been added in commit a ad d presumably to capture the enter key this was an incorrect change and caused issue  a label can be created by typing regardless of option settingso this commit also fixes that issue   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior  paul licameli probably we do want this fix in the current release branch too    paul licameli probably we do want this fix in the current release branch tooit looks low risk to me at a quick glance if you are convinced it is correct and does not conflict with other recent developments in labeltrack then please cherry pick it into release too
1860,1981,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,clips visibility resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior please do an interactive rebase to permute wave clip frame drawings adjustment and then unified hit testing routines for wave clips to the start then every commit in the sequence will compile third commit wavetrackaffordancehandle refactoring should mention in commit comment that the click is now also conditional on visibility of details the drawing of small clips could be improved observe this screenshot a one second clip is shown at a magnification where clip details are still considered visible see the top  the two quarter circles with   pixel radius intersectperhaps you can make the radius the lesser of the constant and one half the rectangle with the drawing of small clips could be improved observe this screenshot a one second clip is shown at a magnification where clip details are still considered visible see the top  the two quarter circles with   pixel radius intersect    perhaps you can make the radius the lesser of the constant and one half the rectangle with     img altscreen shot   at       pm width  src idea
1931,1985,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,fix for text navigation with arrows resolves   same fix is applied to both clip names and labels  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1924,1992,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,issue   starting play with empty selection loop disabled do not play a short bit from time zero do not briefly show play head thereuse the start time option which prepares all before the firsttrackbufferexchange call and not the older seek mechanism that instead seta variable and let the portaudio thread to react to it possibly the threaddid not see the change in variable promptly enough explaining the symptomresolves    short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1971,1993,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,fix timeline hot zones resolves    make correct hot zones for drags in the timeline when looping is disabled   i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1984,2002,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,fix playback policies resolves   resolves   resolves   resolves   behavior of playback when looping is not enabled should be as before play from left edge of the selection either to right edge if that is different or to the end of the tracks and once onlyalso change reactions of play in progress to changes of the loop region or state of the loop button when button is up play as non looped when it is down jump only leftward to the start of the loop and only when playback reaches the right edge so if playback is right of the loop it also continues to the end and stops  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1994,2002,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,fix playback policies resolves   resolves   resolves   resolves   behavior of playback when looping is not enabled should be as before play from left edge of the selection either to right edge if that is different or to the end of the tracks and once onlyalso change reactions of play in progress to changes of the loop region or state of the loop button when button is up play as non looped when it is down jump only leftward to the start of the loop and only when playback reaches the right edge so if playback is right of the loop it also continues to the end and stops  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1995,2002,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,fix playback policies resolves   resolves   resolves   resolves   behavior of playback when looping is not enabled should be as before play from left edge of the selection either to right edge if that is different or to the end of the tracks and once onlyalso change reactions of play in progress to changes of the loop region or state of the loop button when button is up play as non looped when it is down jump only leftward to the start of the loop and only when playback reaches the right edge so if playback is right of the loop it also continues to the end and stops  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
2003,2002,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,fix playback policies resolves   resolves   resolves   resolves   behavior of playback when looping is not enabled should be as before play from left edge of the selection either to right edge if that is different or to the end of the tracks and once onlyalso change reactions of play in progress to changes of the loop region or state of the loop button when button is up play as non looped when it is down jump only leftward to the start of the loop and only when playback reaches the right edge so if playback is right of the loop it also continues to the end and stops  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1999,2007,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,minor looping region ui fixes resolves    and two other problems   dragging of looping region partly into negative time should not make it disappear  yellow snap guideline should be visible at right edge of last clip  remove arbitrary restriction on selection of play regions with error message cannot lock region beyond end of project  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1990,2013,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,issue   fix clip rename history resolves    i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
1969,2014,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,issue   fix recording starting position resolves    i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
2011,2015,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,initialize play region to be invalid region this change is required to maintain consistency between default and cleared play regionsresolves      short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
2019,2023,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,adds a checkmark to loop on off menu resolves      i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior  crsib thanks for the prompt fix
2029,2030,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,fix manual link resolves    short description of the changes and the motivation to make the changes     i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
2036,2039,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,fix envelope drawing again resolves   fix drawing of envelope points correctly for trimming or time shifting or both  i signed  cla  the title of the pull request describes an issue it addresses  if changes are extensive then there is a sequence of easily reviewable commits  each commits message describes its purpose and effects  there are no behavior changes unnecessary for the stated purpose of the prrecommended  each commit compiles and runs on my machine without known undesirable changes of behavior
