prNumber,APM,Logi,UI,Network,Lang,Multi Thread,Multimedia,Interpreter,Error Handling,IO,Logging,Data Structure,CG,Setup,Logic,Util,Untility,GIS,App,i18n,Parser,DB,Event Handling,prTitle,prBody,prIssue,issueNumber,issueTitle,issueBody,prComments,issueTitleLink,issueBodyLink,issue_Comments,isPR,isTrain,commitMessage,prCodeReviewComments,NLP,DevOps,Microservices,ML,Test,Search,Security,Cloud,Big Data
39,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,fix uninitialized variables,this is basically a recreation of #38 without any stylistic changes  only fixing the uninitialized variables.,,38,fix uninitialized variables,this is basically a recreation of #38 without any stylistic changes only fixing the uninitialized variables,,fix 3 uninitialized variable accesses and some optimizations,,in tooldock and timetrack what was the real intent?  are you sure those fixes are the correct ones? || the affected code in tooldock and timetrack wasnt touched in years we can only guess what originally was intendedand concerning the other fixes i double checked the code and did a test run with valgrind everything works fine for me im pretty sure those are correct || my mistake it is a pull request not just a commit  rejected in its current form  dan come on over to audacity-devel e-mail list and we can talk about style in audacity and what an acceptable pull request would need  ||,1,0,fix uninitialized variable in equalizer effectdelete mcustombackup as it is never used,,0,0,0,0,0,0,0,0,0
43,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,0,1,0,prevent stereo->mono effects from causing a crash.,if an effect has two input channels but only one output channel  we cannot read from the second output buffer  as there isn’t one.  this hopefully fixes 946](http://bugzilla.audacityteam.org/show_bug.cgi?id=946).,,946,prevent stereo->mono effects from causing a crash,if an effect has two input channels but only one output channel we cannot read from the second output buffer as there isn’t onethis hopefully fixes 946](http://bugzillaaudacityteamorg/show_bugcgi?id946),good sleuthing on this one as well and it has pointed out a bigger problem  the current code doesnt properly handle fewer inputs than outputs and fewer outputs than inputsim gonna see if theres a quick solution to the bigger problem and if not ill merge your request since it does fix the immediate problem || the bigger fix is much too disruptive this late in the 211 cycle  so id like to merge your change  but instead of duplicating the left channel to the right can you make it clear the right channel instead?  that way the right channel wont play a role in future processing like playback or mixingthanks much for finding this issue and the fix || doesn’t it play a bigger role if it’s cleared? for example when mixing wouldn’t the result be half what it should be? || as long as the track is left as a stereo track after the effect is done then yes  and until i can get to actually removing the right channel your patch is perfect as-is || you have a name i could throw into the bug report and contribution list? ||,issue 871: let audacity compile with unmodified portaudio sources,"resolves:  this may allow upgrade to the latest version of portaudio which isdesirable for fixes and improvements including the fixing of build warnings onmac about use of deprecated sdk functionsthe function pautil_gettime() cannot be calledto make a conservative fix that doesnt affect the fine tuning of timingreplicate the implementation of that function directly in audioiocpp withall necessary conditional compilation branchesdont attempt a fix with std::chrono although that would be more nicelyplatform independenttesting should confirm that midi playback doesnt suffer any jittery timingsuch as it did especially on linux with alsa when the playback feature wasunder development in 2017<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""","what version of portaudio this was tested with?whats the problem with pautil_gettime()?whats the problem with std::chrono?the description gives advice on how to deal with pautil_gettime() but it looks like advice is already incorporated in the pr it sounds like this has not been tested on linux is that true?everything looks reasonable in the code the code was completely unexpected from the description though i think a better description would be something like ""this change moves the old implementation of portaudios pautil_gettime() into audacity and renames it util_gettime() because "" || > whats the problem with pautil_gettime()?this is a private api of portaudio i e it is not exposed in the portaudio headers and is hidden in the shared libraryubuntu shipped audacity with the following patch:``` src/audioiocpp | 10 +++++++++- 1 file changed 9 insertions(+) 1 deletion(-)diff --git a/src/audioiocpp b/src/audioiocppindex 0187e39bfb0848 100644--- a/src/audioiocpp+++ b/src/audioiocpp@@ -4918 +49116 @@ time warp info and audioiolistener and whether the playback is looped    #define round(x) (int) ((x)+05)    //#include <stringh> //   #include ""/lib-src/portmidi/pm_common/portmidih""-   #include ""/lib-src/portaudio-v19/src/common/pa_utilh""    #include ""notetrackh""+#include <timeh>++patime pautil_gettime( void )+{+    struct timespec tp+    clock_gettime(clock_realtime &tp)+    return (patime)(tptv_sec + tptv_nsec * 1e-9)+}+ #endif``` || note that the much fewer lines of code we need to add are to fix linkage when the library is compiled as c++ instead of c  in src/os/unix/pa_unix_utilc`#ifdef __cplusplusextern c {#endif``#ifdef __cplusplus}#endif`could all of this be more easily  if only we can upstream a small change to portaudio?  is there an error in build scripts that causes compilation in the wrong language? || > could all of this be more easily fixed if only we can upstream a small change to portaudio?i dont think that this is a problem with portaudio it looks to be exclusively an audacity issue || one might argue the mistake is theirs if it is possible to build the functions with linkage inconsistent with the declarations in the header filebut if that is not an option then these changes need a bit of testing to verify midi timing doesnt jitter on any of the platforms || that seems like a better idea to me as i recall portaudio reports the time from pautil_gettime() in callbacks its really a flaw in the abstraction that the system time reported in callbacks is not specified except in a hidden function if you want to know how the time in callbacks relates to anything else (eg midi) theres no way to request portaudios view of the current system time  i dont think theres any reason to hide it-rogeron 5/31/21 8:47 am dmitry vedenko wrote:>>     could all of this be more easily fixed if only we can upstream a>     small change to portaudio?>> i dont think that this is a problem with portaudio it looks to be > exclusively an audacity issue>> —> you are receiving this because your review was requested> reply to this email directly view it on github > < > or unsubscribe > < || how exactly is one supposed to test this? on linux with an upstream/system portaudio audacity doesnt build unless portmixer is disabled and with portmixer disabled midi interfaces no longer appearis there actually any way to test this solution on linux as its currently implemented? || meged as a part of #1186  || ",1,0,prevent stereo->mono effects from causing a crash,,0,0,0,0,0,0,0,0,0
165,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,openmp trackartist::drawspectrum take 2,update to pr #163.   using vector now instead of dynamic array size. i ve never seen where this didn t work in years  but better to keep standard compliant. this is not critical to performance so better to forget using alloca() as well.  also w0  w1 recalculated every iteration so it can work with new fisheye feature. i did not special case this for the non-openmp as it was before since its very small component of the total and i imagine the compiler can do that for us.  i left the const ref change alone per james  comment. imo it is just a bizarre thing to do. i think we can be pretty sure the code generated is not any worse as there is nothing to dereference in the loops.,,163,openmp trackartist::drawspectrum take 2,update to pr #163 using vector now instead of dynamic array size ive never seen where this didnt work in years but better to keep standard compliant this is not critical to performance so better to forget using alloca() as wellalso w0 w1 recalculated every iteration so it can work with new fisheye feature i did not special case this for the non-openmp as it was before since its very small component of the total and i imagine the compiler can do that for usi left the const ref change alone per james comment imo it is just a bizarre thing to do i think we can be pretty sure the code generated is not any worse as there is nothing to dereference in the loops,i will relent then on the question of removing &  though i would be curious to know if -o3 removes the difference in code and stack sizebut again i suggest using paramt0 intead of t0 etc everywhere and seeing if this improves the generated code even more at -o2 or -o3however:  closer review shows me another problem that makes this still unacceptablesee the variable fisheyecolumn now at line 2440  observe what happens to it  yes there is still a loop-carry dependency  i see that you were careful to fix such dependencies involving w0 and w1 and correctedx but this one remainsto fix it right we would need first to identify the columns that are in the fisheye using zoominfo::getfisheyeleftboundary and getfisheyerightboundary -- there will be columns before in and after  then where fisheyecolumn++ is used inside the loop instead write some arithmetic with xx and the known start and end of fisheyeon the other hand fisheye isnt real yet there are lots of unused hooks in the code waiting for a user interface to make them accessible  so i wont insist on fixing that now but good for you if you do for me it in advance  after all i have left myself another related todo because fisheye and reassignment still dont play nicely together  it can be my problem at such time as we try to bring that project onlineso you can just make a loud screaming comment with todo in it  or add#ifdef _openmpwxassert(!infisheye)#110 one more thing please consider alloca  it avoids the free-store operations of vector and i think it is more portable than using a non-constant expression in a built-in array dimension  i suspect that latter is simply not standard c++ (what is the type of the array variable without decay to pointer?  it cant be described in the type system) and may not be accepted by all the compilers we want to use  but i saw how clang compiled that non-standard thing on mac and it worked and i think alloca will generate just the samefinally i request that you rebase these commits onto a more recent master and squash them into one so that the graph will be neater  i do hope to merge this soon  its almost there || so at -o3 the picture changes[this diff]( is const ref vs const value it is smaller but not by a lot 1461 lines for ref version 1500 for copy/value version[this diff]( is ref version (left) vs de-refd (const locals removed) smaller still 1434 lines i timed each version and found no appreciable difference between them based on that finding i think the best is to remove the local variables completely and go through the class/struct i would prefer this since it reduces line count significantly and i think it would be easier to understand the codeon the squashing can you do it when [merging the pr?]( im happy to do whatever but not sure if you knew about this option || rebased and squashed removed the references change for now added fisheye support || i am satisfied with the changes now  thank you  and thank you for alerting me to the squash and merge buttonthe failed test noted on this github page was a compilation error unrelated to this changei have also learned that the variable-sized arrays you originally used cause a warning with appropriate clang options that it is a c99 feature  i am not acquainted with c99 but it is not standard c++ though it seems some compilers incorporate some of its features as nonstandard extensions which is why the construct might never have been a problem in your experience  but for portability i would rather avoid it ||,openmp trackartist::drawspectrum,"much faster drawing function measured about 300% improvement not much to this there is some minor refactoring to allow loop parallelizationadditional refactoring to calculate number scale one time could give a boost to the non-omp version esp when scale involves log() etcalso changed pointless references like ""const double& x  y"" to ""const double x  y"" i dont see the point of having a reference to a primitive type or basic struct like wxrect this may allow better code generation inside loops","i will review thisi am not sure that the references were harming the compiled code  to the contrary a reference is a way of saying ""dont copy""  the real question is whether a declaration is causing a register allocation or stack growth unnecessarily  that may depend on how smart the optimizer is || my incomplete review so far:i will not merge this as it is nowplease dont remove the references unnecessarily without any proof that they help performance  keep the commit simplei am surprised that line 2187 compiles but it does for my on mac  but standard c++ should not allow the array dimension to be a non-constant expression  this may not be portable  this might break the windows build but i am not in a place where i can check that nowuse alloca instead  though not standard either there is precedent for that elsewhere in our code || sorry but the changes you made involving variables w0 and w1 cant go inyou assumed reasonably enough that every pixel column covers an equal interval of time  what you dont know is that i intentially wrote more general code that does not assume this because i was developing a project tentatively called ""fisheye"" which can make the mapping non-uniform  this project may be completed in version 214 || that completes my reviewprl || on reflection i find a bit more to saythe changes to w0 and w1 might be objectionable anyway because of numerical roundoff when computing timestep  this might make more difference when in zoomed very closely and making a (time) selectioni understand that you need to break a loop carried dependency  i think there is no avoiding two calls to positiontotime in each pass of the loop in the parallel version for the future fisheye to work  the serial version can avoid the second call || im closing this rather than have incremental additional changes since paul is not ok with it  paul needs to add comments into the existing code to explain not lifting calculation outside the loop for w0 and w1  i tend to side with darrell over the & being unnecessary and unclear and favour removing them  its a well known idiom to pass small values by value and large values by pointer/reference and i think it is correct to continue it here as darrell does when essentially using const variables just for renaming || surely though we will welcome another commit that answers my objections || yes indeed  but as a new pull request || ",1,0,openmp trackartist::drawspectrum- make 2nd loop parallelizable- remove number scale from both loops only calculate one time- initialize acolor::getcolorgradient separately,,0,0,0,0,0,0,0,0,0
465,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,fix filedialog compilation error (gtk+3),464,,464,fix filedialog compilation error (gtk+3),464,oopssorry about that ||,filedialog compilation error with gtk+3,i get the following error on openbsd with gtk+3:```/tmp/audacity/lib-src/filedialog/gtk/filedialogprivatecpp 35: error: no matching function for call to gtk_file_chooser_get_current_name    filename  wxstring::fromutf8(gtk_file_chooser_get_current_name(m_fc))                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/usr/local/include/gtk-30/gtk/gtkfilechooserh 8: note: candidate function not viable: no known conversion from wxgtkfilechooser to gtkfilechooser * (aka _gtkfilechooser *) for 1st argumentgchar *gtk_file_chooser_get_current_name (gtkfilechooser *chooser)```the problem has been introduced in https://githubcom/audacity/audacity/commit/38bf51afea4e9838544c515c5b1cd3b0b86f0f16,,1,0,fix filedialog compilation error (gtk+3)464,,0,0,0,0,0,0,0,0,0
603,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,0,sqlite open bugs,if pull request #602 isn t yet reviewed and accepted  please review and merge this smaller one first.  fix possible memory leaks and crashes when opening of sqlite database fails.  there are now exceptions thrown in some new places with messages for the user that might be improved.,,602,sqlite open bugs,if pull request #602 isnt yet reviewed and accepted please review and merge this smaller one firstfix possible memory leaks and crashes when opening of sqlite database failsthere are now exceptions thrown in some new places with messages for the user that might be improved,,sqlite resources,note that this pull request is failing linux builds for reasons unrelated to these changesuse c++ style smart pointers to hold resources allocated by sqlite3 and guarantee their cleanupthis simplifies some usageupdate at 8c8aed092923b868a12303c1bbbc7c178a350ca7: rebased onto pull request #603 which should be merged first and now waiting to pass make builds,jesus dude!  how about if i just step out of the way and let you rewrite the whole damned thing!  not everything has to following the damned c++ bible!should i even bother writing the aup importer since youre just going to rewrite it anyway?have fun || in c++ its best to invoke resource-freeing functions only within destructors and this is what is done here for the objects allocated by functions of the sqlite3 librarythe new header file does a little bit of work with templates but as often in c++ once you do the tricky parts at a library level the usages become much simplified  i think you will agree that the first of these commits results in brevity in many places  maybe you can merge just that one and wait to review the restthese rewrites are all really low-level details not major design changesfiguring these details out for myself is a way of doing code review and i uncovered some bugs as i did it which are now separately  in pull request 603 which should be merged before this one || does this still need merging? || i think this raii style is better c++ and eliminating all those finallys to clean up prepared statements is nicei made this separate from the real bug fixes that are already merged  it does not now contain any actual bug fixes though it might make it easier to avoid introducing resource leaks if any of the functions grow to become more complicatedi will withdraw the pull request for now but i will keep the branch around in my own repo ||,1,0,throw exceptions if lazy opening of projects database fails because the calls to db() as in sqlite3sampleblock may be in deeply nestedplaces that cant propagate the error codes and besides those functionshad been assuming non-null returns from db() which might have crashed beforebut now the assumption is correct when the throw didnt happennote that this exception may also happen during attempted autosave  uses ofautosave were reviewed and some changes made in the previous commit,,0,0,0,0,0,0,0,0,0
700,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,fix cve-2020-11867,this fixes cve-2020-11867 by setting the permissions for the user tmp folder to 700. closes #699,,699,fix cve-2020-11867,this fixes cve-2020-11867 by setting the permissions for the user tmp folder to 700 closes #699,soft bump on this is there an eta? || i am very concerned about the maintenance of an application used by millions of people in which there is no response from a maintainer to a one line fix for a security vulnerability in six months || ping can someone review this please? || thank you @crsib ||,cant find cve-2020-11867 fix,i apologise for using a bug report but the last email i can see on the devel list is from junethis was  between 233 and 240 but ive searched the git log these issues and the devel mailing list and i cant find anything relating to the commit where this was fixedthe cve relates to audacitys temp directory having 0777 permissions instead of 0700 which would prevent other users seeing the files,"closing as  || @plater the pr has not been merged yet and it seems to have been forgotten about why is this closed as fixed? || it is correct for this issue to be closed as it has been superseded by a pull request || thats not typical git etiquette its closed when its closed that pr has been sat there for 6 months with no indication that anyone is interested in merging it this matter is ongoing so calling the issue ""closed"" is untrue and before you complain about a bunch of newbs running amock telling you how to run your ship get used to it were here cos its become evident the last week that the audacity devs are asleep at the helm were here to fix that wake up merge the pr then you can pat yourself on the back and close the issue || i think that my reason for closing was  i made a work around patch that created the temp file in the users home directory i should have mentioned that in this patch || @plater im glad you fixed that for opensuse but that should not be packagers responsibility someone already submitted a pull request (#700) with a fix 6 months ago and @stevedaultons strange comment above is the first that it has even been acknowledged by an audacity maintainer || ",1,0,fix cve-2020-11867,,0,0,0,0,0,0,0,0,0
986,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,984 - errorreportingdialog does not support screen readers,resolves: #984  fix uses the approach proposed by david bailes  *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,984,984 - errorreportingdialog does not support screen readers,"resolves: #984fix uses the approach proposed by david bailes*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,errorreportingdialog does not support screen readers,"david bailes — 06/09/2021for many text boxes in audacity the accessible name is not the same as the text boxs label - the accessible name also includes the units which appear after the text box because of this if you add a text box using shuttlegui then theres a call for setaccessible() on the text box the advantage of this is that in dialog box code there doesnt need to be setaccessible() calls for text boxes the downside is that the accessible name always has to be set even when its the same as the label if a text box  is created using an non empty caption then thats used for the accessible name given that youre creating two text boxes with empty captions then you have to call shuttlegui & name( const translatablestring &name ) to set the accessible name for example:```sstyle(wxte_rich | wxte_readonly | wxte_multiline | wxte_dontwrap)minsize(wxsize(0152))            name(xo(""problem details""))addtextbox({} mreport->getreportpreview() 0)```",,1,0,984fix uses the approach proposed by david bailes,,0,0,0,0,0,0,0,0,0
1050,0,0,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,check for updates dialog will not interrupt recordings,resolves: #1048  check for updates dialog will (very probably) not unexpectedly interrupt recordings  possibly spoiling them if there is a screen reader.  (there is one slender timing possibility mentioned in code comments where it might yet happen. more thread synchronizations might fix that  but do not seem worth the extra effort now.)    i signed cla   i made sure the code compiles on my machine   i made sure there are no unnecessary changes in the code   i made sure the title of the pr reflects the core meaning of the issue you are solving   i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1048,check for updates dialog will not interrupt recordings,"resolves: #1048check for updates dialog will (very probably) not unexpectedly interrupt recordings possibly spoiling them if there is a screen reader(there is one slender timing possibility mentioned in code comments where it might yet happen more thread synchronizations might fix that but do not seem worth the extra effort now)  i signed cla  i made sure the code compiles on my machine  i made sure there are no unnecessary changes in the code  i made sure the title of the pr reflects the core meaning of the issue you are solving  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,updates dialog should not spoil recordings in case of screen readers,if the check-for-updates dialog pops unexpectedly while there is a recording in progress and a screen reader is in use then the recording may be spoiledfix that by delaying the dialog until after the recording ends,why are we even considering having an update check while audacity is recording - or even just active or openi thought we had discussed this recently and decided that update checks at timed intervals were unnecessary and the the update checks would only be done on audacity launch ||,1,0,check for updates dialog will not interrupt recordings,,0,0,0,0,0,0,0,0,0
1167,0,0,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,check for updates will not interrupt the timer record wait dialog,resolves: #1164  check for updates has been fixed so that its modal dialog will wait until any recording-in-progress finishes.  but that was not enough.  it should also not interrupt the timer recording wait dialog.  this commit fixes that too.  i have tested it with a modified build making more frequent checks.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1164,check for updates will not interrupt the timer record wait dialog,"resolves: #1164check for updates has been  so that its modal dialog will wait until any recording-in-progress finishes  but that was not enough  it should also not interrupt the timer recording wait dialog  this commit fixes that too  i have tested it with amodified build making more frequent checks-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,updater: postponing the update dialog doesnt work with timer recording,david bailes: ive just tested commit 70bb6a63c3 to check whether checking for updates may cause a timer recording to fail it can (i changed the updatecheckinginterval to 1 min and changed the dialog to open regardless of version numbers) i think this needs to be ,,1,0,check for updates will not interrupt the timer record wait dialog,,0,0,0,0,0,0,0,0,0
1192,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,opt-out of check for updates persists after preference resets,resolves: #1191    these can happen in only two ways  using the application: from the tools menu  or using the windows intaller program.  a review of all uses of wxfileconfig::deleteall() proves this.  the one special boolsetting object was moved from updatemanager to prefs.cpp to avoid a dependency cycle among source code files.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1191,opt-out of check for updates persists after preference resets,"resolves: #1191  these can happen in only two ways using the application: from the toolsmenu or using the windows intaller programa review of all uses of wxfileconfig::deleteall() proves thisthe one special boolsetting object was moved from updatemanager to prefscpp toavoid a dependency cycle among source code files<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",the checks are still running so im not merging right now ||,if user chooses not to check for updates remember that preference when resetting to defaults,,tests ok on w10 with rc2 303 ||,1,0,opt-out of check for updates persists after preference resets these can happen in only two ways using the application: from the toolsmenu or using the windows intaller programa review of all uses of wxfileconfig::deleteall() proves thisthe one special boolsetting object was moved from updatemanager to prefscpp toavoid a dependency cycle among source code files,,0,0,0,0,0,0,0,0,0
1204,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,fixes handling of invalid updatescheduledtime,resolves: #1200   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1200,fixes handling of invalid updatescheduledtime,"resolves: #1200 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,appimage fails to launch when updatescheduledtime invalid,"testing on xubuntu 2004 with audacity-linux-303-rc2-x86_64appimagewhen ""updatescheduledtime"" in audacitycfg is set to an invalid value the audacity splash screen opens then nothing - the main audacity window does not open though audacity is running theres no error message and no message in the terminalthe audacity process has to be killed**to reproduce**open audacitycfg in a plain text editorin the `[update]` section ensure that `defaultupdateschecking1`set the other line in the update section to:`updatescheduledtime`then attempt to launch the audacity-linux-303-rc2-x86_64appimage**expected behavior**audacity will launch and `updatescheduledtime` will be updated to the default value**actual behavior**the audacity splash screen appears then disappears then nothing the main window does not open and there is no error message**additional information (please complete the following information):** - os: xubuntu 2004 - version: audacity-linux-303-rc2-x86_64appimage**additional context**although end users are not expected to mess with the audacitycfg file there are many ways that a setting _could_ be invalid better if audacity is more robust and can survive an invalid setting by (automatically) dropping back to the default (as it does with other settings)",,1,0,fixes handling of invalid updatescheduledtime,,0,0,0,0,0,0,0,0,0
1207,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,track affordances,resolves: #1181 resolves: #1251   * adds affordances to a wave clips  note track item  labels  * contains requested fixes and improvements (link above)  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1181,track affordances,"resolves: #1181resolves: #1251 * adds affordances to a wave clips note track item labels * contains requested fixes and improvements (link above)-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",i have cherry-picked and merged parts of this pull requesti mentioned a few points that are still unresolved i dont approve the edit cursor change yet and i must still review all the label track changesplease rebase your branch onto recent master and force-push it again ||,affordances: appearance fixes theming support behaviour improvements,"this is a part of  not provide full functionality requested in the feature-  fix clip border color: clip frame should be outlined with one color-  play head should be rendered over a track panel (not separate tracks)-  grab hand should be displayed over affordance on hover-  fix ""empty"" corner above vertical ruler so it will look same as surrounding elements-  select clip when affordance is clicked-  highlight affordance when cursor is over it add stroke to clip frame when dragging-  reduce font size in text boxes on a labels track (windows only)-  move labels text box to top to reduce overlaping with horizontal bar",,1,0,splitting mselindexusing mtexteditindex for tracking active text box index and mnavigationindex used to track selection for keyboard navigation purposessee #1195,,0,0,0,0,0,0,0,0,0
1207,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,track affordances,resolves: #1181 resolves: #1251   * adds affordances to a wave clips  note track item  labels  * contains requested fixes and improvements (link above)  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1251,track affordances,"resolves: #1181resolves: #1251 * adds affordances to a wave clips note track item labels * contains requested fixes and improvements (link above)-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",i have cherry-picked and merged parts of this pull requesti mentioned a few points that are still unresolved i dont approve the edit cursor change yet and i must still review all the label track changesplease rebase your branch onto recent master and force-push it again ||,labels track: labels selection,implement changes proposed by #1195est: 10 hrs,done ||,1,0,splitting mselindexusing mtexteditindex for tracking active text box index and mnavigationindex used to track selection for keyboard navigation purposessee #1195,,0,0,0,0,0,0,0,0,0
1208,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,same custom over-aligned allocation routine on all platforms, in particular so that warnings on exit in the debug build on windows are suppressed.  maybe it s not important to suppress them.  or maybe they suggest all is not correct in the msvc implementation of this c++17 feature?  resolves: #1042  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1042,same custom over-aligned allocation routine on all platforms," in particular so that warnings on exit in the debug build on windows aresuppressedmaybe its not important to suppress them  or maybe they suggest all is notcorrect in the msvc implementation of this c++17 feature?resolves: #1042-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",@davidbailes please tell me whether this works  i think it will suppress the warning while not disabling all of the memory debugging on windows || > @davidbailes please tell me whether this works i think it will suppress the warning while not disabling all of the memory debugging on windowsit works  @davidbailes  please do the formality of approving this pull request before i merge it ||,(c++17) debug error on closing audacity on windows 10,**describe the bug**tested with commit: 77dab158c37 windows 10 64bit on closing audacity theres a debug error:the block at 0x000001ed23899b80 was not allocated by _aligned routines use free()call stack: 	ucrtbaseddll!00007ff8c7474385()	unknown 	ucrtbaseddll!00007ff8c7470f13()	unknown 	audacityexe!operator delete(void * block std::align_val_t __formal) line 33	c++ 	audacityexe!operator delete(void * block unsigned __int64 __formal std::align_val_t al) line 31	c++ 	audacityexe!audioio::`vector deleting destructor(unsigned int)	c++>	audacityexe!std::default_delete<audioiobase>::operator()(audioiobase * _ptr) line 3120	c++ 	audacityexe!std::unique_ptr<audioiobasestd::default_delete<audioiobase>>::reset(audioiobase * _ptr) line 3267	c++ 	audacityexe!audioio::deinit() line 946	c++ 	audacityexe!audacityapp::onexit() line 2241	c++ 	[external code]	 	audacityexe!winmain(hinstance__ * hinstance hinstance__ * hprevinstance char * __formal int ncmdshow) line 755	c++ 	[external code]	**to reproduce**see above**expected behavior**no error1 hr,"i cannot replicate this on w10 with audacity-win-303-alpha-20210618+77dab15-64bit || this relates only to the master build now diverged from the 303 release build and relates to the move to c++17 || @davidbailes in memoryx* delete the lines`#ifdef __apple__`and matching #endifsthen what happens in your build? || > > > this relates only to the master build now diverged from the 303 release build and relates to the move to c++17but audacity-win-303-alpha-20210618+77dab15-64bit is a master build - i have not been testing ever with 303 builds || > > this relates only to the master build now diverged from the 303 release build and relates to the move to c++17> > but audacity-win-303-alpha-20210618+77dab15-64bit is a master build - i have not been testing ever with 303 buildscorrectbut this may also be a matter only in debug development builds such as @davidbailes was using  still worth a fix in 304 and i put it in that project board || on wed 23 jun 2021 at 18:02 paul licameli ***@******>wrote:> @davidbailes < in memoryx* delete the> lines> #ifdef __apple__> and matching #endifs>> then what happens in your build?>i get the build error:error c2660 noninterferingbase::operator new: function does not take 4arguments audacity u:\audacity\src\audioiocpp 913david> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or unsubscribe> < > || > this relates only to the master build now diverged from the 303 release build and relates to the move to c++17and i note that the master build is already bumped to alpha 304note that this early bump has potential implications for the manual and the way it is managed || @davidbailes i think what you initially reported should just be considered information not an ""error"" as you said and i can simply close this issue  do you agree?if you dont then my suggested change didnt compile for you because of that annoying`#define new debug_new`in msvc debug builds which breaks some useful c++ idioms like class-specific operator new here and doesnt bring much benefit that i know of in catching real bugsaudacity doesnt have significant memory leak problems to debug since some crazy fanatic systematically removed all naked news and used smart pointers insteadbut then the simplest thing is just to turn off the debug memory checking removing these lines from audacityheadersh:```#define debug_new new(_normal_block __file__ __line__)#define new debug_new``` || on wed 30 jun 2021 at 15:24 paul licameli ***@******>wrote:> @davidbailes < i think what you initially> reported should just be considered information not a ""error"" as you said> and i can simply close this issue do you disagree?>i think it would be helpful for those who build and test the debug versionif it closed cleanly that is without errors people dont expect to getan error and wont know whether its a real problem or not so i dontthink this issue should be simply closeddavid> if you dont then my suggested change didnt compile for you because of> that annoying> #define new debug_new> in msvc debug builds which breaks some useful c++ idioms like> class-specific operator new here and doesnt bring much benefit that i> know of in catching real bugs>> audacity doesnt have significant memory leak problems to debug since> some crazy fanatic systematically removed all naked news and used smart> pointers instead>> but then the simplest thing is just to turn off the debug memory checking> removing these lines from audacityheadersh:>> #define debug_new new(_normal_block __file__ __line__)> #define new debug_new>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or unsubscribe> < > || i repeat:  it is merely a message  it is not an error  it should just be ignored  it is not a memory leakreally i wouldnt mind just disabling all the debug memory checking in msvc because i cant remember it really helping to identify bugs || well now on the other hand i wonder whether microsofts implementation of c++17 operator new for over-aligned types isnt correct if this message resultsa harmless change would be to use that per-class operator new on all platforms not just macbut the microsoft memory debugging macro new irritatingly doesnt mix will class-specific operator newso i would have to disable that debug memory checking at least wherever memoryxh is included || ",1,0,same custom over-aligned allocation routine on all platforms in particular so that warnings on exit in the debug build on windows aresuppressedmaybe its not important to suppress them  or maybe they suggest all is notcorrect in the msvc implementation of this c++17 feature?,,0,0,0,0,0,0,0,0,0
1219,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,add additional checks for macro output directory.,this bug still available in case: using old settings file or manual set it into settings file.  resolves: #1174   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1174,add additional checks for macro output directory,"this bug still available in case: using old settings file or manual set it into settings fileresolves: #1174 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",i tested this on w10 with audacity-win-304-alpha-20210704+0cef813-64bitthis is a branch build:  clear audacity settings folder2) launch 3023) directories preferences4) set the macro output directory to be c:\5) exit audacity6) launch 304 branch alpha with the fix7) tools macros8) choose the shipped mp3 conversion macro9) apply macro to: files10) choose any audio file for processing11) observe: audacity does not crash but displays the following error message when it reaches the export step in the macro( a black-box test perspective i think this can be pulled in master for 304 ||,audacity crashes when the output directory for macros is set to c:\,**describe the bug**audacity crashes when the output directory for macros is set to c:\ (and i suspect any unwritable location)**to reproduce**1 go to directories preferences2 set the default location for macro output to be c:\3 observe: audacity does not stop you doing this (bugzilla bug #2740)4 tools > macros5 choose the shipped mp3 conversion macro6 apply macro to: files7 choose any audio file for processing8 observe: audacity crashes when it reaches the export step in the macro**expected behavior**a) at step 2 audacity should block the use of c:\ and other unwritable locations for all default directoriesb) at step 8 a sensible and helpful error message should be shown to the userstep b) is required even if step a) ie bug #2740 is  - a folder location that was writable at the time the user visited directories preferences may later become unwritable**additional information (please complete the following information):**this crash happen with 302 303 and 304 alpha - it does not occur on 300 as that does not have the prefs setting for macro output  so technically this is a regression on 300i discovered this issue when i was testing around on bug #2740 as paul has recently allowed the pr for a user fix for this issue in addition to this crash that pr does not seem to fix the bug 2740 issue when i test on 304 master build**additional context**os: windows 10 homeaudacity versions:  302-304i have flagged this bug as p2 - it is marginal p1 as that is what is used for most crashes but only the very incautious and unwise user will set their default macro output directory to be c:\ hence p2 and non-blocking but still serioussee:   bug 2740 - directories in directories preferences can be set to unwritable locations,i just researched an realized that this was lready reported as bug 2738 bug 2738 - audacity crashes with macros on files when the macro-output folder is in an unwriteable location || see also bug 2739 bug 2739 - if temporary files directory is set to be unwritable then audacity has a catalog of cryptic unhelpful errors and see also bug 2740 bug 2740 - directories in directories preferences can be set to unwritable locations || **reproduce**os: windows 10 homeaudacity: master branch 4770b1f0a4c91c71eea8e54a180a7ba99b77834d**set the default location for macro output to be `c:\`**at this step audacity blocked the use of `c:\` and other unwritable locations with the following message:![0 - unable_set_unwritable_dir]( location that changing the status from writable to unwritable**set folder to macro output writable directory with name `ttttttttt`![1 - set_macro_directory]( lock this directory for writing![2 - lock_directory]( mp3 conversion macro and apply to `files`![3 - run_macro_tool]( that audacity show message with a problem to the writing result and then successfully continue working![4 - message_after_macro]( || @petersampsonaudacity could you please provide me with a print screen with audacity crash when used unwritable directory for macro output? because i tried reproducing these steps and still cant get the same result (crash) i described my steps above but in some cases i get exception from `wxwidgets` may be it the same || @gera-gas ( || when i set the macros output folder to be a sub-folder of c: (i used c:\program files) - i get no crash but i do get this error message:![image]( || audacity 304 alpha now blocks the use of c:\ (and other unwritable system files) with the pulling in to audacity:master for 340of this pull request: directory permission check for open import macro output and temporary directory in directory preference #1185this enabled me to mark p2 bug 2740 as resolved  also importantly it means that this issue can no longer occur - so i shall close thisplease note that this is fixed for 304 - but not for 303 (which is still in rc stage right now) || i tested this on w10 with audacity-win-304-alpha-20210704+0cef813-64bitthis is a branch build:  directory setting has to be made with 302 as in latest 304 the use of c:\ is now blocked by audacity_1) clear audacity settings folder2) launch 3023) directories preferences4) set the macro output directory to be c:\5) exit audacity6) launch 304 branch alpha with the fix7) tools macros8) choose the shipped mp3 conversion macro9) apply macro to: files10) choose any audio file for processing11) observe: audacity does not crash but displays the following error message when it reaches the export step in the macro![image]( ||,1,0,add additional checks for macro output directorythis bug still available in case: using old settings file or manual set it into settings file,,0,0,0,0,0,0,0,0,0
1265,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,fix recording starting position (refs #1183),resolves: #1183  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1183,fix recording starting position (refs #1183),"resolves: #1183<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,fix wave clip record starting position,"currently when recording is started with selection cursor placed at some distance from track ending (same as the end postion of the latest clip in the track) this gap is filled with ""silence"" which should be removed new clip should start from selection starting position or from the end of the track (if selection starts prior to track ending)",please explain why this bug fix is necessarily a part of the affordances project  i think it is an independent issue || > please explain why this bug fix is necessarily a part of the affordances project i think it is an independent issueagreed but as i understood this bug should  as a part of the affordances project || @anitabats i can review this change at #1265 but it is unclear to me how this specification entered the schedule  who specified this change and why?this looks like a design change not a bug fix  did one of our designers request it?  but their names are not in this issue  did you specify it or @vsverchinsky ?  did designers agree the change is correct?and again it is in no way a necessary part of the clip affordances project but an independent improvement if it is agreed that it should be done ||,1,0,fix recording starting position (refs #1183),,0,0,0,0,0,0,0,0,0
1271,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,move privacy policy url to a different tab to improve it s visibility,resolves: #1268   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1268,move privacy policy url to a different tab to improve its visibility,"resolves: #1268 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,about audacity dialog change: add legal tab add pp there,as a product owner of audacity i need to provide the users more visibility on the privacy policy therefore it should be accessible in about audacity dialog1 add legal tab in the about audacity dialog2 legal tab should contain a link to the privacy policy3 it should contain info about the licensing (current information must not be removed)details on the requirements and design will be added as soon as they are approved,,1,0,move privacy policy url to a different tab to improve its visibility,,0,0,0,0,0,0,0,0,0
1297,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,fix bug 1243,resolves: #1243   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?   windows with error information for temporary directory cases: (https://user-images.ent.com/1660969/125621355-94d897cc-5eb4-4265-a8b5-e691b0ec89e2.png),,1243,fix bug 1243,"resolves: #1243 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""windows with error information for temporary directory cases:(https://user-imagesentcom/1660969/125621355-94d897cc-5eb4-4265-a8b5-e691b0ec89e2png)",we usually aim to have a help button on error dialogs to take you to the manual for more information || > > > we usually aim to have a help button on error dialogs to take you to the manual for more informationwe have a link in this dialog to audacity manual that followed to directory preferences description or you means button used usual for this purpose (link to manual)? not a link seems i understand what you means i will add a changes || an example( || i like the (new) use of the html window in an error dialog as it gives easy option of hyperlink cut-and-paste-ability and wrapping that does not depend on the translatorsnotice that peters example also has an informative title for the dialog || > i like the (new) use of the html window in an error dialog as it gives easy option of hyperlinkunfortunately the hyperlink wont be accessible to keyboard users || the error dialog is changed to:  ||,audacity will fail to start if temp location is unwritable,"**to reproduce**steps to reproduce the behavior:1 set the ""temporary files location"" to an unwritable location2 realauch audacity3 audacity will fail with cant_open_new_empty_project error**expected behavior**audacity opens without issues","i caught this moment but in this case audacity continues to work fine just showed an error window  showexceptiondialog`1 what i can do in this case11 just checking temp directory on unwritable then showing a message with it information that can be more useful for user (after reading this message user can fast solve this problem by change directory in preferences)12 or leave as now2 what i should be doing yet (necessarily)seems this problem also actual for all directories in preferences that can be used for data output i need to check all directories for this case@crsib @petersampsonaudacity could you add your opinion for p1 || @gera-gas  i think you also need to trap the use case in directories preferences where the user types ""c:\"" just the same as you trap the use case where the user users the browse button to make c: a default directoryis that what you mean by 11 ? || we still need a fallback i can set the directory in the config manually or the directory may become unwritable later on || > we still need a fallback i can set the directory in the config manually or the directory may become unwritable later onyes indeed i agree - a better example is that it may have been set in an earlier version of audacity (thats how i was testing the fallback earlier)but i hope you agree we need to trap both use cases at point-of-use in directories prefs? || i surely do there is also a bug in ffmpeg location dialog which ignores keyboard input completely  || > there is also a bug in ffmpeg location dialog which ignores keyboard input completelyooh - is that already logged or do you need to log it ? || i even do have a fix for it xd || you are good @crsib   🥇  || how about something like this?( || > how about something like this? testing on w10 with audacity_windows_64bit_1037187455_50f8e10yes i get the error new error message when i try to launch with the link to directories prefsbut if i ignore that and just dismiss it with the ""ok"" button then audacity appears to launch ok - but if i try to record import or generate i get the following warning:![image]( phoned home with the ok button on the messagethis message will be totally opaque to most users and offers them no guidance on what to do to redress the situationsteps to reproduce1) in 303 set temp directory to be c:\2) exit 3023) launch 3334) observe the new error message telling you that the temp directory is invalid5) ignore the advice to go to directories prefs6) press ok7) observe audacity launches8) press record9) observe the warning as shown above || and because the reset of temp directory only takes t effect after relaunch if in the new message you accept the advice and click the link to go to directories prefs and reset it to a writeable locationthen audacity remains open and you then get the phone-home error messages if you try to use audacitythis enh is bugzilla has some bearing on this 2548 - enh: changed temporary directory location should be implemented immediately - not after restart || cannot reproduce  || ",1,0,add fix for case when user set directory by keyboard manually,,0,0,0,0,0,0,0,0,0
1300,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,sequence of audioio and networkmanager shutdowns fixes crash at exit,resolves: #1298  stack trace showed main thread was shutting down network manager  which was waiting to join a response thread  which was executing the lambda in updatemanager  which was using the global audioio object -- which was destroyed before that  at least on the main thread.  this is a simple fix: destroy audioio after that  not before.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1298,sequence of audioio and networkmanager shutdowns fixes crash at exit,"resolves: #1298stack trace showed main thread was shutting down network manager which was waiting to join a response thread which was executing the lambda in updatemanager which was using the global audioio object -- which was destroyed before that at least on the main threadthis is a simple fix: destroy audioio after that not before-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,crash in callafterrecording,```msvcp140 +0x12fc8 mtx_do_lock mutexcpp:91audacity +0xd2371 std: :lock mutex:51audacity +0xd2371 std::lock_guard<t>::{ctor} mutex:438audacity +0xd2371 audioio::callafterrecording audioiocpp:1842lib-network-manager +0x0cfde std::_func_class<t>::operator() functional:968lib-network-manager +0x0cfde audacity:  :perform curlresponsecpp:300ntdll +0xc13fb rtlsleepconditionvariablesrw<unknown> 0x000037decf0 <unknown> lib-network-manager +0x0fbfe std::_func_class<t>::operator() functional:968lib-network-manager +0x0fbfe std::_packaged_state<t>::_call_immediate future:603lib-network-manager +0x0f3ff std::_func_class<t>::operator() functional:968lib-network-manager +0x0f3ff <lambda>::operator() threadpoolh:55lib-network-manager +0x0e0ad std::invoke type_traits:1585lib-network-manager +0x0e0ad std: :_invoke<t> thread:55ucrtbase +0x682dc crt_at_quick_exitkernel32 +0x1570c basethreadinitthunkntdll +0x5385c rtluserthreadstart```,is this reliably reproducible? ||,1,0,sequence of audioio and networkmanager shutdowns fixes crash at exit,,0,0,0,0,0,0,0,0,0
1306,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,fixes writability check for the macro output directory,the check for macro directory now only happens if directory is selected and exists   resolves: #1305 *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1305,fixes writability check for the macro output directory,"the check for macro directory now only happens if directory is selected and existsresolves: #1305*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,audacity fails to write preferences to audacitycfg,**describe the bug** audacity fails to write preferences to audacitycfg  pressing the ok button in ant preference pane will yield an error message telling you:>directory does not have write permissionsusing tools>reset configuration yields the same error messagethe audacitycfg file would appear to be writable:a) from examining it with windows explorerb) using an effect with changed parameters on some audioc) exiting 303 and running 302 where it works okthis is a regression on 302 and all earlier audacities**to reproduce**steps to reproduce the behavior:1 clear audacity settings folder2 launch 3033 edit > preferences4 ok5 observe: error message**expected behavior**changes to preferences to be effected properly**screenshots**( information (please complete the following information):** - os: windows 10 - version: latest 303 alpha:  audacity_windows_64bit_1034717078_cb70fed**additional context**this is a must-fix,probably caused by the most recent changes in the checking in directories prefs for invalid directory locationsit works fine on the 303 alpha i tested yesterday || testing on w10 with audacity_windows_64bit_1037187455_50f8e10 this appears to be  by the previous release-303 commit ||,1,0,1305 the check for macro directory now only happens if directory is selected and exists,,0,0,0,0,0,0,0,0,0
1313,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,fix dangling pointers to project from lyricswindow.cpp,resolves: #1312  the bug is difficult to reproduce  but this is a plausible fix for it  given what we know from a stack trace.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1312,fix dangling pointers to project from lyricswindowcpp,"resolves: #1312the bug is difficult to reproduce but this is a plausible fix for it given what we know from a stack trace-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,bouncing beach ball of death,steps to reproduce not known timing-dependent perhaps but a crash report was collected in which this was a bad pointer dereference involving the famous karaoke window:```void lyricswindow::setwindowtitle() {   wxstring name  mproject->getprojectname()```,,1,0,fix dangling pointers to project from lyricswindowcpp,,0,0,0,0,0,0,0,0,0
1314,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,fix  scriptables  commands  which broke at 02b6153, problem was the loss of an override of pluginmanager::getid() for a more specific pointer type.  resolves: #1294 *(short description of the changes and the motivation to make the changes)*  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1294,"fix ""scriptables"" commands which broke at 02b6153"," problem was the loss of an override of pluginmanager::getid() for a morespecific pointer typeresolves: #1294*(short description of the changes and the motivation to make the changes)*-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",@stevedaulton please review and approve if it fixes the bug  you may need a clean pluginregistrycfg to verify it || works for me ||,"""scriptables"" commands fail","**describe the bug**most or all of the commands in ""extra > scriptables i"" and ""extra > scriptables ii"" fail**to reproduce**steps to reproduce the behavior:1 select a command from either ""scriptables i"" or ""scriptables ii""2 observe nothing happens3 the ""scriptables"" commands that ive tested via mod-script-pipe also fail**expected behavior**the scriptables commands to work**additional information (please complete the following information):** - os: xubuntu 2004 - version: audacity 304-alpha-20210714**additional context**see also:  and https://githubcom/audacity/audacity/issues/1293","this bug also  breaks many nyquist scriptsexample:1 launch audacity2 add a track3 select part of the track4 run this nyquist command in the nyquist prompt using the debug button: `(aud-do-command ""chirp"")`5 observe a long and cryptic error message beginning with:``` loading ""/tmp/aud-do-debug-data-cachelsp""debug data cache refreshed loading ""/tmp/aud-do-debug-data-cachelsp""error: misplaced right parenfunction: #<subr-(null): #0x55989e3d8528>arguments:  #<file-stream: #0x55989e89ef30>  #\)``` || bug bisects to first bad commit:  || > bug bisects to first bad commit: [02b6153]( you for the bisection  so this is only a problem in 304 || yes seems ok in 303 rc2 || ",1,0,"fix ""scriptables"" commands which broke at 02b6153 problem was the loss of an override of pluginmanager::getid() for a morespecific pointer type",,0,0,0,0,0,0,0,0,0
1322,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,0,1,0,0,extract lib exceptions,1162  toolkit neutral library for audacity s exception handling system  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1162,extract lib exceptions,"1162toolkit neutral library for audacitys exception handling system-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-exceptions,depends on #1059 two hours,,1,0,new library lib-exceptions,,0,0,0,0,0,0,0,0,0
1323,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,install updates,resolves: #1199   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1199,install updates,"resolves: #1199 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",squash these commits into one  then address my recent suggestions for checking that you re-enable update checking on all possible failure pathsthat is all the change i will request ||,updates: download and launch the installer from github when user clicks install,estimation: 6-8 hrs,what about users from places from where guthub does not allow to access it eg crimea? || @anitabats @gera-gas @crsib   - surely yhsi si done for 303 - and can be closed ? || i think the code review for this is not complete yet right @paul-licameli ? || there was another round of review and i expected the remaining changes to be few but im still waiting the final pr ||,1,0,add preprocessor compilation cases for manual tests,,0,0,0,0,0,0,0,0,0
1328,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,extract lib preferences,resolves: #1060  a library of classes that manage global variable settings that persist between runs of the application  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1060,extract lib preferences,"resolves: #1060a library of classes that manage global variable settings that persist between runs of the application-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-preferences,depends on #1059 #1161two hours,,1,0,new library for preferences it mentions some wxwidgets types in its interface but these are in theacceptable utility subset of wxbase that we still consider gui toolkit-neutral,,0,0,0,0,0,0,0,0,0
1344,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,shift+drag of clips between tracks was never allowed up to 2.4.2, and in 3.0.0 started crashing instead.  just disallow it again  no functionality lost.  resolves: #1329  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1329,shift+drag of clips between tracks was never allowed up to 242," and in 300 started crashing instead  just disallow it again nofunctionality lostresolves: #1329-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,vertical shift-click&drag in the affordances drag bars causes audacity to crash,**describe the bug**1) using shift modified click&drag to vertically move multiple clips to a different track causes audacity to crash2) using unmodified vertical click&drag in the affordances drag bar successfully moves the single clip to a new track3) horizontal shift modified click & drag works fine moving all clips in a track in sync togetherusing the time-shift tool with shift modified vertical click&drag also produces the same crash**to reproduce**steps to reproduce the behavior:1) get some audio with two separate clips2) add a second empty track3) shift-click&drag (left or right)  in one of the affordances drag bars4) observe: both clips move left or right in sync _(this is expected and documented behavior)_5) shift-click&drag downwards to the second track in one of the affordances drag bars6) observe: audacity crashes**expected behavior**all the tracks in the track should be moved to the new track**screenshots**step 1( information (please complete the following information):** - os: w10 - version latest 304 alpha  -  audacity-win-304-alpha-20210720+95e7008-64bit - et phoned-home with the error dialog**additional context**i have not yet tested for regression,further testing shows that shift modified vertical click&drag of multiple clips in a track also crashes in 302 and the latest alpha for 303 - so this crash should really be  for 303 || confirmed on linux with audacity 302 and audacity 304-alpha-20210718shift + vertical drag of clips crashes  (even when shifting only one clip) || this is a must-fix for 303 as audacity should not crash like this || this behavior first appears in version 300in all previous versions it was impossible to vertically move all clips in a track with shift-modified use of the timeshift tool - it was just blocked with no crashthus this is a regression on 242 || the manual has never mentioned the possibility of moving all clips (or multiple clips) vertically> **shifting clips vertically**> when there are multiple audio tracks a selected audio clip may be dragged up or down to another audio track of the same type mono audio clips may only be dragged to mono tracks and stereo clips may only be dragged to stereo tracks to prevent unwanted left or right movement while dragging press and hold the ctrl key while dragging (on mac hold down the ⌘ key) but it does do so for horizontal movement> > > **time shifting clips to left or right**> > an individual clip always shifts when dragged though if the clip is partially selected dragging to left or right from outside the selection region moves the clip without moving the region itself> > > >     to shift a group of adjacent clips in one or more tracks to left or right >>   leaving other clips alone use selection tool to drag a> >  selection region over the clips you want to shift then switch to time shift tool and drag from any clip inside that region > >  dragging from white space between clips will do nothing> >     to shift all clips in one track to left or right hold shift then drag if you perform the shift-drag from inside a selection region> > all the clips will shift and the region will move with the clips > see this page in the manual:   to fix this bug either:a) prevent vertical moves of multiple clips (and block the crash) orb) enable vertical moves of multiple clipsoption a) is existing behavior in 242 and earlier - but option b) would be a good improvement for users - and quite expected as an extension of the horizontal behaviors with multiple clips || i also confirm the same erroneous behavior on macmacos 114 bug sur - latest release-303 build || > the manual has never mentioned the possibility of moving all clips (or multiple clips) verticallythough it can be  done using track selection and time selection to define the clips that are moved || testing on w10 with audacity-win-303 rc3this now appears to be fixedwe have reverted to the behavior as it was in 242 and earlier where shift-modified click and drag of clips with the timeshift tool will **_not_** move the multiple clips (and importantly no crash)  thus there is no regression || i have updated the manual to provide greater clarity:  ||,1,0,shift+drag of clips between tracks was never allowed up to 242 and in 300 started crashing instead  just disallow it again nofunctionality lost,,0,0,0,0,0,0,0,0,0
1345,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,extract lib math,resolves: #1159  depends on pr: #1328  extract a tool-kit neutral library for some mathematical and sample-processing utilities.  make only the library directly dependent on libsoxr  note that only the last five commits are proper to this pr.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1159,extract lib math,"resolves: #1159depends on pr: #1328extract a tool-kit neutral library for some mathematical and sample-processing utilities  make only the library directly dependent on libsoxrnote that only the last five commits are proper to this pr-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-math,depends on #1060 two hours,,1,0,resample into lib-math audacity doesnt use libsoxr directly,,0,0,0,0,0,0,0,0,0
1359,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,extract lib files,resolves: #1160  a library for general file handling utilities  and definitions of certain significant file paths  which does not depend on wxcore  though it does still depend heavily on wxbase.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1160,extract lib files,"resolves: #1160a library for general file handling utilities and definitions of certain significant file paths which does not depend on wxcore though it does still depend heavily on wxbase-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-files,depends on #1162 #1060three hours,,1,0,new library for files,,0,0,0,0,0,0,0,0,0
1377,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,0,0,1,1,stereo track affordance,resolves: #1376   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1376,stereo track affordance,"resolves: #1376 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""","your approach is founded on a memory of the origin of a channel as ""aligned"" or not rather than computing it as neededi would prefer that you compute alignment as neededdefining the condition will take some work  you must sort clips of each channel becauase they are not necessarily in sorted order and they you must iterate corresponding clips comparing start and end times  (probably with a tolerance: let times differ by 1/(2*rate))this is extra work and extra calculation but i believe the calculation will be small in practice because clips will be fewthe advantage is greater confidence that there are not surprising corner cases where things will not work as expectedfor instance:  i just made a mono track duplicated it then made a stereo track from them  the affordance of the right channel did not disappear as expected in your branch  it would under this other approachthere are also other commands like ""swap stereo tracks""  this did not produce the expected result  it would if aligned-ness is computed instead of stored || > your approach is founded on a memory of the origin of a channel as ""aligned"" or not rather than computing it as needed> > i would prefer that you compute alignment as needed> > defining the condition will take some work you must sort clips of each channel becauase they are not necessarily in sorted order and they you must iterate corresponding clips comparing start and end times (probably with a tolerance: let times differ by 1/(2*rate))> > this is extra work and extra calculation but i believe the calculation will be small in practice because clips will be few> > the advantage is greater confidence that there are not surprising corner cases where things will not work as expected> > for instance: i just made a mono track duplicated it then made a stereo track from them the affordance of the right channel did not disappear as expected in your branch it would under this other approach> > there are also other commands like ""swap stereo tracks"" this did not produce the expected result it would if aligned-ness is computed instead of storedi dont agree with that ive considered that possibility but the problem is that matching clips isnt enough the result should be cached anyway moreover the first case isnt valid this behaviour was requested the second case should be  also i see a problem with definition of matching clips: it will probably  change in the nearest feature || > i dont agree with that ive considered that possibility but the problem is that matching clips isnt enough the result should be cached anyway moreover the first case isnt valid this behaviour was requested the second case should be fixed also i see a problem with definition of matching clips: it will probably change in the nearest featureif ""matching clips is not enough"" what is your more precise description of the criterion?  you are guessing it will ""probably"" change but that is speculation  even if it does change defining it in one place in a test seems to me to be the less fragile approach  more lines of code to implement the complicated test but fewer places in the code will need changes to guarantee the consistency of the cache with changes of the trackcaches are useful but problematic when there are many things that could happen to invalidate them || > if ""matching clips is not enough"" what is your more precise description of the criterion?it is described here  the check you propose is actually answers the question we dont need to answer (are clips aligned or not?) from the description of the task i understand that the sequence of track transformation determines whether the track should be considered ""aligned"" or not consider case when user have stereo track with misalligned clips then user makes them aligned by dragging should we consider track aligned now? if yes then affordance should disappear if no then user can split stereo track and merge it back to get completely another appearance (this was my question for designers) and as i understand the currently implemented behaviour is exactly what was requested (except second scenario youve provided) || > > if ""matching clips is not enough"" what is your more precise description of the criterion?> > it is described here #1348 the check you propose is actually answers the question we dont need to answer (are clips aligned or not?) from the description of the task i understand that the sequence of track transformation determines whether the track should be considered ""aligned"" or not consider case when user have stereo track with misalligned clips then user makes them aligned by dragging should we consider track aligned now? if yes then affordance should disappear if no then user can split stereo track and merge it back to get completely another appearance (this was my question for designers) and as i understand the currently implemented behaviour is exactly what was requested (except second scenario youve provided)you are right that you tried to implement literally what is now in the text box in the first picture at that issuereally i think that specification should be disputed and corrected  so lets raise this at the next design reviewi believe that if mono tracks have aligned clips according to the numerical criteria then they should merge into a stereo track without the second affordance area || the branch needs a rebase and force-push and conflict resolution || ",stereo tracks & affordances: internals and track drawings,as proposed by  implement following: remove drawing of the affordance on the right channel of the wave track if that track was not created by merging two mono tracks,,1,0,hiding the affordance on the right channel of the wavetrack,,0,0,0,0,0,0,0,0,0
1416,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,experimental qa journalling basics,resolves: #1403  beginnings of built-in tools for easy creation of automated functional regression tests  in alpha builds only.  certain events can be recorded to journal.txt in the folder with audacity.cfg  if this has been enabled in the tools menu  and then played back  if that file is specified with the -j command line option.  so far  only menu items that require no dialogs (or their shortcut keystroke equivalents  or certain toolbar buttons that invoke those commands) can be played back.  some simple sessions -- such as just exiting the program -- can replay.  audacity returns a non-zero status to the shell if journal playback fails  because the program s state is out-of-sync with what the journal file expects.  no examples yet of how to force that failure.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1403,experimental qa journalling basics,"resolves: #1403beginnings of built-in tools for easy creation of automated functional regression tests in alpha builds onlycertain events can be recorded to journaltxt in the folder with audacitycfg if this has been enabled in the tools menu and then played back if that file is specified with the -j command line optionso far only menu items that require no dialogs (or their shortcut keystroke equivalents or certain toolbar buttons that invoke those commands) can be played back  some simple sessions -- such as just exiting the program -- can replayaudacity returns a non-zero status to the shell if journal playback fails because the programs state is out-of-sync with what the journal file expects  no examples yet of how to force that failure<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""","thanks for the approvalyou noticed then how the journal ""language"" is defined?those details may be up for change but its enough for the minimal version || ",event recording & playback basics,-  alpha-only checkbox menu item to turn recording on but restart of program needed-  command-line option for audacity to replay a journal file-  all menu commands (or keystrokes) requiring no dialogs can record and play back the simplest journal file just exiting the program works,,1,0,"commandmanager interacts with journal simple journals can play such as one whose only line is ""cmexit"" which can also be recordedbut no commands that pop up modal dialogs or mouse interactions can yet playback",,0,0,0,0,0,0,0,0,0
1429,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,extract lib registries,resolves: #1163  library of useful utilities for decoupling of sub-systems and making them open-ended -- the big o of solid.  beware!   here be dragons.  much use of c++ templates.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1163,extract lib registries,"resolves: #1163library of useful utilities for decoupling of sub-systems and making them open-ended -- the big o of solidbeware!   here be dragons  much use of c++ templates-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-registries,-  #1162-  #1060-  #1163,,1,0,macros to simplify usage of class template attachedvirtualfunction  and allow correct linkage when overrides are defined in dynamically loadedmodules,,0,0,0,0,0,0,0,0,0
1437,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,fix update on uihandle change within cell,resolves: #1363   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1363,fix update on uihandle change within cell,"resolves: #1363 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",excellent detective work!my only small objection is that i would make the new move constructors non-inline myself  not important enough to block this ||,label affordances:  highlighting of bar does not always change with the cursor change,,the related pr solves this issue partly it does not calculate the height of a clip bar so label bars do not change if a label track locates below tracks with clip barsit is going to be solved soon in another pr ||,1,0,fixing label track update on mouse movement,,0,0,0,0,0,0,0,0,0
1441,0,0,1,0,1,0,1,0,0,1,0,1,0,1,1,1,0,0,1,1,0,0,0,fix event types used in prefslistener singalling, which broke at a2f109d  resolves: #1421  resolves: #1369  events were failing to be processed because event types were set incorrectly.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1421,fix event types used in prefslistener singalling," which broke at a2f109dresolves: #1421 resolves: #1369events were failing to be processed because event types were set incorrectly-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",#1269 is  for good ||,show track name as overlay,"**describe the bug**""show track name  as overlay"" does not work in audacity-linux-304-alpha-20210803+f90698c-x86_64appimage without a restart**to reproduce**steps to reproduce the behavior:1 open a project with at least one named audio track2 enable ""show track name  as overlay"" in preferences3 observe that the track name is not shown on the audio track(s)4 restart audacity5 observe that the track name is now shown as an overlay6 disable ""show track name  as overlay"" in preferences7 observe that the track names are still displayed as overlays**expected behavior**when ""show track name  as overlay"" is enabled in preferences id expect the track name to show as an overlay on the track immediately without requiring a restart**screenshots**this is what ""should"" happen:![audio_track_with_track_name_superimposed_translucent]( information (please complete the following information):** - os: xubuntu 2004 - version: audacity-linux-304-alpha-20210803+f90698c-x86_64appimage**additional context**https://manualaudacityteamorg/man/tracks_preferenceshtml","confirmed on w10 with 304/310 alpha audacity-win-304-alpha-20210803+f90698c-64bitplus i can get situations where the track name dies appear - but then i cant turn it offthis is a regression on 303 || observed that the ""name as overlay"" does work after restarting audacity (a restart should not be necessary)original bug report updated || it seems that it a broader issue affecting many other preference settings for example changing ""display samples"" from ""stem plot"" to ""connect dots"" does not take effect until audacity is restarted || tested on w10 with latest 310/304 alpha:   audacity-win-304-alpha-20210809+cf09f0a-64biti confirm that this now works correctly again on windows || ",1,0,fix event types used in prefslistener singalling which broke at a2f109d,,0,0,0,0,0,0,0,0,0
1441,0,0,1,0,1,0,1,0,0,1,0,1,0,1,1,1,0,0,1,1,0,0,0,fix event types used in prefslistener singalling, which broke at a2f109d  resolves: #1421  resolves: #1369  events were failing to be processed because event types were set incorrectly.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1369,fix event types used in prefslistener singalling," which broke at a2f109dresolves: #1421 resolves: #1369events were failing to be processed because event types were set incorrectly-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",#1269 is  for good ||,gui theme changing works poor,**describe the bug**gui elements do not change their appearance correctly**to reproduce**steps to reproduce the behavior:1 launch audacity2 expand audacitys window2 go to preferences - interface - change theme appearance from light to dark then click ok4 see the bug - many gui elements still displaying with previous theme look5 change audacity windows size and all elements have the proper colour scheme**expected behavior**the dark gui looks at least like this:  window000]( information (please complete the following information):** - os: windows 10 x64] - version: audacity 304-alpha-20210726,this also affects light theme when you go back to it from dark theme( it looks like a general theming regression ,1,0,fix event types used in prefslistener singalling which broke at a2f109d,,0,0,0,0,0,0,0,0,0
1475,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,stereo wave track channel resizing,resolves: #1375   resizing area added to the wavetrackview and wavetrackaffordancecontrol  making possible to have an enlarged resizing area with 1px distance between channels.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1375,stereo wave track channel resizing,"resolves: #1375 resizing area added to the wavetrackview and wavetrackaffordancecontrol making possible to have an enlarged resizing area with 1px distance between channels<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,stereo tracks & affordances: channel resizer changes,implement resizer behaviour between channels in stereo tracks as described in    * resizer should be shrinked to the height of 1 px * resize handle should appear at area between channels with threshold,,1,0,own resizing area added to stereo wave tracks view and affordance view,,0,0,0,0,0,0,0,0,0
1478,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,1,1,1,1,1,extract lib xml,resolves: #1158  extract a library for serialization and deserialization of objects in xml form  and a registry for serializable objects attached directly to the project.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1158,extract lib xml,"resolves: #1158extract a library for serialization and deserialization of objects in xml form and a registry for serializable objectsattached directly to the project-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-xml,-  #1160 -  remaining,,1,0,new library for xml audacity doesnt use expat directly this allows projectfileio to have fewer dependencies,,0,0,0,0,0,0,0,0,0
1482,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,experimental dialog journalling,resolves: #1404  the journalling system is now enhanced enough that it can replay some interactions with modal dialogs  including pushbuttons  choice controls  text boxes  and sliders.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1404,experimental dialog journalling,"resolves: #1404the journalling system is now enhanced enough that it can replay some interactions with modal dialogs including pushbuttons choice controls text boxes and sliders<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",const-correctness is the wrong word -- im not cheating with c style casts or const_castunnecessarily non-const arguments is what you mean for some predicates  fair point ||,recording and playback of dialog controls,-  identify a window in the tree textually cross-session-  serialize and deserialize wxcommandevents in journals using the previous-  global event filter serializes events during recording-  idle time journal file interpreter deserializes and dispatches events-  demonstrate a journal file that replays interaction with a dialog,,1,0,invoke serializers and deserializers of journal events,,0,0,0,0,0,0,0,0,0
1495,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,rewrite dither,resolves: #1496  rewrite dither.cpp more clearly with c++ functions  not macros.  just a preliminary to a preliminary to some audioio cleanup  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1496,rewrite dither,"resolves: #1496rewrite dithercpp more clearly with c++ functions not macrosjust a preliminary to a preliminary to some audioio cleanup<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",could this have a negative impact on performance? dither is one place that speed is important currently there is virtually no difference in time taken to export a long track with dither or without  dither (tested on linux) || > could this have a negative impact on performance? dither is one place that speed is important currently there is virtually no difference in time taken to export a long track with dither or without dither (tested on linux)i invite you to experimentall relevant functions are declared inline and compilers can be pretty smart || > > could this have a negative impact on performance? dither is one place that speed is important currently there is virtually no difference in time taken to export a long track with dither or without dither (tested on linux)> > i invite you to experiment> > all relevant functions are declared inline and compilers can be pretty smarti rewrote all of my branch with only static inline functions and no pointer-to-member-functions ||,cleanup dither,use modern c++ templates not macros to make dithercpp simpler and clearer,,1,0,rewrite dither_loop as a function,,0,0,0,0,0,0,0,0,0
1502,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,fix 1501,1501  resolves #1476  resolves #1477   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1501,fix 1501,"1501 resolves #1476 resolves #1477 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,revert fixes for bugzilla 208 and #1686,*   fixes introduce p1 bug #1476  and crash #1477it was decided to revert them until we come with a better solution the bug is filled as #1500 now #1476 #1477 will be  as well,actually rather than reversion what happens if the calls to envelope::insert() are instead made to envelope::insertorreplace()?  i think this will preserve the bug fix and also not corrupt the envelope because points will remain properly sorted || see bugzilla:   208 - some effects (including equalization effects) delete envelope control points or do not move them when timeline changes  || i think the automation didnt catch this one but #1502 already got merged closing this issue ||,1,0,"revert ""bug 1686 - equalization effects ignore and remove any amplitude envelope""this reverts commit 58adb94747a824617adb2ff6636cef91e959037f",,0,0,0,0,0,0,0,0,0
1502,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,fix 1501,1501  resolves #1476  resolves #1477   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1476,fix 1501,"1501 resolves #1476 resolves #1477 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,envelope points are multiplied when using filter curve eq or graphic eq,**describe the bug**using filter curve eq will duplicate envelope points if they were present**to reproduce**steps to reproduce the behavior:1 get some audio2 use envelope tool generate some points3 apply filter curve eq to the selection that is smaller than the clip4 observe**expected behavior**filter curve eq should not change the envelope points**screenshots**( https://forumaudacityteamorg/viewtopicphp?p432231#p432231,i do not see this on w10 with 303 or 3/1/0/304 alpha audacity-win-304-alpha-20210813+4058470-64bit || ive clarified str a bit after checking - it works only if you select the part of the clipaudacity 303 win64first time: application different selection || the potentially problematic code dates back to aug 2020:  || ok with revised strbefore eq( eq![image]( disjointed envelope does not look right to me || oh you should check the result of third application then lol![image]( || i get similar results when i use graphic eq as well || i dont really know how many effects are affected || i can get it to crash by applying the filter curve eq several times (using ctrl+r) - it first goes to a flat line and then the next application causes the crashet has just phoned-home with the error report || > > > i dont really know how many effects are affectedchange pitch change tempo and change speed also seem to be affectedand paulstretchand notch filter and tremolobut many other effects are not affected eg amplify fade in wahwah and others || oh ive managed to crash it too: #1477 and ets home says that it is a number 2 crash! || bug narrowed down to track clear-and-paste usage ||,1,0,"revert ""bug 1686 - equalization effects ignore and remove any amplitude envelope""this reverts commit 58adb94747a824617adb2ff6636cef91e959037f",,0,0,0,0,0,0,0,0,0
1502,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,fix 1501,1501  resolves #1476  resolves #1477   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1477,fix 1501,"1501 resolves #1476 resolves #1477 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,filter curve eq will crash if there is an envelope point outside of the selection,**describe the bug**filter curve eq will crash if there is an envelope point outside of the selection**to reproduce**steps to reproduce the behavior:1 get some audio2 use envelope tool generate some points3 select audio with an envelope point outside of the selection3 apply filter curve eq4 observe**expected behavior**a clear and concise description of what you expected to happen**screenshots**if applicable add screenshots to help explain your problem**additional information (please complete the following information):** - os: [eg mac high sierra ubuntu 1804 windows 10] - version [eg audacity 251] - (if relevant) sound device [eg windows wasapi usb sound card]**additional context**add any other context about the problem here,i do not see this crash on w10 with 330/304 alpha  audacity-win-304-alpha-20210813+4058470-64bitbut the before and after does look odd (probably not correct)before eq( eq![image]( particular the discontinuous envelope does not look right to me ||,1,0,"revert ""bug 1686 - equalization effects ignore and remove any amplitude envelope""this reverts commit 58adb94747a824617adb2ff6636cef91e959037f",,0,0,0,0,0,0,0,0,0
1504,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,context menus,resolves: #998 resolves: #1518  working context menus for background area and audio clips.  notes about some details where the issue description differs from this implementation or is underspecified:  * all important words are capitalized  consistent with other menu items (for instance  split clip ) * split clip will split only the picked clip (whether or not the track is selected)  at the pick point.  this is unlike the toolbar menu  which splits all selected tracks  at the selection. * paste will paste at the pick point  ignoring the selection  unlike the other ways of invoking paste * mute/unmute track has shift+u as its default keystroke.  see extra > tracks sub-menu (and see interface preferences to enable the extra menu). the popup menu command will do that to the track you pick in  ignoring which tracks are in selected state. *  export audio  rather than  export project  because that agrees with the toolbar menu and the convention that commands bringing up modal dialogs need ellipsis in the name. * the clip context menu appears only when clicking on the wave (or spectrogram) areas  not on the drag bar or in voids between clips. * the accelerator keys appear not necessarily as the defaults in the pictures  of course  but are consistent with whatever keystrokes have been chosen in preferences. * context menu items will be grayed out and disabled in the same cases that the corresponding toolbar menus would be.  for instance  adding new tracks is not permitted during recording or playback.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,998,context menus,"resolves: #998resolves: #1518working context menus for background area and audio clipsnotes about some details where the issue description differs from this implementation or is underspecified:* all important words are capitalized consistent with other menu items (for instance ""split clip"")* split clip will split only the picked clip (whether or not the track is selected) at the pick point  this is unlike the toolbar menu which splits all selected tracks at the selection* paste will paste at the pick point ignoring the selection unlike the other ways of invoking paste* mute/unmute track has shift+u as its default keystroke  see extra > tracks sub-menu (and see interface preferences to enable the extra menu) the popup menu command will do that to the track you pick in ignoring which tracks are in selected state* ""export audio"" rather than ""export project"" because that agrees with the toolbar menu and the convention that commands bringing up modal dialogs need ellipsis in the name* the clip context menu appears only when clicking on the wave (or spectrogram) areas not on the drag bar or in voids between clips* the accelerator keys appear not necessarily as the defaults in the pictures of course but are consistent with whatever keystrokes have been chosen in preferences* context menu items will be grayed out and disabled in the same cases that the corresponding toolbar menus would be  for instance adding new tracks is not permitted during recording or playback-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""","> * there is no existing ""mute/unmute track"" command in toolbar menus  alt-ctrl-u in default bindings mutes all tracks  i implemented a new command not in the toolbar menus for the popup that toggles mute status   and again for the (mono or stereo) track that is picked in ignoring track selection statetheres already a command to mute/unmute the focussed track in the track submenu of the extra menu || > notes about some details where the issue description differs from this implementation or is underspecified:> split clip will split only the picked clip (whether or not the track is selected) at the pick point this is unlike the toolbar menu which splits all selected tracks at the selectioni think that theres a problem here trying to implement this stuff before the selection model for 31 has been fully specified (tantacrul said he was working on this)a user would expect that a command in a context menu would have the same effect as the command with the same name (and associated shortcut) in the main menus but that isnt the case with your plan for using the split command in a clips context menu this command would act on different clips compared to the command in the main menus - they are in effect two different commands and so should have different names (and shortcuts)   and if you used the same approach for the cut and copy commands youd run into similar problems  || > > * there is no existing ""mute/unmute track"" command in toolbar menus  alt-ctrl-u in default bindings mutes all tracks  i implemented a new command not in the toolbar menus for the popup that toggles mute status   and again for the (mono or stereo) track that is picked in ignoring track selection state> > theres already a command to mute/unmute the focussed track in the track submenu of the extra menuso there is  thank you i will rewrite that part || > > notes about some details where the issue description differs from this implementation or is underspecified:> > > split clip will split only the picked clip (whether or not the track is selected) at the pick point this is unlike the toolbar menu which splits all selected tracks at the selection> > i think that theres a problem here trying to implement this stuff before the selection model for 31 has been fully specified (tantacrul said he was working on this)> a user would expect that a command in a context menu would have the same effect as the command with the same name (and associated shortcut) in the main menus but that isnt the case with your plan for using the split command in a clips context menu this command would act on different clips compared to the command in the main menus - they are in effect two different commands and so should have different names (and shortcuts) and if you used the same approach for the cut and copy commands youd run into similar problems> > notes about some details where the issue description differs from this implementation or is underspecified:> > > split clip will split only the picked clip (whether or not the track is selected) at the pick point this is unlike the toolbar menu which splits all selected tracks at the selection> > i think that theres a problem here trying to implement this stuff before the selection model for 31 has been fully specified (tantacrul said he was working on this)> a user would expect that a command in a context menu would have the same effect as the command with the same name (and associated shortcut) in the main menus but that isnt the case with your plan for using the split command in a clips context menu this command would act on different clips compared to the command in the main menus - they are in effect two different commands and so should have different names (and shortcuts) and if you used the same approach for the cut and copy commands youd run into similar problemsall very good points to raise as indeed i am raising themthe hope was that context menus would be an easy win for 31 relatively easy to implement  but with these doubts about whether the clip menu items will work -- maybe we should commit to only one of the menus || there is now one more commit to review || ",context menu rework,### user storyas a user i would like to access some frequent functions directly in context to save time### descriptioncurrently audio tracks dont have any context menus (right click menus) in audacity in most daws the most often used actions are also exposed through context menus (in addition to main menus and keyboard shortcuts) this saves users time and helps new users find commonly used actions quickly in contextwe would like to add a handful of often used actions as context menus when right clicking on an audio track or in the empty space we can add more actions over time but this would be a good starter setcontext menu over audio track:![1 0 audacity3 menu on audio clip@2x]( menu outside audio track:![1 0 audacity3 menu on empty@2x]( at #867 ### scope restrictions and сourner-cases- in release 31 new context menu is applicable only to mono and stereo tracks- context menu on blank space is different to the context menu on audio tracks (see the screenshots above please)- time tracks and label tracks are not in the scope of this task in release 31 time and label tracks are still the same,@jounih jouni could you please point what functions/actions are required in the new context menu? || ready for development || **description of task decomposition**all estimation times have two borders: this is not 100% precision time frame this is the approximate time window for solving task1 add context menu11 create event handler for right mouse click in `projectmanager` or `trackpanel` (this class already support mouseevent `projectwindow::onmouseevent` but seems necessary passed up right click event additionally)12 create context  menu  wxmenu` and bind (connect) handler for popup context menu callbackestimate: 2 - 3 hrs2 add context menu for `wavetrackview` and separate menu for `on track` and `non track` by control of selection zone using `tracklist::get( project )selected()` methodsestimate: 3 - 4 hrs3 call methods from context menu31 call exist methods from context menu callback like `onnewwavetrack(const commandcontext &context)` for create a mono track or `void onpaste(const commandcontext &context)` etc but it should doing carefully for support right `commandcontext` content32 final behavior tests (24) hrsestimate: 10 - 12 hrs**total estimate:** 15 - 19 hrs@crsib @paul-licameli could you review please ||,1,0,context menu split and paste fixes do not use the temporary point selection  but do use the temporary trackselection and for split do it to all channels,,0,0,0,0,0,0,0,0,0
1527,0,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,0,1,extract lib audio devices,resolves: #1144  extract a library of utilities for querying the available audio devices  finding their preferred sample rates  holding certain related global preferences variables  and also the interface class meter for transferring buffers of samples for purposes of display updates.  this does not contain the complete playback and recording audio engine.  when wavetrack is a library  it will need only this part to set default sample rates of wave tracks appropriately.  doing this separation now is also desirable as a prelude to other refactorings of the audio engine.  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1144,extract lib audio devices,"resolves: #1144extract a library of utilities for querying the available audio devices finding their preferred sample rates holding certain related global preferences variables and also the interface class meter for transferring buffers of samples for purposes of display updatesthis does not contain the complete playback and recording audio engine  when wavetrack is a library it will need only this part to set default sample rates of wave tracks appropriatelydoing this separation now is also desirable as a prelude to other refactorings of the audio engine-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-audio-devices,-  #1060 -  #1144,,1,0,new library for audio devices,,0,0,0,0,0,0,0,0,0
1533,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,1,0,1,clip names,resolves: #1182 #1324  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1182,clip names,"resolves: #1182 #1324<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""","please see:  nomenclature for default clip names could be improved as ""audio clip"" #1535 || all is well in the last commit || just rebase nothing  yet || the i18n changes are good i suggest better comments about the logic of the binary search but there is a possible crash bug in split-cut of tracks which was introduced in a later force-push  i think you write rightclip where you meant leftclipfix that and the comments test split-cut (edit > remove special > split cut) rebase and force-push and i will approve || ",clip names,"### user storyas a user of audacity i would like to have individual clip names and be able to rename clips### descriptioncurrently there is no concept of clip names in audacity only track names individual clip names are very useful when organising a project or separating between copies or takes the new affordance design has a space for clip names top rightthe design at  describes how to rename clips as a user**generated/default  clip names**when recording to a track the auto-generated clip name should be derived from the track name by default: trackname#xx where #xx is the number of the recording/take this can be changed to anything afterwardswhen importing an audio file to a track the clip name should be the file name this can be changed to anything afterwards### rules for auto-naming split/joined clips and copiessuggested rules for auto-clips naming:- new clip recording: ""{track_name} #{take_number} {channel}""- merge clips: ""{first_clip_name}""- split: ""{clip_name} {index}""- import: ""{track_name}""- copy: ""{original_clip_name} copy {number}""- copy/paste selection(part of a clip): ""{original_clip_name} samples [range]""  suggested scheme may produce results like: ""clip 1 1"" ""clip 1 2"" ""clip 2"" when splitting ""clip"" into ""clip 1"" and ""clip 2"" and then splitting ""clip 1"" into ""clip 1 1"" and ""clip 1 2"" similar would happen with copy-pasting a clip or its parts is it ok or is there some better scheme for such cases?   ### additions - basic rtl appearance","est: 16hrs || suggested rules for auto-clips naming:- new clip recording: ""{track_name} #{take_number} {channel}""- merge clips: ""{first_clip_name}""- split: ""{clip_name} {index}""- import: ""{track_name}""- copy: ""{original_clip_name} copy {number}""- copy/paste selection(part of a clip): ""{original_clip_name} samples [range]"" @jounih suggested scheme may produce results like: ""clip 1 1"" ""clip 1 2"" ""clip 2"" when splitting ""clip"" into ""clip 1"" and ""clip 2"" and then splitting ""clip 1"" into ""clip 1 1"" and ""clip 1 2"" similar would happen with copy-pasting a clip or its parts is it ok or there some better scheme for such cases?  || see also discussion #1499 >thought-piece: labels for merged clips #1499 || ",1,0,fix clips edge drawing,,0,0,0,0,0,0,0,0,0
1586,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,extract lib project,resolves: #1153   platform neutral library defining the audacityproject object and associated projectstatus (which just holds some strings)  there is also some fixing of some possible null pointer dereferences of the global active project -- which might be null on macos.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1153,extract lib project,"resolves: #1153 platform neutral library defining the audacityproject object and associated projectstatus (which just holds some strings)there is also some fixing of some possible null pointer dereferences of the global active project -- which might be null on macos<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-project,-  #1163 -  #1153,,1,0,new library for project,,0,0,0,0,0,0,0,0,0
1587,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,extract lib screen geometry,resolves: #1152   depends on pr #1586  extract a toolkit-neutral library for mapping of screen x coordinates to times  and y coordinates to amplitudes or frequencies  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1152,extract lib screen geometry,"resolves: #1152 depends on pr #1586extract a toolkit-neutral library for mapping of screen x coordinates to times and y coordinates to amplitudes or frequencies<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-screen-geometry,-  #1060-  #1153-  #1158-  #1152,,1,0,new library for screen geometry,,0,0,0,0,0,0,0,0,0
1588,0,0,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,extract lib project rate,resolves: #1143  depends on: #1587  a library holding the global preferences for project rate and sample format  and defining the per-project holding sample rate.  it depend on lib-audio-devices to decide the default rate.  when wave tracks are separated into a library  that will depend on this for construction of tracks  but will avoid dependency on all of audioio.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1143,extract lib project rate,"resolves: #1143 depends on: #1587a library holding the global preferences for project rate and sample format and defining the per-project holding sample rate  it depend on lib-audio-devices to decide the default ratewhen wave tracks are separated into a library that will depend on this for construction of tracks but will avoid dependency on all of audioio<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,extract lib-project-rate,-  #1159 -  #1153 -  #1158 -  #1144-  remaining,,1,0,new library for project rate,,0,0,0,0,0,0,0,0,0
1594,0,0,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,some audio io refactoring,resolves: #1580  some refactoring tasks in audioio  before disentangling the midi playback parts  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1580,some audio io refactoring,"resolves: #1580some refactoring tasks in audioio before disentangling the midi playback parts<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,preliminary audioio cleanup,,,1,0,further refactoring and renaming in audioio,,0,0,0,0,0,0,0,0,0
1602,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,audacitymessagebox button presses can now be replayed in journal, the dialog won t actually reappear but the same value will be returned to the program.  these message boxes are special native ones that don t use the wxwidgets event framework.  therefore the system for journalling of mouse button presses does not work with them.  treat them specially.  a generalized facility added to namespace journal in case this pattern needs to be repeated for other actions.  resolves: #1590 *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1590,audacitymessagebox button presses can now be replayed in journal," the dialog wont actually reappear but the same value will be returned tothe programthese message boxes are special native ones that dont use the wxwidgets eventframework  therefore the system for journalling of mouse button presses doesnot work with them  treat them speciallya generalized facility added to namespace journal in case this pattern needs tobe repeated for other actionsresolves: #1590*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",,"journal certain dialogs such as ""do you want to save changes""","record a simple journal in which you generate noise then exitthere is a dialog box ""save changes to <untitled>?   save project before closing?"" with yes no cancel choices that cause different behaviorthis is one example of native message boxes in the program which the journalling system cannot yet record and replay even though it can record and replay other modal dialogs",,1,0,audacitymessagebox button presses can now be replayed in journal the dialog wont actually reappear but the same value will be returned tothe programthese message boxes are special native ones that dont use the wxwidgets eventframework  therefore the system for journalling of mouse button presses doesnot work with them  treat them speciallya generalized facility added to namespace journal in case this pattern needs tobe repeated for other actions,,0,0,0,0,0,0,0,0,0
1614,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,wave clip rename,resolves: #1258   *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  i made sure the code compiles on my machine -  i made sure there are no unnecessary changes in the code -  i made sure the title of the pr reflects the core meaning of the issue you are solving -  i made sure the commit message(s) contain a description and answer the question  why do those changes fix that particular issue?  or  why are those changes really necessary as improvements?,,1258,wave clip rename,"resolves: #1258 *(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  i made sure the code compiles on my machine-  i made sure there are no unnecessary changes in the code-  i made sure the title of the pr reflects the core meaning of the issue you are solving-  i made sure the commit message(s) contain a description and answer the question ""why do those changes fix that particular issue?"" or ""why are those changes really necessary as improvements?""",this round of review is now complete!  the overall approach is sound but i flagged many details that need attention  none of these is difficult by itself ||,renaming clips,"### user storyas a developer i would like to know the ux details for implementing clip names and renaming### descriptioncurrently there is no concept of clip names in audacity only track names individual clip names are very useful when organising a project or separating between copies or takesthe new affordance ux has a space for a clip name top left below are the designs which allow the user to change the clip namefor keyboard navigation tabbing should select a clip and ""enter"" could edit the clip nameaudio/midi clips:![clip names@2x]( clips:described here  accessibilitykeyboard shortcuts for selecting and editing audio/midi clip names and label clip names should be identical tab to select/forward cycle selection enter to edit currently selectedfurthermore they should both respect the accessibility preference for editing the name in a dialog: tracks->track behaviours-> use dialog for the name of a new label (also this should be renamed to ""use dialog for the name of a new label or clip""",re: keyboard navigation:1 clip selection would be better than clip focus for renaming for example in file managers if the focused and selected items are different and you press f2 then the name of the selected item is opened for editing in addition using the selected item (or items?) allows for the possibility of easily being able to rename multiple clips if that is ever required if selection is used then using tab is no longer appropriate2 however (!) proper selection of clips if not yet implemented if this is still the case when renaming clips is implemented as an alternative to the selected clip you could use the clip which contains the cursor in the focused track there already are commands for selecting (time range) next/previous clip and commands for moving the cursor to next/previous clip boundary3 im assuming that a custom text box will be used for editing the clip name unfortunately on windows and using the wxwidgets accessibility framework this cant be made accessible for users of screen readers so there will need to be the option of using a standard text box in a dialog box such an option is already present in audacity for entering the name of a label when its created (preferences-> tracks behaviors -> use dialog for the name of a new label)4 enter toggles the selectedness of the track so another shortcut would have to be used for the rename clip command || can this design really be considered done @anitabats ?  davids points are unaddressed || will be reviewing davids feedback today @paul-licameli  || > 3 im assuming that a custom text box will be used for editing the clip name unfortunately on windows and using the wxwidgets accessibility framework this cant be made accessible for users of screen readers so there will need to be the option of using a standard text box in a dialog box such an option is already present in audacity for entering the name of a label when its created (preferences-> tracks behaviors -> use dialog for the name of a new label)providing the option of using a standard text box in a dialog box will also provide a workaround for ime input see  || > keyboard shortcuts for selecting and editing audio/midi clip names and label clip names should be identical tab to select/forward cycle selection enter to edit currently selectedthe existing use of tab and shift + tab in the label track is somewhat of an anomaly in audacity these shortcuts are hard coded - normally there are commands possibly with default shortcuts and the user is able to customize these shortcuts maybe part of the reason for this anomaly is that in all previous versions of audacity these shortcuts changed the focus and so were felt to be appropriatehowever for the actions of selecting the next/previous item in an audio or wave track i think it would be much better to have commands for these actions so that their shortcuts can be customized i dont think that tab and shift + tab would make good default shortcuts for these commands given that at some point there will probably be commands for selecting multiple items for the tab and shift + tab pair of shortcuts the shift modifier indicates a change of direction however when there are commands for selecting single items and for extending the selection the shift modifier is normally used to indicate extending the selection rather than the direction so for example in reaper (at least when using the osara extension)  the shortcuts for selecting the next/previous clip are  ctrl + right/left arrow and the shortcuts for extending the clip selection forwards or backwards are ctrl + shift + right/left arrowalso as ive previously pointed out the shortcut enter is currently used to toggle the selectedness of the focused track again there should of course be a command the rename the focused item rather than it being hardcodedi didnt notice that the design had been edited otherwise i would have commented earlier || @davidbailes makes sense to have customisable commands for selecting clips and editing names rather than hardcode these shortcuts @vsverchinsky can you do this please?im ok with ctrl/command + right/left arrow for selecting the next/previous clip if thats preferred makes sense to add shift to that when extending the selection to multiple clips @davidbailes which keyboard shortcut would you prefer for editing the name once the clip is selected? and which keyboard shortcut for selecting the first clip overall? || > @davidbailes makes sense to have customisable commands for selecting clips and editing names rather than hardcode these shortcuts @vsverchinsky can you do this please?@jouni there are existing commands to select the next/previous clip (alt + comma/period) as youve previously pointed out they dont change the state of the clip to selected but they could be changed to do soare you wanting to use different commands rather than modifying these existing commands?tantacrul mentioned somewhere (which i can no longer find) that he was working on a selection model for 31 do you know if this is finished? it would be really useful to know what the big picture is for selection when thinking about the commands are needed for 31 so that all the new features are accessible for keyboard users> > im ok with ctrl/command + right/left arrow for selecting the next/previous clip if thats preferred makes sense to add shift to that when extending the selection to multiple clipsctrl+right/left arrow wouldnt work at the moment because looking to the future when commands that extend the clip selection are added ctrl+shift+left/right arrow are already usedin addition if modified versions of the existing clip selection commands are used we could just use the existing shortcuts (and alt + shift + comma/period are available)as a slight aside i appreciate with all the changes in audacity at some stage shortcuts may well need to be reassigned so that theres a coherent set of shortcuts for all the new functionality> > @davidbailes which keyboard shortcut would you prefer for editing the name once the clip is selected?given that f2 is already taken ctrl + f2 may be as good as any> and which keyboard shortcut for selecting the first clip overall?could you expand on what you meant by that i dont understand what you mean? || see also issue #1644 -- the set clip command should now be extended to make clip name change available to macros ||,1,0,direct text editing via textedithelper,,0,0,0,0,0,0,0,0,0
1616,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,label track: shift+drag,resolves: #1444 #1544   *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1444,label track: shift+drag,"resolves: #1444 #1544 *(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",i just tested the label drag bars with @vsverchinskys latest branch build: audacity-win-310-alpha-20210903+e91e7b8-64bit i confirm that the icon now properly changes to the drag hand when cursor is over the labels drag-bar:a) open hand while hovering over b) closed drag-hand when clicking and draggingnote that this is good much better - but it now makes the old way of moving/resizing labels with the chevron and dot inconsistent as they still use the arrow icon || approved  please rebase and force-pushc ||,modify label bar behaviour,1 show grab hand cursor on hover over label bar(affordance)2 move whole label track if moving label with shift-drag![image (2)](https://user-imagesentcom/20165230/128695385-769784df-7be6-4489-8ece-9370c8b18cedpng),changing to using a grab hand cursor when hovering over the label bar would make it inconsistent with the cursor shown when hovering over the circle handle used for moving point labels and the the chevron handles used for moving the start and end points of labels using a grab hand cursor for all of these would not be usable as the hand is not precise enough for these existing tasks ||,1,0,shift + dragmoves all labels on the track,,0,0,0,0,0,0,0,0,0
1616,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,label track: shift+drag,resolves: #1444 #1544   *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1544,label track: shift+drag,"resolves: #1444 #1544 *(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",i just tested the label drag bars with @vsverchinskys latest branch build: audacity-win-310-alpha-20210903+e91e7b8-64bit i confirm that the icon now properly changes to the drag hand when cursor is over the labels drag-bar:a) open hand while hovering over b) closed drag-hand when clicking and draggingnote that this is good much better - but it now makes the old way of moving/resizing labels with the chevron and dot inconsistent as they still use the arrow icon || approved  please rebase and force-pushc ||,the cursor doesnt change appearance while its hovering a label handle or dragging the label (affordance),**describe the bug**the cursor doesnt change appearance while its hovering a label handle or dragging the label (affordance)**to reproduce**steps to reproduce the behaviour:1 add a label track2 add some selection labels3 hover or drag the label handle**expected behavior**![изображение]( information (please complete the following information):** - os: windows 10 - version audacity 304,there is a task for this already || please test after #1444 is done @penikov  ||  ||,1,0,shift + dragmoves all labels on the track,,0,0,0,0,0,0,0,0,0
1623,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,ffmpeg update,398 resolves #1034  resolves #1170  resolves #1201 resolves #1331  resolves #1433 resolves #1466  supporting multiple ffmpeg versions is tricky  yet important for audacity  as we could not distribute the correct ffmpeg version with the program itself. this leads to a problem  where updating ffmpeg can be problematic. this is especially true  as a new major version is soon to be released.  the main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration. these structures can change between major version bumps  while the api is mostly stable. this is unlike other c libraries  where structure fields are accessed using the library-provided functions.  this pr:  * allows generating a single header file for a specific ffmpeg version. surprisingly it had required a large subset of c preprocessors to be implemented. * provides wrappers around used ffmpeg structures. the wrappers are used as raii objects where applicable. the wrappers are implemented in  inl  files which are later included in c++ files after the correct ffmpeg header. i.e. currently each wrapper is compiled twice. wrappers rarely have ffmpeg version-dependent code.  * fixes few incompatibilities between ffmpeg versions. * sample format conversions from ffmpeg are templatazied  all formats are now supported. the reverse process was not modified  i have tried to keep changes in importffmpeg and exportffmpeg small and trivial. in the future  we may want to reimplement them as well.  currently  avformat-55 and avformat-58 are supported. i don t see much reason to support 56 and 57. when 59 will be released (and current dev branches are 59) it will be added to the list  this should be a trivial task.  builds were tested against:  * 2.2.2  4.3.1  and 4.4. surprisingly  4.4 support was different (and the most difficult!) from 4.3.1 while the major version stayed the same. ffmpeg 4.4 was downloaded from the  official page . * the system library on manjaro (4.2.2)  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,398,ffmpeg update,"398resolves #1034 resolves #1170 resolves #1201resolves #1331 resolves #1433resolves #1466supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library-provided functionsthis pr:* allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented* provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in `inl` files which are later included in c++ files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version-dependent code * fixes few incompatibilities between ffmpeg versions* sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat-55 and avformat-58 are supported i dont see much reason to support 56 and 57 when 59 will be released (and current dev branches are 59) it will be added to the list this should be a trivial taskbuilds were tested against:* 222 431 and 44 surprisingly 44 support was different (and the most difficult!) from 431 while the major version stayed the same ffmpeg 44 was downloaded from the ""official page""* the system library on manjaro (422)<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",one more push of commits and some in-line comments and questions and this completes my review!act on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on! || i missed the infinite loops with getnextcodec() and getnextoutputformat()!  i see how you corrected them  was it testing that discovered it? || i re-approve the latest force-push!only small suggestions :initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top -- which ought to be stated at least informally in the header files of the class as preconditionsand thats all! || 🥳 🎉 ⚡ 🔥 🚀 🍻  ||,request: update ffmpeg libraries,please be so kind to allow the use of newer ffmpeg libraries eg 42 the currently used version (222) has issues with e-ac3thank you very much in advance," seems to explain how to do it i dont have time to prioritize this myself right now but it sounds straightforward enough || yes as said in the audacity forum overwriting the ffmpeg lib-src/ffmpeg/{libavcodeclibavformatlibavutil}/ headers (i did it on bdcd907b5) worked for memy local builded ffmpeg : version n-97687-gd0705ecb2b built with gcc 9 (debian 930-11)![auda]( || i get your point but if it is so easy to update why dont developers make it available for the broad audience of users who dont wish to bother with compiling from source (thinking of windows users here)? also if you make a pull request of your changes would probably speed up this process || i cant believe they still havent updated it || why does this have no priority? ive been waiting a long time to be able to use the new ffmpeg and not the old garbage 22it is impossible to download version 22 of ffmpeg from the guide error 403 || > why does this have no priority? ive been waiting a long time to be able to use the new ffmpeg and not the old garbage 22> > it is impossible to download version 22 of ffmpeg from the guide error 403the sad thing is that theres already a pull request which updates it to 423 the only effort needed from the authors is to check and merge || :-( || i am not sure how much attention do the audacity developers put into the conversation here according to [this audacity forum post]( feature request should be sent on the forum join [this forum discussion]( your voice will be helpful! || they just dont care all they would have to do is push the merge button || ""all they would have to do is push the merge button""  lol  try running an open source project that way and then come back and say it in all seriousnesswe have updates to ffmpeg portaudio and wxwidgets planned  see #741  thats by leland who has commit rights  when we are ready it will go in || now that #741 has been merged i think this issue can be closed right?> ""all they would have to do is push the merge button"" lol try running an open source project that way and then come back and say it in all seriousnessto be fair no maintainers responded to #608 until close to 9 months after it was opened its totally reasonable to reject or delay pull requests because the maintainers have other priorities but its not cool to provide no explanation for why a pull request addressing an issue that many users have raised concerns about doesnt get merged for 9 months || before closing: another important thing would be to add the `-drc_scale 0` switch upon importing (e)ac3 files as ffmpeg applies drc on these automatically and this should be avoided || @l00tzomg - please explain moreis it already covered by this:  ?? || hmmm maybe i have missed something then it is already  :) || closing per:> now that #741 has been merged i think this issue can be closed right?and:> then it is already fixed :) || #741 was reverted so reopening || > is it already covered by this:  ??this was not applied and is not going to be applied see patch more modern try to do it  || ",1,0,remove ondemand and blockfile,,0,0,0,0,0,0,0,0,0
1623,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,ffmpeg update,398 resolves #1034  resolves #1170  resolves #1201 resolves #1331  resolves #1433 resolves #1466  supporting multiple ffmpeg versions is tricky  yet important for audacity  as we could not distribute the correct ffmpeg version with the program itself. this leads to a problem  where updating ffmpeg can be problematic. this is especially true  as a new major version is soon to be released.  the main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration. these structures can change between major version bumps  while the api is mostly stable. this is unlike other c libraries  where structure fields are accessed using the library-provided functions.  this pr:  * allows generating a single header file for a specific ffmpeg version. surprisingly it had required a large subset of c preprocessors to be implemented. * provides wrappers around used ffmpeg structures. the wrappers are used as raii objects where applicable. the wrappers are implemented in  inl  files which are later included in c++ files after the correct ffmpeg header. i.e. currently each wrapper is compiled twice. wrappers rarely have ffmpeg version-dependent code.  * fixes few incompatibilities between ffmpeg versions. * sample format conversions from ffmpeg are templatazied  all formats are now supported. the reverse process was not modified  i have tried to keep changes in importffmpeg and exportffmpeg small and trivial. in the future  we may want to reimplement them as well.  currently  avformat-55 and avformat-58 are supported. i don t see much reason to support 56 and 57. when 59 will be released (and current dev branches are 59) it will be added to the list  this should be a trivial task.  builds were tested against:  * 2.2.2  4.3.1  and 4.4. surprisingly  4.4 support was different (and the most difficult!) from 4.3.1 while the major version stayed the same. ffmpeg 4.4 was downloaded from the  official page . * the system library on manjaro (4.2.2)  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1034,ffmpeg update,"398resolves #1034 resolves #1170 resolves #1201resolves #1331 resolves #1433resolves #1466supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library-provided functionsthis pr:* allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented* provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in `inl` files which are later included in c++ files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version-dependent code * fixes few incompatibilities between ffmpeg versions* sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat-55 and avformat-58 are supported i dont see much reason to support 56 and 57 when 59 will be released (and current dev branches are 59) it will be added to the list this should be a trivial taskbuilds were tested against:* 222 431 and 44 surprisingly 44 support was different (and the most difficult!) from 431 while the major version stayed the same ffmpeg 44 was downloaded from the ""official page""* the system library on manjaro (422)<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",one more push of commits and some in-line comments and questions and this completes my review!act on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on! || i missed the infinite loops with getnextcodec() and getnextoutputformat()!  i see how you corrected them  was it testing that discovered it? || i re-approve the latest force-push!only small suggestions :initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top -- which ought to be stated at least informally in the header files of the class as preconditionsand thats all! || 🥳 🎉 ⚡ 🔥 🚀 🍻  ||,avformat-55dll (not more supported),helloavformat-55dll not updated and contains bugs it is necessary to support a new version of ffmpeg avformat-58dll,,1,0,remove ondemand and blockfile,,0,0,0,0,0,0,0,0,0
1623,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,ffmpeg update,398 resolves #1034  resolves #1170  resolves #1201 resolves #1331  resolves #1433 resolves #1466  supporting multiple ffmpeg versions is tricky  yet important for audacity  as we could not distribute the correct ffmpeg version with the program itself. this leads to a problem  where updating ffmpeg can be problematic. this is especially true  as a new major version is soon to be released.  the main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration. these structures can change between major version bumps  while the api is mostly stable. this is unlike other c libraries  where structure fields are accessed using the library-provided functions.  this pr:  * allows generating a single header file for a specific ffmpeg version. surprisingly it had required a large subset of c preprocessors to be implemented. * provides wrappers around used ffmpeg structures. the wrappers are used as raii objects where applicable. the wrappers are implemented in  inl  files which are later included in c++ files after the correct ffmpeg header. i.e. currently each wrapper is compiled twice. wrappers rarely have ffmpeg version-dependent code.  * fixes few incompatibilities between ffmpeg versions. * sample format conversions from ffmpeg are templatazied  all formats are now supported. the reverse process was not modified  i have tried to keep changes in importffmpeg and exportffmpeg small and trivial. in the future  we may want to reimplement them as well.  currently  avformat-55 and avformat-58 are supported. i don t see much reason to support 56 and 57. when 59 will be released (and current dev branches are 59) it will be added to the list  this should be a trivial task.  builds were tested against:  * 2.2.2  4.3.1  and 4.4. surprisingly  4.4 support was different (and the most difficult!) from 4.3.1 while the major version stayed the same. ffmpeg 4.4 was downloaded from the  official page . * the system library on manjaro (4.2.2)  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1170,ffmpeg update,"398resolves #1034 resolves #1170 resolves #1201resolves #1331 resolves #1433resolves #1466supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library-provided functionsthis pr:* allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented* provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in `inl` files which are later included in c++ files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version-dependent code * fixes few incompatibilities between ffmpeg versions* sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat-55 and avformat-58 are supported i dont see much reason to support 56 and 57 when 59 will be released (and current dev branches are 59) it will be added to the list this should be a trivial taskbuilds were tested against:* 222 431 and 44 surprisingly 44 support was different (and the most difficult!) from 431 while the major version stayed the same ffmpeg 44 was downloaded from the ""official page""* the system library on manjaro (422)<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",one more push of commits and some in-line comments and questions and this completes my review!act on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on! || i missed the infinite loops with getnextcodec() and getnextoutputformat()!  i see how you corrected them  was it testing that discovered it? || i re-approve the latest force-push!only small suggestions :initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top -- which ought to be stated at least informally in the header files of the class as preconditionsand thats all! || 🥳 🎉 ⚡ 🔥 🚀 🍻  ||,linux audacity v 302 wont start/segmentation fault/alsa issues on debian 10 (buster/mx linux 193),"**describe the bug**the latest release of audacity (version 302) wont launch after being manually built following the directions provided in the [current source code ""buildingmd"" filse]( there seems to be an issue with alsa and this causes a ""segmentation fault"" and the program will not launch**to reproduce**steps to reproduce the behavior (_the following commands are successfully executed without issue_):```$ sudo apt-get update$ sudo apt-get install -y build-essential cmake git python3-pip$ sudo pip3 install conan$ sudo apt-get install libgtk20-dev libasound2-dev libavformat-dev libjack-jackd2-dev uuid-dev$ git clone  mkdir build && cd build$ cmake -g ""unix makefiles"" -daudacity_use_ffmpegloaded /audacity$ make -j`nproc`  #***see note below$ cd bin/debug$ mkdir ""portable settings*** [see full output of make here]( (some warnings about statements being depreciated are given but overall it is successful)finally i go to launch audacity but receive the following error messages:```richard@homeserver:~/build/bin/debug$ /audacityerror: failed to open file /usr/local/lib/lv2/lib/manifestttl (no such file or directory)lilv_world_load_file(): error: error loading file `file:///usr/local/lib/lv2/lib/manifestttllilv_world_load_bundle(): error: error reading file:///usr/local/lib/lv2/lib/manifestttllilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/alias-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/alias-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/fast_lookahead_limiter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/fast_lookahead_limiter-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/allpass-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/allpass-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/allpass-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/allpass-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/allpass-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/allpass-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/gong_beater-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/gong_beater-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/dyson_compress-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/dyson_compress-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/sinus_wavewrapper-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/sinus_wavewrapper-swhlv2/ (ignored)error: failed to open file /usr/lib/lv2/swh-lv2-1015/manifestttl (no such file or directory)lilv_world_load_file(): error: error loading file `file:///usr/lib/lv2/swh-lv2-1015/manifestttllilv_world_load_bundle(): error: error reading file:///usr/lib/lv2/swh-lv2-1015/manifestttllilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/pointer_cast-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/pointer_cast-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/flanger-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/flanger-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/se4-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/se4-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/revdelay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/revdelay-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/wave_terrain-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/wave_terrain-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/sin_cos-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/sin_cos-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/gverb-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/gverb-swhlv2/ (ignored)error: failed to open file /usr/lib/lv2/imp-swhlv2/manifestttl (no such file or directory)lilv_world_load_file(): error: error loading file `file:///usr/lib/lv2/imp-swhlv2/manifestttllilv_world_load_bundle(): error: error reading file:///usr/lib/lv2/imp-swhlv2/manifestttllilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/multivoice_chorus-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/multivoice_chorus-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/satan_maximiser-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/satan_maximiser-swhlv2/ (ignored)error: failed to open file /usr/lib/lv2/step_muxer-swhlv2/manifestttl (no such file or directory)lilv_world_load_file(): error: error loading file `file:///usr/lib/lv2/step_muxer-swhlv2/manifestttllilv_world_load_bundle(): error: error reading file:///usr/lib/lv2/step_muxer-swhlv2/manifestttllilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/const-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/const-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/foldover-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/foldover-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/mbeq-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/mbeq-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/lowpass_iir-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/lowpass_iir-swhlv2/ (ignored)error: failed to open file /usr/lib/lv2/debug-swhlv2/manifestttl (no such file or directory)lilv_world_load_file(): error: error loading file `file:///usr/lib/lv2/debug-swhlv2/manifestttllilv_world_load_bundle(): error: error reading file:///usr/lib/lv2/debug-swhlv2/manifestttllilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/decay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/decay-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/amp-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/amp-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/diode-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/diode-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/highpass_iir-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/highpass_iir-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/hilbert-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/hilbert-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/phasers-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/phasers-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/phasers-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/phasers-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/phasers-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/phasers-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/valve_rect-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/valve_rect-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/gate-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/gate-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/valve-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/valve-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/surround_encoder-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/surround_encoder-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/fad_delay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/fad_delay-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/bandpass_a_iir-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/bandpass_a_iir-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/foverdrive-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/foverdrive-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/fm_osc-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/fm_osc-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/sc3-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/sc3-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/comb-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/comb-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/comb-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/comb-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/comb-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/comb-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/latency-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/latency-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/bode_shifter_cv-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/bode_shifter_cv-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/smooth_decimate-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/smooth_decimate-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/giant_flange-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/giant_flange-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/sc4-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/sc4-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/am_pitchshift-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/am_pitchshift-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/plate-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/plate-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/transient-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/transient-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/chebstortion-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/chebstortion-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/sc1-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/sc1-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/svf-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/svf-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/single_para-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/single_para-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/zm1-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/zm1-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/gong-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/gong-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/retro_flange-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/retro_flange-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/sc2-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/sc2-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/bode_shifter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/bode_shifter-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/declip-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/declip-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/impulse-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/impulse-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/karaoke-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/karaoke-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/butterworth-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/butterworth-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/butterworth-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/butterworth-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/butterworth-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/butterworth-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/tape_delay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/tape_delay-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/ls_filter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/ls_filter-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/analogue_osc-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/analogue_osc-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/lookahead_limiter_const-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/lookahead_limiter_const-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/simple_comb-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/simple_comb-swhlv2/ (ignored)error: failed to open file /usr/lib/lv2/notch_iir-swhlv2/manifestttl (no such file or directory)lilv_world_load_file(): error: error loading file `file:///usr/lib/lv2/notch_iir-swhlv2/manifestttllilv_world_load_bundle(): error: error reading file:///usr/lib/lv2/notch_iir-swhlv2/manifestttllilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/delayorama-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/delayorama-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/rate_shifter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/rate_shifter-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/split-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/split-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/harmonic_gen-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/harmonic_gen-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/vynil-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/vynil-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/crossover_dist-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/crossover_dist-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/pitch_scale-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/pitch_scale-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/decimator-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/decimator-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/hard_limiter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/hard_limiter-swhlv2/ (ignored)error: failed to open file /usr/lib/lv2/gsm-swhlv2/manifestttl (no such file or directory)lilv_world_load_file(): error: error loading file `file:///usr/lib/lv2/gsm-swhlv2/manifestttllilv_world_load_bundle(): error: error reading file:///usr/lib/lv2/gsm-swhlv2/manifestttllilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/bandpass_iir-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/bandpass_iir-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/matrix_st_ms-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/matrix_st_ms-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/lookahead_limiter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/lookahead_limiter-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/shaper-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/shaper-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/dj_eq-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/dj_eq-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/dj_eq-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/dj_eq-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/freq_tracker-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/freq_tracker-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/dj_flanger-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/dj_flanger-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/triple_para-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/triple_para-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/matrix_spatialiser-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/matrix_spatialiser-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/inv-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/inv-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/hermes_filter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/hermes_filter-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/divider-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/divider-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/ringmod-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/ringmod-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/ringmod-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/ringmod-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/mod_delay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/mod_delay-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/xfade-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/xfade-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/xfade-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/xfade-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/sifter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/sifter-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/dc_remove-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/dc_remove-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/matrix_ms_st-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/matrix_ms_st-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/delay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/delay-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/delay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/delay-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/delay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/delay-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/comb_splitter-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/comb_splitter-swhlv2/ (ignored)lilv_world_add_plugin(): warning: duplicate plugin < warning:  found in file:///usr/local/lib/lv2/lcr_delay-swhlv2/lilv_world_add_plugin(): warning:  and      file:///usr/lib/lv2/lcr_delay-swhlv2/ (ignored)alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm sysdefaultalsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm sysdefaultalsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm frontalsa lib pcmc (snd_pcm_open_noupdate) unknown pcm cardspcmrearalsa lib pcmc (snd_pcm_open_noupdate) unknown pcm cardspcmcenter_lfealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm cardspcmsidealsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm surround21alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm surround21alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm surround40alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm surround41alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm surround50alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm surround51alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm surround71alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm iec958alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm spdifalsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm spdifalsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm hdmialsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm hdmialsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm cardspcmphoneline:cardsetdev0alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm cardspcmphoneline:cardsetdev0alsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm phonelinealsa lib confmiscc (parse_card) cannot find card setalsa lib confc (_snd_config_evaluate) function snd_func_card_driver returned error: no such devicealsa lib confmiscc (snd_func_concat) error evaluating stringsalsa lib confc (_snd_config_evaluate) function snd_func_concat returned error: no such devicealsa lib confmiscc (snd_func_refer) error evaluating namealsa lib confc (_snd_config_evaluate) function snd_func_refer returned error: no such devicealsa lib confc (snd_config_expand) evaluate error: no such devicealsa lib pcmc (snd_pcm_open_noupdate) unknown pcm phonelinealsa lib pcm_hwc (_snd_pcm_hw_open) invalid value for cardalsa lib pcm_hwc (_snd_pcm_hw_open) invalid value for cardalsa lib pcm_hwc (_snd_pcm_hw_open) invalid value for cardalsa lib pcm_hwc (_snd_pcm_hw_open) invalid value for cardalsa lib pcm_hwc (_snd_pcm_hw_open) invalid value for cardalsa lib pcm_hwc (_snd_pcm_hw_open) invalid value for cardcannot connect to server socket err  no such file or directorycannot connect to server request channeljack server is not running or cannot be startedjackshmreadwriteptr::~jackshmreadwriteptr - init not done for -1 skipping unlockjackshmreadwriteptr::~jackshmreadwriteptr - init not done for -1 skipping unlockcannot connect to server socket err  no such file or directorycannot connect to server request channeljack server is not running or cannot be startedjackshmreadwriteptr::~jackshmreadwriteptr - init not done for -1 skipping unlockjackshmreadwriteptr::~jackshmreadwriteptr - init not done for -1 skipping unlockalsa lib pcm_ossc (_snd_pcm_oss_open) unknown field portalsa lib pcm_ossc (_snd_pcm_oss_open) unknown field portalsa lib pcm_a52c (_snd_pcm_a52_open) a52 is only for playbacksegmentation fault```**expected behavior**audacity will launch**screenshots**no gui to show - see errors in commands/code above**additional information (please complete the following information):**- audacity version 302_additional system details:_```system:    host: <filter> kernel: 4190-16-amd64 x86_64 bits: 64 compiler: gcc v: 830            parameters: boot_image/boot/vmlinuz-4190-16-amd64            rootuuid<filter> ro quiet splash            init/lib/systemd/systemd            desktop: xfce 4142 tk: gtk 3245 info: xfce4-panel wm: xfwm4 dm: lightdm 1260            distro: mx-194_x64 patito feo may 31  2020 base: debian gnu/linux 10 (buster) machine:   type: detachable system: dell product: latitude 5175 v: n/a serial: <filter> chassis:            type: 32 serial: <filter>            mobo: dell model: 0rjjv5 v: a00 serial: <filter> uefi: dell v: 172 date: 07/29/2020 cpu:       topology: dual core model: intel core m5-6y57 bits: 64 type: mt mcp arch: skylake            family: 6 model-id: 4e (78) stepping: 3 microcode: dc l2 cache: 4096 kib            flags: avx avx2 lm nx pae sse sse2 sse3 sse4_1 sse4_2 ssse3 vmx bogomips: 12096            speed: 2300 mhz min/max: 400/2800 mhz core speeds (mhz): 1: 2305 2: 2316 3: 2301            4: 2303            vulnerabilities: type: itlb_multihit status: kvm: split huge pages            type: l1tf mitigation: pte inversion vmx: conditional cache flushes smt vulnerable            type: mds mitigation: clear cpu buffers smt vulnerable            type: meltdown mitigation: pti            type: spec_store_bypass            mitigation: speculative store bypass disabled via prctl and seccomp            type: spectre_v1 mitigation: usercopy/swapgs barriers and __user pointer sanitization            type: spectre_v2 mitigation: full generic retpoline ibpb: conditional ibrs_fw            stibp: conditional rsb filling            type: srbds mitigation: microcode            type: tsx_async_abort mitigation: clear cpu buffers smt vulnerable graphics:  device-1: intel hd graphics 515 vendor: dell latitude 11 5175 2-in-1 driver: i915            v: kernel bus id: 00:020 chip id: 8086:191e            display: x11 server: xorg 12010 driver: intel resolution: 1600x900~60hz            opengl: renderer: mesa intel hd graphics 515 (skl gt2) v: 46 mesa 2034            direct render: yes audio:     device-1: intel xeon e3-1200 v5/e3-1500 v5/6th gen core processor imaging unit            vendor: dell latitude 11 5175 2-in-1 driver: n/a bus id: 00:050 chip id: 8086:1919            device-2: intel csi-2 host vendor: dell latitude 11 5175 2-in-1 driver: n/a            bus id: 00:143 chip id: 8086:9d32            device-3: intel sunrise point-lp hd audio vendor: dell latitude 11 5175 2-in-1            driver: snd_hda_intel v: kernel bus id: 00:1f3 chip id: 8086:9d70            sound server: alsa v: k4190-16-amd64 network:   device-1: intel wireless 8260 driver: iwlwifi v: kernel port: f040 bus id: 02:000            chip id: 8086:24f3 ```**additional context - things i have tried:**- i saw a [suggestion in another audacity support forum post]( to build the application with the """"--disable-dynamic-loading"""" flag but cannot get that flag to work:  ```  richard@homeserver:~/build  $ make -j`nproc` --disable-dynamic-loading  make: unrecognized option --disable-dynamic-loading  ```- i tried installing audacity 302 [using a snap package]( and it installs quickly and easily and will launch  however it seems that it is difficult to install any plug-ins if audacity is installed via snap package so i removed the snap-installed audacity- i tried purging all alsa and pulseaudio applications/files on my machine and reinstalled alsa and pulseaudio from scratch and additionally added any other packages that are alsa/pulseaudio related as shown in the synaptic package manager that i thought might be helpful but this did not help- i saw a suggestion on another forum to use the """"qjackctl"""" command/gui tool to change settings in the jack server and set the  interface from """"(default)"""" to """"hw:pch"""" and then kill pulseaudio/jack and start them again but this did not fix anything**_[see original audacity support forum post for additional details](https://forumaudacityteamorg/viewtopicphp?f48&t118736)_**""",which version of cmake do you have? the default for buster is 313 which is too old the current audacity code requires cmake 315 or higher || im also seeing the segmentation fault after building 8d0487e on debian stable || > which version of cmake do you have? the default for buster is 313 which is too old the current audacity code requires cmake 315 or higher```richard@homeserver:~$ cmake --versioncmake version 3205cmake suite maintained and supported by kitware (kitwarecom/cmake)``` || a workaround is to disable ffmpeg temporarilyie pass `-daudacity_use_ffmpegoff` during the configuration ||,1,0,remove ondemand and blockfile,,0,0,0,0,0,0,0,0,0
1623,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,ffmpeg update,398 resolves #1034  resolves #1170  resolves #1201 resolves #1331  resolves #1433 resolves #1466  supporting multiple ffmpeg versions is tricky  yet important for audacity  as we could not distribute the correct ffmpeg version with the program itself. this leads to a problem  where updating ffmpeg can be problematic. this is especially true  as a new major version is soon to be released.  the main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration. these structures can change between major version bumps  while the api is mostly stable. this is unlike other c libraries  where structure fields are accessed using the library-provided functions.  this pr:  * allows generating a single header file for a specific ffmpeg version. surprisingly it had required a large subset of c preprocessors to be implemented. * provides wrappers around used ffmpeg structures. the wrappers are used as raii objects where applicable. the wrappers are implemented in  inl  files which are later included in c++ files after the correct ffmpeg header. i.e. currently each wrapper is compiled twice. wrappers rarely have ffmpeg version-dependent code.  * fixes few incompatibilities between ffmpeg versions. * sample format conversions from ffmpeg are templatazied  all formats are now supported. the reverse process was not modified  i have tried to keep changes in importffmpeg and exportffmpeg small and trivial. in the future  we may want to reimplement them as well.  currently  avformat-55 and avformat-58 are supported. i don t see much reason to support 56 and 57. when 59 will be released (and current dev branches are 59) it will be added to the list  this should be a trivial task.  builds were tested against:  * 2.2.2  4.3.1  and 4.4. surprisingly  4.4 support was different (and the most difficult!) from 4.3.1 while the major version stayed the same. ffmpeg 4.4 was downloaded from the  official page . * the system library on manjaro (4.2.2)  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1201,ffmpeg update,"398resolves #1034 resolves #1170 resolves #1201resolves #1331 resolves #1433resolves #1466supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library-provided functionsthis pr:* allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented* provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in `inl` files which are later included in c++ files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version-dependent code * fixes few incompatibilities between ffmpeg versions* sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat-55 and avformat-58 are supported i dont see much reason to support 56 and 57 when 59 will be released (and current dev branches are 59) it will be added to the list this should be a trivial taskbuilds were tested against:* 222 431 and 44 surprisingly 44 support was different (and the most difficult!) from 431 while the major version stayed the same ffmpeg 44 was downloaded from the ""official page""* the system library on manjaro (422)<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",one more push of commits and some in-line comments and questions and this completes my review!act on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on! || i missed the infinite loops with getnextcodec() and getnextoutputformat()!  i see how you corrected them  was it testing that discovered it? || i re-approve the latest force-push!only small suggestions :initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top -- which ought to be stated at least informally in the header files of the class as preconditionsand thats all! || 🥳 🎉 ⚡ 🔥 🚀 🍻  ||,appimage fails to load ffmpeg,**describe the bug**self built audacity 302 loads ffmpeg correctlyaudacity-linux-303-rc2-x86_64appimage fails to load ffmpeg (regression against 302)**to reproduce**1 launch audacity-linux-303-rc2-x86_64appimage2 observe error message:`ffmpeg was configured in preferences and successfully loaded before but this time audacity failed to load it at startup you may want to go back to preferences > libraries and re-configure it`**expected behavior**ffmpeg will be loaded,"that is almost certainly because you have 32-bit ffmpeg installed and you are running 64-bit audacityi had similar on windows until i installed  64-bit ffmpeg from buanzos new page on his site the linux ffmpeg page need updating? || im on 64-bit linux so ive been using 64-bit builds of audacity and ffmpeg for years || @stevedaulton can you please provide some insight on your setup?ive managed to compile ffmpeg using a modified script from leland and after setting up `dt_runpath` everything works like a charm for me i will share the script after a bit of polishingthe question is what we do for this release anyway probably the fix is to provide some instruction on setting ld_library_path to the location ffmpeg is locatedfor the next release i plan:* upgrade the ffmpeg (once again yes) so system ffmpeg can be used on linux* provide a set of scripts on how to build the ""correct"" version so it can be easily buildable by users@anitabats @tantacrul fyi || my system is pretty standard xubuntu 2004 ltsffmpeg library installed from official ubuntu repositoryi prefer to use the system ffmpeg library as it is a dependency for many other audio appsthe usual  way to build audacity 2x with ffmpeg support was to disable dynamic loading during configure - this has worked without any problems for yearsself built 304-alpha-20210628 also loads ffmpeg without any problemsffmpeg version: f(5829100)c(5854100)u(5631100) || lemme have a quick look into the loader code || seems like at least avcodec 58 has an incompatible interface with what audacity expects for dynamic loading while functions are similar structures used as contexts have nothing in common for example `avcodeccontext` has changed around its 5th member and has changed significantly when you build against the system headers this is not a problem by default however audacity is built against ffmpeg 22 (avformat 55) what is even more problematic - we build appimage on 1804 so avcodec 58 is not available as a system library for us as well (at least without ppa)@shoogle any thoughts? || hello @crsib and @anitabats is there a temporary workaround for this release? || > hello @crsib and @anitabats is there a temporary workaround for this release?solution linked to in documentation for 303 || still remains in audacity 310-alpha-20210921![изображение]( || you have used a build from ffmpeg branch? || > > > you have used a build from ffmpeg branch?not yet ive tried to reproduce the bug before the fix will be  ",1,0,remove ondemand and blockfile,,0,0,0,0,0,0,0,0,0
1623,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,ffmpeg update,398 resolves #1034  resolves #1170  resolves #1201 resolves #1331  resolves #1433 resolves #1466  supporting multiple ffmpeg versions is tricky  yet important for audacity  as we could not distribute the correct ffmpeg version with the program itself. this leads to a problem  where updating ffmpeg can be problematic. this is especially true  as a new major version is soon to be released.  the main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration. these structures can change between major version bumps  while the api is mostly stable. this is unlike other c libraries  where structure fields are accessed using the library-provided functions.  this pr:  * allows generating a single header file for a specific ffmpeg version. surprisingly it had required a large subset of c preprocessors to be implemented. * provides wrappers around used ffmpeg structures. the wrappers are used as raii objects where applicable. the wrappers are implemented in  inl  files which are later included in c++ files after the correct ffmpeg header. i.e. currently each wrapper is compiled twice. wrappers rarely have ffmpeg version-dependent code.  * fixes few incompatibilities between ffmpeg versions. * sample format conversions from ffmpeg are templatazied  all formats are now supported. the reverse process was not modified  i have tried to keep changes in importffmpeg and exportffmpeg small and trivial. in the future  we may want to reimplement them as well.  currently  avformat-55 and avformat-58 are supported. i don t see much reason to support 56 and 57. when 59 will be released (and current dev branches are 59) it will be added to the list  this should be a trivial task.  builds were tested against:  * 2.2.2  4.3.1  and 4.4. surprisingly  4.4 support was different (and the most difficult!) from 4.3.1 while the major version stayed the same. ffmpeg 4.4 was downloaded from the  official page . * the system library on manjaro (4.2.2)  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1331,ffmpeg update,"398resolves #1034 resolves #1170 resolves #1201resolves #1331 resolves #1433resolves #1466supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library-provided functionsthis pr:* allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented* provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in `inl` files which are later included in c++ files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version-dependent code * fixes few incompatibilities between ffmpeg versions* sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat-55 and avformat-58 are supported i dont see much reason to support 56 and 57 when 59 will be released (and current dev branches are 59) it will be added to the list this should be a trivial taskbuilds were tested against:* 222 431 and 44 surprisingly 44 support was different (and the most difficult!) from 431 while the major version stayed the same ffmpeg 44 was downloaded from the ""official page""* the system library on manjaro (422)<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",one more push of commits and some in-line comments and questions and this completes my review!act on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on! || i missed the infinite loops with getnextcodec() and getnextoutputformat()!  i see how you corrected them  was it testing that discovered it? || i re-approve the latest force-push!only small suggestions :initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top -- which ought to be stated at least informally in the header files of the class as preconditionsand thats all! || 🥳 🎉 ⚡ 🔥 🚀 🍻  ||,build: ffmpeg is not linked,"building from commit  \  -daudacity_lib_preference:stringsystem \  -daudacity_has_networkingno \  -daudacity_use_ffmpeg:stringlinked \  -daudacity_use_libavcodec:stringsystem \  -daudacity_use_libavformat:stringsystem \  -daudacity_use_libavutil:stringsystem \  -daudacity_use_libmp3lame:stringsystem \  -daudacity_use_libflac:stringsystem \  -daudacity_use_libid3tag:stringsystem \  -daudacity_use_libsndfile:stringsystem \  -daudacity_use_libsoxr:stringsystem \  -daudacity_use_libtwolame:stringsystem \  -daudacity_use_libuuid:stringsystem \  -daudacity_use_libvamp:stringsystem \  -daudacity_use_libvorbis:stringsystem \  -daudacity_use_lv2:stringsystem \  -daudacity_use_sbsms:stringsystem \  -daudacity_use_soundtouch:stringsystem \  -daudacity_use_portaudio:stringlocal \  -daudacity_use_midi:stringlocal \  -daudacity_build_level2 \  -daudacity_suffix:string""```  -daudacity_use_ffmpeg:stringlinked \  -daudacity_use_libavcodec:stringsystem \  -daudacity_use_libavformat:stringsystem \  -daudacity_use_libavutil:stringsystem \```but libavcodecso is still not linked (is not in the list of deps of the resulting elf binary)""",```[00 34] --  configuring sqlite [00 34] -- checking for module sqlite3 > 3320[00 34] --   found sqlite3  version 3355[00 35] -- using sqlite system library[00 35] --  configuring ffmpeg [00 35] -- checking for modules libavcodec > 5153libavformat > 5212libavutil > 5266[00 35] --   found libavcodec  version 58134100[00 35] --   found libavformat  version 5876100[00 35] --   found libavutil  version 5670100[00 35] package libswresample was not found in the pkg-config search path[00 35] perhaps you should add the directory containing `libswresamplepc[00 35] to the pkg_config_path environment variable[00 35] package libswresample required by libavcodec not found[00 35] package libswresample was not found in the pkg-config search path[00 35] perhaps you should add the directory containing `libswresamplepc[00 35] to the pkg_config_path environment variable[00 35] package libswresample required by libavcodec not found[00 35] package libswresample was not found in the pkg-config search path[00 35] perhaps you should add the directory containing `libswresamplepc[00 35] to the pkg_config_path environment variable[00 35] package libswresample required by libavcodec not found[00 35] package libswresample was not found in the pkg-config search path[00 35] perhaps you should add the directory containing `libswresamplepc[00 35] to the pkg_config_path environment variable[00 35] package libswresample required by libavcodec not found[00 35] -- linking ffmpeg library during build``` || i do not see `-ddisable_dynamic_loading_ffmpeg` to be passed to the compiler ||  is a similar issuethey both are bad for linux distro packaging of audacity#554 is bad because symbols from libmp3lame are used in fact but it is not linked to audacity so without adding `-lmp3lame` to compiler flags manually mismath of abi in audacity and libmp3lame may happen in the repository@crsib  ||,1,0,remove ondemand and blockfile,,0,0,0,0,0,0,0,0,0
1623,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,ffmpeg update,398 resolves #1034  resolves #1170  resolves #1201 resolves #1331  resolves #1433 resolves #1466  supporting multiple ffmpeg versions is tricky  yet important for audacity  as we could not distribute the correct ffmpeg version with the program itself. this leads to a problem  where updating ffmpeg can be problematic. this is especially true  as a new major version is soon to be released.  the main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration. these structures can change between major version bumps  while the api is mostly stable. this is unlike other c libraries  where structure fields are accessed using the library-provided functions.  this pr:  * allows generating a single header file for a specific ffmpeg version. surprisingly it had required a large subset of c preprocessors to be implemented. * provides wrappers around used ffmpeg structures. the wrappers are used as raii objects where applicable. the wrappers are implemented in  inl  files which are later included in c++ files after the correct ffmpeg header. i.e. currently each wrapper is compiled twice. wrappers rarely have ffmpeg version-dependent code.  * fixes few incompatibilities between ffmpeg versions. * sample format conversions from ffmpeg are templatazied  all formats are now supported. the reverse process was not modified  i have tried to keep changes in importffmpeg and exportffmpeg small and trivial. in the future  we may want to reimplement them as well.  currently  avformat-55 and avformat-58 are supported. i don t see much reason to support 56 and 57. when 59 will be released (and current dev branches are 59) it will be added to the list  this should be a trivial task.  builds were tested against:  * 2.2.2  4.3.1  and 4.4. surprisingly  4.4 support was different (and the most difficult!) from 4.3.1 while the major version stayed the same. ffmpeg 4.4 was downloaded from the  official page . * the system library on manjaro (4.2.2)  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1433,ffmpeg update,"398resolves #1034 resolves #1170 resolves #1201resolves #1331 resolves #1433resolves #1466supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library-provided functionsthis pr:* allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented* provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in `inl` files which are later included in c++ files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version-dependent code * fixes few incompatibilities between ffmpeg versions* sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat-55 and avformat-58 are supported i dont see much reason to support 56 and 57 when 59 will be released (and current dev branches are 59) it will be added to the list this should be a trivial taskbuilds were tested against:* 222 431 and 44 surprisingly 44 support was different (and the most difficult!) from 431 while the major version stayed the same ffmpeg 44 was downloaded from the ""official page""* the system library on manjaro (422)<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",one more push of commits and some in-line comments and questions and this completes my review!act on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on! || i missed the infinite loops with getnextcodec() and getnextoutputformat()!  i see how you corrected them  was it testing that discovered it? || i re-approve the latest force-push!only small suggestions :initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top -- which ought to be stated at least informally in the header files of the class as preconditionsand thats all! || 🥳 🎉 ⚡ 🔥 🚀 🍻  ||,ffmpeg startup failed,**to reproduce**steps to reproduce the behavior:1 launch audacity2 configure ffmpeg (preferences > libraries)3 restart computer4 restart audacity5 see error**expected behavior**ffmpeg starts up automatically without error**screenshots**( information (please complete the following information):** - os: windows 10 - version: audacity 303**additional context**a popup that appears that is so annoying that i may have to use a different sound editor if i experience this popup again,"previous audacity releases for windows were 32-bitif you installed the 64-bit version of audacity 303 you will need to upgrade ffmpeg to the 64-bit versionother 32-bit plug-ins (such as any vst effects that youve added) will also need to be updated or they wont workif you need to update ffmpeg uninstall your current version of ""ffmpeg for audacity"" and then follow the instructions here:  || > then follow the instructions here:are you going to update to latest ffmpeg?? 44 that is because otherwise it is better to do ffmpeg -i file outputwav/w64 || ",1,0,remove ondemand and blockfile,,0,0,0,0,0,0,0,0,0
1623,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,ffmpeg update,398 resolves #1034  resolves #1170  resolves #1201 resolves #1331  resolves #1433 resolves #1466  supporting multiple ffmpeg versions is tricky  yet important for audacity  as we could not distribute the correct ffmpeg version with the program itself. this leads to a problem  where updating ffmpeg can be problematic. this is especially true  as a new major version is soon to be released.  the main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration. these structures can change between major version bumps  while the api is mostly stable. this is unlike other c libraries  where structure fields are accessed using the library-provided functions.  this pr:  * allows generating a single header file for a specific ffmpeg version. surprisingly it had required a large subset of c preprocessors to be implemented. * provides wrappers around used ffmpeg structures. the wrappers are used as raii objects where applicable. the wrappers are implemented in  inl  files which are later included in c++ files after the correct ffmpeg header. i.e. currently each wrapper is compiled twice. wrappers rarely have ffmpeg version-dependent code.  * fixes few incompatibilities between ffmpeg versions. * sample format conversions from ffmpeg are templatazied  all formats are now supported. the reverse process was not modified  i have tried to keep changes in importffmpeg and exportffmpeg small and trivial. in the future  we may want to reimplement them as well.  currently  avformat-55 and avformat-58 are supported. i don t see much reason to support 56 and 57. when 59 will be released (and current dev branches are 59) it will be added to the list  this should be a trivial task.  builds were tested against:  * 2.2.2  4.3.1  and 4.4. surprisingly  4.4 support was different (and the most difficult!) from 4.3.1 while the major version stayed the same. ffmpeg 4.4 was downloaded from the  official page . * the system library on manjaro (4.2.2)  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1466,ffmpeg update,"398resolves #1034 resolves #1170 resolves #1201resolves #1331 resolves #1433resolves #1466supporting multiple ffmpeg versions is tricky yet important for audacity as we could not distribute the correct ffmpeg version with the program itself this leads to a problem where updating ffmpeg can be problematic this is especially true as a new major version is soon to be releasedthe main problem with ffmpeg is that it exposes several structures and expects library users to fill them up during the configuration these structures can change between major version bumps while the api is mostly stable this is unlike other c libraries where structure fields are accessed using the library-provided functionsthis pr:* allows generating a single header file for a specific ffmpeg version surprisingly it had required a large subset of c preprocessors to be implemented* provides wrappers around used ffmpeg structures the wrappers are used as raii objects where applicable the wrappers are implemented in `inl` files which are later included in c++ files after the correct ffmpeg header ie currently each wrapper is compiled twice wrappers rarely have ffmpeg version-dependent code * fixes few incompatibilities between ffmpeg versions* sample format conversions from ffmpeg are templatazied all formats are now supported the reverse process was not modifiedi have tried to keep changes in importffmpeg and exportffmpeg small and trivial in the future we may want to reimplement them as wellcurrently avformat-55 and avformat-58 are supported i dont see much reason to support 56 and 57 when 59 will be released (and current dev branches are 59) it will be added to the list this should be a trivial taskbuilds were tested against:* 222 431 and 44 surprisingly 44 support was different (and the most difficult!) from 431 while the major version stayed the same ffmpeg 44 was downloaded from the ""official page""* the system library on manjaro (422)<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",one more push of commits and some in-line comments and questions and this completes my review!act on my suggestions as you wish force push once more and i will make one quick check of what you did and likely approve this and move on! || i missed the infinite loops with getnextcodec() and getnextoutputformat()!  i see how you corrected them  was it testing that discovered it? || i re-approve the latest force-push!only small suggestions :initcodecs should be a private member function to prove the safety of the new pointer dereference in it just from examining the class in isolationthe copy and move assignments of avdictionary now have assertions at the top -- which ought to be stated at least informally in the header files of the class as preconditionsand thats all! || 🥳 🎉 ⚡ 🔥 🚀 🍻  ||,add support for modern ffmpeg versions,references #398 #1034 #1170 #1201 #1331 #1433 the goal of this task is to update the ffmpeg version without breaking the current audacity usersupdating will help with:* improving security as `avcodec55` is no longer supported* using system libraries on linux* using ffmpeg from brew on macosthe problem is that while newer ffmpeg versions are (almost) api compatible - the abi compatibility is broken,,1,0,remove ondemand and blockfile,,0,0,0,0,0,0,0,0,0
1630,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,not move clip on insertion by default,changing  editing a clip can move other clips  option default value to false  resolves: #1333  changing  editing a clip can move other clips  option default value to false  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1333,not move clip on insertion by default,"changing ""editing a clip can move other clips"" option default value to falseresolves: #1333changing ""editing a clip can move other clips"" option default value to false<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,affordances: when copying and pasting a clip it is desirable that it does not push out clips to the right,from an implementation point of view we may want to handle this separately but it does need to be addressed,i think we resolved this on the call - there is a setting for this already - tracks->track behaviours->editing a clip can move other clips( will want to have a design overlapping clips but that is a separate issue (and not for development in 31) - will create a new issue for this ||,1,0,"changing ""editing a clip can move other clips"" option default value to false",,0,0,0,0,0,0,0,0,0
1637,0,0,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,disentangle midi play from audio io,resolves: #1581  next refactoring steps for audioio.  all of the logic specific to midi playback is removed from audioio.cpp  and invoked instead through an abstract base class audioioext.  a new  separate file midiplay.cpp registers its extension policy with audioio.  these steps shrink the big file audioio.cpp from 4797 to 3596 lines  and are also preparations for putting note track into its own optional extension module.  the unnecessary separate thread for midi playback is removed for simplicity  and some callbacks happen directly in the portaudio thread.  that means some memory allocations may happen on that thread  when midi plays!  (see preparemidiiterator().) but future refactorings will correct that.  the dependency of lib-audio-devices on portmidi is severed.  a few other changes remove some dependencies on notetrack  and use settings objects from prefs.cpp to eliminate some duplicated literals and direct use of gprefs in midiplay.cpp.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1581,disentangle midi play from audio io,"resolves: #1581next refactoring steps for audioioall of the logic specific to midi playback is removed from audioiocpp and invoked instead through an abstract base class audioioext  a new separate file midiplaycpp registers its extension policy with audioiothese steps shrink the big file audioiocpp from 4797 to 3596 lines and are also preparations for putting note track into its own optional extension modulethe unnecessary separate thread for midi playback is removed for simplicity and some callbacks happen directly in the portaudio thread  that means some memory allocations may happen on that thread when midi plays!  (see preparemidiiterator()) but future refactorings will correct thatthe dependency of lib-audio-devices on portmidi is severeda few other changes remove some dependencies on notetrack and use settings objects from prefscpp to eliminate some duplicated literals and direct use of gprefs in midiplaycpp<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",now rebased with build fixes and also removing use of deprecated std::iterator ||,disentangle midi play steps from audioio,,,1,0,some settings objects for midi eliminate duplicate constant,,0,0,0,0,0,0,0,0,0
1638,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,generalize play head position updates,resolves: #1582  the play head position is drawn on screen by the main thread  which is told the track time corresponding to the last played samples by the portaudio thread.  that thread  in turn  sometimes got this value from information in a queue from the third  worker thread (which reads from the tracks in larger batches of samples)  as when scrubbing  but other times  did its own calculations taking into account whether pay is straight or looping (assuming fixed loop bounds!)  and whether it uses a time track as well.  this pull request changes that  so that the portaudio thread never calculates  but always takes the value from the queue.  this is a preparation so that the producer of that queue can vary the correspondence of samples in transit with points on the time ruler in yet other ways.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1582,generalize play head position updates,"resolves: #1582the play head position is drawn on screen by the main thread which is told the track time corresponding to the last played samples by the portaudio threadthat thread in turn sometimes got this value from information in a queue from the third worker thread (which reads from the tracks in larger batches of samples) as when scrubbing but other times did its own calculations taking into account whether pay is straight or looping (assuming  loop bounds!) and whether it uses a time track as wellthis pull request changes that so that the portaudio thread never calculates but always takes the value from the queuethis is a preparation so that the producer of that queue can vary the correspondence of samples in transit with points on the time ruler in yet other ways<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,generalize play head position updates,,,1,0,use the timequeue to communicate all play head position updates  scrub is no longer a special casethe portaudio callback thread only consumes the values without calculatingthem  the audiothread calculates all now and will have freedom tocalculate differentlybecause of the time queue granularity this requires audioio::fillbuffers toproduce a little bit of extra silence when not looping or scrubbing so thatthe consumer thread will detect its termination condition,,0,0,0,0,0,0,0,0,0
1639,0,0,1,0,0,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,fix journal of return key invoking default dialog button on mac, and some other cases.  wherever audacity simulates button press events  set the event object to be the button  so that windoweventserialization() in journalevents.cpp can determine a pathname for the window associated with the event.  the change in keyboardcapture is enough for the default buttons of dialogs. the other changes are necessary but not sufficient for fixing journalling of some of audacity s custom widgets  on any operating system.  resolves: #1631  *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1631,fix journal of return key invoking default dialog button on mac," and some other caseswherever audacity simulates button press events set the event object to be thebutton so that windoweventserialization() in journaleventscpp can determinea pathname for the window associated with the eventthe change in keyboardcapture is enough for the default buttons of dialogs theother changes are necessary but not sufficient for fixing journalling of some ofaudacitys custom widgets on any operating systemresolves: #1631*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,journal fails to record return key to invoke default button on macos,start audacity with journalling enabledopen for instance generate > noisehit return to invoke the default buttonon macos observe the error message that journal recording failsexpected: it should succeed and work just like clicking the button with the mouse which can be recorded and replayed,,1,0,fix journal of return key invoking default dialog button on mac and some other caseswherever audacity simulates button press events set the event object to be thebutton so that windoweventserialization() in journaleventscpp can determinea pathname for the window associated with the eventthe change in keyboardcapture is enough for the default buttons of dialogs theother changes are necessary but not sufficient for fixing journalling of some ofaudacitys custom widgets on any operating system,,0,0,0,0,0,0,0,0,0
1664,0,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,0,0,0,1,playback policy classes 1,resolves: #1658   depends on: #1638   more refactoring of audioio.cpp and playbackschedule.cpp  so that there is less of the logic for special playback cases like looping and scrubbing in those files.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1658,playback policy classes 1,"resolves: #1658 depends on: #1638 more refactoring of audioiocpp and playbackschedulecpp so that there is less of the logic for special playback cases like looping and scrubbing in those files<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,playback policy classes i,a stage in audioio refactoringbegin to move logic for various special cases of playback (looping cut preview time warping scrubbing etc) into playbackpolicy subclasses and out of the general audioiocpp and playbackschedulecpp,,1,0,remove audioiostartstreamoptions::playlooped,,0,0,0,0,0,0,0,0,0
1675,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,restore missing localizations for linux appimage,resolves: #1382   1. ensure install_prefix is set correctly.     - the cmake variable install_prefix is now correctly passed into the program. 2. make audacity portable.     - audacity now checks for resources at a location relative to the executable instead of a fixed location each time.,,1382,restore missing localizations for linux appimage,resolves: #13821 ensure install_prefix is set correctly    - the cmake variable install_prefix is now correctly passed into the program2 make audacity portable    - audacity now checks for resources at a location relative to the executable instead of a  location each time,works fine with appimage![изображение]( ||,appimage is missing localization,appimage only contains english localization **expected behavior**appimage is localized to all supported languages,see also this forum post:  audacity-wxgtk2 303 do not portuguese language || workaround (previously posted here:  audacitycfg file may be manually edited (while audacity is not running) to select the required language for example for french:```[locale]languagefr```the audacity 303 appimage will then open with the selected language (in this case french) || works fine![изображение]( ||,1,0,make audacity portable on linuxaudacity and its resources (eg modules translations etc) areinstalled to  locations defined during configuration by thecmake variable install_prefix  executable:     install_prefix/bin/audacity  resources:      install_prefix/share/*typical values:  install_prefix: /usr/local  executable:     /usr/local/bin/audacity  resources:      /usr/local/share/*previously at runtime audacity would check for resources at thelocation specified by install_prefix this worked fine as long as theresources were never moved from that location which is usually truefor distribution packages and self-compiled builds however if theresources were ever moved from where cmake installed them then audacitywould be unable to find them at runtimethis is a problem for the appimage which self-mounts at a differenttemporary location every time it is run meaning that the resources arein a different place each time and never at the place specified ininstall_prefixtypical values for the appimage:  install_prefix: /home/runner/work/audacity/audacity/build/install  executable:     /tmp/mount_audacixxxxxx/usr/bin/audacity  resources:      /tmp/mount_audacixxxxxx/usr/share/*  (where xxxxxx is a different alphanumeric sequence on each run)to solve this a portable_prefix is constructed at runtime by droppingthe final two components of the path to the exectuable  executable:      /some/directory/bin/audacity  portable_prefix: /some/directory          (dropped /bin/audacity)  resources:       /some/directory/share/*this enables audacity to find the resources even if they are moved aslong as the executable and resources are moved together (ie theirlocation relative to each other stays the same) which is the case withthe appimageas a fallback in case the executable and resources become separated(ie their location relative to each other changes) audacity willrevert back to using the fixed location specified by install_prefix1382,,0,0,0,0,0,0,0,0,0
1677,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,the setclip command can set the clip name,resolves: #1644   the set clip macro command now can change a clip name too  the command is also accessible in menus under extra > scriptables i (you must first enable the extra menus in the interface preferences)  @lwinterberg see this manual page needing update   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1644,the setclip command can set the clip name,"resolves: #1644 the set clip macro command now can change a clip name toothe command is also accessible in menus under extra > scriptables i (you must first enable the extra menus in the interface preferences)@lwinterberg see this manual page needing update  use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,clip names should be editable by macro programming,making this new user-modifiable attribute of a project changeable with macros is needed to complete the clip naming project consistently with other such things in audacity such as changes of track namethe existing setclipcommand class could be adapted to have one more parameter for this purposesee #1258the command is also accessible in menus under extra > scriptables i@lwinterberg see this manual page needing update https://manualaudacityteamorg/man/extra_menu_scriptables_ihtml#set_clip,-  updated image-  updated relevant section in the manual ||,1,0,the setclip command can set the clip name,,0,0,0,0,0,0,0,0,0
1678,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,clip renaming context menu item,resolves: #1660  this makes #998 and #1614 more complete  add an item to the wave clip context menu for renaming.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1660,clip renaming context menu item,"resolves: #1660this makes #998 and #1614 more completeadd an item to the wave clip context menu for renaming<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",i have changed the function name and also check other channelsi still do not understand why event notifications should be used here  you used them so that changed of track selection state could be detected by textedithelper and that was proper for avoidance of dependency cycles (tracklist should not depend on the code that reacts to the event)  i dont see a problem with cycles in this commit that needs this technique to break them || the problem of pushing the undo history stack isnt solved so i mark this as a draft until i do that || i dont recall why i thought undo history was sometimes not pushed -- maybe i was confusedbut it can be unnecessarily pushed -- if you just hit enter with no changes to the text  i changed that case  it should affect behavior of clicking on the name as well as the new context menu itemesc key works as you would expect discarding any changes you may have made without hitting enter ||,clip renaming context menu item,,,1,0,avoid empty undo items for clip name changes,,0,0,0,0,0,0,0,0,0
1678,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,clip renaming context menu item,resolves: #1660  this makes #998 and #1614 more complete  add an item to the wave clip context menu for renaming.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,998,clip renaming context menu item,"resolves: #1660this makes #998 and #1614 more completeadd an item to the wave clip context menu for renaming<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",i have changed the function name and also check other channelsi still do not understand why event notifications should be used here  you used them so that changed of track selection state could be detected by textedithelper and that was proper for avoidance of dependency cycles (tracklist should not depend on the code that reacts to the event)  i dont see a problem with cycles in this commit that needs this technique to break them || the problem of pushing the undo history stack isnt solved so i mark this as a draft until i do that || i dont recall why i thought undo history was sometimes not pushed -- maybe i was confusedbut it can be unnecessarily pushed -- if you just hit enter with no changes to the text  i changed that case  it should affect behavior of clicking on the name as well as the new context menu itemesc key works as you would expect discarding any changes you may have made without hitting enter ||,context menu rework,### user storyas a user i would like to access some frequent functions directly in context to save time### descriptioncurrently audio tracks dont have any context menus (right click menus) in audacity in most daws the most often used actions are also exposed through context menus (in addition to main menus and keyboard shortcuts) this saves users time and helps new users find commonly used actions quickly in contextwe would like to add a handful of often used actions as context menus when right clicking on an audio track or in the empty space we can add more actions over time but this would be a good starter setcontext menu over audio track:![1 0 audacity3 menu on audio clip@2x]( menu outside audio track:![1 0 audacity3 menu on empty@2x]( at #867 ### scope restrictions and сourner-cases- in release 31 new context menu is applicable only to mono and stereo tracks- context menu on blank space is different to the context menu on audio tracks (see the screenshots above please)- time tracks and label tracks are not in the scope of this task in release 31 time and label tracks are still the same,@jounih jouni could you please point what functions/actions are required in the new context menu? || ready for development || **description of task decomposition**all estimation times have two borders: this is not 100% precision time frame this is the approximate time window for solving task1 add context menu11 create event handler for right mouse click in `projectmanager` or `trackpanel` (this class already support mouseevent `projectwindow::onmouseevent` but seems necessary passed up right click event additionally)12 create context  menu  wxmenu` and bind (connect) handler for popup context menu callbackestimate: 2 - 3 hrs2 add context menu for `wavetrackview` and separate menu for `on track` and `non track` by control of selection zone using `tracklist::get( project )selected()` methodsestimate: 3 - 4 hrs3 call methods from context menu31 call exist methods from context menu callback like `onnewwavetrack(const commandcontext &context)` for create a mono track or `void onpaste(const commandcontext &context)` etc but it should doing carefully for support right `commandcontext` content32 final behavior tests (24) hrsestimate: 10 - 12 hrs**total estimate:** 15 - 19 hrs@crsib @paul-licameli could you review please ||,1,0,avoid empty undo items for clip name changes,,0,0,0,0,0,0,0,0,0
1679,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,smart clips,resolves: #1400 resolves: #1401  work in progress  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1400,smart clips,"resolves: #1400resolves: #1401work in progress<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",i see this is rebased onto more recent master nowi like the more detailed explanation in commit commentsin commit comments if you write more than one line then always make the second line blank and after it use line breaks at about 80 columns || at last i consider this review complete! ||,"""smart"" clips: internals",implement internals related to smart clipsscope of work:* introduce waveclip state for trimming update related code: clip movement within track overlaping with other tracks~12hrs* handle clip copying: ~8hrsdetails https://githubcom/audacity/audacity/issues/994,,1,0,more assignuihandleptr usage fixes,,0,0,0,0,0,0,0,0,0
1679,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,smart clips,resolves: #1400 resolves: #1401  work in progress  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1401,smart clips,"resolves: #1400resolves: #1401work in progress<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",i see this is rebased onto more recent master nowi like the more detailed explanation in commit commentsin commit comments if you write more than one line then always make the second line blank and after it use line breaks at about 80 columns || at last i consider this review complete! ||,"""smart"" clips: ui","implement ui changes related to ""smart"" clipsscope of work:* add new (stub) uihandle for clip resizing ~1hrs* resizing with new uihandle: ~4hrs* update selection behaviour within clip: ~2hrsdetails https://githubcom/audacity/audacity/issues/994",,1,0,more assignuihandleptr usage fixes,,0,0,0,0,0,0,0,0,0
1711,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,wave time shift tool hit testing fix,resolves: #1613   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1613,wave time shift tool hit testing fix,"resolves: #1613 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",when was the bug introduced?  @davidbailes said after 242  likely in work i did in the commit range c60bf1c9945b362d7fa2e675c22e674b1f005eea583d347ae05dcc8b981f3716a7c7e3e414f06fc2 where i did a lot of work to make a polymorphic track shifter abstraction so that timeshifthandle would not be build-dependent on subclasses of trackbut where more exactly in there? || commit 9d52100f5cd00864652932a469588578f20d1b16 is where the old and more correct selection logic was deleted (see function `findclipattime` which used `waveclip::getclipatsample` which does not have the off-by-1 error)  but it may not be the first commit where the bug happened  the function became unused and was replaced with a different call at an earlier place in this complicated sequence of commits transforming the time shifting code || > commit [9d52100]( is where the old and more correct selection logic was deleted (see function `findclipattime` which used `waveclip::getclipatsample` which does not have the off-by-1 error) but it may not be the first commit where the bug happened the function became unused and was replaced with a different call at an earlier place in this complicated sequence of commits transforming the time shifting codei think that bug was introduced here  ||,stereo track clip handles dont affect both channels when grabbing sample 1,"**steps to reproduce**1 have a stereo track2 zoom right in and to to the start to the track3 drag the stereo track using the affordances above the very first sample (rounded so anything up to ""sample 15"" works)4 the left channel will move independently from the right channel**additional information (please complete the following information):** - os: windows 11 - version audacity 310-alpha-20210901",testing using the move tool rather than the drag bar the last time this worked correctly was 242this bug also affects the commands time shift left/right which can be used by keyboard users to move clips a user may well use these commands with the cursor positioned at the start of the clip ||,1,0,fixes issue with wave time shift tool hit testing near the first sample,,0,0,0,0,0,0,0,0,0
1717,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,makes selection tool available at affordance area,resolves: #1427  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1427,makes selection tool available at affordance area,resolves: #1427-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,i approve the changes  if you are not going to make more fixes (i wasnt sure from your comment) then you may rebase and merge this pr ||,range selection does not work in affordance area,,why would you expect it to?when the cursor is over the clip-handle drag-bar the cursor changes to the open hand which is the affordance to indicate that you can click that open-hand cursor then changes to the closed-hand cursor which is the further affordance that you can drag to move  - not click and selectwhen the cursor is over the waveform the cursor icon is the i-beam - which is the affordance to indicate that you can click and drag to select || sorry a bad wording from my side when selection tool is active its not possible to start selection when cursor is over empty affordance area (where no clips at all)(  || > when selection tool is active its not possible to start selection when cursor is over empty affordance area (where no clips at all)ah i see what you mean - there is a visual cue to the user:a) when the cursor is over the waveform area the cursor is the i-beam (default tool setting) - indicating selection is availableb) when you move the cursor into the space where the clip-handle drag bars could be dragged the cursor changes to the default widows broad white arrow - indicating selection is not possible from theresince all the space above the waveform for the clip-handle drag bars is really only usable by the drag bars what i would suggest is partitioning that part of the track off with a thin black line  that would also have the advantage of a visual cue suggesting that the user can slide/drag the drag bars along horizontally  it also has the advantage that the waveforms themselves retain the square corners that theyve always hadsee mockup:![image](  and @jounih  - as the ux/gui specialists on the team what are your thoughts on this please? || > @tantacrul and @jounih - as the ux/gui specialists on the team what are your thoughts on this please?i would be careful about trying to make changes to try and solve this potential issue until weve tested it in the wild it may be the case that users dont experience this problemif they do i can think of a few interesting ideas but i wont try articulate them here || @tantacrul i dont actually see a real problem here anyway - for me the visual cue of the change of cursor icon is sufficientas a user i wouldnt dream of trying to start a selection while my cursor was in that dead space without the i-beam selection cursor/tool showingi would be surprised if we ever get user complaints about this || @petersampsonaudacity - a related issue: we are planning on allowing users to multi-select clips as well as select wave data so selection will need to be revisited holistically anyway ill be working on designs for this over the next 2-3 weeks || and the gui makes it entirely clear that the clip-handle drag-bars do not participate in the selection:![image]( || lets release in 31 if _easy_ ||,1,0,makes selection tool available at affordance area,,0,0,0,0,0,0,0,0,0
1736,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,fix clip frame drawing,resolves: #1689  also fixes clipping usage  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1689,fix clip frame drawing,resolves: #1689also fixes clipping usage-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,clip visuals become unpredictable on sample-level zooms,**describe the bug**instead of looking like clips the clips seemingly extend over empty space terminate twice and more hovering over the actual clip wont highlight the actual clip but the wrong side of it **to reproduce**steps to reproduce the behavior:1 have a clip2 zoom way in (to the sample level and then 1-4 steps further still**expected behavior**they remain looking like clips**screenshots**( information (please complete the following information):** - os: windows 11 - version audacity 310-alpha-20210916,( completeness: it also happens at the end of the clips some levels are fine some are wrong-way-round || @lwinterberg looks like this is a win11-specific bug ive tried to reproduce this on win10 and havent got the same glitch:![изображение]( || > @lwinterberg looks like this is a win11-specific bug ive tried to reproduce this on win10 and havent got the same glitch:> > ![изображение]( was able to reproduce it on win10 seems like drawing needs some workaround quite simple though || @vsverchinsky yes you right )but i meant this one )![изображение]( || @vsverchinsky btw i finally got what do you mean )![изображение]( || see also@   left sample point obliterated by clip line #1663  || this seems to only occur for clips longer than 25-ish seconds || @vsverchinsky please check if you can reproduce with your latest build || testing with @vsverchinsky s latest build:  audacity-win-310-alpha-20210923+da495d3-64bitthis looks much better to me:![image]( || but observe this little minor audio glitch - repeatable with different zoomed clips - a) always in the right clip and b) always adjacent the the last dot in the left clip![image]( || just to point out that the start and end of a clip indicated by the new clip visuals are not consistent with existing visuals in the timeline  for the start and end of the clip i think the existing visuals in the timeline are ok and consistentheres a 10 sample clip of noise which has been selected - note the start and end indicated in the timeline:![image]( pressing j to move to the start of the clip:![image]( pressing k to move to the end of the clip:![image]( || > > > but observe this little minor audio glitch - repeatable with different zoomed clips - a) always in the right clip and b) always adjacent the the last dot in the left clip> > ![image]( think it is relative to this topic but it would be better to separate these issues || > i think it is relative to this topic but it would be better to separate these issues@penikov  - so do you want me (as the finder) to log this - or do you want to do it? || that already is logged as #1663 or am i missing something? || > that already is logged as #1663 or am i missing something?yes - but before i looked closely i opened another issue for it - and then rapidly closed it - issue #1789  _<blushes deeply>_ ||,1,0,fixes clipping usage,,0,0,0,0,0,0,0,0,0
1756,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,loop play button,resolves: #1755   add a new toggle button to the control toolbar.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1755,loop play button,"resolves: #1755 add a new toggle button to the control toolbar<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,add looping button to control toolbar,"* this button displays the new looping image* it is disabled during recording* it reflects the ""lock"" state of the play region if that is changed by the transport > play region menu item or the context menu of the timeline* clicking this button if it is enabled also changes the state of the play regionit is not in the scope of this issue to change how the play region is drawn on the timeline  the old drawing is as a red two-headed arrow",,1,0,fix width of toolbar when audacitycfg is from 30x or earlier,,0,0,0,0,0,0,0,0,0
1758,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,fix for ffmpeg loading on macos,resolves: #1751   on macos - the dynamic library loader behaves differently. all dyld_* environment variables are read only during the application startup. this pr emulates  the behavior of other os by manually trying to load every library from every directory listed.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1751,fix for ffmpeg loading on macos,"resolves: #1751 on macos - the dynamic library loader behaves differentlyall dyld_* environment variables are read only during the application startup this pr""emulates"" the behavior of other os by manually trying to load every library from every directory listed<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,mac: latest 310 alpha fails to see my installed ffmpeg library,"**describe the bug**the latest 310 alpha  audacity_macos_intel_1270895276_97ca83e  fails to see my installed ffmpeg librarylaunching 304 and importing *mp4 works fine stillthus this is a regression on 304**to reproduce**steps to reproduce the behavior:1 install latest alpha  audacity_macos_intel_1270895276_97ca83e  on mac2 launch3 try to import an mp4 audio file4 observe: error message re ffmpeg**expected behavior**a) no warning messageb) *mp4 files imported correctly**screenshots**( information (please complete the following information):** - os: macos 1152 big sur - version audacity 310**additional context**this does not happen with audacity-win-310-alpha-20210924+97ca83e-64bit on my w10 laptopnote that there appears to be no error message re missing ffmpeg when launching at step 2**update:**  on subsequent launch i did get an ""ffmpeg startup failed"" message",note the white text on black for the error message - see issue #1752 || testing on macos 116 with 310 alpha  audacity_macos_intel_1278037961_0b3ba4f this now works fine on my maca) no error messages for missing ffmpegb) mp$ file import fine ||,1,0,fixes wildcard for selecting ffmpeg libraries on macosalso fixes filter name to match os specific library names,,0,0,0,0,0,0,0,0,0
1766,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,fix cut preview,resolves: #1702 resolves: #1703 resolves: #1568 resolves: #1566  reimplement the  cut preview  feature (the  c  shortcut key  also ctrl+click on play button) less special-casely by using another subclass of playbackpolicy.  it means cut preview will also interact nicely with the time track and respond like other playback to changes of mute  solo  gain  and pan controls.  no more temporary tracks in the implementation.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1702,fix cut preview,"resolves: #1702resolves: #1703resolves: #1568resolves: #1566reimplement the ""cut preview"" feature (the ""c"" shortcut key also ctrl+click on play button) less special-casely by using another subclass of playbackpolicy  it means cut preview will also interact nicely with the time track and respond like otherplayback to changes of mute solo gain and pan controlsno more temporary tracks in the implementation<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,playback policy classes ii (handling discontinuities),,,1,0,cut preview reimplemented as another playbackpolicy eliminating special mention of it in playbackschedule eliminating need fortemporary cut tracksalso causes changes to mute solo gain and pan during cut preview play towork,,0,0,0,0,0,0,0,0,0
1766,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,fix cut preview,resolves: #1702 resolves: #1703 resolves: #1568 resolves: #1566  reimplement the  cut preview  feature (the  c  shortcut key  also ctrl+click on play button) less special-casely by using another subclass of playbackpolicy.  it means cut preview will also interact nicely with the time track and respond like other playback to changes of mute  solo  gain  and pan controls.  no more temporary tracks in the implementation.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1703,fix cut preview,"resolves: #1702resolves: #1703resolves: #1568resolves: #1566reimplement the ""cut preview"" feature (the ""c"" shortcut key also ctrl+click on play button) less special-casely by using another subclass of playbackpolicy  it means cut preview will also interact nicely with the time track and respond like otherplayback to changes of mute solo gain and pan controlsno more temporary tracks in the implementation<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,simplify cut preview implementation,,,1,0,cut preview reimplemented as another playbackpolicy eliminating special mention of it in playbackschedule eliminating need fortemporary cut tracksalso causes changes to mute solo gain and pan during cut preview play towork,,0,0,0,0,0,0,0,0,0
1766,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,fix cut preview,resolves: #1702 resolves: #1703 resolves: #1568 resolves: #1566  reimplement the  cut preview  feature (the  c  shortcut key  also ctrl+click on play button) less special-casely by using another subclass of playbackpolicy.  it means cut preview will also interact nicely with the time track and respond like other playback to changes of mute  solo  gain  and pan controls.  no more temporary tracks in the implementation.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1568,fix cut preview,"resolves: #1702resolves: #1703resolves: #1568resolves: #1566reimplement the ""cut preview"" feature (the ""c"" shortcut key also ctrl+click on play button) less special-casely by using another subclass of playbackpolicy  it means cut preview will also interact nicely with the time track and respond like otherplayback to changes of mute solo gain and pan controlsno more temporary tracks in the implementation<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,cut preview play interacts wrongly with time track,"**describe the bug**cut preview play interacts wrongly with time tracklogged originally on bugxilla as p3 2633 reproduce**steps to reproduce the behavior:1 empty project2 add a time track with two points near in time making a step up at 20s3 generate a 30s tone4 select from 10s to 20s5 cut preview play (""c"" key)6 observe: the part of playback after the cut does not rise in pitch as it should**expected behavior**cut preview play should interact correctltwith time track**screenshots**none**additional information (please complete the following information):** - os: all os - version: all audacity**additional context**none",,1,0,cut preview reimplemented as another playbackpolicy eliminating special mention of it in playbackschedule eliminating need fortemporary cut tracksalso causes changes to mute solo gain and pan during cut preview play towork,,0,0,0,0,0,0,0,0,0
1766,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,fix cut preview,resolves: #1702 resolves: #1703 resolves: #1568 resolves: #1566  reimplement the  cut preview  feature (the  c  shortcut key  also ctrl+click on play button) less special-casely by using another subclass of playbackpolicy.  it means cut preview will also interact nicely with the time track and respond like other playback to changes of mute  solo  gain  and pan controls.  no more temporary tracks in the implementation.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1566,fix cut preview,"resolves: #1702resolves: #1703resolves: #1568resolves: #1566reimplement the ""cut preview"" feature (the ""c"" shortcut key also ctrl+click on play button) less special-casely by using another subclass of playbackpolicy  it means cut preview will also interact nicely with the time track and respond like otherplayback to changes of mute solo gain and pan controlsno more temporary tracks in the implementation<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,with cut preview: pan gain mute solo and midi channel buttons (and velocity slider) dont work,"**describe the bug**with cut preview: pan gain mute solo and midi channel buttons (and velocity slider) dont worklogged originally on bugzilla as p3 2634 reproduce**steps to reproduce the behavior:1 create a project with wave and/or midi tracks2 optionally increase cut preview times in playback preferences to make the bug easier to demonstrate3 select a range of time4 ""c"" key for cut preview play5 change pan gain mute solo midi channel buttons or velocity slider during play6 observe: the expected changes in playback dont happen**expected behavior**pan gain mute solo and midi channel buttons should work with cut preview**screenshots**none**additional information (please complete the following information):** - os: all os - version: all audacity **additional context**none",,1,0,cut preview reimplemented as another playbackpolicy eliminating special mention of it in playbackschedule eliminating need fortemporary cut tracksalso causes changes to mute solo gain and pan during cut preview play towork,,0,0,0,0,0,0,0,0,0
1779,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,brush tool improvements,resolves: #1411  resolves: #1772 resolves: #1773 resolves: #1775 resolves: #1776 resolves: #1777 resolves: #1778  most of the recently requested changes to ux for the spectral brush dialog  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1411,brush tool improvements,"resolves: #1411 resolves: #1772resolves: #1773resolves: #1775resolves: #1776resolves: #1777resolves: #1778most of the recently requested changes to ux for the spectral brush dialog<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,clip-handles (affordances) make the time shift tool redundant,**describe the bug**the new clip-handles (affordances) make the time shift tool redundantit is much easier to use the clip-handles to reposition clips that to use the time shift tool which involves:a) changing to the time shift tool in the tools toolbarb) moving the clip(s)c) returning to the tools toolbar to revert to the previous tool - normally the select tool**to reproduce**steps to reproduce the behavior:1 use the clip-handles to reposition clip(s)2 observe that it works without changing the currently active tool in tools toolbar (default select tool)**expected behavior**removal of the time shift tool**screenshots**not applicable**additional information (please complete the following information):** - os: all - version audacity 303/310 - (if relevant) sound device [eg windows wasapi usb sound card]**additional context**it would be good if the tools toolbar could be removed altogether with alternative ways to effecta) envelopesb) draw repairsc) and certainly zoomingremoving the tools toolbar and its associated shortcuts would remove one of the frequently recurring bear-traps in audacity - whereby users accidentally press one of the shortcut function keys and then find themselves in a tool mode that they dont understand and not knowing how to return to the default (and most useful) selection toolsee:  in a mode - bear-traps,i know we call this affordances but ive always thought of this as the replace timeshift tool jobi wholeheartedly support this suggestion and i want to subscribe to the psampson newsletter! || before you do this make sure you understand all the existing behavior involving sync-lock and interactions with selection and so onfor instance is there a way to move all labels of one track together (as there is to move all clips)? || > before you do this make sure you understand all the existing behavior involving sync-lock and interactions with selection and so on> > for instance is there a way to move all labels of one track together (as there is to move all clips)?yes all labels in a track can be moved in sync simply by clicking in the gray space of a label track and dragging left or rightthe sync lock behavior appears to be be the same with the clip-handle drag bars and the time shift tool - but in both cases the behavior with sync-lock is a little janky and inconsistenttesting on w10 with latest 304/310 alpha  audacity-win-304-alpha-20210803+f90698c-64bitstart with a project like this with 3 clips and three corresponding labels and sync-lock turned on:( case 1**1) select the middle clip2) use time shift tool on the audio track3) observe the clip and its label move in sync**use case 2**1) select the middle clip2) use clip-handle drag bar on the audio track3) observe the clip and its label move in sync**use case 3**1) select the middle clip2) use shift modified time shift tool on the audio track3) observe all the audio clips move in sync - but their associated labels dont move**use case 4**1) select the middle clip2) use shift modified clip-handle drag bar on the audio track3) observe all the audio clips move in sync - but their associated labels dont move**use case 5**1) select the middle clip2) click in the gray space of the label track and drag left or right3) observe all the labels move in sync - but their associated audio clips dont movea)  use cases 1 and 2 are (i believe) expected and indeed good behaviorb) use cases 3 and four are decidedly liffy with sync-lock ignoredc) use case 5 is also  iffy with sync-lock ignoredbut comparing uc1/uc2 and uc3/uv4 indicates that the behavior is consistent with sync-lock for clip-hande drag bars compared with time shift tool - even if the sync lock is not always observed it is at least consistent between the two methodssync-lock has been long-known to be poorly (somewhat sketchily) designed - for a start the method of defining a sync-locked track group (aka sltg) by having a label track underneath is poor and weak ux - not obvious and certainly not discoverable**conclusion**so my summary conclusion is that the old time shift tool and the new clip-handle drag bars behave the same both with and without sync-lock || to move all clips and all labels in syc with the above test project**use case-6**1) use click&drag with the select tool to select all clips and all labels2) use time shift tool anywhere in the selection and drag left or right3) observe all clips and all labels move in sync**use case-7**1) use click&drag with the select tool to select all clips and all labels2) use the clip-handle drag bar (in any of the 3 clips) and drag left or right3) observe all clips and all labels move in sync**use case-8**1) use click&drag with the select tool to select all clips and all labels2) use the shift-modified clip-handle drag bar (in any of the 3 clips) and drag left or right3) observe all clips move in sync - but the labels dont moved) use cases 7 & 8 show again that behavior of clip-handle drag bars and time shit tool is consistente) use case 8 looks a bit iffy to me (as a user)  is this expected or desired behavior ? || see also github issue #1371 label tracks do not have affordances (clip-handles) #1371 ||,1,0,brush tool: drag with either alt or ctrl erases from selection,,0,0,0,0,0,0,0,0,0
1779,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,brush tool improvements,resolves: #1411  resolves: #1772 resolves: #1773 resolves: #1775 resolves: #1776 resolves: #1777 resolves: #1778  most of the recently requested changes to ux for the spectral brush dialog  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1772,brush tool improvements,"resolves: #1411 resolves: #1772resolves: #1773resolves: #1775resolves: #1776resolves: #1777resolves: #1778most of the recently requested changes to ux for the spectral brush dialog<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,spectral editing dialog should have a brush bitmap button mutually exclusive with the five tools toolbar buttons,,,1,0,brush tool: drag with either alt or ctrl erases from selection,,0,0,0,0,0,0,0,0,0
1779,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,brush tool improvements,resolves: #1411  resolves: #1772 resolves: #1773 resolves: #1775 resolves: #1776 resolves: #1777 resolves: #1778  most of the recently requested changes to ux for the spectral brush dialog  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1773,brush tool improvements,"resolves: #1411 resolves: #1772resolves: #1773resolves: #1775resolves: #1776resolves: #1777resolves: #1778most of the recently requested changes to ux for the spectral brush dialog<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,menu item to show/hide spectral editing panel,,,1,0,brush tool: drag with either alt or ctrl erases from selection,,0,0,0,0,0,0,0,0,0
1779,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,brush tool improvements,resolves: #1411  resolves: #1772 resolves: #1773 resolves: #1775 resolves: #1776 resolves: #1777 resolves: #1778  most of the recently requested changes to ux for the spectral brush dialog  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1775,brush tool improvements,"resolves: #1411 resolves: #1772resolves: #1773resolves: #1775resolves: #1776resolves: #1777resolves: #1778most of the recently requested changes to ux for the spectral brush dialog<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,show spectral edit panel whenever a track enters spectral or multi view hide when none do,,,1,0,brush tool: drag with either alt or ctrl erases from selection,,0,0,0,0,0,0,0,0,0
1779,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,brush tool improvements,resolves: #1411  resolves: #1772 resolves: #1773 resolves: #1775 resolves: #1776 resolves: #1777 resolves: #1778  most of the recently requested changes to ux for the spectral brush dialog  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1776,brush tool improvements,"resolves: #1411 resolves: #1772resolves: #1773resolves: #1775resolves: #1776resolves: #1777resolves: #1778most of the recently requested changes to ux for the spectral brush dialog<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,only one checkbox combining smart selection of fundamental + overtone selection,this was requested but im not sure i agree  improvements in the quality of the tool might make us change our mind about it,,1,0,brush tool: drag with either alt or ctrl erases from selection,,0,0,0,0,0,0,0,0,0
1779,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,brush tool improvements,resolves: #1411  resolves: #1772 resolves: #1773 resolves: #1775 resolves: #1776 resolves: #1777 resolves: #1778  most of the recently requested changes to ux for the spectral brush dialog  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1777,brush tool improvements,"resolves: #1411 resolves: #1772resolves: #1773resolves: #1775resolves: #1776resolves: #1777resolves: #1778most of the recently requested changes to ux for the spectral brush dialog<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,change behavior of modifiers of mouse drags with brush tool,-  click without modifiers erases the spectral selection starts new selection-  shift + drag adds to spectral selection-  ctrl command or alt + drag subtracts from spectral selection-  hover text for the brush bitmap button explains all of this,,1,0,brush tool: drag with either alt or ctrl erases from selection,,0,0,0,0,0,0,0,0,0
1793,0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,fix auto clip naming,resolves: #1651   also fixes wrong name assigned to a clip when recording to a new track.  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1651,fix auto clip naming,resolves: #1651 also fixes wrong name assigned to a clip when recording to a new track-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,generate silence creates a clip with no clip name (in the clip-handle),**describe the bug**generate silence creates a clip with no clip name (in the clip-handle)this is inconsistent with all the other generate commands**to reproduce**steps to reproduce the behavior:1 generate silence2 observe: clip-handle drag-bar affirdance shows no clip name**expected behavior**the clip of silence should be named**screenshots**if applicable add screenshots to help explain your problem**additional information (please complete the following information):** - os: windows 10 - but assume all - version audacity 310 alpha**additional context**consistencty in the gui is importantthis has a further deleterious impact on: generate silence at the beginning of a clip creates an inconsistent unnecessary split #1653,confirmed ok on w10 with audacity-win-310-alpha-20211006+660d167-64bit ||,1,0,fix wavetrack::paste()paste now check the origin of the track being pasted and use different clip name patterns,,0,0,0,0,0,0,0,0,0
1799,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,set the page_size for aup3 files using pragma,this change ensures that page size will be 64k even if system sqlite3 was used (mostly relevant for linux)  resolves: #1459  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1459,set the page_size for aup3 files using pragma,"this change ensures that page size will be 64k even if system sqlite3 was used (mostly relevant for linux)resolves: #1459<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,set the db page size using pragma not with compile time option,the db page size should be set when creating the database not as a compile-time option refs #1457,tasks required: 2-4 hrs ||,1,0,sets the page_size for aup3 files using pragmathis change ensures that page size will be 64k even if system sqlite3 was used (mostly relevant for linux),,0,0,0,0,0,0,0,0,0
1802,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,0,remove the requirement for the sqlite_enable_dbpage_vtab,resolves: #1460  this pr introduces a different approach to estimating the sampleblock size on disk. it does not account for the sqlite3 internal structures size so well  but the difference is relatively negligible.   we use this estimation to decide if we need to compact the database on disk  as we do not allow database vacuuming (for performance reasons?). the performance of the heuristic can be further improved  as  used_blocks / total_blocks  should work just fine. however  this would require more changes to the code.   projectfileio::gettotalusage()  and  projectfileio::getcurrentusage()  are also used in now disabled compaction dialog. however using  gettotalusage()  was probably not the idea anyway (because it never accounted for the project and autosave tables).  getcurrentusage()  still gives a very good estimate of how much disk space is used.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1460,remove the requirement for the sqlite_enable_dbpage_vtab,"resolves: #1460this pr introduces a different approach to estimating the sampleblock size on disk it does not account for the sqlite3 internal structures size so well but the difference is relatively negligible we use this estimation to decide if we need to compact the database on disk as we do not allow database vacuuming (for performance reasons?) the performance of the heuristic can be further improved as `used_blocks`/`total_blocks` should work just fine however this would require more changes to the code`projectfileio::gettotalusage()` and `projectfileio::getcurrentusage()` are also used in now disabled compaction dialog however using `gettotalusage()` was probably not the idea anyway (because it never accounted for the project and autosave tables) `getcurrentusage()` still gives a very good estimate of how much disk space is used<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,do not fail if `sqlite_enable_dbpage_vtab` is disabled,references #1457 audacity should gracefully check if the `sqlite_dbpage` table is present and use a different estimation method if it is not,tasks required: 4-6 hrs ||,1,0,"use a different approach to estimate the disk space usagenew a approach is a bit less precise but removes the requirement for the ""private"" sqlite3 table and allows audacity to be built against system sqlite3",,0,0,0,0,0,0,0,0,0
1808,0,0,1,0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,1,0,0,1,1,adjusting loop playback,resolves: #1704   start looping play  then adjust the bounds of the selection -- the looping play will respond to those changes!  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1704,adjusting loop playback,"resolves: #1704 start looping play then adjust the bounds of the selection -- the looping play will respond to those changes!<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,adjusting loop play,,,1,0,implement changing of loop playback bounds during play,,0,0,0,0,0,0,0,0,0
1816,0,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,extract lib theme,resolves: #1157   extract a library for the theme system  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1157,extract lib theme,"resolves: #1157 extract a library for the theme system<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,extract lib-theme,-  #1160 -  #1157,,1,0,new library for theme,,0,0,0,0,0,0,0,0,0
1832,0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,new clip naming scheme,resolves: #1698  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1698,new clip naming scheme,resolves: #1698-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,new logic for automatic clip naming,currently splitting a clip adds numbers to the end of the track name after discussion with @jounih this turned out to be more confusing than helpful so we should remove it again the desired behavior instead is as thus:* when a new recording is made it should be named `<trackname> #n` with n being the next number available (same as it works currently)* when a clip is copied and pasted it should be named `<previous clip name>n` with n being the number of time its been copied so far on this track * when part of a clip (ie a range of samples within the clip) is copied and pasted it should be following the same rules as a copypaste of a full clip ie `<previous clip name>n` it should not use the time range in the clip title * when a clip is split all its child parts should keep the name of its parent clip they should not use the 1 2 1 2 2 system they currently use (#1692)* ~~when a copy of a copy is made it should use dot notation ie `<clip name> - copy 11` it should not append another `- copy 1` behind the current `- copy 1`~~,,1,0,new clip naming scheme,,0,0,0,0,0,0,0,0,0
1836,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,change default spectrogram settings,resolves: #1825  change default settings for scale type to mel  top of scale to 20000 hz  window size to 1024  and zero padding to 2.  also cleaning up a lot of preference usage in spectrogram settings to avoid repetition of literals for paths and defaults.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1825,change default spectrogram settings,"resolves: #1825change default settings for scale type to mel top of scale to 20000 hz window size to 1024 and zero padding to 2also cleaning up a lot of preference usage in spectrogram settings to avoid repetition of literals for paths and defaults<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,create new default settings for the spectrogram,these are the settings that i landed on which i feel achieve the following:1 it opened the range up so users can see overtones that occur within the range of hearing2 it runs much more smoothly3 i found it easier to spot distinct sounds more clearly which helped a little with the brush tool 3 since the resolution is higher it is much more beautiful to look at which is a bonus( people have balked at using bark because it is apparently obscure i liked it mainly because it left more space in the higher frequencies for users to brush on however there are a few other settings which (for this purpose) are nearly the same open to suggestion :),"note that if this goes ahead then many images in the manual will once again need updating @lwinterberg  || >  i liked it mainly because it left more space in the higher frequencies for users to brush on however there are a few other settings which (for this purpose) are nearly the same open to suggestion :)""logarithmic"" also provides more space in the higher frequencies is  one of the most common scaling methods provides equal spaced frequency bands and is consistent with the default [plot spectrum]( display || > ""logarithmic"" also provides more space in the higher frequenciesi preferred bark to logarithmic because it had more space in the higher frequencies similar to erbi then tested on audition which also doesnt default to full logarithmic for what i imagine are the same reasons: to provide a range that will most likely allow users to isolate frequencies without having to fiddle with settings first || i assume that you are aware that a non-linear spectrogram scale causes the new ""spectral brush"" tool to resize vertically according to which part of the spectrum is being drawn onpersonally i think that looks weird![first track003]( || yep its a trade off ultimately i think we need the brush itself needs to correct for this it was very much built without interaction in mind i still think it is a beta tool as isthis isnt a useful comment for 31 but i think we need to expose those frequency range settings so theyre more discoverable i also think the spectrogram option is also too hidden (im aware you can right click on the frequency range to the left) || i do not like arbitrary changes in ""gain"" ""range"" and ""high boost"" away from the defaults that users may be accumstomed to || izotope uses mel as default (scan for ""default"" on this page):  || > i do not like arbitrary changes in ""gain"" ""range"" and ""high boost"" away from the defaults that users may be accustomed toi actually did not change anything in colors ive mentioned over the last few days that my defaults are for some reason very different to everyone else despite resetting them i figure this might be a hangover from the time i tested the 3d spectrogram build ages agoregardless i dont propose to alter the color defaults so ignore that part || > izotope uses mel as default (scan for ""default"" on this page):  like a good choice to me || > > izotope uses mel as default (scan for ""default"" on this page):  > seems like a good choice to meboth those scales came from psychoacoustic research and mel is more modern || > these are the settings that i landed on which i feel achieve the following:> > 1 it opened the range up so users can see overtones that occur within the range of hearing> 2 it runs much more smoothlymore smoothly than what?  than previous defaults?  no  the old defaults were window size 1024 and zero padding size 1your choices of 2048 and 2 imply more computation than those defaults  that implies an fft window size 4x as large as defaults  but the growth of computation time there is only n * log nbut i have noticed you were accustomed to using the non-default reassignment algorithm  so it will run smoother than what you were using    reassignment multiplies computation time by at least 3x  reassignment does some math magic to correct ""spectral leakage"" and can make the overtones draw as very narrow bright curves  but it is expensiveyou specify zero padding of 2 but i dont know how important that is to you  you mentioned to me that you were not clear on what zero padding does  to understand it experiment perhaps with smaller window sizes and varying zero padding  small window size means less frequency resolution in the fft and zero padding does not change that (does not get more information out of the signal) but does affect the drawing so it is visually smoothed out less blocky || i have not touched padding either again im at the mercy of the defaults that i have on my machineto be clear: the only settings i willingly altered were all the options in scale and everything in algorithm apart from zero padding factor nothing elsewhen i say that the result is smoother and less laggy - it is! and yes im aware why this is true :) || > i have not touched padding either again im at the mercy of the defaults that i have on my machine> > to be clear: the only settings i willingly altered were all the options in scale and everything in algorithm apart from zero padding factor nothing else> > when i say that the result is smoother and less laggy - it is! and yes im aware why this is true :)zero padding was defaulted to 1 before so for those (as with the numbers in color settings) i think you changed them at some time but forgot about itthere is a pr already making padding 2 || we should meet for a longer discussion of what all the spectrogram settings doi noticed you formed a liking for what reassignment does to appearanceif you would rather have other default choices but for the delays in redrawing then this reminds me of another thing i have wanted to do with spectrograms: parallelize the drawing more because it is an easily parellelizable problem  yet the ancient code doing it is still single threaded || ",1,0,change spectrogram defaults maximum of scale from 8000 to 20000scale from linear to melfft size from 1024 to 2048zero padding from 1 to 2,,0,0,0,0,0,0,0,0,0
1840,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,fix event handling in wavetrackaffordancecontrol,resolves: #1759   -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1759,fix event handling in wavetrackaffordancecontrol,resolves: #1759 -  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,clip edit cursor do not disappear (with multiple tracks),steps to reproduce: * create two or more tracks * add a clip to the first one (on top) * start edit clip name in direct mode (double click on clip handle make sure option use dialog for the name of a new label is disabled)  * click at any empty space on same track or another track observe: clip name edit cursor is still visible expected behavior: edit cursor should be dismissed after time selection changed/activated,changed to p2 because ive found that this issue can block you from editing it could arguably be a p1 || works well only with the selection tool and only inside the track panelin other cases the problem still remainsi talked with @vsverchinsky and we decided to add another issue because this one was partly  and ,1,0,fix event handling in wavetrackaffordancecontrolthe event was considered handled after the first handler was calledfix allows other subscribers to handle event too,,0,0,0,0,0,0,0,0,0
1841,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,adds  what s new  link to the splash dialog,resolves: #1813  the  what s new  section will be shown only if  show_whats_new_section  is passed.  the update dialog is populated dynamically from the  latest.xml  contents.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1813,"adds ""whats new"" link to the splash dialog","resolves: #1813the ""whats new"" section will be shown only if `show_whats_new_section` is passedthe update dialog is populated dynamically from the `latestxml` contents<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior","should you resize the splash window taller now?<img width""1052"" alt""screen shot 2021-10-06 at 9 15 48 am"" src"" || > should you resize the splash window taller now?i think not:  || > > should you resize the splash window taller now?> > i think not:  > should you resize the splash window taller now?> > i think not:  why was my screenshot unlike yours?  i still see ""get official released"" etc above the image""get official release"" is shown when build_level is not 2 so it is not the case for real-world users || > > > should you resize the splash window taller now?> > > > > > i think not:  > > > should you resize the splash window taller now?> > > > > > i think not:  > > why was my screenshot unlike yours?  i still see ""get official released"" etc above the image> > ""get official release"" is shown when build_level is not 2 so it is not the case for real-world usersyou edited my comment?  well i understand now || > > > > should you resize the splash window taller now?> > > > > > > > > i think not:  > > > > > > > should you resize the splash window taller now?> > > > > > > > > i think not:  > > > > > > why was my screenshot unlike yours?  i still see ""get official released"" etc above the image> > > > > > ""get official release"" is shown when build_level is not 2 so it is not the case for real-world users> > you edited my comment? well i understand nowsorry got confused by ui :(( || you may rebase and merge after addressing leos question if that is needed (i cant judge that) || i will merge now i think the image and the link will change anyway || ",add link to the release video from the audacity welcome window and update prompt,,placeholder is added ||,1,0,"adds ""whats new"" link to the splash dialog",,0,0,0,0,0,0,0,0,0
1843,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,multi tool shortcut is again f6 not f5,resolves: #1803   make the shortcut key for multi-tool again f6  as in 3.0.3 and  forever  before that.  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1803,multi tool shortcut is again f6 not f5,"resolves: #1803 make the shortcut key for multi-tool again f6 as in 303 and ""forever"" before that-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,shortcut for multi-tool has changed to be f5,**describe the bug**the shortcut for multi-tool has changed to be f5 this is a regression as in all audacity versions 12x - 305 the shortcut for multi-tool has been f6this will be greatly annoying for folk who have learned this and burned it into their muscle memory over the years**to reproduce**steps to reproduce the behavior:1  launch 310 alpha  audacity-win-310-alpha-20211001+27a591d-64bit2 hover your cursor over the multi-tool3 observe: hovertext indicates that f5 is the shortcut4 press f65 observe: nothing happens6 press f57 observe: audacity switches to multi-tool mode**expected behavior**a clear and concise description of what you expected to happen**screenshots**f6 to be the shortcut for multi-tool**additional information (please complete the following information):** - os: windows 10 - but assume all - version: audacity 301 alpha  audacity-win-310-alpha-20211001+27a591d-64bit**additional context**probably caused by the planned removal of the time-shift tool - see issue #1411 @tantacrul :  a good case could be made for the removal of the tools toolbar altogether - and with it the removal of the tools modesit would also remove a bear-trap that many folk fall in to when they inadvertently press one f the buttons f2-f6 and switch tool mode - and then have no idea how to get back to simple select tool mode - we have seen this countless times on the forum over the years,@lwinterberg leo if this remains un in this state then some pages in the manual will need to be changed || @tantacrul what do you think? || no good answer here however my feeling is that @petersampsonaudacity is right it should remain f6sacrificing logic for muscle memory || confirmed ok on w10 with audacity-win-310-alpha-20211006+917d8a1-64bit ||,1,0,multi tool shortcut is again f6 not f5,,0,0,0,0,0,0,0,0,0
1848,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,right channel delete key behavior,resolves: #1820 resolves: #1847  this would fix the failure of delete to work in right channel for the brush tool  if that is enabled in the build.  it also fixes the non-functionality of delete -- and all other keystrokes -- for editing the title of a clip in a right channel of a stereo track with nonaligned clips.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1820,right channel delete key behavior,"resolves: #1820resolves: #1847this would fix the failure of delete to work in right channel for the brush tool if that is enabled in the buildit also fixes the non-functionality of delete -- and all other keystrokes -- for editing the title of a clip in a right channel of a stereo track with nonaligned clips<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,delete key for clip name or spectral edits doesnt work in right channels,"**describe the bug**audio in the right channel can be selected using the spectral brush but not removedupdate from @paul-licameli : there are also problems in case of a stereo track with non-aligned clips and you try to edit the name of the clip in the right channel  one pr will likely fix both problems**to reproduce**steps to reproduce the behavior:1 have a stereo track2 switch to spectral mode3 draw into the right channel4 press backspace/delete to remove the selected audio**expected behavior**the audio is removed**actual behavior**a ""no audio selected"" error is spawned**screenshots**( information (please complete the following information):** - os: windows 11 - version audacity 310-alpha-20211004",when audio is selected using the selection tool before switching into the spectral brush mode it uses that selection instead of the brush selection ||,1,0,offer key events to cells of all channels of a wavetrack,,0,0,0,0,0,0,0,0,0
1848,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,right channel delete key behavior,resolves: #1820 resolves: #1847  this would fix the failure of delete to work in right channel for the brush tool  if that is enabled in the build.  it also fixes the non-functionality of delete -- and all other keystrokes -- for editing the title of a clip in a right channel of a stereo track with nonaligned clips.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1847,right channel delete key behavior,"resolves: #1820resolves: #1847this would fix the failure of delete to work in right channel for the brush tool if that is enabled in the buildit also fixes the non-functionality of delete -- and all other keystrokes -- for editing the title of a clip in a right channel of a stereo track with nonaligned clips<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,clip name editing doesnt work at all for right channels,,when i try editing the right channel of a rejoined stereo track the stereo tack is reduced to a mono track and the audio is replaced with a short period of silence1 get a stereo track2 split the stereo track3 rejoin the stereo track4 click in the right channel (lower) clip-name (the duplicate created by the join)5 click the backspace6 observe:   the stereo tack is reduced to a mono track and the audio is replaced with a short period of silencethis makes this a p1 bug || @petersampsonaudacity what is the version of audacity? || > @petersampsonaudacity what is the version of audacity?latest master build:  audacity-win-310-alpha-20211006+917d8a1-64bit || this is not the p1 actually because a user is able to change clip names by splitting a track obviously this is the underdeveloped thing but not the p1 i believe ) || i made it p1 because it loses the users valuable audio datasure there is the undo command and its ctrl+z shortcut - but not all users are acquainted with that as we well know from past postings on the forum ||  strongly agree that behaviour is junky and undesirable but i cant say it is a showstopper )  but surely it is not appropriate for release in 31 || make it p negative one if you like the fix is already written and in review!#1848  || well i think peter can turn that p to negative )) i rather vote for bigger numbers )) || my pr number is revolutionary || all looks good with this in @paul-licameli s branch build audacity-win-310-alpha-20211006+0ed058c-64bit ||  but it seems like there is no way to edit the right-channel clip with a keyboardill add a new issue about that ||,1,0,offer key events to cells of all channels of a wavetrack,,0,0,0,0,0,0,0,0,0
1854,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,issue #1838: screen readers should read labels when tabbing,resolves:   now that when a label track is the focus tab and shift+tab only  select  a label  rather than opening it for editing in a custom text box which is not accessible for screen readers  it s useful for the name of the label to be read.  straightforward fix. also added i18n-hint in transportmenus.cpp where there is the same message for screen readers.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1838,issue #1838: screen readers should read labels when tabbing,"resolves:  that when a label track is the focus tab and shift+tab only ""select"" a label rather than opening it for editing in a custom text box which is not accessible for screen readers its useful for the name of the label to be readstraightforward fixalso added i18n-hint in transportmenuscpp where there is the same message for screen readers<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,screen readers should read the names of labels when tabbing in a label track,"now that when a label track is the focus tab and shift+tab only ""select"" a label rather than opening it for editing in a custom text box which is not accessible for screen readers its useful for the name of the label to be readpull request arriving shortly",,1,0,"issue #1838: screen readers should read labels when tabbingnow that when a label track is the focus tab and shift+tab only ""select"" a label rather than opening it for editing in a custom text box which is not accessible for screen readers its useful for the name of the label to be readstraightforward fixalso added i18n-hint in transportmenuscpp where there is the same message for screen readers",,0,0,0,0,0,0,0,0,0
1857,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,issue 1710 compromise,resolves: #1710  this does not resolve all as suggested in the issue description  but may offer satisfactory workarounds.  for label track behavior:  the esc key already removes the insertion cursor if there is one.  but now  if there no insertion cursor but there is a label navigated to by tab  then esc clears the navigation state.  this allows esc and then return to change the selected state of the label track.  for wave track behavior:  the return (or number pad enter) key behavior will remain hard-coded.  it is also hard-coded for label track text editing  about which there isn t a complaint.   note that if a clip is not selected  then pressing enter does nothing. i assume that s just a bug in the implementation.   this is fixed.  the return key will be intercepted for editing only in case the selection coincides with the extent of a clip.  with this change  you can change the selection such as with j or left arrow in default key bindings so it becomes a point.  then return toggles the selected state of the wave track.  you may be unsatisfied that restoring the time selection to what it was before requires further tab key presses.  maybe further improvement is possible  and you  @davidbailes   might suggest another commit to accomplish that.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1710,issue 1710 compromise,"resolves: #1710this does not resolve all as suggested in the issue description but may offer satisfactory workaroundsfor label track behavior:the esc key already removes the insertion cursor if there is one  but now if there no insertion cursor but there is a label navigated to by tab then esc clears the navigation state  this allows esc and then return to change the selected state of the label trackfor wave track behavior:the return (or number pad enter) key behavior will remain hard-coded  it is also hard-coded for label track text editing about which there isnt a complaint""note that if a clip is not selected then pressing enter does nothing i assume thats just a bug in the implementation""  this is   the return key will be intercepted for editing only in case the selection coincides with the extent of a clipwith this change you can change the selection such as with j or left arrow in default key bindings so it becomes a point  then return toggles the selected state of the wave trackyou may be unsatisfied that restoring the time selection to what it was before requires further tab key presses  maybe further improvement is possible and you @davidbailes  might suggest another commit to accomplish that<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior","> resolves: #1710> > this does not resolve all as suggested in the issue description but may offer satisfactory workaroundsthis does not offer satisfactory workaroundsi am at a loss as to how this issue has been handled this was the initial design: you can see i raised the issue of enter being a duplicate on 9 jul and there was a reply from @jounih:""@davidbailes makes sense to have customisable commands for selecting clips and editing names rather than hardcode these shortcuts @vsverchinsky can you do this please?""and here we are on 8 oct with a duplicate shortcuthave the designers said  that there has be a duplicate shortcut?why cant this be  properly with a command and a user assignable shortcut with a default which is not a duplicate like its done in the rest of audacity?i really dont understand what is going on here || shortcuts are generally context-sensitive i agree that ideally this should be implemented as a configurable shortcut workaround paul proposes solves the problem of context switching and it is (almost see below) satisfactory in case we wont be able to implement the configurable shortcut in time for 31however after testing i found out that it is not possible to deselect a clip with an esc key and i think this should be fixed to @paul-licameli @penikov (cc @anitabats) || > shortcuts are generally context-sensitivesure shortcuts can be context sensitive but this is not a good case for that the user would not expect to have to deselect a clip in order to change the selection of the track> i agree that ideally this should be implemented as a configurable shortcut workaround paul proposes solves the problem of > context switching and it is (almost see below) satisfactoryit is not almost satisfactory> in case we wont be able to implement the configurable shortcut in time for 31is getting the keyboard user interface right less important than getting the mouse interface right?isnt accessibility a high priority for this project? @tantacrul what are your views on this? || i think we can solve this issue at the spot with another esc push lets say if the clip name edit mode is on the first esc turns off this mode another one esc removes a clip/track selectionif there is no clip name editing the esc button removes the selection only || >the user would not expect to have to deselect a clipi dont think that track selection toggling with `enter` is expected by most of the users anyway the current track selection behavior is really confusing as it is and there are issues there already for example shift+arrows behaves differently depending on the track count:  agree that there are users that are familiar with this behaviour and may rely on it and using enter for renaming is familiar only to macos users so probably there should be a better default shortcut for renaming rather than the enter key given that f2 is already in the global scope i would say ctrl-f2>isnt accessibility a high priority for this project?it is a top priority indeed but there is no commitment that we will never change the behavior of the application this includes the potential changes to the selection behavior otherwise there is no point in development  || and in any case i believe esc should remove the selection from the clip @paul-licameli @tantacrul @vsverchinsky  || > > the user would not expect to have to deselect a clip> > i dont think that track selection toggling with `enter` is expected by most of the users anyway the current track selection behavior is really confusing as it is and there are issues there already for example shift+arrows behaves differently depending on the track count:  > i agree that there are users that are familiar with this behaviour and may rely on it and using enter for renaming is familiar only to macos users so probably there should be a better default shortcut for renaming rather than the enter key given that f2 is already in the global scope i would say ctrl-f2ctrl+f2 would be fine (i suggested it in september:  > > isnt accessibility a high priority for this project?> > it is a top priority indeedthats reassuring to hear> but there is no commitment that we will never change the behavior of the application this includes the potential changes to> the selection behavior otherwise there is no point in developmenti dont have a problem with the behaviour of the application being changed i dont have a problem with the selection behaviour being changed i am aware that the behaviour of the shift+arrows is rubbish - it has been discussed in the past but unfortunately there was never agreement as to what it should be changed tomy problem is with having this duplicate use the the enter key which makes it harder for keyboard users to use the program || > i dont think that track selection toggling with `enter` is expected by most of the users anywayim pretty sure that it is very much expected by many millions of current audacity users there are also countless references to using enter to toggle track selection in audacity documentation and on the forumexample:to select tracks 1 3 5 7 1 click on track 12 down cursor twice then enter3 repeat step 2 as necessaryit can be a one handed operation and second nature to millions of existing usersalternatives such as esc are less convenient (and esc to select a track is counterintuitive)> i agree that there are users that are familiar with this behaviour and may rely on itabsolutely and thats a vast number of users considering that this feature has been present for 20 years || >esc to select a track is counterintuitiveesc ""unrolls"" selection stack it is not used for selection per se || thanks @davidbailes: this was very useful for me to understand our accessibility a little better we just discussed a stopgap solution that will 1: not mess with existing experience with the enter key & 2: will provide a for now key binding for renaming clipsultimately this will be solved when we move to the next step of our work on altering clip behaviour that will involve a more distinct selection state for clips that is different to selecting wave data more to come about this will share designs when they are ready for your feedback || the notion of selectedness (or focus) of a clip distinct from a time selection coindident with the clip boundaries needs to become a real thing in the code but it needs thought and work and no short fix is going to do it nowi have raised the idea that the set of keystroke bindings should not be a single global one as now but might more usefully by contextual  that is return might be customized for one thing in general (changing track selection) but a different set of customizations could apply and override the meaning of return when a clip or label or other thing is focused (starting the editing of a name)thats a nice idea that has occurred to me before still worth considering but it might take a lot of elaboration to make it work both in restructuring our commandmanager and in making a convenient way to customize the keystrokes in preferences  and it presupposes that the notion of clip focus is properly implemented first || this pull request was approved and merged  it has been judged insufficient for the issue  but i ask again whether anyone thinks it contained anything wrong that should be reverted  no one has said so || > we just discussed a stopgap solution that will 1: not mess with existingexperience with the enter keythanks @@tantacrul < if that behaviour hadremained in the release i would have probably ended up recommending thatusers of screen readers should avoid  using version 310on fri 8 oct 2021 at 14:44 tantacrul ***@******> wrote:> thanks @davidbailes < this was very> useful for me to understand our accessibility a little better we just> discussed a stopgap solution that will 1: not mess with existing experience> with the enter key & 2: will provide a for now key binding>> ultimately this will be solved when we move to the next step of our work> on altering clip behaviour that will involve a more distinct selection> state for clips that is different to selecting wave data more to come> about this will share designs when ready for feedback>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or unsubscribe> < > triage notifications on the go with github mobile for ios> < or android> < || ",the use of the shortcut enter for renaming introduces duplicate shortcuts,**describe the bug**the shortcut enter has been hardcoded into audacity for renaming labels and clips it has precedence over any command which have been assigned that shortcut by default enter is assigned to the command to toggle the selectedness of the focus track but the user could have assigned it to any command **to reproduce**assuming default shortcuts either full or standardsteps to reproduce the behavior with an audio track:1 create an audio track with some content2 select a clip3 while the clip is selected the user can no longer use the shortcut enter for toggling the selectedness of of the track pressing enter opens the name of the clip for editingnote that if a clip is not selected then pressing enter does nothing i assume thats just a bug in the implementationsteps to reproduce the behavior with a label track:1 create a label track containing some labels2 select a label3 while the label is selected the user can no longer use the shortcut enter for toggling the selectedness of the tracknote a label can remain selected even if the cursor/selection has been changed since the label was selected**expected behavior**when a track is the focus the user should always be able to execute the command to which enter has been assigned**additional information (please complete the following information):**tested on windows 10, was not a satisfactory fix || you do not say that there is anything wrong in the pull request that has been merged?  new esc key behavior for label tracks is acceptable?  and a real bug was  so that return with focused wave track will start editing names only when there is a very specific selectionif the behavior that would satisfy you would require some other key than return to be the default for the new behavior of editing the clip name -- then im not sure our designers would like itif there must be two different keys maybe enter to change selection must changegiven the time contstraints for the coming release and other higher priorities i am resisting the late implementation complications implied by this  sorry its the compromise i offer || > then im not sure our designers would like iti think jouni was open to a different shortcut >new esc key behavior for label tracks is acceptable? the problem is that this behavior is not implemented for clips so it is only a half fix || > > then im not sure our designers would like it> > i think jouni was open to a different shortcut> > > new esc key behavior for label tracks is acceptable?> > the problem is that this behavior is not implemented for clips so it is only a half fixbut as i explained in the case of a clip other keystrokes can do it instead like left arrow  but true the selection must change ||,1,0,esc key with focused label track no edit cursor: resets tab position,,0,0,0,0,0,0,0,0,0
1864,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,issue #1863: add names of clips to messages for screen readers,resolves:   now that there are clip names  they should be added to messages sent to screen readers. this commit adds the clip names to the messages sent by various existing clip commands.   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1863,issue #1863: add names of clips to messages for screen readers,"resolves:  that there are clip names they should be added to messages sent to screen readersthis commit adds the clip names to the messages sent by various existing clip commands<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,add names of clips to messages for screen readers sent by various clip commands,now that there are clip names they should be added to messages sent to screen readers,is it ok when the narrator reads the clip name when you focused on the clip with the tab key but reads nothing when you directly select the clip with a mouse via a clip handle? || i think that at least at the moment that its ok if narrator doesnt read the name of the clip when the clip is selected using the mousein theory this may be of use for those using a screen magnifier and a screen reader but in practice they are likely to use keyboard shortcuts rather than the mouse in a case like this ||,1,0,issue #1863: add names of clips to messages for screen readersadd names of clips to messages for screen readers sent by various existing clip commands,,0,0,0,0,0,0,0,0,0
1865,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,fix text edit shortcuts,resolves: #1833  also  select all  command is available when label is edited  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1833,fix text edit shortcuts,"resolves: #1833also ""select all"" command is available when label is edited-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",done reviewing || maybe the generality is okay for ctrl+a and ctrl+c which do not need to push new undo items  but i have shown definite problems in case of paste  are there other problems to demonstrate with cut too?  maybe i didnt experiment enough to decide that || some experiments with ctrl+x when text is selected in a label track box will easily show that proper undo/redo handling was already an omission even in 303 and earlier  was paste already badly handled too? || actually dopastetext() used to handle the case of insertion of text at the edit cursor of a label always correctly pushing the undo stack  but this pr causes a definite regression of that behavior preempting dopastetext() || > actually dopastetext() used to handle the case of insertion of text at the edit cursor of a label always correctly pushing the undo stack but this pr causes a definite regression of that behavior preempting dopastetext()yet another thing i overlooked but the fix seems to be quite simple: move project history modification code to `labeltrackview::pastetext` and remove it from `onpastenewlabel` `labeltrackview::oncontextmenu` (though history item text will change) and `dopastetext` becomes unneeded so it can be removed also ive noticed that there is some gtk-specific code that does not modify undo history as well```if (evtmiddledown()) {         // paste text making a new label if none is selected         wxtheclipboard->useprimaryselection(true)         viewpasteselectedtext(project newselt0() newselt1())         wxtheclipboard->useprimaryselection(false)      }```and it will be  too if the history modification code is moved to `labeltrackview::pastetext` also `labeltrackview::cutselectedtext` may be fixed same waydo you think it would be better now to avoid changing existing code for labels and add some workarounds to handle text shortcuts in wave track? ||,[clip renaming] support ctrl+a/c/x/v,**describe the bug**there is no ability to make whole clip name selected via ctrl + a **to reproduce**steps to reproduce the behaviour:1 add a clip to the track2 double-click to the clip name (the clip name turns to be able to editing)3 press ctrl+a**expected behaviour**the whole clip name string is able to select via ctrl + a or via the double-click**screenshots**on the video im trying to select the whole string by double-clicking or via ctrl+a information (please complete the following information):** - os: windows 10 - version: audacity 310-alpha-20211011,,1,0,text edit shortcuts available when editing clip name,,0,0,0,0,0,0,0,0,0
1871,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,issue #1870: feedback for screen readers when tabbing to clips,resolves:   when a user presses tab or shift+tab to select the next/previous clip  a message is sent to any screen reader.   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1870,issue #1870: feedback for screen readers when tabbing to clips,"resolves:  a user presses tab or shift+tab to select the next/previous clip a message is sent to any screen reader<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,tabbing to clips in an audio track should give feedback for users of screen readers,the existing commands for selecting clips moving to clip boundaries etc provide feedback for users of screen readerswhen using tab or shift tab to move to the next/previous clip there should be similar messages for users of screen readers,,1,0,issue #1870: feedback for screen readers when tabbing to clipswhen a user presses tab or shift+tab to select the next/previous clip a message is sent to any screen reader,,0,0,0,0,0,0,0,0,0
1872,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,exit editing of clip a name and redraw when a trackpanel loses focus,resolves: #1858  exit clip name editing when a mouse click causes the trackpanel to lose focus.  note that this implementation commits any unfinished text edit with a undo history item -- it doesn t cancel it as if by the escape key.  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1858,exit editing of clip a name and redraw when a trackpanel loses focus,resolves: #1858exit clip name editing when a mouse click causes the trackpanel to lose focusnote that this implementation commits any unfinished text edit with a undo history item -- it doesnt cancel it as if by the escape key-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,clip names the cursor editing mode doesnt off with a single click,**describe the bug**the cursor editing mode doesnt off with a single click on toolbars or scrollbars**to reproduce**steps to reproduce:1 create two or more tracks2 add a clip to the first one (on top)3 start edit clip name in direct mode (double click on clip handle make sure option use dialog for the name of a new label is disabled4 click at any empty space on the same track or another track**actual behaviour:**observe: clip name edit cursor is still visible**expected behaviour**the edit cursor should be dismissed after time selection changed/activated**screenshots**these red rectangles point to the areas where clicking doesnt off the clip name editing mode![изображение](https://user-imagesentcom/25851359/136423104-8a9b3fe0-df2f-43a0-b968-8d88594707d3png),i’ll take this task  || there is another issue with instruments when you work with the selection tool all goes well but if you work with for instance the envelope tool you cant off the editing mode with a clickso the issue is quite complicated i think || i think it just requires response to wxwidgets events that change the focused window or control || @paul-licameli is this ok when the bug remains if a user clicking on the red rectangle areas?![изображение]( || that is my fault i didnt the final step in the issue abovethe difference is just in the last step make a click in the toolbars instead of the empty area on the track ||,1,0,exit editing of clip name and redraw when trackpanel loses focus,,0,0,0,0,0,0,0,0,0
1874,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,fix clip name editing,resolves: #1835 resolves: #1834   -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1835,fix clip name editing,resolves: #1835resolves: #1834 -  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,tested on w10 with audacity_windows_64bit_1321978882_0f475f9  - branch build by @vsverchinsky this fix by vitaly looks good - the clip name is highlighted (for editing) when you double-click on the clip ||,[clip renaming] while renaming a clip clicking on a clip handle of a different doesnt exit clip-renaming mode you instead need to click into the waveform or empty space,,,1,0,makes in textedithelper all text selected by default,,0,0,0,0,0,0,0,0,0
1874,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,fix clip name editing,resolves: #1835 resolves: #1834   -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1834,fix clip name editing,resolves: #1835resolves: #1834 -  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,tested on w10 with audacity_windows_64bit_1321978882_0f475f9  - branch build by @vsverchinsky this fix by vitaly looks good - the clip name is highlighted (for editing) when you double-click on the clip ||,[clip renaming] double-clicking to rename a track should automatically mark the entire clip name,,"@crsib i think you mean ""  to rename a **clip** ""  -  or am i wrongif it is clip you mean then i agree with you - as this would then be consistent with what we do for label editing - and indeed the track name editing from the dropdown menu from the tcp || at the first double-click it works well but next double-clicks do nothing so this task is done ill add a new bug: || ",1,0,makes in textedithelper all text selected by default,,0,0,0,0,0,0,0,0,0
1883,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,avoid drawing text outside the clipping rectangle if possible,resolves: #1814  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1814,avoid drawing text outside the clipping rectangle if possible,resolves: #1814-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,clip-names are not shown when left edge of clip is not visible,"**describe the bug**clip-names are not shown when left edge of clip is not visible**to reproduce**steps to reproduce the behavior:1 generate a 30 second chirp2 observe clip-name is ""audio track""3 split the clip at 15 seconds (ctrl+i)4 observe: clip-names ""audio track 1"" and ""audio track 2""5 zoom in 1x at 15 secs6 observe the left hand clip ""audio track 1"" does not have its name displayed7 move cursor to 25 secs and zoom in 1x8 observe no clip-names at all (the zoomed clip is ""audio track 2""**expected behavior**names of clips to be visible when any part of a clip is on screen - provided the length of the clip is sufficient for the display in which case a right-truncated clip-name should be displayed**screenshots**1) step 6( step 8![image]( information (please complete the following information):** - os: windows 10 - but assume all os - version: audacity 310 - (if relevant) sound device [eg windows wasapi usb sound card]**additional context**logging this ""design issue"" as it is a ux issue @tantacrul and @jounih it is (would be that is) extremely useful for the user to see the actual name of the clip(s) they can see on-screenim pretty confident that if this doesnt get addressed for 301 with the introduction of clip-handle drag-bar affordances then you are likely to see complaints from users about this on the forum and github",i agree this is a desirable refinement it would be great for the names to always show if a clip is visible || and theres an equivalent issue when the language is rtl (when only the left hand part of a clip is visible) || > i agree this is a desirable refinement it would be great for the names to always show if a clip is visiblei would like to take this task and work on the issue || @augustya0new thank you for your interest! so this task is already part of the current sprint and assigned to @vsverchinsky so the expectation is that its  within a week or two so we can get it included in the upcoming release i think itd be better if you chose something thats not as time-critical as this feature - maybe some of these?   || thanks for reaching out to mei am really looking to contribute to the world of open source it hashelped me a lot improving my programming skills as well as helping meimpact thousands of usersim looking forward to working with youon fri oct 8 2021 5:36 pm lwinterberg ***@******> wrote:> @augustya0new < thank you for your> interest! so this task is already part of the current sprint and assigned> to @vsverchinsky < so the expectation is> that its fixed within a week or two so we can get it included in the> upcoming release i think itd be better if you chose something thats not> as time-critical as this feature - maybe some of these?>  —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or unsubscribe> < > triage notifications on the go with github mobile for ios> < or android> < || @augustya0new you too :) || can you provide me with some resources thatll help me contribute to issues(audacity) and help me learn about ny fileson fri oct 8 2021 7:19 pm tantacrul ***@******> wrote:> @augustya0new < you too :)>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or unsubscribe> < > triage notifications on the go with github mobile for ios> < or android> < || you may want to ask in the dev discord:  nyquist info can be found here:  || tested on w10 with audacity-win-310-alpha-20211012+0cf12fb-64biti confirm that this now works fine - whenever a partial clip is on-screen the clip-name is displayed ||,1,0,avoid drawing text outside the clipping rectangle if possible,,0,0,0,0,0,0,0,0,0
1894,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,less laggy response of looping playback to change of region bounds,resolves: #1890    some lagginess has to be tolerated  because there must be a queue of some length between the trackbufferexchange thread and the portaudio thread.   but how short can it be?  in case of playback looping  that lag is now set to an arbitrary hard-coded 1/2 second in loopingplaybackpolicy::suggestedbuffertimes  which is less than the old default latency of 4 seconds (see playbackpolicy::suggestedbuffertimes)  which perhaps was a value motivated by older generations of hardware.  so  if you adjust looping play bounds while the play head is within 1/2 second of the end of the loop (that s 1/2 second of real time  not track time  in case you also have a time-warping time track) -- then you might yet notice the play head not doing quite what you want.  (should we make that latency user-tunable?  or  more challengingly for us  detect hardware limitations and make it adaptive?)  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1890,less laggy response of looping playback to change of region bounds,"resolves: #1890  some lagginess has to be tolerated because there must be a queue of somelength between the trackbufferexchange thread and the portaudio thread   buthow short can it be?in case of playback looping that lag is now set to an arbitrary hard-coded1/2 second in loopingplaybackpolicy::suggestedbuffertimes which is less thanthe old default latency of 4 seconds (see playbackpolicy::suggestedbuffertimes)which perhaps was a value motivated by older generations of hardwareso if you adjust looping play bounds while the play head is within 1/2 secondof the end of the loop (thats 1/2 second of real time not track time in caseyou also have a time-warping time track) -- then you might yet notice the playhead not doing quite what you want(should we make that latency user-tunable?  or more challengingly for usdetect hardware limitations and make it adaptive?)<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,adjusting loop play can make excursions outside of the looping region,**describe the bug**this does not require merging the rest of playback looping ui to demonstrate the problem  you can adjust the selection during looping play**to reproduce**steps to reproduce the behavior:1 generate a 30 s chirp2 select from 5 to 10 s3 shift + space to loop play4 ajust loop bounds during play such as by dragging the left bound beyond the rightobserve: the play head plays outside of the bounds for several seconds before the looping play adjusts properly**expected behavior**there will be some small lag between the gesture and the response by the program but it is supposed to be bounded by 05 s,,1,0,less laggy response of looping playback to change of region bounds some lagginess has to be tolerated because there must be a queue of somelength between the trackbufferexchange thread and the portaudio thread   buthow short can it be?in case of playback looping that lag is now set to an arbitrary hard-coded1/2 second in loopingplaybackpolicy::suggestedbuffertimes which is less thanthe old default latency of 4 seconds (see playbackpolicy::suggestedbuffertimes)which perhaps was a value motivated by older generations of hardwareso if you adjust looping play bounds while the play head is within 1/2 secondof the end of the loop (thats 1/2 second of real time not track time in caseyou also have a time-warping time track) -- then you might yet notice the playhead not doing quite what you want(should we make that latency user-tunable?  or more challengingly for usdetect hardware limitations and make it adaptive?),,0,0,0,0,0,0,0,0,0
1898,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,customizable ctrl+f2 not hard-coded return to edit clip names, this inserts a menu item under edit.  also share code with the clip context menu  resolves: #1842   *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1842,customizable ctrl+f2 not hard-coded return to edit clip names," this inserts a menu item under editalso share code with the clip context menuresolves: #1842 *(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior","thanks for this but it only partially resolves  as stated in the steps to reproduce the problem occurs in label tracks as well as audio tracks || > thanks for this but it only partially 1710 as stated in the steps to reproduce the problem occurs in label tracks as well as audio tracksperhaps a separate issue number for that case theni offered esc to un-""focus"" a label so that return has its usual meaning and i still like this idea myself but it needs elaborationi think shortcut keys should be overloadable with different meanings when the program is in different states  its not a bad principle  after all -- whenever you open a drop-down or pop-up menu you are in a temporary state where keystrokes do different things (they invoke accelerators of menu items)i have said and will say again that i think that what we need (what will take more development than a bug fix) is an improved system of hierarchical foci and context sensitive assignment of shortcuts to actions:* develop a proper notion of nested foci (track panel track clip or label)* have easy keystroke navigation among them  not just tabbing among peers but up- and down-hierarchy (like what i can do with voiceover on mac but built-in to audacity even without screen readers)* let return and other keys ""scope"" differently depending on what is focused* advantage is not running out of scarce keystrokes as more functionality is added or having to use very un-mnemonic ones or modifier key chords just to avoid conflicts in a single flat scopeyour opinions of that? || i believe that label tracks behavior is present in 30 as well i dont think we have the capacity or time to change this behavior for 31 || > i believe that label tracks behavior is present in 30 as well i dont think we have the capacity or time to change this behavior for 31its differentin 30 tabbing to a label also put a text insertion cursor in the box  hitting return exits text editing  repeated return then toggles selection of the label track on and off  tab key brings back an insertion cursor  @davidbailes didnt strongly object that i know ofin 31 we have sort of another level of focus -- one for the label as a whole (the horizontal bar brightens) another for the label boxin 31 tabbing cycles among labels but does not put an insertion cursor in them  another return keystroke does that instead  repeated return shows and hides this cursori offered esc as escape from this  the horizontal bar becomes dark as a visual clue if you can see visual clues  then return changes track selectiondavid isnt satisfied with this  but i want to resist the appropriation of yet more un-mnemonic keystrokes  (i didnt really like ctrl+f2 either -- i think there should just be a contextually different f2 action)so instead we could make return key with edit cursor visible exit label editing and exit label ""focus""so if you tab to a label you would return three times instead of two to change track selection stateone more keystroke but no new key is assigned anythinggood enough? || > so instead we could make return key with edit cursor visible exit label editing and exit label ""focus""> > so if you tab to a label you would return three times instead of two to change track selection state> > one more keystroke but no new key is assigned anything> > good enough?i think that sounds confusingtaking a step back the original design spec had the same shortcut enter for renaming clips and labelsthis commit changes the default keystroke for renaming clips to ctrl + f2assuming that the designers still want the same keystroke then why keep using enter for renaming labels?if there is a shortage of time since there are no existing commands with the default shortcut ctrl + f2 then in the case of labels hardcoding it wouldnt be the end of the world (though doing it properly would be better!) || > i have said and will say again that i think that what we need (what will take more development than a bug fix) is an improved system of hierarchical foci and context sensitive assignment of shortcuts to actions:> > * develop a proper notion of nested foci (track panel track clip or label)> * have easy keystroke navigation among them  not just tabbing among peers but up- and down-hierarchy (like what i can do with voiceover on mac but built-in to audacity even without screen readers)> * let return and other keys ""scope"" differently depending on what is focused> * advantage is not running out of scarce keystrokes as more functionality is added or having to use very un-mnemonic ones or modifier key chords just to avoid conflicts in a single flat scope> > your opinions of that?i think you mentioned somewhere else that you were going to create an issue/discussion for this i think that would be a better way of getting feedback rather than on this pull request || ****> > so instead we could make return key with edit cursor visible exit label editing and exit label ""focus""> > so if you tab to a label you would return three times instead of two to change track selection state> > one more keystroke but no new key is assigned anything> > good enough?> > i think that sounds confusingi pushed another commit  try it> taking a step back the original design spec had the same shortcut enter for renaming clips and labels this commit changes the default keystroke for renaming clips to ctrl + f2there was mention of that keystroke elsewhere and some unwritten agreement with @tantacrul that we can compromise with a new keystroke> assuming that the designers still want the same keystroke then why keep using enter for renaming labels? if there is a shortage of time since there are no existing commands with the default shortcut ctrl + f2 then in the case of labels hardcoding it wouldnt be the end of the world (though doing it properly would be better!)i do not understand what you mean by ""properly""my notion of ""properly"" (but not easily) is outlined in my previous commenti want a compromise that satisfies you and us in short time || @tantacrul could you please confirm whether or not you think the shortcuts for renaming a ""selected"" clip and a selected label should be the same?  || > @tantacrul could you please confirm whether or not you think the shortcuts for renaming a ""selected"" clip and a selected label should be the same?if they were the same then when clips have a selected attribute it will be possible for both clips and labels to be selected at the same time in that case when if a user pressed the rename shortcut which type of items are renamed could be determined using the context of the type of track being the focus ie audio or label || > i pushed another commit try iti tried the commit and still think its confusing1 i still think that its not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected2 a keyboard user can quite easily not know that a label is selected - either because it is off screen or the user is using a screen reader3 in your commit when a user pressed enter to finish an edit of a label this now deselects the label i dont think a user would expect that> i want a compromise that satisfies you and us in short timei think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels (and as ive said if they do im happy for ctrl+f2 to be hardcoded for labels as a temporary measure if time is short) || > @tantacrul could you please confirm whether or not you think the shortcuts for renaming a ""selected"" clip and a selected label should be the same?i think that would make sense and reduce cognitive load yes ctrl + f2 sounds reasonable to me || actually there is a problem:  we can only associate one command name with the keystroke  what should this shared clip/label renaming thing be called?  ""rename"" is too general ""rename clip"" too specific ""rename clip or label"" is ugly  maybe alt+f2 for the labelmy opinion about the ideal longer term solution (needing much work) is that simply f2 can mean different things in different contexts and the system of associating keystrokes with commands needs more elaboration to allow that overloadingi still dont know if @davidbailes agrees with that ideal || > > i pushed another commit try it> > i tried the commit and still think its confusing> > 1 i still think that its not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selectedkeystrokes might vary what they do according to the kind of focus  why not?> 2 a keyboard user can quite easily not know that a label is selected - either because it is off screen or the user is using a screen readerthen is the answer to be sure to announce every change of focus?  letting each label be a focus letting the label track be a higher order one> 3 in your commit when a user pressed enter to finish an edit of a label this now deselects the label i dont think a user would expect thatis this not just a return to the 30 and earlier behavior which you did not object to?  return key while edit cursor is visible returns focus to the track> > > i want a compromise that satisfies you and us in short time> > i think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels (and as ive said if they do im happy for ctrl+f2 to be hardcoded for labels as a temporary measure if time is short)actually i am bothered by some implications in the implementation  if the customizable keystroke is the same the function handling it must be the same under present limitations  there must also be one name given to that commandbut labels and clips are very different things  the need for a single handler function that must know about both — conflicts with other work i’m trying to do with modularization which aims to separate things like label track support in general from the program entirely as a drop in modulei say again a better system with contextual overloading of keystrokes so they map to handler functions one-to-many is a thing to develop  please tell me you agree or no || > actually there is a problem: we can only associate one command name with the keystroke what should this shared clip/label renaming thing be called? ""rename"" is too general ""rename clip"" too specific ""rename clip or label"" is ugly maybe alt+f2 for the label> i think there should be one command with the default shortcut ctrl+f2 its a context dependent command and the user has only to remember one shortcuti dont see a problem with a command with the name ""rename clip or label"" but maybe others could come up with a better suggestion for the name> my opinion about the ideal longer term solution (needing much work) is that simply f2 can mean different things in different contexts and the system of associating keystrokes with commands needs more elaboration to allow that overloading> > i still dont know if @davidbailes agrees with that idealas ive said already i think your ideas for a longer term solution would be better discussed in a separate issue/discussionwhat is being suggested here by me and i think @tantacrul  is a command which is context sensitive || > what is being suggested here by me and i think @tantacrul  is a command which is context sensitiveyes that is what i was saying too unless there is a technical / time  objection that i havent considered of course || from a user perspective i have no problem with context sensitive keyboard shortcuts so long as there is also consistencyfor example ok for one shortcut to be used to:- zoom in on timeline- zoom in on db scale- zoom in on spectrogram- zoom in on plot spectrum scale- but not ok for one shortcut to- zoom in on timeline- open label for editing- toggle selectionthough even with  consistency context sensitivity could be confusing as users are often unaware of which element has focus or even the concept of ""focus"" if something is not obvious to users then thats a design problemjust my 2c -) || > > > i pushed another commit try it> > > > > > i tried the commit and still think its confusing> > > > 1 i still think that its not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected> > keystrokes might vary what they do according to the kind of focus why not?clearly in general the actions of keystrokes can vary depending on what object is the focusbut here the focus is the track a label never is the focus and i think thats appropriateagain if you want to continue discuss you idea of having a focus hierarchy within the track panel please open an issue/discussion about it> > > 1 a keyboard user can quite easily not know that a label is selected - either because it is off screen or the user is using a screen reader> > then is the answer to be sure to announce every change of focus? letting each label be a focus letting the label track be a higher order one> as ive said above i dont think a label should be the focus and in this case its a question of one (or more than one) being selected not being the focus the rename command should act on the selected items not the focused item> > 1 in your commit when a user pressed enter to finish an edit of a label this now deselects the label i dont think a user would expect that> > is this not just a return to the 30 and earlier behavior which you did not object to? return key while edit cursor is visible returns focus to the track> in 30 and earlier using tab and shift+tab opened a custom text box for editing this text box was not accessible for users of screen readers in my guide to audacity for screen readers ive always advised users of screen readers to not use the tab and shift+tab keystrokes in a label tracknow that in 310 tab and shift+tab just select a label i was hoping that might make more functionality safely available to users of screen readers in particular the work that you did so that a selected label could be moved on its own however for that to be the case then this current issue of the use of enter needs to be sorted out and the bug with creating a label by typing:  (i have a pr for this bug but it was written assuming that the hardcoded enter was going to be removed:  > > i want a compromise that satisfies you and us in short time> > > > > > i think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels (and as ive said if they do im happy for ctrl+f2 to be hardcoded for labels as a temporary measure if time is short)> > actually i am bothered by some implications in the implementation if the customizable keystroke is the same the function handling it must be the same under present limitations there must also be one name given to that command> > but labels and clips are very different things the need for a single handler function that must know about both — conflicts with other work i’m trying to do with modularization which aims to separate things like label track support in general from the program entirely as a drop in module> as far as i can see the command could be implemented now and that implementation can be changed in the future so that it fits in with whatever code restructuring that youre designing > i say again a better system with contextual overloading of keystrokes so they map to handler functions one-to-many is a thing to develop please tell me you agree or noyou are expecting me to say yes of no to a sentence which i dont fully understandcommands may be context sensitive but i dont know what you mean by ""the contextual overloading of keystrokes"" it could mean many things! || > from a user perspective i have no problem with context sensitive keyboard shortcuts so long as there is also consistency for example ok for one shortcut to be used to:> > * zoom in on timeline> * zoom in on db scale> * zoom in on spectrogram> * zoom in on plot spectrum scale> * > > but not ok for one shortcut to> > * zoom in on timeline> * open label for editing> * toggle selection> this might define whats ok or not in a set of default bindings but users should be free to customize bindings in lower levels of the focus tree as they choosefor now we have just one global mapping of keystrokes to commandids (internal string identifiers) that are paired with functions that execute themi think we might want something like different mappings of keystrokes to commandids and from commandids to actions both mappings dependent on focus  a mapping at a lower level of focus might inherit mappings from a higher level of focus and override mappings selectivelyfor instance define ""ctrl+c"" -> ""copy"" just once in a high level mapping  but lower level mappings might reassociate ""copy"" -> function differently and appropriately  we wont need just one copy function that has to switch on the kind of focus and do unrelated things || > > > > i pushed another commit try it> > > > > > > > > i tried the commit and still think its confusing> > > > > > 1 i still think that its not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected> > > > > > keystrokes might vary what they do according to the kind of focus why not?> > clearly in general the actions of keystrokes can vary depending on what object is the focus but here the focus is the track a label never is the focus and i think thats appropriatestrong disagreement  the absence of but need for a proper notion of sub-track focus for clip or for label feels very obvious to me now consider also the new context menu items for clips and some problems of that new design that peter has pointed out  a notion of ""the focused clip"" independent of what the time selection is is needed || > this might define whats ok or not in a set of default bindings but users should be free to customize bindings in lower levels of the focus tree as they chooseyes of course im referring to default bindingswhether or not users are ""free to customize bindings in lower levels of the focus tree as they choose"" is a design option - i do not see that as a necessary requirementdont  forget that it is only a small minority of users that customize their key bindings with carefully selected key bindings there should be no need for the vast majority of users to customize them || > > this might define whats ok or not in a set of default bindings but users should be free to customize bindings in lower levels of the focus tree as they choose> > yes of course im referring to default bindings whether or not users are ""free to customize bindings in lower levels of the focus tree as they choose"" is a design option - i do not see that as a necessary requirement dont forget that it is only a small minority of users that customize their key bindings with carefully selected key bindings there should be no need for the vast majority of users to customize themtrue but also:  having the mapping from keystrokes to dispatch functions being not necessarily one-to-one as now but possibly one-to-many (based on focus context) will have advantages from my point of view  advantages for better compatibility with modularization efforts and other nicer structurekeeping things implemented in separate functions but allowing overloading of keystrokes would also let us re-use more mnemonic keystrokes for things rather than all the disambiguating modifier key chords and other uglinessf2 is a recent example -- we want it to remain the key for envelope tool but if its also a ""natural"" key for renaming (following some other application conventions) then really it would be nicest to use it for that too when a clip is focused  not ctrl+f2 || > > as ive said above i dont think a label should be the focus and in this case its a question of one (or more than one) being selected not being the focus the rename command should act on the selected items not the focused item> again i dont see why a label shoudnt be focus  but ah you mention selection different from focusreview the abstract class wxaccessible  see that what its really for is defining and navigating a hierarchy of objects that are focusable or selectablecompare getfocus() with getselections()  focus is unique among sisters under a node but selection is allowed to be any subset of themlabels within a track can easily conform to this model:  why not?i think audacity needs to define its own abstract classes and implementations of them to represent a tree of navigable items and map that onto wxaccessiblei think trackpanelax needs reimplementation and generalization this way || > will have advantages from my point of view advantages for better compatibility with modularization efforts and other nicer structurebe careful to not conflate ""desirable for developers"" and ""desirable for users"" they are different (though not mutually exclusive) things and the latter must take priority as users are the raison dêtre for the app || > > in 30 and earlier using tab and shift+tab opened a custom text box for editing this text box was not accessible for users of screen readers in my guide to audacity for screen readers ive always advised users of screen readers to not use the tab and shift+tab keystrokes in a label trackoh that was my omission -- not observing behavior when you change the preference to open a dialog box> > > i say again a better system with contextual overloading of keystrokes so they map to handler functions one-to-many is a thing to develop please tell me you agree or no> > you are expecting me to say yes of no to a sentence which i dont fully understand commands may be context sensitive but i dont know what you mean by ""the contextual overloading of keystrokes"" it could mean many things!all right you agree about context sensitivitywhat im thinking would involve some further elaboration of the keyboard preferences dialog so that there is not one but multple mappings of keys to commands dependent on different kinds of context and accessible to the user for customization  as i mentioned recently in a replay to steve a mapping for a subsidiary focus context might inherit mappings from a parent ""scope"" by default but also give some special overridesyes i need to elaborate these ideas in writing in more detail when i have more freedom || thanks for approval @vsverchinsky   my decision about this:i will merge the first commit only not the change for labeltrackview that @davidbailes didnt likei will make a small change adding ellipsis to the new menu command item because it may open a dialog  ""rename clip""@lwinterberg note the new item under the edit menu which must be in the manualthis will 1842 but still not resolve #1710 fullyi will later make another pr to resolve #1710 well enough for 310  i will use the hard-coded ctrl+f2 which @davidbailes said is good enough  its awful for the long term and not customizable of course  it will not add any new internationalized string to the menus || @paul-licameli > i will later make another pr to resolve #1710 well enough for 310 i will use the hard-coded ctrl+f2 which @davidbailes said is good enough its awful for the long term and not customizable of course it will not add any new internationalized string to the menusgiven that the developers are short for time before 310 ive assumed that it would be helpful if i created a pull request for this: || > @paul-licameli> > > i will later make another pr to resolve #1710 well enough for 310 i will use the hard-coded ctrl+f2 which @davidbailes said is good enough its awful for the long term and not customizable of course it will not add any new internationalized string to the menus> > given that the developers are short for time before 310 ive assumed that it would be helpful if i created a pull request for this: #1957thank you || ","toggle focused track (""return"" or ""numpad_enter"") fails","**describe the bug**pressing the ""enter"" or ""numpad_enter"" does not toggle selection of the focused track**to reproduce**steps to reproduce the behavior:1 generate a ""chirp""2 ""ctrl + d"" (duplicate)3 ""enter"" to deselect the first track4 the first track is still selected**expected behavior**the ""toggle focused track"" keybindings should toggle the selection of the focused track**additional information (please complete the following information):** - os: xubuntu 2004 - version: 310-alpha-20211006**additional context**this is a very important command when working with multiple tracks","this problem has already been logged: agree its very important rather than hardcoding a shortcut there should be a command with a default shortcut (which isnt a duplicate of an existing shortcut!) || reopening this issue as it is not addressed by [the proposed fix]( for #1710  || #1857 did mitigate the problem:  it occurs now only when the selection coincides with the extent of a clip not alwaysa fuller solution that we will do:  remove the hard coded return key to start name editing  (but not for finishing it)that will solve this issue as stated but then leave @davidbailes unsatisfied that there is any keyboard accessibility for clip name editingthat will deserve a different issue and i don’t promise a fix for that in 310i think it would be a good idea to allow various hierarchical levels of focus (none track or labels or clips within the track) and overload keystroke bindings depending on the focus so that return would be free to repurpose in this context instead of using some other less mnemonic key (and running out of keys)but we can’t do that yeti think this is exposing some of the limitations of our system of focus navigation and keystroke binding  watch for a new gitub issue from me about my ideas for a better system || > #1857 did mitigate the problem: it occurs now only when the selection coincides with the extent of a clip not alwaystesting with 310-alpha-20211007> **to reproduce** > steps to reproduce the behavior:> >     1 generate a ""chirp"">     2 ""ctrl + d"" (duplicate)>     3 ""enter"" to deselect the first track>     4 the first track is still selectedi see no mitigation || > > #1857 did mitigate the problem: it occurs now only when the selection coincides with the extent of a clip not always> > testing with 310-alpha-20211007> > > **to reproduce**> > steps to reproduce the behavior:> > ```> > 1 generate a ""chirp""> > 2 ""ctrl + d"" (duplicate)> > 3 ""enter"" to deselect the first track> > 4 the first track is still selected> > ```> > i see no mitigationas i said its mitigated in case the selection does not coincide with a clip  but those steps are not enough to do that ||  || ",1,0,customizable ctrl+f2 not hard-coded return to edit clip names this inserts a menu item under editalso share code with the clip context menu,,0,0,0,0,0,0,0,0,0
1914,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,allow the application appearance to match the theme on macos,currently  this is implemented for macos users only. windows has not yet published the api  linux requires gtk3 and we build against gtk2 currently.  resolves: #1752  *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1752,allow the application appearance to match the theme on macos,"currently this is implemented for macos users onlywindows has not yet published the api linux requires gtk3 and we build against gtk2 currentlyresolves: #1752*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",can we become a working build with gtk3 -> wxgtk31-315 -> python-wxpython4-411 ?i use the packages above with a stable audacity-242 ( 118 plugins/enabled ) but can notbuilding a clean and working since the 30x? release of audacityif more info needed i can post the contents of spec-files  || @ohquait you may want to ask in the [forum]( or the [dev discord]( about this instead of some random pull request that already is merged :)  ||,mac: many cosmetic issues and selection toolbar issues with latest 310 alpha,**describe the bug**there are many cosmetic issues with the the latest 310 alpha audacity_macos_intel_1270895276_97ca83e there are also issues withe the selection toolbar where the project rate and snap to fields are blank and cannot be set (or observed) **to reproduce**steps to reproduce the behavior:1 install latest alpha audacity_macos_intel_1270895276_97ca83e  on mac2 launch3  observe scroll bars for the audacity window are black (not gray)4 observe: window header is  black (not gray)5 observe: the bottom bar (including the status bar) is black (not gray)6 observe: welcome mat message has black header not gray6 observe: in the selection toolbar where the project rate and snap to fields are blank and cannot be set (or observed) **expected behavior**a) same graphics as in 304 with gray not blackb) active and filled project rate and snap to fields in the selection toolbar**screenshots**( information (please complete the following information):** - os: macos 1152 big sur - version audacity 310**additional context**this is a regression on 304this does not happen on windows with the latest alpha:  audacity-win-310-alpha-20210924+97ca83e-64bit,"preferences come up white on black:( || mnues come up white text on black too:![image]( || so do the dropdown menus for the time format controls in the selection toolbar and the timer toolbar || see what happens in ` themebase::loadtheme` || my bad - apple had ""kindly"" turned on a fashionable dark theme for me with the recents116 macos upgradewhen i switch it to light all is fine_the verbal assistant has had gender reassignment too and been turned into a man _ || i think this is a result of the community pr we merged which allows audacity to use a system theme i will check that first || ",1,0,allow the application appearance to match the theme on macoscurrently this is implemented for macos users onlywindows has not yet published the api linux requires gtk3 and we build against gtk2 currently,,0,0,0,0,0,0,0,0,0
1916,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,fix bug with lof unicode using.,resolves: #1739   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1739,fix bug with lof unicode using,"resolves: #1739 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior","thanks for looking at this @gera-gas unfortunately this does not  fix the problem for me (tested on xubuntu 2004) in fact it prevents audacity from importing from any lof file even those that contain lower ascii characters onlythe problem here is that `if (buf[i] < 32 && buf[i] ! 10 && buf[i] ! 13)` may fail with utf8 || maybe you need this to guess the encoding:   || > maybe you need this to guess the encoding:or maybe theres no need to check other than ensuring that it isnt a huge file wxtextfile seems to be pretty robust wrt opening files that dont contain text if the file isnt readable as text the import will fail so we just need to tell the user that it failedits unfortunate that lof files were not defined to have a standard header of some sort so that we could easily recognize them something to keep in mind  if the lof format is ever extended as it is about the only thing that  we know a lof file *must* have is at least one occurrence of the word ""file"" as the first non-whitespace word on a line || @stevedaulton i add new checking control and test it on ascii utf-8 (with and without bom) and utf-16 (with and without bom) file formats too on my pc all work fine || ",lof files do not support unicode (or extended ascii),"**describe the bug**lof files do not support unicode (or extended ascii)lof files are currently limited to standard / lower ascii characters only in file names this prevents file names such as ""reinyöwav"" being used even though the name is valid on all supported platformsalso the error message ""audacity did not recognize the type of the file"" is not as helpful as it could be and this limitation is not currently documented in the manual**to reproduce**steps to reproduce the behavior:1 create an audio file containing characters that are not in the lower ascii character table example: ""®±µ»wav""2 create a lof file containing the file created in step 13 import the lof file into audacity4 observe error: ""audacity did not recognize the type of the file""**expected behavior**lof files should support unicode (or extended ascii)**screenshots**none**additional information (please complete the following information):** - os: all os - version all audacity - originally reported against 300 - (if relevant) sound device [eg windows wasapi usb sound card]**additional context**""lower ascii //wwwcomputerhopecom/jargon/a/asciihtm#standard-ascii-table)""","@stevedaulton wrote to me on email:>weve never really made much of a deal of lof filesi like the idea and they are potentially useful but it seems to me to be an underdeveloped feature>perhaps better than logging this as a p3 bug would be a feature request for ""playlist"" support using an established format such as m3u or  pls rather than lof>m3u:   interesting aspect of this is that a multi-track project could be exported as separate wav files plus a playlist file - could be useful for backups and for collaborative projects || ",1,0,add checking to text fileremove extra code,,0,0,0,0,0,0,0,0,0
1930,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,click-away from trackpanel (still in audacity) ends clip name edit,resolves: #1896   this is unlike the case of loss of focus when clicking outside of audacity  which was the case fixed at ec258e0.  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1896,click-away from trackpanel (still in audacity) ends clip name edit,resolves: #1896 this is unlike the case of loss of focus when clicking outside of audacitywhich was the case  at ec258e0-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,clip names the cursor editing mode doesnt off with a click in toollbars,**describe the bug**the cursor editing mode doesnt off with a single click on toolbars or scrollbars**to reproduce**steps to reproduce:1 create two or more tracks2 add a clip to the first one (on top)3 start edit clip name in direct mode (double click on clip handle make sure option use dialog for the name of a new label is disabled4 click in any toolbar**actual behaviour:**observe: clip name edit cursor is still visible**expected behaviour**the edit cursor should be dismissed after time selection changed/activated**screenshots**these red rectangles point to the areas where clicking doesnt off the clip name editing mode![изображение]( to: #1858,"confirmed on w10 with master audacity-win-310-alpha-20211012+0cf12fb-64bit || > confirmed on w10 with master audacity-win-310-alpha-20211012+0cf12fb-64bitconfirmed  or confirmed still a bug?i was arguing with pavel today about the interpretation of this issuei made a fix so that in cases that a click outside the track panel causes loss of focus then the text editing finishes (making an undo item) and the insertion cursor disappears which hadnt been so before the fixpavel observes that not all clicks outside of the track panel cause loss of focus such as in the vertical scroller or in the blank areas of the tool docks  the debate is whether that is considered a bug  i say it isntif you are still in a state where typing letter keys goes to the label then fine leave the edit cursor there  if you want to stop typing well thats what return or esc are for  your hands are on the keyboard  why must you reach for the mouse to get out of editing the name? || i agree its a bug and worth fixing ive observed it in master just now (mac os) || @paul-licameli unfortunately the bug is fixed partiallynow it works well if you have got the clip name editing via the keyboard but clip name editing doesnt off if you use a mousehere is the example:1 enter the name editing mode via keyboard then click away to lose focus on the clip name works well in this case: enter the name editing mode with the mouse click editing hasnt been interrupted the focus still remains on the clip name || i dont understand what the latest video is demonstrating  describe the steps  where is the last mouse click which should cause the editing cursor to disappear but does not? || the last video is demonstrating that the fix doesnt work when you turn on the name editing mode not with the keyboard but with the mouse || > the last video is demonstrating that the fix doesnt work when you turn on the name editing mode not with the keyboard but with the mouse> the last video is demonstrating that the fix doesnt work when you turn on the name editing mode not with the keyboard but with the mouseplease write a numbered list of steps to reproduce it || the original bug as described in the first post is still present with ""commit id: b21ac7 of thu oct 21""tested on xubuntu 2004**steps to reproduce:**1 create two or more tracks2 add a clip to the first one (on top)3 start edit clip name in direct mode (double click on clip handle make sure option use dialog for the name of a new label is disabled4 click in any toolbar (example select the envelope tool)i cant test with the default shortcut as ""ctrl + f2"" is the xfce desktop global shortcut for ""go to workspace 2"" || ",1,0,click-away from trackpanel (still in audacity) ends clip name edit this is unlike the case of loss of focus when clicking outside of audacitywhich was the case  at ec258e0keep also the recent enhancement of commit d9f3ed2,,0,0,0,0,0,0,0,0,0
1936,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,fix recording to a new track,resolves: #1927   -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1927,fix recording to a new track,resolves: #1927 -  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,now merged into master and release branches ||,recording to new track starts in wrong place,**describe the bug**recording to new track always starts from time0 irrespective of the cursor position**to reproduce**steps to reproduce the behavior:1 generate a chirp2 click on the track at around 15 seconds to set the playhead cursor3 shift + r4 observe that the recording starts in a new track at time0**expected behavior**recording to start at the playhead / cursor position**screenshots**if applicable add screenshots to help explain your problem**additional information (please complete the following information):** - os: xubuntu 2004 - version 310-alpha-20211014**additional context**regressionthis bug breaks an essential feature in audacitys core functionality as a multi-track recording app,confirmed on mac catalina ||,1,0,set clips recording starting position match selection position,,0,0,0,0,0,0,0,0,0
1938,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,fix tab usage in wavetrack,resolves: #1884   -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1884,fix tab usage in wavetrack,resolves: #1884 -  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,my review is complete  i don’t approve yet  i’m not sure how i tell github to retract my mistaken approval || i approve understanding that another issue will be opened for the problem of the tab key cycle for the right channel in case clips do not align ||,smart clips there is not allowed to exit the clip name editing mode on the right channel by the tab key,**describe the bug**in the case when a user tries to exit the name editing mode by pressing the tab key nothing happens with the right channel**to reproduce**steps to reproduce the behaviour:1 add stereo track and a clip to it2 split the track3 rename the clip on the right channel4 make stereo again5 edit the right-channel clip name6 press the tab key**expected behaviour**the user can exit the editing mode with the tab**screenshots** information (please complete the following information):** - os: windows 10 - version: audacity 310-alpha-20211011,see comments on the pr which i don’t really approve yet (i don’t know how to retract my mistake with github)is a fuller description of the expected behavior that when channels have unaligned clips then each channel has its own independent tab key cycle?the proposed fix does not realize that  tab key may escape right channel clip renaming but takes you to the left channel tab key cycle ||,1,0,tab handling moved from wavetrackaffordancecontols to wavetrackview,,0,0,0,0,0,0,0,0,0
1940,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,adds an ability to change project s user_version based on features used,this commit introduces a new mechanism to allow projects components to specify the audacity version they require to be loaded.   it is possible to set the version based on the features that are currently in use.   smart clips use this new approach to require at least audacity 3.1 if there are trimmed clips in the project.  resolves: #1903  *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1903,adds an ability to change projects user_version based on features used,"this commit introduces a new mechanism to allow projects components to specify the audacity version they require to be loaded it is possible to set the version based on the features that are currently in use smart clips use this new approach to require at least audacity 31 if there are trimmed clips in the projectresolves: #1903*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,audacity 310 projects may be incompatible with previous versions,**describe the bug**if a 310 project contains resized clips open the project in an older version of audacity may create overlapping clips which can behave is weird and unpredictable ways**expected behavior**graceful degradation rather than unannounced obsolescence**additional information**opening a 310 project in an earlier version may cause permanent damage to the project,does this thing not pop up?  || > does this thing not pop up?no ||,1,0,adds an ability to change projects user_version based on features usedthis commit introduces a new mechanism to allow projects components to specify the audacity version they require to be loaded it is possible to set the version based on the features that are currently in use smart clips use this new approach to require at least audacity 31 if there are trimmed clips in the project,,0,0,0,0,0,0,0,0,0
1947,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,issue #1934: renaming clip using the keyboard,resolves:   using the keyboard to rename a clip in an audio track  regardless of which clip is selected  the same clip in the audio track is always renamed.  fix: in wavetrackaffordancecontrols::starteditnameofmatchingclip()  the call to starteditclipname() edits the name of mfocusclip  so set the value of mfocusclip  not meditedclip.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1934,issue #1934: renaming clip using the keyboard,"resolves:  the keyboard to rename a clip in an audio track regardless of which clip is selected the same clip in the audio track is always renamedfix:in wavetrackaffordancecontrols::starteditnameofmatchingclip() the call to starteditclipname() edits the name of mfocusclip so set the value of mfocusclip not meditedclip<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,renaming clip using the keyboard does not always act on the selected clip,**describe the bug**using the keyboard to rename clips regardless of which clip is selected the same clip is always renamed**to reproduce**steps to reproduce the behavior:1 create an audio track with more than one clip2 for each clip in turn select the clip using the keyboard and press ctrl+f2 to rename it3 regardless of which clip is selected the same clip is always renamed**expected behavior**ctrl + f2 should rename the selected clip**additional context**there are other related bugs in this area sometimes ctrl+f2 does nothing - when this case i think that there are also issues with the clip handles not working with the mouse it appears to be intermittent and i dont yet have steps to reproduce,,1,0,issue #1934: renaming clip using the keyboardusing the keyboard to rename a clip in an audio track regardless of which clip is selected the same clip in the audio track is always renamedfix:in wavetrackaffordancecontrols::starteditnameofmatchingclip() the call to starteditclipname() edits the name of mfocusclip so set the value of mfocusclip not meditedclip,,0,0,0,0,0,0,0,0,0
1950,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,playback looping drags,resolves: #1260 resolves: #1706 resolves: #1707  this completes the user interface for playback looping with three click-and-drag actions in the timeline: * dragging a completely new play region (arrow cursor) * resizing an existing region (east-west arrows) * moving an existing region (hand)  please observe also: * the context menu item  to make selection follow play region drags  works * yellow snap guidelines at edges of labels or clips  and of the selection when it isn t following the play region * escape key aborts all drags * left click without drag still starts playback  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1260,playback looping drags,resolves: #1260resolves: #1706resolves: #1707this completes the user interface for playback looping with three click-and-drag actions in the timeline:* dragging a completely new play region (arrow cursor)* resizing an existing region (east-west arrows)* moving an existing region (hand)please observe also:* the context menu item to make selection follow play region drags works* yellow snap guidelines at edges of labels or clips and of the selection when it isnt following the play region* escape key aborts all drags* left click without drag still starts playback-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,transport control for enabling playback looping,### user storyas a new user of audacity i would like to have a visible toggle control for playback looping so its easy to discover and use### descriptioncurrently in order to loop a selected range in audacity you have to use the shift modifier key to show loop play in the ui or use shift-space shortcut for activating it while this is fine for seasoned audacity users its not very discoverable for new users and different to almost every other audio software where there is a visible ui looping toggle in the transport controlsdesign in figma,"maybe such a loop-play button should be colored green the same as the normal play button - then it might be more ""discoverable"" that is is a button for a form of playback || are you familiar with all that already exists to define a play region in the time ruler and the quick-play actions?will these features replace those?@stevedaulton @davidbailes  || > all that already exists to define a play region in the time ruler and the quick-play actions?the timeline documentation:  || > maybe such a loop-play button should be colored green the same as the normal play button - then it might be more ""discoverable"" that is is a button for a form of playbackthe loop button in most daws/audio software is actually just a toggle for whether loop playback is enabled or not the loop button doesnt start playback itself - you still need to hit play there are some screenshots of other daws here -  || design of this feature in figmasome clarifications after the design review: * the ""quick play"" functionality will be replaced on ""playback looping"" * possible simplifications (like in current ""quick play"" mode) for looping during playback**implementation stages:** 1 create and add icon resources    11 [methodics](    12 estimation: 46 hrs 2 add playback looping button     21 methodics: in `controltoolbarcpp` file need add looping button  controltoolbar::makebutton` and use `mpause` button like as example for handlers implementation    22 estimation: 35 hrs3 add looping range gui for timeline bar   31 methodics: use `quickplayindicatoroverlay` and `quickplayruleroverlay` in `adornedrulerpanelcpp` like an example   32 estimation: 1418 hrs4 add mouse event handler for looping range gui   41 methodics: using ""quick play"" events handlers (`adornedrulerpanel: :click(const trackpanelmouseevent &event audacityproject *pproject)` etc) with looping by shift key for add playback looping support   42 estimation: 1215 hrs5 remove ""quick play"" preferences like a checkboxes    51 note: do it after full ""playback looping"" support and tests    52 estimation: 12 hrs__final estimation__: 34 46 hrs || note that if you intend to replace timeline quick play it has several other features in addition to simply loopingfor example an important feature for creating long loop files is the ability to initiate loop playback from a point close to the end of the loop (so that you dont have to wait for the entire loop to play before you hear if the end and beginning transition correctly) also the ability to temporarily disable track scrolling during loop playback is very handy when  adjusting the start / end points of the loop || i dont think quickplayindicatoroverlay is a useful example  if you move the mouse in the time ruler without clicking you can see a white vertical line drawn over the tracks  that class does this  the new design does not require thisi think the changes of behavior call all be implemented inside adornedrulerpanel::onpaint() and overlays need not be part of it || the other key thing that timeline quickplay is used for apart from looping is to easily identify points of interest in a track ie simple playback from a particular point with no loopingin other audio and video apps (reaper as a good example) one would use scrubbing for for this - but audacitys scrubbing has an odd gui that provides for a poor ux experience - and thus users (me included) will use timeline quickplay instead_if youd managed rto get telemetry into audacity to measure usage - youd readily observe that timeline quickplay is one of my most-used tools in audacity_ || i dont think we want to deprecate quickplay but it shouldnt be the default action from selecting a time range right now it looks visually like setting a loop region happens in an area where most users expect setting a loop region to be the default action -  and confuses most new users because because of thisi think we can still retain quickplay but perhaps with a modifier key + time region selection rather than by defaultand agree we need to improve scrubbing also so people can use that! || > note that if you intend to replace timeline quick play it has several other features in addition to simply looping> for example an important feature for creating long loop files is the ability to initiate loop playback from a point close to the end of the loop (so that you dont have to wait for the entire loop to play before you hear if the end and beginning transition correctly)you should be able to do this with the new playback looping also - just set a region you want to loop hit play and then click somewhere else on the timeline to jump to that time (while playing) looping would still enabled as long as you dont toggle it off with the loop button this is how it works in most other daws || > moved this from ready for qa to done in sprint 7 - release 31does that mean that this feature is now considered to be release ready?weve still got loop play as the default  play action thus requiring a modifier key to play a selection normally thats a really bizarre design decision in my opinion and should be revertedi see that we have a ""transport control for enabling playback looping"" but that is not what the button does || #1995 is not yet  no || ",1,0,dragging of endpoints of an existing play region,,0,0,0,0,0,0,0,0,0
1950,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,playback looping drags,resolves: #1260 resolves: #1706 resolves: #1707  this completes the user interface for playback looping with three click-and-drag actions in the timeline: * dragging a completely new play region (arrow cursor) * resizing an existing region (east-west arrows) * moving an existing region (hand)  please observe also: * the context menu item  to make selection follow play region drags  works * yellow snap guidelines at edges of labels or clips  and of the selection when it isn t following the play region * escape key aborts all drags * left click without drag still starts playback  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1706,playback looping drags,resolves: #1260resolves: #1706resolves: #1707this completes the user interface for playback looping with three click-and-drag actions in the timeline:* dragging a completely new play region (arrow cursor)* resizing an existing region (east-west arrows)* moving an existing region (hand)please observe also:* the context menu item to make selection follow play region drags works* yellow snap guidelines at edges of labels or clips and of the selection when it isnt following the play region* escape key aborts all drags* left click without drag still starts playback-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,add looping range gui for timeline bar,сhanges of behavior call all be implemented inside `adornedrulerpanel::onpaint()` and overlays need not be part of itestimation: 1418 hrs,,1,0,dragging of endpoints of an existing play region,,0,0,0,0,0,0,0,0,0
1950,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,playback looping drags,resolves: #1260 resolves: #1706 resolves: #1707  this completes the user interface for playback looping with three click-and-drag actions in the timeline: * dragging a completely new play region (arrow cursor) * resizing an existing region (east-west arrows) * moving an existing region (hand)  please observe also: * the context menu item  to make selection follow play region drags  works * yellow snap guidelines at edges of labels or clips  and of the selection when it isn t following the play region * escape key aborts all drags * left click without drag still starts playback  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1707,playback looping drags,resolves: #1260resolves: #1706resolves: #1707this completes the user interface for playback looping with three click-and-drag actions in the timeline:* dragging a completely new play region (arrow cursor)* resizing an existing region (east-west arrows)* moving an existing region (hand)please observe also:* the context menu item to make selection follow play region drags works* yellow snap guidelines at edges of labels or clips and of the selection when it isnt following the play region* escape key aborts all drags* left click without drag still starts playback-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,add mouse event handler for looping range gui,"using ""quick play"" events handlers `(adornedrulerpanel: :click(const trackpanelmouseevent &event audacityproject *pproject)` etc) with looping by shift key for add playback looping supportestimation: 1215 hrs",,1,0,dragging of endpoints of an existing play region,,0,0,0,0,0,0,0,0,0
1958,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,fixes splash screen size when what s new is shown,also  real link to the video is now added  resolves: #1946  *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1946,fixes splash screen size when whats new is shown,"also real link to the video is now addedresolves: #1946*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,important information obscured in 310 new splash screen,**describe the bug**important information obscured in 310 new splash screen**to reproduce**steps to reproduce the behavior:1 clear audacity settings folder to ootb factory settings2 launch 3103 observe: the splash screen welcome mat has important data obscured until you scroll or drag**expected behavior**the size of the splash screen to be extended vertically so that the important information about how to get help is immediately visible without scrolling or dragging to enlarge the window**screenshots****1) default splash screen welcome mat in 310**( suggested extended version as new default**![image]( default in 305 and earlier**![image]( information (please complete the following information):** - os: windows 10 - but assume all os - version: audacity 310**additional context**the new link to the whats new video is an excellent idea but now the important help information with the links to sources of help is obscured (see screenshot 1)  there is plenty of room at default size to extend the splash sceen vertically a little to show this information by default (see screenshot 2)in 305 and earlier this important information was visible at the default window size (see screen shot 3)flagging this for @tantacrul as this is a ux issue,it would be nice if the dialog was a little taller by default yes i dont know what height it is now but you generally wouldnt want to go taller than 800px 900px if you wanted to push ithowever if the dialog resizes automatically for smaller screens without enough vertical space (i assume it does for now) then it wont be much of a problem || if there is any issue with simply making the dialog taller we could also just ditch that very large audacity logo at the top or perhaps make it much smaller if needed i can mock this up lets try simply make it a little taller first || >800pxlooks like only 600px is needed so i think this will be fine for 99% of displays || testing on w10 with latest 310 build looks nicely  to me:( ||,1,0,fixes splash screen size when whats new is shownalso real link to the video is now added,,0,0,0,0,0,0,0,0,0
1965,0,0,0,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,fix crash on looping play seen on windows,resolves: #1822   a recurrence of bugs 1887 and 2025.  these worked around a bug in the soxr library.  recent rearrangements of playback engine sometimes failed to do the workaround.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1822,fix crash on looping play seen on windows,"resolves: #1822 a recurrence of bugs 1887 and 2025  these worked around a bug in the soxrlibrary  recent rearrangements of playback engine sometimes failed to do theworkaround<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",i can confirm that #1925 is related to this issue too it is even easier to reproduce on jack || however it happens without looping as well looking into the fix makes me not so sure that this will help we need to wait for the appimage to be built first as the bug is much easier to catch in release build || > however it happens without looping as well looking into the fix makes me not so sure that this will help we need to wait for the appimage to be built first as the bug is much easier to catch in release buildif the call stack doesnt involve the soxr library its something else || _soxr_deinterleave_f is on top for windows as wellanyway i can confirm that issue with jack is  as well || works for me with 310-alpha-20211019that is it doesnt crash(there is still a glitch at the start of playback but thats a different issue) ||,loop play crashes when reaching the end of locked timeline region,"**describe the bug**loop play crashes when reaching the end of locked timeline regionthis is a regression on 305**to reproduce**steps to reproduce the behavior:1 get some audio2 select a small section for looping3 lock the timeline range of the selection31 either with the new loop button in the transport toolbar or32 using the ""lock play region"" from the timelines right-click context menu4 hold shift down5 observe play button changes to loop-play button6 press that button (or press the space-bar)  to initiate loop play7 observe: when the end of the locked loop-play region is reached audacity crashes**expected behavior**on reaching the end of the locked loop-play region audacity should return to the beginning of the locked loop-play region and play the loop**screenshots**if applicable add screenshots to help explain your problem**additional information (please complete the following information):** - windows 10 - but assume all os - version [eg audacity 310 master alpha:  audacity_windows_64bit_1305813991_5b09637 **additional context**@tantacrul and @jounih i cant for the life of me figure out the point of the new loop button in the transport toolbar:( for a start it has no hovertext help to indicate its usage (unlike all the other buttons in the transport toolbarb) all it appears to do is lock and unlock the timeline play region - thus just duplicating the long standing ""lock play region"" from the timelines right-click context menu - and thus an unnecessary duplicationc) from the look of it plus the fact that it is in the transport toolbar one would intuit (i certainly did anyway) that pressing it would cause loop play to start and stopd) worse still when you hold down the shift key you get two identical looking buttons in the transport toolbar - but they both do different things:![image](https://user-imagesentcom/50205984/135990128-dc92b28f-3a58-47a2-979e-8f7afa4676dapng)",i cannot reproduce this crash when i testing with the latest 310 alpha from today audacity-win-310-alpha-20211005+39b3048-64bit || original reporter cant reproduce and neither can i  reopen this if we have a reproducible cast in a more recent build that also includes the other intended ui changes || reopening issue as ive just had it happen with 310-alpha-20211012unfortunately ive not yet found a way to reproduce it at will but the bug is still in there ||  version: windows 10019042 (none)report version: 104crashed thread: 1780application specific information:fatal error: exception_access_violation_writethread 1780 crashed:0   **********************************\vcruntime140dll0x7ffa01d714d3      memcpy1   **********************************\lib-mathdll0x7ffa01b80d2c      _soxr_deinterleave_f (data-ioc:50)2   **********************************\lib-mathdll0x7ffa01b7ef45      soxr_input (soxrc:648)3   **********************************\lib-mathdll0x7ffa01b7f773      soxr_process (soxrc:799)4   **********************************\lib-mathdll0x7ffa01b7d0f7      [inlined] std::pair<t>::{ctor} (utility:193)5   **********************************\lib-mathdll0x7ffa01b7d0f7      resample::process (resamplecpp:111)6   **********************************\audacityexe0x7ff60fa4bdc5      mixer::mixvariablerates (mixcpp:520)7   **********************************\audacityexe0x7ff60fa4c102      mixer::process (mixcpp:669)8   **********************************\audacityexe0x7ff60f9d50a6      audioio::fillplaybuffers (audioiocpp:1848)9   **********************************\audacityexe0x7ff60f9d995d      audioio::trackbufferexchange (audioiocpp:1782)10  **********************************\audacityexe0x7ff60f9d48db      audiothread::entry (audioiocpp:1737)11  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc81f8c      wxthread::callentry (thrimplcpp:356)12  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc82a6e      wxthreadinternal::dothreadstart (threadcpp:551)13  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc8a84b      wxthreadinternal::winthreadstart (threadcpp:583)14  *******************\ucrtbasedll0x7ffa19811bb1      thread_start<t>15  *******************\kernel32dll0x7ffa1b4b7033      basethreadinitthunk16  *******************\ntdlldll   0x7ffa1bbc2650      rtluserthreadstartthread 167640   **********************************\wxbase313u_vc_x64_customdll0x7ff9ecbf9402      [inlined] wxlocaleuntranslatedstrings_wximplementation_hashtable::getnode (threadinfoh:19)1   **********************************\wxbase313u_vc_x64_customdll0x7ff9ecbf9402      [inlined] wxlocaleuntranslatedstrings::find2   **********************************\wxbase313u_vc_x64_customdll0x7ff9ecbf9402      wxtranslations::getuntranslatedstring (translationcpp:1675)3   **********************************\lib-stringsdll0x7ffa0814d4af      [inlined] wxgettranslation (translationh:272)4   **********************************\lib-stringsdll0x7ffa0814d4af      translatablestring::dosubstitute (translatablestringcpp:97)5   **********************************\lib-stringsdll0x7ffa081446ff      translatablestring::doformat (translatablestringh:229)6   **********************************\lib-stringsdll0x7ffa081459c0      translatablestring::translation (translatablestringh:79)7   **********************************\audacityexe0x7ff60f9fa171      cellularpanel::handlemotion (cellularpanelcpp:383)8   **********************************\audacityexe0x7ff60f9f99a5      cellularpanel::handlemotion (cellularpanelcpp:261)9   **********************************\audacityexe0x7ff60f9fb465      cellularpanel::onmouseevent (cellularpanelcpp:804)10  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecb114a3      wxappconsolebase::calleventhandler (appbasecpp:669)11  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc3c733      wxevthandler::processeventifmatchesid (eventcpp:1415)12  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc3c2ab      wxeventhashtable::handleevent (eventcpp:1023)13  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc3dbcc      wxevthandler::tryhereonly (eventcpp:1612)14  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc3c7a4      wxevthandler::processeventlocally (eventcpp:1545)15  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc3c65b      wxevthandler::processevent (eventcpp:1518)16  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecc3d769      wxevthandler::safelyprocessevent (eventcpp:1636)17  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c0e1a2      wxwindow::handlemouseevent (windowcpp:5875)18  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c0e552      wxwindow::handlemousemove (windowcpp:5957)19  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c144e3      wxwindow::mswhandlemessage (windowcpp:3105)20  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c174e7      wxwindow::mswwindowproc (windowcpp:3877)21  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c1d6ff      wxwndproc (windowcpp:2940)22  *******************\user32dll  0x7ffa1b2fe7e7      usercallwinproccheckwow23  *******************\user32dll  0x7ffa1b2fe228      dispatchmessageworker24  *******************\user32dll  0x7ffa1b2fbfdf      isdialogmessagew25  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c16566      wxwindow::mswsafeisdialogmessage (windowcpp:2805)26  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c1608e      wxwindow::mswprocessmessage (windowcpp:2689)27  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c29f7e      wxguieventloop::preprocessmessage (evtloopcpp:145)28  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c2a041      wxguieventloop::processmessage (evtloopcpp:163)29  **********************************\wxmsw313u_core_vc_x64_customdll0x7ff9e7c2977c      wxguieventloop::dispatch (evtloopcpp:227)30  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecb50074      wxeventloopmanual::processevents (evtloopcmncpp:237)31  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecb4fe7d      wxeventloopmanual::dorun (evtloopcmncpp:283)32  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecb5013b      wxeventloopbase::run (evtloopcmncpp:90)33  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecb1474b      wxappconsolebase::mainloop (appbasecpp:380)34  **********************************\audacityexe0x7ff60f9c93b9      audacityapp::onrun (audacityappcpp:1652)35  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecba1dd9      wxentryreal (initcpp:507)36  **********************************\wxbase313u_vc_x64_customdll0x7ff9ecca8ff7      wxentry (maincpp:184)37  **********************************\audacityexe0x7ff60ffe0f39      [inlined] invoke_main (exe_commoninl:102)38  **********************************\audacityexe0x7ff60ffe0f39      __scrt_common_main_seh (exe_commoninl:288)39  *******************\kernel32dll0x7ffa1b4b7033      basethreadinitthunk40  *******************\ntdlldll   0x7ffa1bbc2650      rtluserthreadstart` || ive figured out it crashes both on the timeline region playback and the wave track selectionthe video just in case you can see it allows the user to switch between two kinds of selection but audacity crashes when reached the end of the selection  || see commit 03b0d3f by @davidbailes -- i think its a recurrence of that crash in sour and will be easily  || > see commit [03b0d3f]( by @davidbailes -- i think its a recurrence of that crash in sour and will be easily fixedcode comment says that was windows only  is that what we observe with this crash too? || @penikov @petersampsonaudacity if you run windows does this bug occur only with wasapi host?  that is what code and commit comments for older related bugs suggest || @paul-licameli  - yes just with wasapii just tested on w10 with latest 310 build: mme and wds looping plays just finewith wasapi it crashes when you try to play the same loop with no audio output at alli have not tested on macos || @paul-licameli plays ok with wasapi host with your latest branch build: || > > > @penikov @petersampsonaudacity if you run windows does this bug occur only with wasapi host? that is what code and commit comments for older related bugs suggesti thought it occurred only with wasapi but later i have reproduced this bug with other interfaces ||,1,0,fix crash on looping play seen on windows a recurrence of bugs 1887 and 2025  these worked around a bug in the soxrlibrary  recent rearrangements of playback engine sometimes failed to do theworkaround,,0,0,0,0,0,0,0,0,0
1967,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,snapping when dragging whole play region leaves length unchanged,resolves: #1961   moving the whole play region should never change its length when it snaps either end  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1961,snapping when dragging whole play region leaves length unchanged,"resolves: #1961 moving the whole play region should never change its length when it snaps either end<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,snapping the loop region with hand tool drag isnt correct,**describe the bug**the loop region doesnt keep its length constant**to reproduce**1 make some sound2 drag in the timeline to the right of the clip to make a region3 drag the middle of the clip (where hand cursor shows) slowly leftward4 let a yellow snap line appear continue slow movementobserve:  the un-snapped end still moves causing a change in the length of the loop region behavior**the loop region does not change length  while one end snaps neither end moves,,1,0,snapping when dragging whole play region leaves length unchanged,,0,0,0,0,0,0,0,0,0
1976,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,fixes alt key behavior if track is present,there are still edge cases left while editing the clip name. the fix for them will be complex and is out of scope for the release branch hotfix  resolves: #1962   *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1962,fixes alt key behavior if track is present,"there are still edge cases left while editing the clip name the fix for them will be complex and is out of scope for the release branch hotfixresolves: #1962 *(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,menu bar cannot be accessed using the keyboard when an audio track is the focus,**describe the bug**menu bar cannot be accessed using the keyboard when an audio track is the focus this bug does not occur when a label track is the focusthe keystroke alt+f4 to close the audacity window and shift+f10 to open a tracks menu are also affected by this bug and there may be others**to reproduce**steps to reproduce the behavior:1 set an audio track to be the focus2 press alt or f10 to move the focus to the menu bar or press alt + access key to open one of the menus in the menu bar for example alt+f press alt+f4 to close the window press shift+f10 to open the tracks menu3 nothing happens**expected behavior**press:alt or f10: the first item in the menu bar becomes the focuswhen alt + f (etc): the file menu opensalt+f4: the audacity window closesshift+f10: the tracks menu opensthese are all important keystrokes for keyboard users**additional information (please complete the following information):**tested on windows 10,,1,0,fixes alt key behavior if track is presentthere are still edge cases left while editing the clip the fix for them will be complex and is out of scope for the release branch hot fix,,0,0,0,0,0,0,0,0,0
1978,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,change shortcut for renaming label to hardcoded ctrl+f2,resolves:  resolves:   problem: for label tracks enter (hardcoded) for renaming the selected label  is the same shortcut used by default by the command for toggling the selectedness of the track.  fix: use the shortcut ctrl+f2 for renaming the selected label. warning: this has been implemented by hardcoding this shortcut  rather than providing a context sensitive command for renaming both clips and labels. this was done due to a shortage of time. this hardcoded shortcut should be removed after the release of 3.1.0  in changing the shortcut from enter to ctrl+f2  in labeltrackview::docapturekey()  in the line: if (isvalidindex(mtexteditindex  project) || isvalidindex(mnavigationindex  project)) {  the case isvalidindex(mnavigationindex  project) was removed. this had been added in commit a0ad72d  presumably to capture the enter key. this was an incorrect change and caused issue #1780:a label can be created by typing regardless of option setting. so this commit also fixes that issue.   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1780,change shortcut for renaming label to hardcoded ctrl+f2,"resolves:   for label tracks enter (hardcoded) for renaming the selected label is the same shortcut used by default by the command for toggling the selectedness of the trackfix: use the shortcut ctrl+f2 for renaming the selected labelwarning: this has been implemented by hardcoding this shortcut rather than providing a context sensitive command for renaming both clips and labels this was done due to a shortage of time this hardcoded shortcut should be removed after the release of 310in changing the shortcut from enter to ctrl+f2 in labeltrackview::docapturekey() in the line:if (isvalidindex(mtexteditindex project) || isvalidindex(mnavigationindex project)) {the case isvalidindex(mnavigationindex project) was removed this had been added in commit a0ad72d presumably to capture the enter key this was an incorrect change and caused issue #1780:a label can be created by typing regardless of option settingso this commit also fixes that issue<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",@paul-licameli probably we do want this fix in the current release branch too? || > @paul-licameli probably we do want this fix in the current release branch too?it looks low risk to me at a quick glance  if you are convinced it is correct and does not conflict with other recent developments in labeltrack then please cherry-pick it into release too ||,a label can be created by typing regardless of option setting,"**describe the bug**if a label is selected then you can type to create a label even if the ""type to create a label"" option is disabled**to reproduce**steps to reproduce the behavior:1 disable the type to create a label option in the track behaviors page of preferences2 create a label track with one or more labels3 tab to a label to select it (or click on a region label)4 type a letter5 a new label is created**expected behavior**if ""type to create a label"" is disabled then typing never creates a label**fixing this bug:**once this issue has been :  i think the fix is straightforward:in labeltrackview::docapturekey() the lines:if (isvalidindex(mtexteditindex project) || isvalidindex(mnavigationindex project)) {      if (isgoodlabeleditkey(event)) {         return true      }   }should be changed to:in labeltrackview::docapturekey() the lines:if (isvalidindex(mtexteditindex project)) {      if (isgoodlabeleditkey(event)) {         return true      }   }if this change is made before #1710 is fixed then the enter key will no longer be captured for the hardcoded use of enter to edit the label name the code would have to be modified to capture this but it shouldnt be hardcoded so best to 1710 first","and whats more it creates a second label in the same range of the region label || example of the effects of this bug:with ""type to create a label"" disabled:1 select a label2 press spacebar for playback3 press p for pause rather than pause a new label is created starting with p || ",1,0,change shortcut for renaming label to hardcoded ctrl+f2fixes the issue #1710 for label tracks (and issue #1780 see below)problem: for label tracks enter (hardcoded) for renaming the selected label is the same shortcut used by default by the command for toggling the selectedness of the trackfix: use the shortcut ctrl+f2 for renaming the selected labelwarning: this has been implemented by hardcoding this shortcut rather than providing a context sensitive command for renaming both clips and labels this was done due to a shortage of time this hardcoded shortcut should be removed after the release of 310in changing the shortcut from enter to ctrl+f2 in labeltrackview::docapturekey() in the line:if (isvalidindex(mtexteditindex project) || isvalidindex(mnavigationindex project)) {the case isvalidindex(mnavigationindex project) was removed this had been added in commit a0ad72d presumably to capture the enter key this was an incorrect change and caused issue #1780:a label can be created by typing regardless of option settingso this commit also fixes that issue,,0,0,0,0,0,0,0,0,0
1981,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,clips visibility,resolves: #1860   -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1860,clips visibility,resolves: #1860 -  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,"please do an interactive rebase to permute ""wave clip frame drawings adjustment"" and then ""unified hit testing routines for wave clips"" to the start  then every commit in the sequence will compile || third commit ""wavetrackaffordancehandle refactoring"" should mention in commit comment that the click is now also conditional on visibility of details || the drawing of small clips could be improved  observe this screenshot  a one second clip is shown at a magnification where ""clip details"" are still considered visible  see the top:  the two quarter circles with 6 pixel radius intersectperhaps you can make the radius the lesser of the constant and one-half the rectangle with<img width""48"" alt""screen shot 2021-10-21 at 9 04 03 pm"" src"" || > the drawing of small clips could be improved observe this screenshot a one second clip is shown at a magnification where ""clip details"" are still considered visible see the top: the two quarter circles with 6 pixel radius intersect> > perhaps you can make the radius the lesser of the constant and one-half the rectangle with> > <img alt""screen shot 2021-10-21 at 9 04 03 pm"" width""48"" src"" idea  ",smart clips a clip may collapse and become invisible if a user drags clip borders too much,"**describe the bug**if the user works at sample-level scales all goes well the clip has borders and is still visible even when the virtual range of a clip changed to one samplebut when the user changes track length at a lower scale clip borders tend to disappear at some scales the clip becomes invisible![изображение]( it works in dynamic: to reproduce**1 make a clip2 set a track scale to any ""ordinary"" level 3 pull any clip border to the opposite one until the clip becomes collapsed**expected behaviour**there is not a simple design issue but i think the same behaviour is appropriate to audacity: see the ui in the video has some bugs too but this concept of the clip shrinking looks good to me - version audacity 310-alpha-20211007",@tantacrul what do you think? || completely agree with expected behaviour || this issue is duplicated as #1913 ||,1,0,makes clip frame roundings look nice when clip is too short,,0,0,0,0,0,0,0,0,0
1985,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,fix for text navigation with arrows,resolves: #1931  same fix is applied to both clip names and labels  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1931,fix for text navigation with arrows,resolves: #1931same fix is applied to both clip names and labels-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,right arrow key for initial clip name editing doesnt work,after double-click on a drag bar left arrow key collapses the initial selection of all text to an insertion cursor at the beginning  right arrow should so similar**to reproduce**1 make a clip2 double click the drag bar3 press right arrow keyobserve:  nothing happens**expected behavior**selection of all letters changes to insertion cursor at the end**additional information (please complete the following information):**this is not a problem if you have clicked and dragged to select all letters  its only after the initial double click,,1,0,fixes text navigation with arrowminitialcursorpos is always updated to match mcurrentcursorpos afterarrow has been pressed (without shift),,0,0,0,0,0,0,0,0,0
1992,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,issue #1924: starting play with empty selection  loop disabled, do not play a short bit from time zero  do not briefly show play head there.  use the start time option  which prepares all before the first trackbufferexchange call  and not the older  seek  mechanism.  that instead set a variable and let the portaudio thread to react to it.  possibly the thread did not see the change in variable promptly enough  explaining the symptom.  resolves: #1924  *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1924,issue #1924: starting play with empty selection loop disabled," do not play a short bit from time zero do not briefly show play head thereuse the start time option which prepares all before the firsttrackbufferexchange call and not the older ""seek"" mechanism  that instead seta variable and let the portaudio thread to react to it  possibly the threaddid not see the change in variable promptly enough explaining the symptomresolves: #1924*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,audioplay back starting with wrong audio,**describe the bug**when initiating playback from a point on the track audacity plays a short section from the beginning of  the track before playing the correct audio**to reproduce**steps to reproduce the behavior:1 generate a chirp2 click on the track somewhere near the middle3 start play (spacebar or play button)4 observe that playback begins with audio from the start of the track**expected behavior**playback should begin from the play position**video** information (please complete the following information):** - os: xubuntu 2004 - version 310-alpha-20211014 - (if relevant) sound device: default (pulse) alc269vc**additional context**this issue renders audacity unusable  for detailed audio work,,1,0,"issue #1924: starting play with empty selection loop disabled do not play a short bit from time zero do not briefly show play head thereuse the start time option which prepares all before the firsttrackbufferexchange call and not the older ""seek"" mechanism  that instead seta variable and let the portaudio thread to react to it  possibly the threaddid not see the change in variable promptly enough explaining the symptom",,0,0,0,0,0,0,0,0,0
1993,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,fix timeline hot zones,resolves: #1971   make correct hot zones for drags in the timeline when looping is disabled.  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1971,fix timeline hot zones,"resolves: #1971 make correct hot zones for drags in the timeline when looping is disabled<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,wrong hot zones for timeline drags when looping is off,**describe the bug**hand cursor can appear outside of the looping region**to reproduce**1 generate sound2 drag a looping region3 disable the looping region (l key)4 drag a selection in the track that does not overlap the looping region5 move mouse to the timeline above the selectionobserve:  hand cursor  clicking and dragging moves the disabled looping region though the hand remains outside it6 move mouse to the timeline above an endpoint of the selectionobserve:  east-west cursor  clicking and dragging causes an end of the looping region to jump to where the mouse is**expected behavior**hand cursor should appear only inside the looping regionalso ive agreed with martin that it should also appear only when the looping region is enabledeast-west-cursor appears only at the end of the looping region whether enabled or not,,1,0,fix typo that disabled dragging of right end of loop region,,0,0,0,0,0,0,0,0,0
2002,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,fix playback policies,resolves: #1984 resolves: #1994 resolves: #1995 resolves: #2003  behavior of playback when looping is not enabled should be as before.  play from left edge of the selection  either to right edge (if that is different) or to the end of the tracks  and once only.  also change reactions of play in progress to changes of the loop region or state of the loop button.  when button is up  play as non-looped.  when it is down  jump only leftward to the start of the loop  and only when playback reaches the right edge.  so if playback is right of the loop  it also continues to the end and stops.  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1984,fix playback policies,resolves: #1984resolves: #1994resolves: #1995resolves: #2003behavior of playback when looping is not enabled should be as before  play from left edge of the selection either to right edge (if that is different) or to the end of the tracks and once onlyalso change reactions of play in progress to changes of the loop region or state of the loop button  when button is up play as non-looped  when it is down jump only leftward to the start of the loop and only when playback reaches the right edge  so if playback is right of the loop it also continues to the end and stops-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,playback looping playback still replaying on loop even when the pbl button is off,**describe the bug**playback still replaying on loop even when the pbl button is off**to reproduce**steps to reproduce the behaviour:1 add a clip2 select a region on the track3 click on the looping button4 run playback5 while playback is running click the playback button one more time**expected behaviour**playback continues beyond the looping region**screenshots** information (please complete the following information):** - os: windows 10 - version: audacity 31 pre-release-  the last stable version of jack is installed in the pc,,1,0,easier to shrink loop region at the right without play head escaping,,0,0,0,0,0,0,0,0,0
2002,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,fix playback policies,resolves: #1984 resolves: #1994 resolves: #1995 resolves: #2003  behavior of playback when looping is not enabled should be as before.  play from left edge of the selection  either to right edge (if that is different) or to the end of the tracks  and once only.  also change reactions of play in progress to changes of the loop region or state of the loop button.  when button is up  play as non-looped.  when it is down  jump only leftward to the start of the loop  and only when playback reaches the right edge.  so if playback is right of the loop  it also continues to the end and stops.  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1994,fix playback policies,resolves: #1984resolves: #1994resolves: #1995resolves: #2003behavior of playback when looping is not enabled should be as before  play from left edge of the selection either to right edge (if that is different) or to the end of the tracks and once onlyalso change reactions of play in progress to changes of the loop region or state of the loop button  when button is up play as non-looped  when it is down jump only leftward to the start of the loop and only when playback reaches the right edge  so if playback is right of the loop it also continues to the end and stops-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,looping play head movements as really intended,"the real intent for movements of the play head with looping playback:* play starts at the left edge of selection even if that is outside of the looping region * if that is right of the region or the loop region is disabled then play just continues to the end and stops * if that is left of the region or in it play continues until the right edge of loop region then jumps to the leftin other words the looping region is a ""trap"" for the play head  also:* these rules are applied even if the play region is changed during play* the rules are applied even if the play region is toggled during playsee also issue #1984",,1,0,easier to shrink loop region at the right without play head escaping,,0,0,0,0,0,0,0,0,0
2002,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,fix playback policies,resolves: #1984 resolves: #1994 resolves: #1995 resolves: #2003  behavior of playback when looping is not enabled should be as before.  play from left edge of the selection  either to right edge (if that is different) or to the end of the tracks  and once only.  also change reactions of play in progress to changes of the loop region or state of the loop button.  when button is up  play as non-looped.  when it is down  jump only leftward to the start of the loop  and only when playback reaches the right edge.  so if playback is right of the loop  it also continues to the end and stops.  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1995,fix playback policies,resolves: #1984resolves: #1994resolves: #1995resolves: #2003behavior of playback when looping is not enabled should be as before  play from left edge of the selection either to right edge (if that is different) or to the end of the tracks and once onlyalso change reactions of play in progress to changes of the loop region or state of the loop button  when button is up play as non-looped  when it is down jump only leftward to the start of the loop and only when playback reaches the right edge  so if playback is right of the loop it also continues to the end and stops-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,when the looping is off nothing should be looping (selection should not loop waveform should not be looped as well),currently when looping has been switched off the looping behaviour still persists:- when there a part of the waveform is selected its looped it should be played once- when the looping is off and youre playing till the end of the waveform its start playing from the very beginning but should just stop at the end- when you make a point to play from at the beginning of the track the playback starts at the beginning of the waveform (not consistent with prev audacity versions?),please clarify the third bullet point  are you referring to the case that the leftmost clip of the track is later than time zero and you select a point in time befor the clip? ||,1,0,easier to shrink loop region at the right without play head escaping,,0,0,0,0,0,0,0,0,0
2002,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,fix playback policies,resolves: #1984 resolves: #1994 resolves: #1995 resolves: #2003  behavior of playback when looping is not enabled should be as before.  play from left edge of the selection  either to right edge (if that is different) or to the end of the tracks  and once only.  also change reactions of play in progress to changes of the loop region or state of the loop button.  when button is up  play as non-looped.  when it is down  jump only leftward to the start of the loop  and only when playback reaches the right edge.  so if playback is right of the loop  it also continues to the end and stops.  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,2003,fix playback policies,resolves: #1984resolves: #1994resolves: #1995resolves: #2003behavior of playback when looping is not enabled should be as before  play from left edge of the selection either to right edge (if that is different) or to the end of the tracks and once onlyalso change reactions of play in progress to changes of the loop region or state of the loop button  when button is up play as non-looped  when it is down jump only leftward to the start of the loop and only when playback reaches the right edge  so if playback is right of the loop it also continues to the end and stops-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,tqp is janky in the presence of loop regions,"**describe the bug**in the following situation: ( clicking before the loop region (1): this starts playback at the ""in"" point* clicking inside the loop region (2): tqp works as expected and starts exactly at the point where the user clicked * clicking after the loop region (3): this starts playback at the ""in"" point but the playhead starts at the ""out"" point leading to a mismatch in audio/visualsthis happens both with looping on and off there only needs to be a looping region present**expected behavior**playback should start where the user clicked and if looping is turned on the playhead should get trapped the played audio and playhead should match**screenshots**(3): ![image]( information (please complete the following information):*** os: windows 11* version latest release-310 (115f463)**additional context**add any other context about the problem here",,1,0,easier to shrink loop region at the right without play head escaping,,0,0,0,0,0,0,0,0,0
2007,0,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1,0,0,0,1,minor looping region ui fixes,resolves: #1999  (and two other problems)  * dragging of looping region partly into negative time should not make it disappear * yellow snap guideline should be visible at right edge of last clip * remove arbitrary restriction on selection of play regions with error message  cannot lock region beyond end of project.   -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1999,minor looping region ui fixes,"resolves: #1999 (and two other problems)* dragging of looping region partly into negative time should not make it disappear* yellow snap guideline should be visible at right edge of last clip* remove arbitrary restriction on selection of play regions with error message ""cannot lock region beyond end of project""-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,playback looping: looping region turns invisible when moved to negative time,"**to reproduce**steps to reproduce the behavior:1 create a playback region2 using the region drag (the hand as opposed to the in/out points) move it towards the left3 observe: visually disappears but remains working (it loops from 0 to out and you can drag it back out into positive time the in-point seems to fly off towards -inf though so the entire negative area turns into the ""hand"")**expected behavior**like the in point the loop region should simply hit a ""wall"" and refuse to be moved to negative time**additional information (please complete the following information):** - os: windows 11 - version latest release-310 (115f4639a)",,1,0,fix disappearance of loop region intersecting negative time range,,0,0,0,0,0,0,0,0,0
2013,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,issue 1990: fix clip rename history,resolves: #1990  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1990,issue 1990: fix clip rename history,resolves: #1990-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,smart clip clip names clip renaming history doesnt save properly,**describe the bug**clip renaming history doesnt save properly in some cases this brings the impossibility to undo clip renaming**to reproduce**steps to reproduce the behaviour:1 add an audio clip2 change the name of the clip3 it is important not to move the clip along the track4 change the clip name one time5 change the clip name again6 press the ctrl+z shortcut **expected behaviour**clip name should return to the previous value**actual behaviour**clip name returns to the very first value **screenshots** information (please complete the following information):** - os: windows 10 - version: audacity 31 pre-release**additional context**if you will move the clip after each case of renaming the history of renaming will save correctly,,1,0,fix clip rename historypreserves changes made in a sequence,,0,0,0,0,0,0,0,0,0
2014,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,issue 1969: fix recording starting position,resolves: #1969  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,1969,issue 1969: fix recording starting position,resolves: #1969-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,difference in recording starting position when appropriate for recording track is not selected,steps to reproduce:1 create mono track2 select range from 5 to 7 and generate silence2 make sure that selected recording device has two channels3 place selection in the middle of the clip generated in step 24 start recording5 note: new stereo track created and new clip starts exactly from the place where the cursor was positioned to( delete recording (clip not the whole track)7 place selection in the middle of the clip generation in step 28 start recordingobserve: new clip starts where clip generated in step 2 ends![image](https://user-imagesentcom/20165230/137921638-8d6148b3-1b05-49fb-b8f8-11c6a74d8304png),,1,0,fix recording starting positionwhen adjusting recording starting position only tartget tracks areconsidered,,0,0,0,0,0,0,0,0,0
2015,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,initialize play region to be invalid region,this change is required to maintain consistency between default and cleared play regions  resolves: #2011   *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,2011,initialize play region to be invalid region,"this change is required to maintain consistency between default and cleared play regionsresolves: #2011 *(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,playback looping loopin region marks appeared at minus 1 sec,**describe the bug**playback often does not run at the cold audacity start**to reproduce**steps to reproduce the behavior:1 reset settings via the dialog2 close audacity3 open audacity4 observe the looping region markers at minus 1 sec![изображение]( behavior**playback runs well**actual behaviour**playback doesnt work**additional information (please complete the following information):** - os: windows 10 - version: audacity 31 the latest pre-release build,,1,0,initialize play region to be invalid regionthis change is required to maintain consistency between default and cleared play regions,,0,0,0,0,0,0,0,0,0
2023,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,adds a checkmark to  loop on/off  menu,resolves: #2019   <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,2019,"adds a checkmark to ""loop on/off"" menu","resolves: #2019 <!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",@crsib thanks for the prompt fix ||,tedious or impossible for users of screen readers to find out if looping is on or off,**describe the bug**the loop on/off option on the looping sub menu on the transport menu is not checked when looping is onwithout this being checked its either tedious or impossible for users of screen readers to know whether the looping setting is on for users of jaws and nvda they can go to the upper toolbars and check whether the loop button is pressed but the narrator screen reader does not read whether or not the button is pressedit should be easy for users of screen readers to check whether looping is on or not**to reproduce**steps to reproduce the behavior:1 set looping to be on2 open the looping sub menu on the transport menu3 the loop on/off option is not checked**expected behavior**if looping is on then the loop on/off option should be checked compare with the options on the transport options sub menu where options are checked**additional information (please complete the following information):**tested on windows 10,hmm i cannot reproduce this || > hmm i cannot reproduce thiscan you give more details of what you cannot reproduce? || sorry ive looked into a wrong menu :-( ||,1,0,"adds a checkmark to ""loop on/off"" menu",,0,0,0,0,0,0,0,0,0
2030,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,0,fix manual link,resolves: #2029  *(short description of the changes and the motivation to make the changes)*  <!-- use  x  to fill the checkboxes below like  -->  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,2029,fix manual link,"resolves: #2029*(short description of the changes and the motivation to make the changes)*<!-- use ""x"" to fill the checkboxes below like  -->-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior",,help url broken,**describe the bug**help button to online manual is brokenthe main url your online manual works finethe more specific url for the ftt tool does not work **to reproduce**steps to reproduce the behavior:1 create some track2 open the fft tool: analyze --> plot spectrum 3 click on the   symbol4 in the popup: click on `view the manual online`**expected behavior**this link should open the online manual page for this toolbut: ` is not available**additional information (please complete the following information):** - os: arch linux - version audacity 241 (offical package sources)**additional context**this url is created and opened by audacity: ` finding the manual page via google it turns out that the path changed to `plot_spectrumhtml`,that report came in just in time for the release in 31 which should be released super soon (as in maybe today) it seems like the arch package is pretty out of date though so make sure to download the current appimage via  to get the fix :)  ||,1,0,fix manual link,,0,0,0,0,0,0,0,0,0
2039,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,0,1,0,1,fix envelope drawing again,resolves: #2036  fix drawing of envelope points correctly for trimming or time shifting or both  -  i signed [cla]( -  the title of the pull request describes an issue it addresses -  if changes are extensive  then there is a sequence of easily reviewable commits -  each commit s message describes its purpose and effects -  there are no behavior changes unnecessary for the stated purpose of the pr  recommended: -  each commit compiles and runs on my machine without known undesirable changes of behavior,,2036,fix envelope drawing again,resolves: #2036fix drawing of envelope points correctly for trimming or time shifting or both-  i signed [cla](  the title of the pull request describes an issue it addresses-  if changes are extensive then there is a sequence of easily reviewable commits-  each commits message describes its purpose and effects-  there are no behavior changes unnecessary for the stated purpose of the prrecommended:-  each commit compiles and runs on my machine without known undesirable changes of behavior,,when a clip is moved envelope points move too fast!,**describe the bug**when a clip is moved the envelope points are moved too much**to reproduce**steps to reproduce the behavior:1 create a short clip2 create a few envelope points in the clip3 drag the clip to the right4 the envelope points move faster to the right than the speed of the clip**expected behavior**envelope points should behave themselves**screenshots**if applicable add screenshots to help explain your problem**additional information (please complete the following information):**tested on windows 10 with commit 5f44d9b8754fa70,oh yuk the original envelope bug was annoying this is much worse ||,1,0,fix envelope drawing again,,0,0,0,0,0,0,0,0,0
