issueNumber,prNumber,Util,Network,i18n,Test,IO,corpus
87.0,146,1.0,0.0,0.0,0.0,1.0,merge of pull for issue operator takewhile manually merging from mairbek implementation of done by mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch
18.0,156,1.0,0.0,0.0,0.0,1.0,implemented toiterable operation for issue this would allow to implement other blocking methods like single lastordefault next this looks good merging
164.0,165,1.0,0.0,0.0,0.0,1.0,bug in ranges issue
74.0,248,1.0,0.0,0.0,0.0,1.0,implemented sample operation now that operationinterval is in operationsample see was kind of straightforward i also added a unit test against sampling and allowed for specifying a scheduler used by the sample operation we want methods on observable dont we sure i just completely forgot about that ill add them
93.0,249,1.0,0.0,0.0,0.0,1.0,timestamp operation straightforward implementation of issue based on operationmap without the scheduler version as map doesnt take a scheduler yet either the failing test has nothing to do with my changes i guess its a sporadic test problem as theres not much difference between and milliseconds this should also be added to observable shouldnt it my eclipse configuration also automatically added a lot of override annotations i hope you dont mind otherwise i can remove them again of course the override annotations are fine they are standard java they may be missing in some places because this project started with java compliance and it had the annotations in less places than java
17.0,250,1.0,0.0,0.0,0.0,1.0,initial implementation of asyncsubject ive done some work on asyncsubject including unit tests and im looking for feedback i dont expect to get this pull request immediately accepted but i hope to find out if this is the correct workflow for this repository and if the code is up to your standards before i start pouring in more hours into issue if you guys are ok with the asyncsubject implementation ill start working on the otherslooking forward to some feedback hi michaeldejong thanks for getting involvedbased on my reading of the msdn docs for asyncsubject and your code this looks goodthank for you following the coding style of the project and making sure the copyright unit tests etc are all in placemerging now
20.0,257,1.0,0.0,0.0,0.0,1.0,improved scan reduce aggregate scan is currently restricted to accumulators of type func where func would be possible for initial values of type r this pull request tries to fix this by generalizing the scan implementation i had to restructure the scan operator a bit for this to stay typesafe imho its more readable now thoughthis indirectly leads to generalized reduce tooalso aggregate is added as an alias for reduce see thank you for working on this observable had not had any changes done to it to expose the new reduce or scan methods so that should probably be added to this pull request what names should we use on the public apirxnet never used reduce it uses aggregate others call it fold accumulate etc more here is using the reduce and collector names what names should we use and what aliases if any should we include in observable about observable hmm seems that the changes got lost somehow ill go dig them out agai d about the names to use imho rxjava should have the java names as well as the orginial rxnet names agreed with your opinion on naming can you add those when you update the observable and make sure the javadocs of the methods are clear in linking to each other when they are aliases of each other ive had a look at the java stream operations to me it looks like theres no explicit scan equivalent in java or am i missing something collect seems to be specifically made for mutable operations i dont see where we would use thatso i would just alias reduce with aggregate and scan stays unaliased if thats okay that works for me we can always add more aliases if java adds a scan equivalent i plan on doing a release tomorrow about hours from now if you want to try and have this ready for that rxjava pull requests looks good as soon as this is in my swing branch becomes finally ready for a merge it offers a few simple observables created from button click keyboard and mouse events looking forward to this
38.0,375,1.0,0.0,0.0,0.0,1.0,implemented distinct operator this pr implements distinct as speficied by again i havent implemented the net methods taking an iequalitycomparator see
372.0,381,1.0,0.0,0.0,0.0,1.0,implemented mapwithindex as requested by samuelgruetter in test failure again due to sporadic timing problems i just submitted an issue for this
41.0,390,1.0,0.0,0.0,0.0,1.0,implemented the elementat and elementatordefault operators see hithis implements the elementat and elementatordefault operators from for elementat if the index is less than or greater than or equal to the number of elements in the source sequence an indexoutofboundsexception will be threwfor elementatordefault if the index is less than an indexoutofboundsexception will be threw whats more i added a defaultvalue parameter i can not get the element type in the source observable due to type erasure so i can not determine the default value automatically thats why elementatordefault needs a defaultvalue parameter thank you zsxwing
84.0,409,1.0,0.0,0.0,0.0,1.0,implemented synchronize with lock hii implemented to support that sending a lock to the synchronize operatori also found that there was a issue that testmultithreadedwithnpe and testmultithreadedwithnpeinmiddle might fail in some special situation when onerror is invoked before any onnext the last statement assertequals busyobservermaxconcurrentthreadsget in these methods will fail i also this issue in the pull request looks good thank you
42.0,415,1.0,0.0,0.0,0.0,1.0,implemented the empty operator with scheduler hii implemented the empty operator with scheduler please take a look thanks
89.0,416,1.0,0.0,0.0,0.0,1.0,implemented the throw operator with scheduler hii implemented the throw operator with scheduler i found that rxjava had an error method so i just implemented the scheduler overload benjchristensen i agree with you i updated the codes and rebased it to master
54.0,424,1.0,0.0,0.0,0.0,1.0,implemented the ignoreelements operator hii implemented the ignoreelements operator please take a look thanks can you rebase this with the changes to master so it can be cleanly merged again with all the other changes this no longer cleanly mergesthank you zsxwing for this and all the other pull requests i really appreciate your involvement in the project i rebased the pull request now it should be able to merge to master directly looks good
90.0,450,1.0,0.0,0.0,0.0,1.0,implemented the timeinterval operator hi this pr implemented the timeinterval operator please take a look thanks looks good thanks zsxwing
22.0,460,1.0,0.0,0.0,0.0,1.0,implemented the amb operator hi this pr implemented the amb operator i used varargs to support the array version and first second version in one method so in my pr there are only two variants you shouldnt define a vararg method taking a generic type because you cannot use it without getting warnings weve already had this with other operators instead define an overload for args args args yup its a pain but this is what we ended up doing for zip merge etc instead of using varargs thank you
91.0,463,1.0,0.0,0.0,1.0,1.0,added the rest overloads of timeout operator hi this pr implemented the rest overloads of timeout operator please take a look thanks due to pull request which touched virtually every file in the project can you please rebase this so it can merge cleanly again i have rebased it thank you zsxwing
99.0,481,1.0,0.0,0.0,0.0,1.0,implement the using operator hi this pr implemented the using operator please take a look thanks interesting operator hadnt really ever looked at this onethank you zsxwing for the implementation
68.0,492,1.0,0.0,0.0,0.0,1.0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks this conflicts and cant merge can you rebase and update the pr please i have updated the pr
82.0,492,1.0,0.0,0.0,0.0,1.0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks this conflicts and cant merge can you rebase and update the pr please i have updated the pr
98.0,492,1.0,0.0,0.0,0.0,1.0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks this conflicts and cant merge can you rebase and update the pr please i have updated the pr
100.0,506,1.0,0.0,0.0,0.0,1.0,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of the operationgroupbytest test issue has not be yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
23.0,506,1.0,0.0,0.0,0.0,1.0,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of the operationgroupbytest test issue has not be yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
88.0,506,1.0,0.0,0.0,0.0,1.0,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of the operationgroupbytest test issue has not be yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
96.0,513,1.0,0.0,0.0,0.0,1.0,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
97.0,513,1.0,0.0,0.0,0.0,1.0,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
532.0,560,1.0,0.0,0.0,0.0,1.0,add type variances for dooneach actions this fixes the use of contravariant actions issue
52.0,563,1.0,0.0,0.0,0.0,1.0,operation groupbyuntil issue rebased
53.0,565,1.0,0.0,0.0,0.0,1.0,operator groupjoin v issue rebasedstill headinthebox while writing the test for the operator ive noticed that when both duration selectors are never rxnet never calls oncompleted on the group subjects even though the left and right sources oncomplete i havent seen rxnet test for this scenario this comes into play when i want to emulate join with groupjoin the outer merge never oncompletes if i understand the behavior corretly when both left and right sources get depleted there is no way a new group or new group value would arrive and all the open groups and the main observer can be oncompleted this is somewhat similar to join and groupbyuntil behavior
74.0,571,1.0,0.0,0.0,0.0,1.0,operation sample with observable v issue sample will terminate if either the source or the sampler terminates or throws an error the sampler now emits values only in its onnext method therefore if the sampler completes and there is a sampled value available valuetaken false it wont emit the value before terminating
60.0,587,1.0,0.0,0.0,0.0,1.0,operation longcount issue straightforward version of the regular count however i would have implemented it differently so the constant boxing unboxing could be avoided
666.0,667,1.0,0.0,0.0,0.0,1.0,operators skip skiplast take with time rebased version without the drain scheduler variant fixes issue mentioned in as well
653.0,733,1.0,0.0,0.0,0.0,1.0,buffer with observable boundary mentined in issue overload where the user can specify the capacity of the internal buffer
653.0,734,1.0,0.0,0.0,0.0,1.0,delay with subscription and item delaying observables listed in note onerror and oncompleted events of the source are immediately propagated and will prevent emitting any pending values
653.0,735,1.0,0.0,0.0,0.0,1.0,window with observable boundary listed in issue
653.0,736,1.0,0.0,0.0,0.0,1.0,mergemap with iterable and resultselector overloads listed in forgot an overload looks these operators can be implemented by composing the existing operators i agree there is likely some simplification we can do on this but im going to merge as the public apis look correct and unit tests are good we can iterate on the implementation internally
653.0,738,1.0,0.0,0.0,0.0,1.0,publish and publishlast overloads listed in these operators use the existing multicast and subject infrastructure so i omitted any direct tests
653.0,740,1.0,0.0,0.0,0.0,1.0,timeout with selector overloads listed in
653.0,741,1.0,0.0,0.0,0.0,1.0,zip with iterable removed old aggregator version and updated tests listed in these are instance methods none of our zip operators are at the instance level i would have thought wed add the zip overloads with iterable to match the existing static ones i went according to where there was zip overloads without strike through agreed on the overloads but they should be static correct no the intention was to chain them to an existing observable javaobservablefrom zip arraysaslist a b a b makes sense wasnt sure as it was different than all the other zip methods thanks for confirming
799.0,825,1.0,0.0,0.0,0.0,1.0,issue commenting out the call to attachcallingthreadstack when co nstructing a compositeexception should i merge this manually into
939.0,955,1.0,0.0,1.0,1.0,1.0,replaysubject leak fix for issue i can confirm this for me thanks akarnokd this might in fact be the final nail in the coffin for any workarounds we used on android to prevent activities from leaking this is great benjchristensen do you think we could get this in for that would be fantastic it would simplify reasoning about requirements for android operators a lot since the use of cache and replay is quite common on android and some design decisions for operatorobservefromandroidcomponent were made purely due to the existence of this bug no one actually thought to question the correctness of the underlying operator back then hah
1152.0,1160,1.0,0.0,0.0,0.0,1.0,add replay and multicast variants to rxscala this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter id like someone with better scala skills that me to review this please ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable looks good is this reviewed and ready to go it is conflicting against master so can you please rebase this is also conflicting against i would like to rebase it after is merged to master waiting until is already merged rxjava pull requests successthis pull request looks good should this wait until were ready to do i think this one can be merged since has already broken the api headinthebox samuelgruetter do you mind it go for it
1153.0,1160,1.0,0.0,0.0,0.0,1.0,add replay and multicast variants to rxscala this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter id like someone with better scala skills that me to review this please ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable looks good is this reviewed and ready to go it is conflicting against master so can you please rebase this is also conflicting against i would like to rebase it after is merged to master waiting until is already merged rxjava pull requests successthis pull request looks good should this wait until were ready to do i think this one can be merged since has already broken the api headinthebox samuelgruetter do you mind it go for it
1181.0,1185,1.0,0.0,1.0,0.0,1.0,behavior subject time gap fix based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach wow this is quite the change i need fresher eyes on this one so will come back to it thank you very much for tackling this this is non trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for behaviorsubject and sharing the logic across all of the subject implsvery nice work
658.0,1185,1.0,0.0,1.0,0.0,1.0,behavior subject time gap fix based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach wow this is quite the change i need fresher eyes on this one so will come back to it thank you very much for tackling this this is non trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for behaviorsubject and sharing the logic across all of the subject implsvery nice work
126.0,1269,1.0,0.0,0.0,0.0,1.0,fix the bug that int overflow can bypass the range check fix the bug mentioned in
1206.0,1272,1.0,0.0,1.0,1.0,1.0,executorscheduler to wrap an executor for issue and this implementation should conform with the scheduler contract except it is not possible to avoid thread hopping dont worry the tasks execute serially but maybe not on the same physical thread few open improvement possibilities usage of mpsclinkedqueue once available a better performing subscription container for this kind of queue drain task tracking instead of compositesubscription ability to remove a subscription from a compositesubscription without it calling unsubscribe on the removed subscription ã¡ la multipleassignmentsubscriptionset thanks akarnokd for this looks good for a first cut the trade offs thread hopping are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later
1514.0,1559,1.0,0.0,1.0,0.0,1.0,more consistent hooks for scheduler plugins this is a rework of deprecated rxjavadefaultschedulers and rxjavadefaultschedulersdefault i think these names are confusing added rxjavaschedulershook ability to override entire schedulers from scratch ability to decorate action before submission to schedulerthe main change from is the decoration of action instead of runnable action is an improvement as all schedulers must handle these whereas not all schedulers handle runnables reviewed with benjchristensen and merging
158.0,1602,1.0,0.0,0.0,0.0,1.0,make retrywhen the same with the scheduler as the retrywhen without the scheduler came up in
1741.0,1742,1.0,0.0,0.0,1.0,1.0,emptyobserver and testobserver remove emptyobserver as it was confusing compared to observersempty make testobserver not throw onerrornotimplemented if a delegate is not provided fixes
1502.0,1777,1.0,0.0,1.0,1.0,1.0,excluding things from the javadoc for one of the sub issues in exclude rxinternalexclude rxjavaerrorhandlerdefault by deleting it
1772.0,1802,1.0,0.0,1.0,1.0,1.0,add hasobservers method to subjects as per now keeps track of the actual subjectbufferuntilsubscriber synchronizes on the state guard looks good thanks simonbasle
1972.0,1973,1.0,0.0,0.0,1.0,1.0,test issuing non serialized messages to the subject should resolve the test failure of when the main part of the test succeded an oncompleted was sent out from the main thread which was not serialized in respect to the onnext issued from the worker thread therefore two replay was attempted sometimes at first the caughtup was seen false the replay was entered but the next instruction cleared the index causing the illegalstateexception failed in testreplaysubjectemissionsubscriptionrace failed javalangnullpointerexception at rxsubjectsreplaysubject$boundedstatereplayobserverfromindex replaysubjectjava at rxsubjectsreplaysubject$boundedstatereplayobserver replaysubjectjava at rxsubjectsreplaysubjectcaughtup replaysubjectjava at rxsubjectsreplaysubjectoncompleted replaysubjectjava at rxsubjectsreplaysubjectboundedconcurrencytesttestreplaysubjectemissionsubscriptionrace replaysubjectboundedconcurrencytestjava thanks forgot about the other test class
1897.0,2470,1.0,0.0,1.0,0.0,1.0,subject state information methods & bounded replaysubject termination fixthis pr aims to support the requests in and by adding methods to the final subject classes that let developers access in flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code and we will be careful with our observable in the future notificationlite is now extended with two missing value checks isnull and isnext each subject has hascompleted hasthrowable and getthrowable methods however i cant add them to subject because that would be an incompatible api change where applicable getvalue and getthrowable return null instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand there was a chaining bug in the bounded replaysubject because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value since replaysubject can have multiple values ive added size hasanyvalue isempty is taken and getvalues methods to make a snapshot of the current buffer contents whether or not the replaysubject has terminated the usual tolist would wait until the subject has terminated the unrelated operatormergetesttestconcurrency hangs for me for some reason without activity either a buffer bug or a merge bug is in play there ive added a timeout so it doesnt stop the other tests im merging this changes are either internal or annotated with experimental on final classes
2331.0,2470,1.0,0.0,1.0,0.0,1.0,subject state information methods & bounded replaysubject termination fixthis pr aims to support the requests in and by adding methods to the final subject classes that let developers access in flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code and we will be careful with our observable in the future notificationlite is now extended with two missing value checks isnull and isnext each subject has hascompleted hasthrowable and getthrowable methods however i cant add them to subject because that would be an incompatible api change where applicable getvalue and getthrowable return null instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand there was a chaining bug in the bounded replaysubject because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value since replaysubject can have multiple values ive added size hasanyvalue isempty is taken and getvalues methods to make a snapshot of the current buffer contents whether or not the replaysubject has terminated the usual tolist would wait until the subject has terminated the unrelated operatormergetesttestconcurrency hangs for me for some reason without activity either a buffer bug or a merge bug is in play there ive added a timeout so it doesnt stop the other tests im merging this changes are either internal or annotated with experimental on final classes
1702.0,2471,1.0,0.0,0.0,0.0,1.0,fixes npes reported in reactivex by synchronizing queue also adds a unit test for regressionit appears there is a potential race condition if something adds to removes from the pq while its _inside_ the poll operation which is where the exceptions in seem to have actually come from therefore the initial null check didnt really address the original problem the test here seems to reliably recreate those conditionsi considered using a priorityblockingqueue instead of synchronized but since the isempty and poll calls should not allow something to interleave between them and access the queue a synchronized block seemed wiser here almost good two things since we only use offer poll you can use the unbounded priorityblockingqueue now could you move counter and counter_updater into the innercurrentthreadscheduler class both non static fields we are using atomicfieldupdaters to save on the instance cost of atomicinteger s could you change the counter to use atomiclongfieldupdater done on a related but side note do you know if these field updaters are proguard safe for obfuscation they reflect on field name for sure it might be worth looking into the fix would probably be implementing the abstract setters and getters which would obviously be a bit more boilerplate and kinda less fun but might be worth it if it reduces custom proguard rules required to use rx thanks for the changes looks good to me i dont know about proguard looks like per the proguard manual it does indeed recognize fieldupdater declarations so this should be fine wow i did not expect that how uncharacteristically useful of them good to know for the future the reflection section no anchor link that lists the basic reflection methods it automatically detects
1956.0,2548,1.0,0.0,0.0,1.0,1.0,subscriberrequest should throw exception if negative request made as per discussion in and making a call to subscriberrequest n with negative n should throw an illegalargumentexception includes unit test i think the iae should be mentioned in requests javadoc javadoc added great
2545.0,2548,1.0,0.0,0.0,1.0,1.0,subscriberrequest should throw exception if negative request made as per discussion in and making a call to subscriberrequest n with negative n should throw an illegalargumentexception includes unit test i think the iae should be mentioned in requests javadoc javadoc added great
2544.0,2550,1.0,0.0,0.0,1.0,1.0,subscriberonstart requests should be additive and check for overflow as per discussion in looks good that looks helpful thanks davidmoten
2600.0,2630,1.0,0.0,0.0,0.0,1.0,cast back observer to subscriber if passed to subscribe observer rebased
2604.0,2759,1.0,0.0,0.0,0.0,1.0,observableusing should use unsafesubscribe and enable eager disposal see where it was discovered that observableusing used subscribe instead of unsafesubscribe which provoked a race condition leading to an illegalargumentexception from the merge operatorthis pr uses unsafesubscribe and adds an overload for using to optionally dispose of resources eagerly just before completion or error the use case for this is a _synchronous_ observable where a downstream operation wants to reuse a resource but because the observable is synchronous the resource cannot get disposed till the downstream completes unit tests included thanks akarnokd ive made the change and squashed commits replaced tabs with spaces added experimental annotation to new overload and typo in javadoc squashed commits this seems reasonable to me i dont use using so trust the conversation youve had to address the necessary functionality reading through the other pr this does seem necessary and i agree that unsafesubscribe is appropriate for this
2772.0,2804,1.0,0.0,0.0,0.0,1.0,observeon throughput enhancements squashed commits of further optimizations to observeon using spscarrayqueue directly in observeon instead of ringbuffer to avoid the synchronization block split tracking structure to serial subscriptionlist and timed compositesubscription in eventloopsscheduler which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark i window x java u x s warmup x s iteration benchmark size x x error this pr this errorobserveon observeon observeon observeon observeon observeon observeon observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon notes at size the throughput varies in a range on each run and since the changes dont touch the scalar optimization there is no real improvement there at size my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on at size and size the throughput doubles if i introduce some extra delay ie via sleep or some extra work the benchmark generates a lot of garbage due to boxing switching to a constant emitter increases the throughput subscribeon from to since it conflicts with anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
2773.0,2804,1.0,0.0,0.0,0.0,1.0,observeon throughput enhancements squashed commits of further optimizations to observeon using spscarrayqueue directly in observeon instead of ringbuffer to avoid the synchronization block split tracking structure to serial subscriptionlist and timed compositesubscription in eventloopsscheduler which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark i window x java u x s warmup x s iteration benchmark size x x error this pr this errorobserveon observeon observeon observeon observeon observeon observeon observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon notes at size the throughput varies in a range on each run and since the changes dont touch the scalar optimization there is no real improvement there at size my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on at size and size the throughput doubles if i introduce some extra delay ie via sleep or some extra work the benchmark generates a lot of garbage due to boxing switching to a constant emitter increases the throughput subscribeon from to since it conflicts with anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
2458.0,2883,1.0,0.0,1.0,1.0,1.0,proposal standardized subject state peeking methods this pr modifies the subject class to host the union of the state peeking methods of the various subject implementations and fixes the inconsistent behavior of replaysubjectgetvalues t the changes enable the serializedsubject to relay such state peeking method calls into the wrapped subject and allows future subject wrappers to do the same seems to make sense the additions to subject all should be non breaking due to the experimental marking of these im being a little less stringent in discussing the addition to public apis but it seems to me that the precedent set on the behaviorsubject shows the value of these methods additionally subjects are the stateful side effecting types and these methods seem to make sense for them
1483.0,2969,1.0,0.0,0.0,0.0,1.0,operator cache now supports backpressure ive removed the controversial features and made the backing cachedobservable internalrelated issue does it really need to be returning a new type of observable it seems the methods isconnected hasobservers and cachedeventcount are only used by the unit tests yes otherwise one would need ugly reflection magic to get inside the state of this observable i checked out the branch and took a shot at making it an onsubscribe function again cache had originally more functionality ie the ability to terminate it manually like a disconnect but was downwoted i forgot about the tocached methods which are just relics and ill update this protherwise i dont really see why i shouldnt extend observable especially if one day there will be a real need to support disconnection of cache ive rebased it and im going to merge this if there has concern about it being implemented as a observable a pr can always be submitted with the suggested changes
2979.0,2983,1.0,0.0,0.0,0.0,1.0,multiple calls to onstart started investigating multiple calls to onstart based on and found a bunch but since onstart can be overridden i might have missed cases in addition ive found a single place where a producer is set twice on a subscriber but again many other places may exist i know that is easy to complain this decorator strategy is not very memory friendly you have this annoying gwt compatibility perspective atomicxxxfieldupdater in a lot of places to reduce memory usage and you end up adding this decorators to only disable one method callwhat do you think thanks to solve the problem anyway yikes theres a lot of stuffed up backpressure here im hoping we can release soon
3046.0,3048,1.0,0.0,0.0,1.0,1.0,compositeexception extra npe protection compositeexception wont crash if it received null by some means a null collection or null collection item is replaced by a nullpointerexception instancesee also
3128.0,3129,1.0,0.0,0.0,0.0,1.0,fix retry with predicate ignoring backpressure apparently we forgot about this operator the backpressure handling is a trivial case with producerarbiter ive also some apparent code indentation errororiginally reported in with a test case which i didnt include due to its lengthy nature however i did run the test manually and both passed after the fix
3022.0,3149,1.0,0.0,0.0,1.0,1.0,scheduler shutdown capability repost of we still need to decide on the reset vs shutdown distinction is your perspective do you have a strong opinion one way or another with start shutdown there is a clear intention to stop everybody with reset any running code could respawn the threads and the new threads will resume leaking i prefer start shutdown agree it will be great to have ability to stop schedulers and prevent new workers from scheduling for apps that run in servlets and other similar containers which can be stopped externally im happy with the start shutdown pair which seems to support my primary use cases resource release on webapp shutdown in container resource release on completion of programs run by a framework that looked for unreleased threads maven on ad hoc basis ensuring schedulers are not running in the background on entry into a unit test when running a suite thanks akarnokd the start shutdown semantic looks good to me more explicit best enforcement of shutdown and good compatibility with items mentioned by davidmoten which are pretty much our use cases as well ill following this thread to be notified when its merged thanks akarnokd benjchristensen do you consider we have consensus on naming after that itd be showtime because so many customers from us run into this daschl i would like a bit more context on what the goal is for the scheduler shutdown capability davidmoten and any others please respond thanks resource release on webapp shutdown in containerwhat resources exactly need to be freed shutting down the schedulers would prevent new workers from being scheduled and would free up threads from the executor is this the desired behavior or is there some side effect that you are looking for resource release on completion of programs run by a framework that looked for unreleased threads maven could anyone name a framework thats impacted is the concern that open threads keep the framework from properly terminating on ad hoc basis ensuring schedulers are not running in the background on entry into a unit test when running a suite would the testscheduler solve this problem for you this doesnt rely on singleton values and can be used to precisely test scheduling behavior stealthcode i can answer the question i hope it help you could anyone name a framework thats impacted is the concern that open threads keep the framework from properly terminating couchbase java sdkcb sdk are not able to finish some of they own threads because it is referring rxcomputationthreadpool threads who cant be finishedyou can see more details about how this issue are affecting this framework here stealthcode i can give you the answer to your questions tooid like to use rxjava in the container eg id like to use jersey rx client on tomcat unfortunately it is impossible to shutdown _rxcomputationthreadpool _ threads and container has memory leaks that causes that rxjava is inapplicable for my purposes and in my case regarding question yes shutting down all schedulers permanently is a desired behaviour and testscheduler is not a solution so im really looking forward to seeing this pr accepted and released mjakubowski similar case here mjakubowski understood regarding the testscheduler this is meant for use in tests and highly recommended when it comes to a container you would definitely want to use a real scheduler so what i hear is that there is no desire to resume the scheduler once it is shut down my concern is that by offering a schedulerlifecyclestart method we are inviting non deterministic behavior in the case that someone wants to use this to teardown and then resume in integration tests for example would it be acceptable to remove the start method from the public interface and rename shutdown to teardown to more accurately describe the intent i dont have strong opinion between shutdown teardown teardown makes the intent clearer but shutdown is more idiomatic in the context of java executor otherwise the code lgtm another thing if we want to be more java idiomatic maybe hiding the start is the right thing to doit will also have the benefit of avoiding bug by misusage of the library calling start after a shutdown i can make schedulersstart package private so the tests can use it but i the scheduler implementations have to keep their start public please do i believe that would be better done akarnokd stevegury folks do you think its possible to get this into akarnokd thanks i think this is fine do you guys have a plan date to merge it akarnokd i think its appropriate that you merge this pr since you are most familiar with this code if you think you are happy with it then feel free oh sorry didnt recount the number of likes merging where can i get the latest build with this fix maven central is still at chiangh you can clone the project and build it from master good luck rxjava uses bintray for binaries and also publishes snapshots in jfrogs oss artifactory so you can add the following repository to your pomxml xml snapshots libs snapshot that you should be able to depend on rxjava snapshot
3252.0,3286,1.0,0.0,0.0,1.0,1.0,implements blockingsingle adds blockingsingle issue the blocking version of rxsingleblockingsingle has the following methods from single factory method for creating a blockingsingle from a single value returns the value emitted from the single tofuture returns a javautilconcurrentfuture couldnt actually think of any other useful operations to perform on blockingsingle in comparison to blockingobservable theres not much to this class at the moment hmmmgot a test failure that i cant reproduce locally by rxobservablessynconsubscribetest testsubscribeon failed javalangassertionerror expected but was at orgjunitassertfail assertjava at orgjunitassertfailnotequals assertjava at orgjunitassertassertequals assertjava at orgjunitassertassertequals assertjava at orgjunitassertassertequals assertjava at rxobservablessynconsubscribetesttestsubscribeon synconsubscribetestjava this test failure should be resolved now hyleung is this ready to be reviewed merged abersnaze not quite yet there are a couple of things from artem zinnatullins pr that i want to pull in splitting out a separate blockingutils class to hold awaitcomplete for example also im going to rebase it against head of x since its been about a month abersnaze the pr is ready for review btw ill keep the commits separate as i incorporate the feedback and squash it down at the end maybe move blockingsingle from rxobservables to rxsingles artem zinnatullin re rxsingles that would be a new package then dont have a particular option either way tbh anybody else ah i see what youre getting atmoved to rxsingles which other operators are you thinking of adding to single btw lgtm just a few nits left im ready to merge this as long as we can add the necessary experimental annotations and rebase onto x stealthcode done thanks for contributing
3385.0,3417,1.0,0.0,0.0,1.0,1.0,add singledoonsuccess closes artem zinnatullin rebase please abersnaze rebased
3439.0,3444,1.0,0.0,0.0,1.0,1.0,completable class to support valueless event composition tests this is a backport of looks good should we annotate experimental on all the public methods and operators now the class annotation should indicate all methods are experimental if individual methods get promoted we can add direct annotations then sounds good on sat dec david karnok notifications githubcom wrote now the class annotation should indicate all methods are experimental if individual methods get promoted we can add direct annotations then â€” reply to this email directly or view it on github since this adds to the api surface id like to get another like before merging awesome
3445.0,3447,1.0,0.0,0.0,0.0,1.0,delaysubscription with a plain other observable requested in this is an efficient implementation as it avoids allocating the lifter object doesnt require a function wrapper and doesnt use producer arbitration bonus points to those who can recognize the similarities with any thoughts about this
2835.0,3513,1.0,0.0,1.0,1.0,1.0,add shorter rxjavaplugin class lookup approach this adds a new pattern and lookup method that lets the developer specify the custom plugins with shorter system property keys android is quite restrictive and allows only charactersthe new pattern splits the target simple class name and its implementation into two separate system properties rxjavaplugin classsimpleclassnamerxjavaplugin implpathtoimplclass the index tag can be any string of your chosing rxjavapluginmykeyclasssimpleclassnamerxjavapluginmykeyimplpathtoimplclass but make sure they are paired otherwise nothing will happenif there are multiple class entries with the same simpleclassname one of them will be chosen depending on the walk order in javautilproperties related issue updated made strings local constants and using length ë™instead of magic numbers plus if the default keying matches the properties is not traversed for an alternate specification an alternative pattern could be this rxjavaplugin simpleclassnameorgpackagenamingactualclass i agree that if the plugin cannot be found we should crash the app updated the code to crash if the plugin implementation is missing
3581.0,3584,1.0,0.0,0.0,0.0,1.0,clarify behaviour of groupby in javadoc as discussed in some clarification of the behaviour of groupby looks necessary re its behaviour when the groupedobservable terminates early for example has first applied to it see also i also took the liberty of recommending ignoreelements instead of take for the section in the javadoc that recommends how to ignore emissions because the take approach would have more overhead every emission from source would prompt the emission of a new groupedobservable than the ignoreelements approachonce this is accepted ill look to submit a pr with groupbyonce mentioned in corrected the documentation that said resubscription occurs when it is rather a new groupedobservable is emittted for a group incorporated akarnokd suggestion i also took the liberty of recommending ignoreelements instead of take for the section in the javadoc that recommends how to ignore emissions because the take approach would have more overhead every emission from source would prompt the emission of a new groupedobservable than the ignoreelements approachby the way ignoreelements has a drawback it keeps all group observable s in memory even some of them wont emit items
3652.0,3655,1.0,0.0,0.0,1.0,1.0,add singleonerrorresumenext single part of will submit a pr for onerrorresumenext func later akarnokd changed to implements singleonsubscribe ptal zsxwing ptal
3660.0,3661,1.0,0.0,0.0,0.0,1.0,combinelatest now supports any number of sources this pr is a backport of the x combinelatest with null support and lets the programmer combine more than sources at once note that x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment i kept these in case such features are required by x some daythe original had this limit due to using a single and non parametric rxringbuffer to store values from sources in addition the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the bufferthis pr uses an unbounded linked spsc queue which can now hold as many elements as there are sources times the default ring buffer size this is not preallocated and grows shrinks as necessary the algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream that source subscriber gets the request replenishment call that generated the rowin addition ive added an iterator overload from as well
3685.0,3689,1.0,0.0,0.0,0.0,1.0,unified onerrorx and onexceptionresumenext and backpressure the operators didnt honor backpressure when they switched over to the other observablethis pr also includes the there was a test failure in backpressureteststestmergeasync run before any of the changes of this pr and shouldnt have any effect overloaded servers
3700.0,3701,1.0,0.0,0.0,1.0,1.0,add completabledooncompleted and deprecate completabledooncomplete closes wait what i thought you wanted to add completabledooncompleted i see no reason to change the established naming of observabledooncompleted in fact for consistency id rather prefer adding completabledooncompleted that makes sense the only reason i did it this way is because on the x branch both observable and completable use dooncomplete yes those follow the reactive streams convention and completable started out as a x addition in the meantime ill fix that test failure changed completable instead updated tests to match zach klippenstein thanks just updated the title
3710.0,3714,1.0,0.0,0.0,0.0,1.0,add maxconcurrent parameter to concatmapeager relevant issue will you update this pr yes on it i submitted a commit with your proposed changes sorry for the delay feel free to give me more comments changes also i can squash if needed dont squash this time github has now a new feature for the merge button where it offers squashing id like to test if it really squashes everything and the main just gets commit nothing critical akarnokd squashing on github works and it works especially great when author of the pr just commits on top of previous commits because github now remembers what code youve checked and what not and you can continue reviewing from previous point doesnt work for me when pr is always squashed i have updated the pr do pr commits trigger github notifications should i comment after i do an update unfortunately no notification
3711.0,3722,1.0,0.0,0.0,0.0,1.0,add maxconcurrent parameter to flatmapiterable refs should these new overloaded functions be annotated with beta the failing test testnomorerequestsafterunsubscribe seems unrelated all tests pass locally if you could add one unit test for each method that verifies maxconcurrent is honored that would be great while writing the test i figured you might have been right when commenting on issue if i am not mistaken all the observables created with operatormappairconvertselector use the same scheduler there is no way to subscribe them to different schedulers and thus are run sequentially and until completion would adding a scheduler parameter make sense there is no scheduler involved here so no as it is now
372.0,3733,1.0,0.0,0.0,1.0,1.0,avoid swallowing errors in completable instead deliver them up to the threads uncaught exception handlerfixes reactivex rxjava what happened to completabletest akarnokd sorry ij formatted it will clean up and push again just a nit about timeout in tests otherwise removed timeouts
3740.0,3741,1.0,0.0,0.0,1.0,1.0,add doonsubscribe for single ref i didnt write much unit tests for doonsubscribe because it internally uses operatordoonsubscribe which is well covered thanks aaronhe
3732.0,3752,1.0,0.0,0.0,1.0,1.0,singleusing this pr adds the factory method using overload to single as requested in for convenience ive also added singlesubscribe observer lgtm
3440.0,3766,1.0,0.0,0.0,1.0,1.0,add singleonerrorresumenext func closes closes closes whoa issues at a time akarnokd your comments btw should i add experimental to these operators yes and copy over the experimental and since tags into the javadoc there is this new like option but do you get a notification for them noon mon mar pm david karnok notifications githubcom wrote image there is this new like option but do you get a notification for them â€” you are receiving this because you are subscribed to this thread reply to this email directly or view it on github
3731.0,3766,1.0,0.0,0.0,1.0,1.0,add singleonerrorresumenext func closes closes closes whoa issues at a time akarnokd your comments btw should i add experimental to these operators yes and copy over the experimental and since tags into the javadoc there is this new like option but do you get a notification for them noon mon mar pm david karnok notifications githubcom wrote image there is this new like option but do you get a notification for them â€” you are receiving this because you are subscribed to this thread reply to this email directly or view it on github
3938.0,3942,1.0,0.0,1.0,0.0,1.0,add completablesafesubscribe option rxjavaplugins hook support add option to safely subscribe a completablesubscriber regular subscriber and handle onxxx failuressee also naming and whether or not the safe wrapping should be the default is open to discussion in my opinion safe wrapping should be the default as its the default in observable and single at least the should behave the same way when using them one should expect them to have a difference in their essential semantics and not in these kind of things should the tests about error handling plugin in be here or we leave it in that pr bryant your pr has a test failure rxpluginsrxjavapluginstest testonerrorwhenusingcompletable failed javalangassertionerror expected but was at orgjunitassertfail assertjava at orgjunitassertfailnotequals assertjava at orgjunitassertassertequals assertjava at orgjunitassertassertequals assertjava at rxpluginsrxjavapluginstesttestonerrorwhenusingcompletable rxjavapluginstestjava typo renamed methods akarnokd they fail on purpose because i made the test but didnt fix the problem completable is not calling the error handling plugin the methods should be the other way around following single and observable there should be a single unsafesubscribe method which accepts a parameter of type completablesubscriber and subscribe should be present in the following ways subscribe subscribe action subscribe action action subscribe subscriber and subscribe completablesubscriber the subscribe methods wrap with safecomletablesubscriber similar to how observablesubscribe wraps with safesubscriber subscribe subscriber is there to allow conversion and cross type apis to bypass the safety overhead updated with plugin support can you cherry pick the commit that adds tests for the error handling plugn in completable and single from sure done the comment todo plugin wrapping onsubscribe in completablecreate can be deleted as the constructor is already calling the hook now removed comment changed to reuse methods added onstart call please add the missing experimental otherwise added missing annotations
3947.0,3948,1.0,0.0,0.0,1.0,1.0,add completableandthen completable deprecate endwith see please update unit tests that use these deprecated methods done ðÿ‘ but id either duplicate tests or make universal test functions and test both endwith and andthen to make sure that we dont break old behavior of public api the question is also since completable is still experimental we could if this is wanted go the hard way and remove the deprecated methods and make everyone force to use the standard new methods since there are already quite a few deprecated duplicated methods ðÿ‘ but id either duplicate tests or make universal test functions and test both endwith and andthen to make sure that we dont break old behavior of public api artem zinnatullin im not against it but this is really minor as andthen just calls endwith im going to merge this feel free to add tests in a separate pr if you wish
3779.0,3966,1.0,0.0,0.0,0.0,1.0,add multi other withlatestfrom operators add withlatestfrom operator version that can take to n other sources and combine them with the main sourcerelated
3576.0,3974,1.0,0.0,0.0,0.0,1.0,add terminal clarification to switchmap operators see
3721.0,4024,1.0,0.0,0.0,0.0,1.0,update dooneach observer javadoc fixes the documentation problem reported in nice improvement
3007.0,4026,1.0,0.0,0.0,0.0,1.0,expand and explain cache in more detail this pr rephrases the cache documentation a bit and adds workaround for stopping and forgetting the cached valuesrelated ðÿ‘ this obviously isnt related to that but testreplaysubjectconcurrentsubscriptions failed in ci thanks will look into it before merging this could be a bug due a pattern they share nothing obvious so far the test passes for me locally when run times will investigate it further through
4001.0,4034,1.0,0.0,0.0,0.0,1.0,distinctuntilchanged with direct value comparator alternative alternative implementation to lgtm thanks jake for the review
4035.0,4036,1.0,0.0,0.0,0.0,1.0,added zip function with observable array as discussed in with akarnokd thanks almost forgot please also add a unit test that verifies this overload works with or a couple of sources you can add a unit test that for example loops from to generates an array with that many simple sources and checks if all source values actually zipped into the final value akarnokd sorry for the delay i just added tests for and multiple array sizes let me know if thats ok
4028.0,4051,1.0,0.0,1.0,1.0,1.0,fix replaysubject anomaly around caughtup by removing that optimization adding the backpressure support to replaysubject exposed a race condition around the caughtup optimizationthe problem occurs when the source thread has caught up after drain returned true but at the same time a concurrent drain starts running due to a subscribe process finishing or requesting on top of the previous longmax_value this concurrent drain may think the replay hasnt started yet by finding rpnode null or seeing that the buffer has more elements that may get double emitted the current solution is to remove this optimization until we come up with a correct optimizationrelated
3959.0,4063,1.0,0.0,0.0,0.0,1.0,scan & reduce give javadoc about unsharing the initialvalue replacement for this to not get in conflict with other prs targeting observable
4057.0,4070,1.0,0.0,0.0,1.0,1.0,merge serialdisposable and multipleassignmentdisposable closes although doesnt address the name of the class excellent although doesnt address the name of the classno problem
4109.0,4139,1.0,0.0,1.0,1.0,1.0,fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups
4138.0,4139,1.0,0.0,1.0,1.0,1.0,fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups
4137.0,4140,1.0,0.0,0.0,1.0,1.0,change completablesubscribe onerror oncomplete to oncomplete onerror closes closes actually i can deprecate old one and add new one as overload it will have less impact on user code because only calls like subscribe actionsempty actionsempty will be ambiguous to the compilerthoughts dynamic languages have trouble with the two methods lets only have method
4216.0,4226,1.0,0.0,0.0,1.0,1.0,singleflatmapcompletable addresses happy to receive feedback on the implementation also should i take the documentation from flatmapobservable and adjust it also should i take the documentation from flatmapobservable and adjust ityes updated the documentation i hope the wording is okay now also im pointing to which does not exist yet but davidmgross already tracked it at i hope thats okaythanks for the completableflatmapsingletocompletable i knew something was missing i also created two more tests that cover some of the previously missing behaviour would it be possible to get this one into if zsxwing or anyone from netflix approves it in time
4152.0,4261,1.0,0.0,0.0,0.0,1.0,concatdelayerror multiple arguments this pr adds multiple arguments to concatdelayerror operatorrelated to cc artem zinnatullin stevegury zsxwing
4260.0,4262,1.0,0.0,0.0,0.0,1.0,dooneach reduce allocations report to rxjavahooks as discussed in call rxjavahooksonerror for secondary errors reduced allocations actionsubscriber actionobserver operator onsubscribe added unit tests actionsubscriber usage and removed empty test ta
4280.0,4288,1.0,0.0,1.0,1.0,1.0,move exceptions to public area exceptionhelper related the exceptionspropagate and exceptionsthrowiffatal are too useful to be hidden in an internal package so this pr moves them into the public ioreactivexexceptions package the terminal atomics related to throwable containers lives in the exceptionhelper enum lgtm
4306.0,4309,1.0,0.0,0.0,1.0,1.0,remove unused exceptions in public api as wanted in cc jakewharton if the test changes are acceptable for your setup
4329.0,4330,1.0,0.0,0.0,1.0,1.0,added observableconcat iterable see i also adjusted the test as it was testing the wrong thing before
4082.0,4337,1.0,0.0,0.0,0.0,1.0,move disposableobserver to public area add some javadocs move disposableobserver to ioreactivexobservers some documentationrelated having these in the public api make it seem like asyncobserver becomes obsolete in the case where its not managing any additional resources should we rename it to resourceobserver or something and have it always manage resources sure will you do it yep
4366.0,4371,1.0,0.0,1.0,1.0,1.0,move blocking operators into the base classes this pr removes the blockingflowable and blockingobservable classes and moves the blocking operators into the respective reactive classes and names pre with blocking in addition many of the mentions of flowable has been replaced with observable in observable related lgtm
4199.0,4442,1.0,0.0,1.0,1.0,1.0,cleanup javadoc completablefromemitter add javadoc to asyncemitterbackpressuremode deprecate observablefromasync add observablefromemitter instead add completablefromemitter add missing placeholder since tags fix some generics error rxjavahooks add race helper to testutil fix javadoc warnings
4255.0,4442,1.0,0.0,1.0,1.0,1.0,cleanup javadoc completablefromemitter add javadoc to asyncemitterbackpressuremode deprecate observablefromasync add observablefromemitter instead add completablefromemitter add missing placeholder since tags fix some generics error rxjavahooks add race helper to testutil fix javadoc warnings
4456.0,4458,1.0,0.0,0.0,0.0,1.0,rename observable and single dooncancel to doondispose completable already used doondispose however i renamed the arguments to match observable and single the diff for observable doesnt show but the offline comparison only lists lines changes did you run some whitespace cleanup akarnokd whoops youre right sorry auto formatter seems to have changed some whitespaces ill revert that this update is missing in release notes on github please remember to mention such changes in the future
4462.0,4466,1.0,0.0,0.0,0.0,1.0,deprecate notificationcreateoncompleted it might just as well shine some light into which method should be used and explain why there are
4481.0,4488,1.0,0.0,0.0,0.0,1.0,add new methods to maybe observable and single from this pr adds just the new methods from to allow a much cleaner change of return types later on updated with corrections
4389.0,4503,1.0,0.0,0.0,0.0,1.0,add system properties to adjust thread priorities of schedulers this pr adds the ability to specify the default thread priorities of computation io newthread and single schedulers via system properties ive added the property names to the schedulers javadocrelated thanks
4501.0,4504,1.0,0.0,0.0,0.0,1.0,add disposable observer for maybe completable & single also any reason the dispoable is called s is it still from the subscription time seems unrelated ioreactivexinternaloperatorsobservableobservablerefcounttest testrepeat failed javalangassertionerror error s present javalangillegalstateexception onsubscribe not called in proper order latch values errors completions at ioreactivexobserverstestobserverfail testobserverjava at ioreactivexobserverstestobserverassertnoerrors testobserverjava at ioreactivexinternaloperatorsobservableobservablerefcounttesttestrepeat observablerefcounttestjava caused by ioreactivexexceptionscompositeexception at ioreactivexobserverstestobserverfail testobserverjava more caused by ioreactivexexceptionscompositeexception$compositeexceptioncausalchain chain of causes for compositeexception in order received caused by javalangillegalstateexception onsubscribe not called in proper order yep ill fix that next started to become annoying to me too
4524.0,4525,1.0,0.0,0.0,0.0,1.0,fix generics t in zip & combinelatest test for combinelatest fill follow
4577.0,4580,1.0,0.0,0.0,0.0,1.0,rename asyncemitter to emitter as per discussion in renaming asyncemitter to emitter via deprecationthere is a catch though completableemitter is correctly named now and depends on asyncemitter via the method java void setcancellation asyncemittercancellable c when can we break the api of that class thanks for review akarnokd i take it we have to wait for to break the api of experimental completableemitter deleting experimental apis has to wait one patch version so will have both and can remove the asyncemitter ok ill patch again once is outon thu sep david karnok notifications githubcom wrote deleting experimental apis has to wait one patch version so will have both and can remove the asyncemitter â€” you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread cc jakewharton artem zinnatullin make the cancelable interfaces extend each other as wellon thu sep pm dave moten notifications githubcom wrote _ davidmoten_ commented on this pull request in src main java rx asyncemitterjava experimental deprecated public interface asyncemitter extends observer { cannot extend emitter because of two versions of cancellable would break existing asyncemitter use â€” you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread make the cancelable interfaces extend each other as wellgood idea um i dont think its worth it juggling with inheritance of these interfaces straight after next release im just going to delete the deprecated stuff ive added a deprecated annotation to completableemitter let me know if you guys still want the interface inheritance business forgot to move cancellable to rxfunctions thats done now thanks for working this out
4498.0,4586,1.0,0.0,0.0,1.0,1.0,add error assertion with predicate to testsubscriber and testobserver added support for error assertions with to testsubscriber requested in to support custom error evaluation removes the need to implement equals and hashcode in exceptions could you do it for testobserver as well sure i will update the pr
4628.0,4629,1.0,0.0,0.0,1.0,1.0,add completablefromrunnable addresses theres maybefromrunnable but completable is missing this method thanks
4634.0,4636,1.0,1.0,1.0,1.0,1.0,update mockito to rc equivalent of but now for the x branch the test ioreactivexmaybemaybetest onterminatedetach seems to be failing claiming there is a memory leak i sadly have no experience with this test to fix it that test is a bit flaky maybe the new mockito increased the base memory usage ill fix that test and rerun this one thanks a lot and enjoy fyi mockito has been released which is equivalent to rc once again thanks a lot for using mockito
4332.0,4641,0.0,0.0,0.0,0.0,1.0,safesubscriber not to call rxjavahooks before delivering the original error before the introduction of rxjavahooks the safesubscriber_onerror called the original error handler with the exception it received which was by default an empty handler the default rxjavahooksonerror behavior however is to signal errors to the uncaught exception handler of the caller thread which leads to unnecessary logging or app crashes even though the error itself is to be handled properlythis pr restores the safesubscriber_onerror to skip the rxjavahooks and call the original handler directy so old tracking code should still get all safe error while newer hooking doesnt get calledrelated cc dlew lgtm thanks for doing this
464.0,4645,1.0,0.0,1.0,1.0,1.0,signal npe observableamb flowableamb this pr addresses
4633.0,4647,1.0,0.0,1.0,1.0,1.0,merge ambarray and ambiterable into amb for single maybe and completable types this pr addresses merge singleambarray and singleambiterable operators into singleamb merge maybeambarray and maybeambiterable operators into maybeamb merge completableambarray and completableambiterable operators into completableamb
4650.0,4651,1.0,0.0,1.0,1.0,1.0,switch maybe and single to use their transformers in compose whoops forgot to update the tests will update in a sec intellij user i presume indeed does i presume ðÿ˜‰ eclipse do something to protect against this eclipse has an error view which doesnt obscure the project structure plus when one shows the breadcrumbs they get error icons indicating theres still something wrong also the project tree gets error icons so it is much harder to miss these kinds of errors interesting ill have to check that out
4653.0,4654,1.0,0.0,0.0,0.0,1.0,upcast concurrenthashmap to map to avoid compatibility issue resovles see http stackoverflowcom a
4680.0,4681,1.0,0.0,0.0,1.0,1.0,fix flowable single elementat and elementatorerror operators on empty sources this will elementatorerror on an empty source just leaves the new single hanging without signalling onerror elementat on an empty source just leaves the maybe hanging without signalling oncomplete i also noticed that elementat with a default value on an empty source did not work either you may have to check the build and restart it a few times if it fails with jacocotestreport
4683.0,4687,1.0,0.0,0.0,1.0,1.0,add observablerangelong & flowablerangelong will adds observablerangelong adds flowablerangelong both implementations are copied same for the unit testswhat should we do about the range overflow check we could use bigdecimal to check that
4688.0,4690,1.0,0.0,0.0,1.0,1.0,basetestconsumer add assertvalueat index predicate adds assertvalueat index predicate to basetestconsumer
4709.0,4710,1.0,0.0,1.0,1.0,1.0,remove checked exceptions from transformer interfaces these functions are for transforming the stream shape not doing work any operation that would throw a checked exception should happen inside the stream not when shaping itcloses
4727.0,4729,1.0,0.0,0.0,1.0,1.0,merge flowableemitterbackpressuremode into backpressurestrategy this is the implementation of i have implemented the changes from the code commentsill keep in mind to rely on code coverage in the futureshould i reply to the review comments directly no need in this case
4620.0,4751,1.0,1.0,1.0,1.0,1.0,fix flowableconcatmapeager hang due to bad request management flowableconcatmapeager s drain loop when encountering a finished inner jumped back to the beginning of the loop but disregarded the potentially changed request amount and just stopped emitting the fix is to use the typical request management approach of reading the current request at the beginning of the loop and then committing the emission amount before trying to leave the looprelated in addition testhelperasserterror has been changed to attach the whole unexpected exception to the assertionerror
4702.0,4757,1.0,0.0,0.0,0.0,1.0,add cache to single uses the same test as the observable one sorry im late to the party here this seems to be rxjava x only is this going to reach x its in uupps right thanks
4809.0,4810,1.0,0.0,0.0,0.0,1.0,subtle change in completables documentation for retrywhen small change as discussed in
482.0,4828,1.0,0.0,0.0,0.0,1.0,changing inner classes to package private to in
482.0,4830,1.0,0.0,0.0,1.0,1.0,completabledoafterterminate to run after onerror as well doafterterminate was intended to call the callback after either oncompleted or onerror but somehow missed that behavior in xrelated
485.0,4858,1.0,0.0,0.0,1.0,1.0,add maybeflatmapsingleelement returning maybe this pr adds the maybeflatmapsingleelement operator that returns a maybe and completes if the source completes unlike flatmapsingle where the returned single signals nosuchelementexception related
4872.0,4873,1.0,0.0,0.0,1.0,1.0,testobserver shouldnt clear the upstream disposable on terminated testobserver replaced the upstreams disposable with the disposed sentinel when it got a terminal event unlike testsubscriber and there seems to be a need for triggering dispose in some upstream even after that this pr changes this behavior and also updates unit tests that expect isdisposed true without actually calling dispose related
488.0,4884,1.0,0.0,0.0,1.0,1.0,enable testscheduler with osecond periodic scheduling the default periodic scheduling code accessed the current worker time as milliseconds which prevents running microsecond and osecond scale unit tests with testscheduler as its internal osecond resolution time is always converted losing precisionthis pr introduces the internal scheduleperiodichelper class moves the default scheduling code into a static method and defines a now osupplier interface that is now implemented by testschedulerworker to return the current o time the default workerscheduleperiodically delegates to this static method and given a null no osupplier the workernow is converted to oseconds as usualrelated
490.0,4911,1.0,0.0,0.0,1.0,1.0,fix & update observablerepeatwhen and retrywhen again this pr fixes the observablerepeatwhen not completing properly if the handler completes in addition the observableredo has been split to observableretrywhen and observablerepeatwhen just like their flowable counterpart and are now they use a less convoluted algorithmrelated i dont know why the travis ci push still shows up
4920.0,4921,1.0,0.0,0.0,0.0,1.0,fix testsubscriber observer message texts fix the wrong messages in testsubscriber and testobserver related
4923.0,4924,1.0,0.0,0.0,0.0,1.0,change completable to completablesource changing completable to completablesource also found one other wrong spot that i within this pr
4926.0,4927,1.0,0.0,0.0,1.0,1.0,fix timer ise due to bad resource mgmt both observabletimer and flowabletimer could report illegalstateexception because if the delayed task completed before the tasks disposable was set the setonce found a non null non terminal reference already setrelated
493.0,4932,1.0,0.0,0.0,1.0,1.0,add safeguards to generate flowablegenerate and observablegenerate lacked the safeguards that were present in x this adds those and adds extra state cleanuprelated
4902.0,4943,1.0,0.0,0.0,1.0,1.0,fix publish function not replenishing its queue i was working on converting the monte carlo pi benchmark to rxjava and it turned out i forgot to replenish the internal queue of publish function in case the upstream was not sync fuseablethis pr fixes the replenishment problem for non fused and async fused sources by requesting after consumptionin addition if an inner subscriber cancelled while it was at request the other inner subscribers might not have resumed drainingive also two unit tests with wrong timeout unit of measure that randomly failed the tests on a slow machine or travis
4961.0,4962,1.0,0.0,0.0,1.0,1.0,fix singletakeuntil other triggering twice this pr fixes the double termination of singletakeuntil publisher when the other fires an item and then completes while ignoring the cancellation in between trying to signal a cancellationexception again which is routed to the rxjavapluginsonerror and crashing on androidin addition the maybetakeuntil received a unit test verifying this doesnt also happen to itrelated
4993.0,5002,1.0,0.0,1.0,1.0,1.0,add scheduler creation factories this is a pretty vanilla copy from rxjava s implementation note that i had to tune newthread scheduler to not be a singleton to support thiswe had talked about borrowing from project reactors apis for different overloads let me know if you think we should add more fine grained controls through these one other thing im worried about is schedulers the best place for this rxjava had them in its rxjavahooks class my concern is that having these alongside the normal io computation etc factories will make them look overly inviting for use and accidental abuse one other thing im worried about is schedulers the best place for this rxjava had them in its rxjavahooks class my concern is that having these alongside the normal io computation etc factories will make them look overly inviting for use and accidental abuseanother problem is that people will try to override the scheduler init with these method calls for rxjavaplugins but referencing schedulers will init the default schedulers regardlessindeed rxjavaplugins sounds like a better place for the methods but keep only the threadfactory variants heading to bed right now but will update the pr in the morning with requested changes also let me know if theres anywhere i should put tests as i wasnt sure what the right place would be indeed rxjavaplugins sounds like a better place for the methods but keep only the threadfactory variantssounds good to me will do that in my updates tomorrow yes tests that verify the custom thread factory actually worked by checking a custom thread name for each case indeed rxjavaplugins sounds like a better place for the methods b d but keep only the threadfactory variants also tweaked the naming a bit newnewthread was a little weird went with create and added scheduler suffix since were not in the schedulers class anymore yes tests that verify the custom thread factory actually worked by checking a custom thread name for each casei tried setting this up matching some of the cdl based approaches in the plugin tests but want able to get it working just hangs pushed what i had in a b any insight heading on vacation for a couple weeks but let me know what you think of getting the tests to work i should have some time here and there to update the pr ive already told you use the runnable in the factory method on the thread constructor use the runnable in the factory method on the thread constructorarent i just testing the test threadfactory implementations then and not that the schedulers are hooked up properly to power the scheduler whats the problem with the tests they seem to be verifying that the supplied factory was used oh you didnt pass the supplied runnable when calling new thread inside the factory oh you didnt pass the supplied runnable when calling new thread inside the factoryah this is what i was missing thanks for pointing that out ive updated tests which should now all be passing and also made them a bit more robust full integration with schedulers to simulate a more real world use case failing test looks like a flake wait no its not reprod locally will fix i think i added manual shutdowns of schedulers after theyre done only io had this lifecycle issue over tests but i did the shutdown in all to be safe ok this time it seems actually flaky as the same commit passed in a different travis job against my fork
5004.0,5005,1.0,0.0,1.0,1.0,1.0,executorschedulerscheduledirect to report isdisposed on complete this pr makes the disposable returned by the executorschedulerscheduledirect report isdisposed true if the task has actually finished which should now be consistent with the worker behavior of other schedulersreported in
5024.0,5027,1.0,0.0,1.0,1.0,1.0,dedicated singlezip implementation no dispose on all success this adds a dedicated implementation for zipping single s adapted from maybezipx routing the original zip through flowable added the usually unwanted behavior of cancelling the sources if one of them reports a completion after a row has been consumed from all when converted to flowable singleobserveronsuccess becomes subscriberonnext oncomplete since there is only onsuccess and onerror in single there is no need to dispose the sources once all signalled their only onsuccess related
5045.0,5049,1.0,0.0,1.0,1.0,1.0,use bounded wildcards for errorhandler adding bound wildcards for error handler merging
5053.0,5054,1.0,0.0,0.0,1.0,1.0,add nullable annotation to simple queue as explained in simplequeue might return nullto document this behavior a nullable annotation has been added merging
5045.0,5058,1.0,0.0,1.0,1.0,1.0,feature more generics in rxjavaplugins i widened the bounds for the functions looks good for merelated to looks like this needs rebasing im sorrry im trying to merge your prs in proper order but multiple recent prs change the same file s yeah no problem rebasing isnt too difficult import and rebased looks like there is a compilation error with the changes uups fixed it at least i hope merging
5060.0,5064,1.0,0.0,1.0,1.0,1.0,fix replay cancel dispose npe this pr fixes both flowablereplay and observablereplay throwing a nullpointerexception if the connection is disconnect before the upstream calls onsubscribe on the connection being established in practice this requires an async cancellation to happen through refcount unsubscribeon for example the validation tests simulate this by not calling onsubscribe until the synchronous connect disconnect happensreported in
4253.0,5086,1.0,0.0,0.0,1.0,1.0,deprecate create add alternatives looks like create wont go away unless we get the ide mark it someway such as being deprecatedthis pr deprecates create and adds unsafecreate for internal use and deprecate renames fromemitter to create action backpressuremode there was an earlier attempt at deprecating create but it was not followed up this pr executes what i suggested in one of the comments https githubcom reactivex rxjava pull issuecomment merging
5089.0,5090,1.0,0.0,0.0,1.0,1.0,fix scan seed f to emit accumulated values asap for performance reasons the scan delayed the emission of accumulated items by one which worked well with sources that pushed new items frequently unfortunately if the source stopped emitting without completion the very last accumulated item was stuck and no way to get it out of scan i considered this type of use being rare but apparently i was wrongthe pr changes scan to emit accumulated items including the initial seed as soon as there is request for it the operator now uses a stable prefetch queue drain found throughout other operators such as observeon remark sadly request trickery such as capturing the first request call emitting the seed and then requesting n doesnt work because if the request call itself happens from another thread and the source is empty the onnext and oncomplete could run concurrentlyreported in
4735.0,5091,1.0,0.0,0.0,0.0,1.0,create subscribeon avoid same pool deadlock this pr allows to fix the same pool deadlock that may happen with create formerly fromemitter and subscribeon as subscribeon by default schedules the requests behind a running emitter and thus the internal request amount may not get updated leading to unnecessary datalosssee in the update if subscribeon detects its upstream is onsubscribecreate it no longer reschedules requests for it for other non immediate cases a new overload allows specifying the requeston parameter that should be false if there is a create action backpressurestrategy in the sequence upstream
5111.0,5114,1.0,0.0,1.0,1.0,1.0,fix observablecombinelatest to dispose eagerly this pr fixes observablecombinelatest to dispose the sources outside the serialization loop just like flowablecombinelatest does this allows cancellation even if the serialization loop is busy blocking inside an onnext emissionin addition a unit test was added to flowablecombinelatest as wellreported in merging
5108.0,5117,1.0,0.0,1.0,1.0,1.0,add parallelflowablesequentialdelayerror this pr adds the sequentialdelayerror operator to parallelflowable that allows awaiting all rails in a parallel flow to terminate normally or with the composite exception of the failed rail s to enable this the flowableparallel operators behavior regarding rail cancellation had to be changed in v if any of the rails cancelled maybe due to a failure maybe due to an end consumer cancelling the entire parallel flow the input flowable was cancelled this pr alters this by requiring all rails to cancel before cancelling the input flowable the change permits one or multiple rails to fail and let others progress in case the new sequentialdelayerror is applied as a terminal operator the original sequential operator still cancels all rails if one of them fails triggering the cancellation of the input flowable note that this change may still drop and never process elements in the internal queues of the operators in the parallel flow because the parallel processing is not implemented with work stealing that could pick up elements from a dead queue in order to get as many elements processed as possible it is recommended to reduce the default prefetch on the runon operator to a reasonable tradeoff value between throughput and fault tolerance edit updated the pr to make sure parallel ignores cancelled rails when it dispatches itemsrelated merging
5111.0,5121,1.0,0.0,0.0,1.0,1.0,fix observablezip to dispose eagerly this pr fixes observablezip to dispose the sources outside the serialization loop just like flowablezip does this allows cancellation even if the serialization loop is busy blocking inside an onnext emissionin addition a unit test was added to observablezip as wellreported in merging
5132.0,5133,1.0,0.0,0.0,1.0,1.0,fix flatmap not cancelling the upstream eagerly this pr fixes the lack of eager cancellation when flatmapping sources and not stopping the upstream if the inner source failsunit tests were added to verify single in case it receives a dedicated implementation one day as currently it delegates to flowable flowable and observable reported in merging
5135.0,5136,1.0,0.0,0.0,0.0,1.0,fix repeatwhen and retrywhen signatures adjust the repeatwhen and retrywhen signatures to accept publisher on single and completable matching flowable s signaturereported in no coverage uploaded for pull request base x a b e click here to learn what that means n a x coverage complexity files hits misses partials impacted files coverage î´ complexity î´ src main java io reactivex flowablejava ã¸ src main java io reactivex singlejava ã¸ src main java io reactivex completablejava ã¸ continue to review full report at codecov legend click here to learn more î´ absolute impact ã¸ not affected missing data last update a b ed bd read the comment docs
5138.0,5146,1.0,0.0,0.0,1.0,1.0,add unsubscribeon to single type add unsubscribeon to single type merging
4853.0,5161,1.0,0.0,0.0,1.0,1.0,add observableswitchmapsingle and switchmapsingledelayerror this is a new operator discussed in the issue refers to a goodly number of new operators which ill do bit by bit as my time allows and to ensure review is not too daunting updated with suggested changes unrelated ci failure ioreactivexparallelparallelflowabletest parallelismandprefetchasync failed javalangassertionerror value counts differ expected actual latch values errors completions timeout disposed at ioreactivexobserversbasetestconsumerfail basetestconsumerjava at ioreactivexobserversbasetestconsumerassertvaluecount basetestconsumerjava at ioreactivexparallelparallelflowabletestparallelismandprefetchasync parallelflowabletestjava unrelated ci failuretracking via could be due to low timeout settings and travis overload just rerun the build next time i did it just now merging
5172.0,5182,1.0,0.0,1.0,1.0,1.0,fix replay refcount leaking items between connections this pr updates observablereplay and flowablereplay for x to not leak items between reconnections when run with refcount the replay operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data only a new connect clears this data which may or may not happen since refcount ensures that there wont be any latecommers to an already completed connection because it also drops its current subscribers on termination or when reaching zero the replay can be reset to an empty staterelated merging
5185.0,5189,1.0,0.0,1.0,1.0,1.0,fix concatmapeager should accept for prefetch fixes a bug that flowableconcatmapeager mapper maxconcurrency prefetch and observableconcatmapeager mapper maxconcurrency prefetch operators will not accept and negative numbersreported in i believe a breaks the internals of the operator and has the completely opposite effect taking more memory i am sorry with the wrong fixis it only necessary to modify the document is it only necessary to modify the documentyes please modify only the javadoc thank you also i think that the test case name is wrong so i modifed it merging
5154.0,5199,1.0,0.0,0.0,1.0,1.0,increase timeout on parallel & completable tests this pr increases the timeout on completabletest test methods and on parallelflowabletestparallelismandprefetchasync related merging
5179.0,5199,1.0,0.0,0.0,1.0,1.0,increase timeout on parallel & completable tests this pr increases the timeout on completabletest test methods and on parallelflowabletestparallelismandprefetchasync related merging
5128.0,5202,1.0,1.0,1.0,1.0,1.0,add resilient versions of parallel map filter & doonnext this pr adds new overloads to parallelflowable operators map filter and doonnext to enable per item error handling in case the main function fails with some exception javaflowablerange parallel map v v parallelfailurehandlingskip sequential test assertresult the new parallelfailurehandling has some default enumeration values to handle the common cases in addition the bifunction overload allows bounded retries and or conditional handling of failuresrelated merging
5203.0,5207,1.0,0.0,1.0,1.0,1.0,prevent tasks to self interrupt on the standard schedulers task wrappers of the various schedulers and modes direct & worker were able to get cancelled via interruption from the same thread they were runningrelated merging
5130.0,5208,1.0,0.0,0.0,0.0,1.0,fix images of firstelement flattenasx flatmapiterable this pr links in the new images from for previously misleading marble diagrams of the operators merging
5148.0,5210,1.0,0.0,0.0,0.0,1.0,better documentation on the abstract consumer classes this pr improves the documentation of the abstract consumer classes such as disposablesubscriber resourcesubscriber and their counterparts for the other base reactive typesit contains a lot of copy paste so please read through all of the text in case the text was not properly adapted to the abstract class at handrelated merging
5145.0,5223,1.0,0.0,1.0,0.0,1.0,improve the documentation of schedulers utility class this pr improves the javadoc of the ioreactivexschedulersschedulers utility class plus adds a missing schedulersupport constant for the single schedulerlet me know if something needs further explanation or some new case needs explanation related merging
5246.0,5247,1.0,0.0,0.0,1.0,1.0,fix flowabletolist onnext cancel race this pr fixes the nullpointerexception that can happen because cancel nulls out the value and onnext simply dereferences that value in flowabletolist reported in merging
5300.0,5302,1.0,0.0,0.0,0.0,1.0,add singleunsubscribeon this pr adds the singleunsubscribeon operatorrelated merging
5243.0,5307,1.0,0.0,1.0,0.0,1.0,apply promotions for v this pr applies the promotions listed in suggested review strategy check if the experimental annotation has been removed or turned into beta check if the history x matches the original value of the updated since x merging
5201.0,5318,1.0,0.0,0.0,0.0,1.0,apply api promotions for this pr applies the api promotions of note that singleunsubscribeon remainded experimental and observablefromemitter was removedwhere the experimental version was available it was moved up as history xy experimental similar to how x versioning promotions happensuggested review strategy verify experimental and beta annotations are removed from the method and from javadoc verify since is present merging
5382.0,5409,1.0,0.0,0.0,0.0,1.0,corrected singledelay documentation corrected singledelay documentation that says that success or error signals will be delayed by the specified amount but in fact errors are not delayed only successes
5426.0,5427,1.0,0.0,0.0,1.0,1.0,fix buffer time maxsize duplicating buffers on time size race the pr fixes both the time maxsize bound buffer operators of flowable and observable the logic didnt properly mutually exclude the timer action and the onnext action resulting in probabilistic emission of the same buffer twicereported in merging
5461.0,5466,1.0,0.0,0.0,0.0,1.0,flowabletimeouttimed replace atomicreference with mutable field as per discussion in the timer fields in the subscriber classes in flowabletimeouttimed are atomicreference s but this is not required as the fields are accessed synchronouslythe timer field in timeouttimedothersubscriber did require an atomicreference because of the dispose call here but this call is not required if we just call workerdispose no unit test additionsps unit tests in rxjava x an outrageous amount of work thanks akarnokd and other contributors merging
5480.0,5486,1.0,0.0,0.0,1.0,1.0,small note on maybedefaultifempty regarding tosingle ths pr replaces regarding the issue of because our javadoc validation did not allow that type of wording ie mentioning single when the method signature is not related to it merging
5485.0,5486,1.0,0.0,0.0,1.0,1.0,small note on maybedefaultifempty regarding tosingle ths pr replaces regarding the issue of because our javadoc validation did not allow that type of wording ie mentioning single when the method signature is not related to it merging
3794.0,5507,1.0,0.0,1.0,1.0,1.0,fix spsclaq nepotism flowablerefcounttesttestrefcountasync flaky this pr fixes the so called gc nepotism see in spsclinkedarrayqueue by not nulling out the previous buffers next pointer upon switching buffers in the peek poll methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load reported in merging
5506.0,5507,1.0,0.0,1.0,1.0,1.0,fix spsclaq nepotism flowablerefcounttesttestrefcountasync flaky this pr fixes the so called gc nepotism see in spsclinkedarrayqueue by not nulling out the previous buffers next pointer upon switching buffers in the peek poll methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load reported in merging
5319.0,5524,1.0,0.0,0.0,0.0,1.0,add update observable marbles this pr updates the marbles of the following observable operators just image by leonardortlima rangelong image by leonardortlima startwith image by leonardortlima startwitharray image by leonardortlima sorted image by leonardortlima see merging
5555.0,5568,1.0,0.0,0.0,1.0,1.0,add assertvaluesonly to basetestconsumer adds assertvaluesonly that asserts that the testobserver testsubscriber received only the specified values in the specified order without terminating merging
4544.0,5582,1.0,0.0,0.0,0.0,1.0,implement maybeswitchifempty single adds maybeswitchifempty single merging
5382.0,5616,1.0,0.0,1.0,1.0,1.0,add singledelay overload that delays errors much like i discovered when trying to fake a slow flaky backend that singledelay doesnt delay errorsthis pr adds an overload that does bringing singledelay in line with observabledelay it also corrects the javadoc for existing overloads only updated merging
5642.0,5647,1.0,0.0,0.0,0.0,1.0,fix subscribewith documentation examples this pr improves a documentation of subscribewith functions in single maybe completable by making sure examples are compilable by using classes which implement disposable this should in that issue akarnokd approved my idea to use disposablemaybeobserver in the example but as i looked in other classes i noticed that observablesubscribewith documentation uses a resourceobserver which implements disposable so i thought that this is the way to go in all other top classesif you think that this is not the case and instead all of them should be switched to use disposable observer in their examples let me know i will do it in this way theni think that all those example should use similar classes resourcexobserver is generally not necessary so disposablexobserver should be in the docs merging
4853.0,5649,1.0,0.0,0.0,0.0,1.0,add concatmapcompletable to observable add concatmapcompletable to observable as discussed in i didnt think it made sense in other reactive typescode is mostly a copy of observableconcatmap let me know if there is a better style of code to base this off instead it also does not have the option to delay errors as concatmap does not sure if that is needed merging
5545.0,5669,1.0,0.0,0.0,1.0,1.0,fix publishprocessor cancel emission overflow bug this pr should fix the bug that caused the test failure in the bug manifested itself when a cancellation was happening the same time a request was being fulfilled since the same request accounting was used for cancellation indicator if the cancel happened between the onnext s get check and decrementandget this decrementandget decremented longmin_value unconditionally which lead to a state that would appear the subscriber still can receive events a concurrent offer which saves the current array of registered subscriber s then would emit an item and overflow the subscriber the fix is to use the cancellation aware backpressurehelperproducedcancel utilityunit test were added to verify the correct behavior on both publishprocessor and behaviorprocessor the latter uses different cancellation mechanism via a dedicated field merging
5698.0,5705,1.0,0.0,0.0,1.0,1.0,moved tests to fromcallabletest from fromcompletabletest there was a test class named observablefromcompletabletest which actually was targeting observablefromcallabletest this was most likely just a naming issue copied all tests from observablefromcompletabletest to observablefromcallabletest and deleted the former class merging
5319.0,5740,1.0,0.0,0.0,0.0,1.0,marbles for observable all frompublisher ziparray this pr adds a marble diagram to frompublisher and updates the marbles of all and ziparray inside observable the images can be seen in this comment of merging
5742.0,5743,1.0,0.0,0.0,1.0,1.0,check isdisposed before emitting in singlefromcallable previously singlefromcallable did not check if the subscriber wasunsubscribed before emitting onsuccess or onerror this fixes thatbehavior and adds tests to singlefromcallable completablefromcallableand maybefromcallable merging
5319.0,5745,1.0,0.0,0.0,0.0,1.0,add update observable marbles this pr adds or updates mable diagrams of observable blockingfirst blockingfirst with default tofuture blockingsubscribe no arguments blockingsubscribe with argument blockingsubscribe with arguments blockingsubscribe with arguments collectinto dooncomplete doonerror doonlifecycle doonnext doondispose comment https githubcom reactivex rxjava issues issuecomment merging
5319.0,5755,1.0,0.0,0.0,0.0,1.0,add marbles for observable this pr adds some missing marbles to observable concatmapcompletable concatmapdelayerror concatmapeager concatmapeagerdelayerror concatmapiterable doafternext dofinally in images in comment https githubcom reactivex rxjava issues issuecomment merging
5762.0,5766,0.0,0.0,0.0,0.0,1.0,rename interface parameters signed off by shaishavgandhi merging
578.0,5781,1.0,0.0,0.0,0.0,1.0,describe merge error handling this pr adds some clarifications about how merge handles multiple errors in a new error handling section in its javadoc entrythere exist several dozen variants of merge in the various base classes that could also include such javadoc addition once the wording has been reviewed the other places will receive a separate prrelated merging
579.0,5792,1.0,0.0,0.0,1.0,1.0,fix flatmap inner fused poll crash not cancelling the upstream this pr fixes the lack of upstream cancel call when an inner fused sources queuepoll crashes in a non delayed error modeunit tests were added to verify observableflatmap flowableflatmapiterable and observableflatmapiterable as well merging
5319.0,5805,1.0,0.0,0.0,0.0,1.0,final planned observable marble additions fixes this is the final part of the observable marble fixes and additions as planned in tolist callable toflowable buffer toflowable drop toflowable latest toflowable error toflowable missing unsubscribeon position and spacing of the marbles in the zipwith overloads no image change images in https githubcom reactivex rxjava issues issuecomment merging
580.0,5811,1.0,0.0,0.0,1.0,1.0,fix buffer open close not disposing indicators properly the pr fixes the resource management in the buffer operator that uses other reactive sources to indicate when a buffer starts and ends both flowable and observable implementations had to be fixes akarnokd let me know if i understand the spirit of this pr on flowablebufferboundary avoids keeping reference to tracking buffers in subscribers other than the main cancel source on open subscriber completion if it completes and the last buffers close publisher has completed subscribers will have size and we can safely cancel upstream as no new buffer will open at this point in main distinguish a open subscriber error from a close subscriber error due to the later needs associated buffer cleanup is that correct exhaustive avoids keeping reference to tracking buffers in subscribers other than the mainyes cancel source on open subscriber completion if it completes and the last buffers close publisher has completed subscribers will have size and we can safely cancel upstream as no new buffer will open at this pointyes in main distinguish a open subscriber error from a close subscriber error due to the later needs associated buffer cleanupno if the openerror or closeerror is fired both should cancel the main source cancel the subscribers other than themselves clean the buffer and then report the error they could be converted into a common method of boundserror disposable d throwable ex merging
5827.0,5828,1.0,0.0,1.0,0.0,1.0,document replay n emission retention caveat adds javadocs indicating a caveat regarding size bounded replay operators subjects and processors see for details merging
5832.0,5833,1.0,0.0,0.0,1.0,1.0,fix observableswitchmap main onerror not disposing the current inner source the observableswitchmap had bad logic in its main onerror handler which didnt dispose the current inner observable the flowable version didnt have this logic error both variants received an unit test to verify the correct behavior merging
5350.0,5845,1.0,0.0,0.0,0.0,1.0,add efficient concatwith singlemaybecompletable overloads this pr adds specialized overloads to the concatwith operator in flowable and observable if accepted the marbles will be updated in a separate prrelated merging
5350.0,5847,1.0,0.0,1.0,1.0,1.0,add efficient mergewith singlemaybecompletable overloads this pr adds specialized overloads to the mergewith operator in flowable and observable if accepted the marbles will be updated in a separate prrelated merging
4853.0,5870,1.0,0.0,0.0,1.0,1.0,add flowableswitchmapcompletable{delayerror} operator this pr adds the flowableswitchmapcompletable and flowableswitchmapcompletabledelayerror operators as requested by the associated new marbles are switchmapcompletable https rawgithubcom wiki reactivex rxjava images rx operators switchmapcompletablefpng switchmapcompletabledelayerror https rawgithubcom wiki reactivex rxjava images rx operators switchmapcompletabledelayerrorfpng merging
4853.0,5871,1.0,0.0,0.0,1.0,1.0,add flowableconcatmapcompletable{delayerror} operator this pr adds the flowableconcatmapcompletable and flowableconcatmapcompletabledelayerror operators as requested by the marbles will be updated in a separate pr merging
4853.0,5872,1.0,0.0,0.0,0.0,1.0,add flowableconcatmap{maybesingle}{delayerror} operators this pr adds operators that allow concatenating a mapped sequence of maybe s or single s with or without delaying their errors concatmapmaybe overload with prefetch concatmapmaybedelayerror overloads with error mode and prefetch concatmapsingle overload with prefetch concatmapsingledelayerror overloads with error mode and prefetch they are in the same pr as the single variants implementation is practically the maybe implementation minus the oncomplete casetheir marbles will be updated in a separate proriginally requested in merging
4853.0,5873,1.0,0.0,0.0,1.0,1.0,add flowableswitchmap{maybesingle}{delayerror} operators this pr adds flowable operators that allow switching between a mapped sequence of maybe s or single s with or without delaying their errors switchmapmaybe switchmapmaybedelayerror switchmapsingle switchmapsingledelayerror they are in the same pr as the single variants implementation is practically the maybe implementation minus the oncomplete casetheir marbles will be updated in a separate proriginally requested in merging
4853.0,5875,1.0,0.0,0.0,1.0,1.0,add observable switchmapx and concatmapx operators this pr ports the various switchmapx and concatmapx operators from and to observable concatmapcompletable replaced by the common implementation concatmapcompletabledelayerror concatmapmaybe concatmapmaybedelayerror concatmapsingle concatmapsingledelayerror switchmapcompletable switchmapcompletabledelayerror switchmapmaybe switchmapmaybedelayerror switchmapsingle dedicated implementation switchmapsingledelayerror dedicated implementation this pr concludes the requested set of operators in marbles will be updated adjusted in a separate pr merging
5882.0,5886,1.0,0.0,0.0,1.0,1.0,upgrade the algorithm of observabletimeout timeselector operators this pr improves the algorithms of the observabletimeout time and observabletimeout selector operators to match their flowable counterparts implemented in in addition coverage of the flowable counterparts have been improved by synchronizing the unit testsnote that they were the last users of observerfullarbiter and fullarbiterobserver which are now removedcloses merging
5881.0,5887,1.0,0.0,0.0,1.0,1.0,fix window observablecallable upstream handling this pr fixes the upstream handling in observablewindow observablesource and observablewindow callable operators to make sure if both the main output and the inner windows have been disposed the upstream is also disposed remark there are a couple of w null checks showing up as partially covered in theory with the right interleaving w can become null but unfortunately the usual testhelperrace testing is unlikely to trigger that case there would be a higher chance with threads one disposing one completing the main and one completing the inner window but the current ci is effectively cores threads that tend to not produce a thorough interleaving merging
5881.0,5888,1.0,0.0,0.0,1.0,1.0,fix flowablewindow publishercallable upstream handling this pr fixes the upstream handling in flowablewindow publisher and flowablewindow callable operators to make sure if both the main output and the inner windows have been cancelled the upstream is also cancelledrelated in addition the jacoco code coverage has been updated to mainly due to the automatic filtering of difficult to impossible code paths https githubcom jacoco jacoco releases tag v merging
5894.0,5895,1.0,0.0,0.0,0.0,1.0,fix buffer documentation to correctly describe onerror behaviour i just copied the sentence from the docs in x and updated to use observablesource publisher naming merging
5903.0,5904,1.0,0.0,0.0,1.0,1.0,fix flowablesingleorerror toflowable not signalling nosuchelementexception when a singleorerror is followed toflowable the assembly process switches the flowable single operator into a flowable flowable operator implementing the singleorerror behavior saving the back and forth type conversion the backing implementation was shared with singleelement and as such did not properly handle the orerror case for an empty source the pr fixes the lack of nosuchelementexception in this case the observable variant doesnt have such optimization but the test has been converted to make sure observable is verified for this aspect in case the optimization is implemented with it in the future merging
590.0,5906,1.0,0.0,0.0,0.0,1.0,add public constructor for testscheduler that takes the time adds a time constructor to testscheduler should i make it experimental or will it just be stable merging
5916.0,5923,1.0,0.0,0.0,0.0,1.0,fix javadoc warnings of buffer publishercallable text is not allowed between and its child tags merging
5788.0,5924,1.0,0.0,0.0,0.0,1.0,update singleflatmappublisher marble renamed the operator in the box for flatmappublisher https rawgithubcom wiki reactivex rxjava images rx operators singleflatmappublisherpng
592.0,5928,1.0,0.0,0.0,1.0,1.0,fix concatmapsingle & concatmapmaybe dispose cleanup crash this pr fixes the accidental logical mistake in the cancel dispose logic of the new concatmapsingle and concatmapmaybe operators of both flowable and observable where the internal queue cleanup should happen in a serialized fashion only which is the state when the work in progress counter changes from to ensured by a check this is severe enough to release as a hotfix version asap although the mistakes are in the newly introduced operators ive done a quick search for this pattern and doesnt happen in older code luckily also this is on the dispose path and doesnt really the performance in the normal operation mode ie when data is allowed to flow through till the end without cancellation merging
5971.0,5972,1.0,0.0,0.0,1.0,1.0,fix observableconcatmapsingle dropping upstream items the internal queue of observableconcatmapsingle was incorrectly the bounded one from its flowable counterpart causing it to drop upstream items if the current single was delayed the right queue for observable s is the spsclinkedarrayqueue added unit tests to both concatmapsingle and concatmapmaybe to verify the correct behaviorfixes merging
6012.0,6014,1.0,0.0,0.0,1.0,1.0,fix & prevent null checks on primitives this pr removes the accidental null checks on primitives in two observable methods and adds a trap method to objecthelper to both highlight and fail the tests in case the null checks are still attempted the method is marked as deprecated so it will also show up in eclipses problems windowreplaces merging
6015.0,6021,1.0,0.0,0.0,1.0,1.0,singleflatmappublisher full implementation see discussion in resolves merging
5988.0,6026,1.0,0.0,0.0,1.0,1.0,fix flowableblockingsubscribe is unbounded and can lead to oome create and bound new blockingsubscribe overloads to buffersize create new overloads with buffersize create a boundedconsumer create a boundedsubsciber close merging
5980.0,6052,1.0,0.0,0.0,0.0,1.0,made subscribeactual protected proposalchanged subscribeactual from public to protected as described in how i testedran tests locally please let me know if i missed part of the contributing guidelines ðÿ‘¼ fixes cc vanniktech artem zinnatullin davidmoten strictly speaking this is technically a breaking change on something that shouldnt be in use at all by external developers im fine with this change for merging
5806.0,6053,1.0,0.0,0.0,0.0,1.0,add maybe marble diagrams a resolved the following diagrams of amb missing diagram ambarray missing diagram image concat iterable missing diagram image concat publisher missing diagram image concat publisher int missing diagram image concatarray missing diagram image concatarraydelayerror indicate error delayed marble per source image concatarrayeager missing diagram image concatdelayerror iterable missing diagram image concatdelayerror publisher missing diagram image concateager iterable missing diagram image concateager publisher missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerppng merging
5788.0,6074,1.0,0.0,0.0,0.0,1.0,add marble diagram to the singlenever method first of all im extremely grateful to open my first pr for rxjava i hope that ill be able to tick more of the marbles from but for now this should tick off the never operatorplease let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr merging
5788.0,6075,1.0,0.0,0.0,0.0,1.0,add marble diagram to the singlefilter method hopefully this should tick off the filter operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i had a doubt and wanted to double check operator filter returns maybe which essentially will call onsuccess or oncomplete by running junit tests i could observe that this is a behavior but if i use testobserver then both assertvalue and assertcomplete are invoked when there are elements that satisfy filter condition merging
5788.0,6076,1.0,0.0,0.0,0.0,1.0,add marble diagrams to the singledelay method here are marbles for delay operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr merging
5788.0,6077,1.0,0.0,0.0,0.0,1.0,add marble diagram for singlehide operator this should complete hide operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i wasnt sure if i should represent somehow that disposable is hidden as well if so can you please tell me how to represent that on marble merging
3708.0,6079,1.0,0.0,0.0,1.0,1.0,add completabletakeuntil completable operator this pr adds the missing dedicated takeuntil operator to completable the same effect could be achieved via the ambwith but there are two benefits of a dedicated operator easier to discover based on the takeuntil operator in other types more direct implementation unlike ambwith which is built upon an n ary amb operator with additional overheadthere was a feature request in some time ago but apparently the issue got closed off after singletakeuntil was implemented merging
5788.0,6081,1.0,0.0,0.0,0.0,1.0,add marble diagrams for singlerepeat operators here are marbles for repeat repeat times and repeatwhen operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pri intentionally added two diagrams for repeatwhen as i would say its interesting case that people should be aware of edit here are marbles repeat operator repeat operator repeat with count operator repeatwhen https rawentcom umfsimke rxjava images images repeatwhenpng merging
5789.0,6083,1.0,0.0,0.0,0.0,1.0,add completable marble diagrams a this pr adds the following marble diagrams to completable operators amb ambarray complete image concatarray concat image defer image error image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorfpng merging
5788.0,6084,1.0,0.0,0.0,0.0,1.0,add marble diagram for singlerepeatuntil operator here is marble for repeatuntil operator in repeatuntil let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr merging
5789.0,6085,1.0,0.0,0.0,1.0,1.0,more completable marbles add completablefrommaybe this pr adds marble diagrams to the following operators as well as adds the missing completablefrommaybe operator fromx of other types were already there uses existing maybeignoreelement s underlying implementation fromaction fromcallable image fromfuture image frommaybe image fromobservable image frompublisher image fromsingle image mergearray & mergearraydelayerror image merge both iterable and publisher variants image mergedelayerror both iterable and publisher variants image never image timer image https rawgithubcom wiki reactivex rxjava images rx operators completabletimerpng image https rawgithubcom wiki reactivex rxjava images rx operators completabletimerspng merging
5788.0,6086,1.0,0.0,0.0,0.0,1.0,single error operators marbles here are marbles for for error callable errorcallable error throwable only added error event to be red errorthrowable onerrorreturn onerrorreturn onerrorreturnitem onerrorreturnitem onerrorresumenext singlesource onerrorresumenext onerrorresumenext function onerrorresumenextfn https rawentcom umfsimke rxjava images images onerrorresumenextwithfnpng for the onerrorx please indicate the normal case via different marble ie the usual split diagram btw you can save yourself a commit if you follow the following naming in the javadocs xxxx is the name of the operator such as error and may contain argument indicator letters s is for scheduler s or single t is for timed n is for some numerical value f is for function or flowable c is for callable or completable p is for publisher m is for maybe or some other numerical valuethus the image naming of this pr will look like this merging
5788.0,6087,1.0,0.0,0.0,0.0,1.0,add marbles for singlefrom operators here are marbles for fromcallable frompublisher and fromobservable operators from marble for fromcallable fromcallable for frompublisher frompublisher for fromobservable fromobservable https rawentcom umfsimke rxjava images images fromobservablepng merging
5788.0,6091,1.0,0.0,0.0,0.0,1.0,add marbles for singleamb operators here are operators for amb and ambarray from marble for amb amb for ambarray ambarray https rawentcom umfsimke rxjava images images ambarraypng merging
5788.0,6095,1.0,0.0,0.0,0.0,1.0,add marbles for singletimer singledefer and singletoxxx operators here are marbles for defer timer delay unit timer delay unit scheduler toflowable tomaybe tofuture operators in marble for defer defer for timer delay unit timer for timer delay unit scheduler timerscheduler for tofuture although for this one i believe we should add case when there is no event sent from single as there will be timeout exception thrown tofuture for tomaybe tomaybe for toflowable although here i didnt figured out what will happen if we request more than event from flowable toflowable https rawentcom umfsimke rxjava images images toflowablepng defer i would have drawn it with a curly brace listing the options below each other please add the subscribe indicators as welltofuture i indicate future with a sided shape and indicate get call and a return see completablefromfuture for an exampletoflowable simply indicate request n any positive n has the same effect with this operator however an error is always pushed through even without a request just remove the request from that side of the diagram merging
5789.0,6097,1.0,0.0,0.0,0.0,1.0,add missing completable marbles a this pr add even more missing marbles to completable tracked by delay doonx image dofinally image onerrorcomplete image onerrorresumenext image onterminatedetach image mergewith image concatwith image observeon image hide image https rawgithubcom wiki reactivex rxjava images rx operators completablehidepng merging
5789.0,6098,1.0,0.0,0.0,0.0,1.0,several more completable marbles b this pr adds a couple of more marble diagrams to completable subscribeon unsubscribeon image tosingle tosingledefault image toflowable image tomaybe image https rawgithubcom wiki reactivex rxjava images rx operators completabletomaybepng merging
5789.0,6101,1.0,0.0,0.0,0.0,1.0,final set of missing completable marbles this pr contains the final set of missing completable marbles repeat repeatuntil image repeatwhen image retry image retrywhen image startwith image timeout image create image unsafecreate image lift image subscribe image subscribewith image test image https rawgithubcom wiki reactivex rxjava images rx operators completabletestpng image https rawgithubcom wiki reactivex rxjava images rx operators completabletestbpng merging
5788.0,6137,1.0,0.0,0.0,0.0,1.0,add marbles for singleconcat operator here are marbles for concat iterable concat publisher concat publisher prefetch concat observable concat source source concat source source source concat source source source source and concatarray operators that should close them at marble for concat iterable concatiterable for concat publisher concatpublisher for concat publisher prefetch concatpublishern for concat observable concatobservable for concat source source concat for concat source source source concat for concat source source source source concat for concatarray concatarray pay attention to file names in javadoc as i was not sure how to name concat iterable so ive added at the end i for concat observable ive added o for concat source source source and concat source source source source ive used n and m as they are numerical valuesalso is there an error in concat publisher and concat publisher prefetch with request commands i did used as a reference completableconcat publisher marble but i do not understand why do we have request after first event as we already requested prefetching of multiple ones is it because others are still not producedthanks merging
5788.0,6141,1.0,0.0,0.0,0.0,1.0,add marble diagrams for various single operators here are marble diagrams for various single operators that will close some of the marble for concateager publisher concateeagerp for concateager iterable concateeageri for create create for ambwith ambwith for equals equals for merge source source merge for merge source source source mergethree for merge source source source source mergefour for merge singlesource mergesinglesource for mergewith mergewith for doafterterminate doafterterminate for to to for as as for compose compose for doaftersuccess doaftersuccess for merge publisher mergepublisher for merge iterable mergeiterable https rawentcom umfsimke rxjava images images mergeiterablepng merging
614.0,6145,1.0,0.0,0.0,1.0,1.0,fix boundary fusion of concatmap and publish operator this pr fixes the lack of boundary fusion marker in the concatmap and publish operators that can break the thread confinement expectation when using observeon upstream and a thread sensitive operator javasourceobserveon scheduler map some thread sensitive operation publish or concatmap by default these operators may call poll from any of the participating threads which would otherwise dequeue observeon and execute map on that threadthe fix adds the necessary flag to both operators onsubscribe logic for a temporary workaround one should use hide before such operators to make sure fusion doesnt happenfixes merging
580.0,6155,1.0,0.0,0.0,0.0,1.0,fix marble of maybeflatmap events to maybesource fix the marble diagram of the event mapping maybeflatmap operator in merging
614.0,6167,1.0,0.0,0.0,1.0,1.0,make observeon not let workerdispose called prematurely some operators may call dispose cancel from onerror oncomplete which could trigger a permature call to workerdispose that was about to happen anyway this pr prevents this by moving the operator into its disposed cancelled state before signaling the terminal event thus a downstream cancel dispose call wont trigger this premature cleanupsuch premature cleanups may cause unwanted schedulersio reuse in some scenariosrelated there are x tests that were relying on a race that the previous behavior always allowed ive updated those tests to avoid the inherent termination cancel race in them merging
6196.0,6199,1.0,0.0,0.0,0.0,1.0,fix terminology of cancel dispose in the javadocs changing terminology from cancel dispose wherever appropriate in the following classes observablejava singlejava maybejava completablejava areas where i did _not_ change from cancel disposal include where the cancellation was in reference to a flowable publisher or a future test methods where the testobserver returned actually has a cancel method merging
6198.0,6200,1.0,0.0,0.0,0.0,1.0,fix tofuture marbles and descriptions this pr fixes the marble diagrams of flowabletofuture and observabletofuture to indicate multi valued sources signal indexoutofboundsexception source has to be finite for the future to terminate also fixes the diagram for merging
6253.0,6254,1.0,0.0,0.0,1.0,1.0,fix flaky sample backpressure test improve coverage use processors to trigger the missingbackpressureexception case instead of the timer which could fire prematurely and stop the sequence before the first item was sent by the behaviorprocessor also small improvements to the code coverage of flowablesample merging
6279.0,6287,1.0,0.0,0.0,0.0,1.0,expose the keep alive value of the io scheduler as system property configuring keep alive through system propertyresolves merging
629.0,6297,1.0,0.0,1.0,1.0,1.0,fix refcount eager disconnect not resetting the connection this pr fixes the case when an observer subscriber disposes cancels immediately upon subscribing to a refcount operator before it establishes the connection and ends up with a disposed but non reset connection preventing further interactions with the connectable sourcethe fix is to detect this case and reset the connection when the connect method signals the dispose handlerboth connectableflowablerefcount and connectableflowablerefcount is affectedfixes merging
6302.0,6303,1.0,0.0,0.0,0.0,1.0,javadoc fix incorrect image placement add before image elements in javadocresolves merging
6299.0,6305,1.0,0.0,0.0,0.0,1.0,javadoc explain explicitly about using emitter interface methods synchronously add note in javadoc explicitly explaining about using emitter interface methods synchronously add notes for generate methods in observable and flowable plus add the similar note to emitter interfaceresolves merging
6289.0,6308,1.0,0.0,0.0,0.0,1.0,javadoc updates for rxjava issue updates to ioreactivexflowable javadocs as per updated docs for all flowablegroupby methods merging
6290.0,6311,1.0,0.0,0.0,1.0,1.0,javadoc explain that distinctuntilchanged requires non mutating data to work as expected add note in javadoc for all distinctuntilchanged methods in flowable and observable class explaining about unexpected results to expect when using mutable data sources like mutable charsequence or lists resolves merging
630.0,6313,1.0,0.0,0.0,0.0,1.0,adding nonnull annotations to observable & single adding nonnull annotations in factory methods for improved code compilationresolves akarnokd can you pls take a look at this and review thanks for contributing a few points you dont have to keep the welcome text of the pr thats for telling contributors what to do see the updated text for future reference didnt you mean to add nonnull to the arguments rather than to the return value merging
636.0,6364,1.0,0.0,0.0,1.0,1.0,fix publish not requesting upon client change due to a bug in the flowablepublish operator it is not requesting more if there was a change in the subscriber array during an emission run in the non fused operation modefixes merging
636.0,6370,1.0,0.0,0.0,1.0,1.0,add interruptible mode to schedulersfrom by default the schedulersfrom uses a trampoline to ensure worker tasks are executed fifo and non overlappingly on any potentially multi threaded executor this old setup didnt allow task interruption due to this disconnect between the trampoline task and the operator task in contrast the standard schedulers use single threaded executors and their future is linked and interruptible when the operator task is cancelled this pr add an interruptible mode to the schedulersfrom via a paramerer in a new overload and some internal dispatching based on this mode selector existing schedulersfrom executor users should still behave the sameresolves merging
6288.0,6377,1.0,0.0,0.0,0.0,1.0,expand observabledebounce and flowabledebounce javadoc mention that if the processing of a task takes too longand a newer item arrives then the previous task willget disposed interrupting a long running workfixes merging
6379.0,6386,1.0,0.0,0.0,1.0,1.0,add doonterminate to single maybe for consistency this pr adds doonterminate operator to single and mayberesolves merging
640.0,6405,1.0,0.0,1.0,1.0,1.0,fix concateager to dispose sources & clean up properly this pr fixes the concatmapeager operator which drives the static variants as well to properly dispose and clean up the state of the operator upon cancelling disposing the sequence flowableconcatmapeager did not cancel the current active inner consumer only the ones coming after observableconcatmapeager did not dispose the main source of the inner observablesboth variants have received the same two unit tests to verify their behaviorfixes merging
6451.0,6452,1.0,0.0,0.0,0.0,1.0,remove dependency of schedulers from observablerefcount in the constructor of observablerefcount that takes connectableobservable source as the argument we set timeout to l in that specific use case of observablerefcount scheduler is never needed its only referenced in cancel method but if timeout is it wont be triggered at all because there is early return this commit removes the need to depend on schedulerstrampoline and instead passes null to be scheduler when the ref count is not time based similarly applies the same change to flowablerefcount the reasons for this change are the following in projects that dont depend on schedulers class if there is no reference to schedulers the whole schedulers can be stripped out of the library after optimizations eg proguard with constructor that references schedulers the optimizer cant properly strip it out in our quick test of our android app we were able to reduce the rxjava library size dependency from kb to kb after optimization but before compression by simply avoiding access to schedulers in observablerefcount in terms of modularity observablerefcount is just an operator so it by itself should probably not have dependency on what available pool of schedulers schedulers there are it should just know that there is some scheduler that could be passed to observablerefcount when observablerefcount needs it merging
646.0,6469,1.0,0.0,1.0,1.0,1.0,remove redundant methods from sample observable resolves merging
5628.0,6519,1.0,0.0,1.0,1.0,1.0,connectableflowable connetableobservabe redesign this pr changes the connectable api to have a specific reset method to reset a terminated connectable source as part of the official apiin x when publish terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call connect again see however replay did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin x this two corner cases have been by the introduction of reset both publish and replay now remain in their terminated state until reset is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows fresh connect running oncomplete onerror terminated reset fresh fresh connect running dispose fresh fresh connect running oncomplete onerror terminated dispose fresh fresh connect running oncomplete onerror terminated connect running this does resolve the race condition with publish refcount described in in addition there are some changes to flowablepublish s behavior it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation i have no strong preference on this property and in comparison observablepublish drops items because there is no backpressure buffer in its implementation upstream errors are not reported to the rxjavapluginsonerror handler when if there are no subscribers but have to be observed via a subscriber because terminal events are available until reset now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no consumer case upon an error and still report it when reset or dispose is called resolves merging
6518.0,6528,1.0,0.0,0.0,1.0,1.0,rename test methods and enable the check no coverage uploaded for pull request base x edb f click here to learn what that means n a x coverage complexity files hits misses partials continue to review full report at codecov legend click here to learn more î´ absolute impact ã¸ not affected missing data last update edb f e a read the comment docs
647.0,6532,1.0,0.0,1.0,1.0,1.0,add eager truncation to bounded replay to avoid item retention this pr adds the eagertruncate option to the replay operator so that the head node will lose the item reference it holds upon truncationthe bounded buffers in replay implement a linked list that when truncated moves the head reference forward along the links atomically this allows late consumers to pick up the head and follow the links between them to get items replayed however the truncation may happen concurrently with a consumer working on some prior nodes so if the truncation would null out the value the consumer reaching the same node would see null as well and fail avoid this type of retention the head node has to be refreshed with a new node still pointing to the next node in the chain but without any value image reason this is not the default is that it requires an additional allocation for each new incoming value when the buffer is full which would reduce performance in cases where the excess retention is not a problemoverloads to both the direct and function variants of both flowablereplay and observablereplay have been added to avoid too many overloads only one extra overload has been added extending the signature of the longest parameterized method per each bounds mode size time time size their unit test files have been cloned so that both the non eager original behavior and the eager behavior is tested separately merging
6543.0,6544,1.0,0.0,0.0,0.0,1.0,fixing version tag on schedulersfrom executor boolean updating the version tag on schedulersfrom executor boolean since it was promoted merging
655.0,6564,1.0,0.0,1.0,1.0,1.0,remove buffer window with supplier & onexceptionresumenext this pr removes kinds of operators that had no noticeable use bases or use cases on their own in the past years buffer supplier supplier window supplier int onexceptionresumenext resolves merging
6554.0,6564,1.0,0.0,1.0,1.0,1.0,remove buffer window with supplier & onexceptionresumenext this pr removes kinds of operators that had no noticeable use bases or use cases on their own in the past years buffer supplier supplier window supplier int onexceptionresumenext resolves merging
6576.0,6577,1.0,0.0,0.0,0.0,1.0,observableblockingsubscribe compares blockingobserverterminated with wrong object compare with v instead of o merging
658.0,6589,1.0,0.0,0.0,1.0,1.0,create a base test class and have all unit tests extend it this commit creates the rxjavatest class defining a defaulttimeout to minutes an ignored test announce itself for eachrunning class extending it preventing travis ci from killing thebuildhave completable tests extend from rxjavatest have disposable tests extend from rxjavatest have exception tests extend from rxjavatest related merging
658.0,6594,1.0,0.0,1.0,1.0,1.0,have unit tests extends rxjavatest this commit updates the unit tests of the following operators flowable maybe observable disposable observer parallel processors schedulersand rxjava pluginrelated merging
658.0,6595,1.0,0.0,1.0,1.0,1.0,have unit tests extends rxjavatest this commit updates the unit tests of the following operators single subjects subscribersand for internal operators internaldisposable internalfuctions internalobservers internalqueue interanlschedulers internalsubscribers internalsubscriptions internaloperatorcompletablerelated merging
6576.0,6601,1.0,0.0,0.0,0.0,1.0,observableblockingsubscribe compares with wrong object it should compare the terminated instance with the value received from the blocking queuefixes related
658.0,6602,1.0,0.0,1.0,1.0,1.0,fix truncation bugs in replay and replaysubject processor this pr fixes several truncation bugs with the time and size bound replay operators and their hot class versions unexpected removal of the last item just added due to becoming out of date at the lowest time resolution creating a hole in the linked chain and hanging the consumer related failure incorrect size accounting upon removing old entries leading to more items dropped than expectedrelated
658.0,6604,1.0,0.0,1.0,1.0,1.0,have unit tests extends rxjavatest this commit updates the unit tests of the following operators internaloperatorsmaybe internaloperatormixed internaloperatorsinglerelated
658.0,6607,1.0,0.0,1.0,1.0,1.0,have internaloperatorobservable unit tests extends rxjavatest this commit updates the unit tests for internaloperatorobservable related merging
658.0,6612,1.0,0.0,0.0,1.0,1.0,fix many operators swallowing undeliverable exceptions fix many operators to emit the collected exception in case of a cancel dispose call to the plugin error handler ie becoming undeliverable excptions in addition the terminal event error delivery has been unified in many other operators so that the terminal indicator exception is never leakedthere will be a separate pr about cleaning up the addthrowable usage cases fixes merging
6611.0,6612,1.0,0.0,0.0,1.0,1.0,fix many operators swallowing undeliverable exceptions fix many operators to emit the collected exception in case of a cancel dispose call to the plugin error handler ie becoming undeliverable excptions in addition the terminal event error delivery has been unified in many other operators so that the terminal indicator exception is never leakedthere will be a separate pr about cleaning up the addthrowable usage cases fixes merging
6569.0,6620,1.0,0.0,0.0,0.0,1.0,elementat first constrain upstream requests as discussed in this pr constrains upstream requests for the elementat and first overloads other operators will be covered in other prs merging
6608.0,6629,1.0,0.0,1.0,1.0,1.0,fix refcount not resetting when cross canceled this pr fixes the issue with refcount not resetting the connection when the termination triggers cross cancellation over it the fix is more involved than because how x uses two publish implementation internally due to bug the old classic implementation does not fail but the newer implementation fails if the fix is applied unconditionally the old classic implementation fails an older unit test verifying an error allows reconnection therefore the pr checks and applies the new code path only if refcount isnt talking to the classic publish implementationas a reminder for x has a redesigned connectable with a much more clearer reset semantics and thus the restructuring of the termination handling had no trouble passing the aforementioned error allows reconnect unit test merging
663.0,6635,1.0,0.0,1.0,1.0,1.0,remove vararg overloads for combinelatest in observable flowable started removing the vararg function from hmm after looking at the tests the varag variant for combinelatestdelayerror might be useful since there are no x overloads available what do you think let me guess intellij refactor the varargs is a convenience over the array variant so combinelatestdelayerror s can go merging
663.0,6637,1.0,0.0,0.0,1.0,1.0,avoid using systemgetproperties due to security restrictions change the code in the schedulerpoolfactory to use systemgetproperty directly also fix property names to rx as now both v and v could run together merging
6569.0,6650,1.0,0.0,1.0,1.0,1.0,constrain upstream requests from take remove limit operator as per discussion in this pr constrains upstream requests from the take operator and removes the limit operatorive also added a couple of unit tests for coverage of elementat that i didnt include in merging
5788.0,6668,1.0,0.0,0.0,0.0,1.0,add missing marble diagams to single add hopefully all remaining missing marble diagrams to single https rawgithubcom wiki reactivex rxjava images rx operators singleconcatarrayeagerpng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singleunsafecreatepng image https rawgithubcom wiki reactivex rxjava images rx operators singleusingpng image https rawgithubcom wiki reactivex rxjava images rx operators singleusingbpng image https rawgithubcom wiki reactivex rxjava images rx operators singlewrappng image https rawgithubcom wiki reactivex rxjava images rx operators singlecachepng image https rawgithubcom wiki reactivex rxjava images rx operators singlecastpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptiontpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptiontspng image https rawgithubcom wiki reactivex rxjava images rx operators singledooneventpng image https rawgithubcom wiki reactivex rxjava images rx operators singleblockinggetpng image https rawgithubcom wiki reactivex rxjava images rx operators singleliftpng image https rawgithubcom wiki reactivex rxjava images rx operators singlecontainsfpng image https rawgithubcom wiki reactivex rxjava images rx operators singlecontainspng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonterminatedetachpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrypng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryf png image https rawgithubcom wiki reactivex rxjava images rx operators singleretrynpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryfpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrynfpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrywhenpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribecpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribeccpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribec png image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribewithpng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilcpng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilspng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilppng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutbpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutsbpng image https rawgithubcom wiki reactivex rxjava images rx operators singleunsubscribeonpng image https rawgithubcom wiki reactivex rxjava images rx operators singletestpng image https rawgithubcom wiki reactivex rxjava images rx operators singletestbpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionppng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionopng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionspng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptioncpng image https rawgithubcom wiki reactivex rxjava images rx operators singledematerializepng merging
671.0,6714,1.0,0.0,0.0,1.0,1.0,fix multicastprocessor not requesting more after limit is reached after reaching the prefetch limit the updated consumed counter was not written back so the processor stopped requesting more consumed limit affects x to a separate pr will be posted for it merging
671.0,6715,1.0,0.0,0.0,1.0,1.0,fix multicastprocessor not requesting more after limit is reached after reaching the prefetch limit the updated consumed counter was not written back so the processor stopped requesting more consumed limit merging
672.0,6729,1.0,0.0,0.0,0.0,1.0,fix self see references some comments some see should point to the other party plain delayerror add a few see to the nearby operators comments no longer apply in blockingxmostrecent source code add a comment from to actiondisposable replaces
6728.0,6729,1.0,0.0,0.0,0.0,1.0,fix self see references some comments some see should point to the other party plain delayerror add a few see to the nearby operators comments no longer apply in blockingxmostrecent source code add a comment from to actiondisposable replaces
5806.0,6730,1.0,0.0,0.0,0.0,1.0,add maybe marble diagrams cases related https rawgithubcom wiki reactivex rxjava images rx operators maybezipipng image https rawgithubcom wiki reactivex rxjava images rx operators maybezipnpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeziparraypng image https rawgithubcom wiki reactivex rxjava images rx operators maybezipwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecontainsopng image https rawgithubcom wiki reactivex rxjava images rx operators maybeunsubscribeonpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonterminatedetachpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecastpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeliftpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedooneventpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptiontpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptiontspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptionppng merging
5788.0,6732,1.0,0.0,0.0,0.0,1.0,update singlezip marble diagrams cases related https rawgithubcom wiki reactivex rxjava images rx operators singlezipipng image https rawgithubcom wiki reactivex rxjava images rx operators singlezipnpng image https rawgithubcom wiki reactivex rxjava images rx operators singleziparraypng image https rawgithubcom wiki reactivex rxjava images rx operators singlezipwithpng
674.0,6745,1.0,0.0,0.0,0.0,1.0,make disposablecontainer public api make the internal interface disposablecontainer public as it can be one safely ive seen some rd party usage in custom containers this will make them now legit on x edit also should resolve the osgi private reference warning merging
674.0,6748,1.0,0.0,0.0,1.0,1.0,change how the cause of compositeexception is generated this pr changes how compositeexceptiongetcause creates a cause exception on demand in x and x the code tried to link up the various inner exceptions via their initcause which was in on itself fishy as well as could lead to excessive memory usageinstead the new code will present the inner exceptions as part of a formatted message which in theory should be still picked up by ide exception listings and allow navigation multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionscompositeexception exceptions occurred at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionscompositeexceptionexceptionoverview multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava are a few formatting conveniences if there is only one inner exception the compositeexception s cause will be simply that exception this can happen when the very same exception is aggregated into the composite and get deduplicated if an inner exceptions message is multi lined the message and cause traces should be indented properly reoccurring causes are not expanded over and over multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava cause not expanded again ioreactivexrxjava exceptionstestexception ex currently only the first line of the stacktraces are shown because it can get quite long and thus memory consuming to list them all maybe a system parameter can be introduced to control the verbosity merging
675.0,6754,1.0,0.0,0.0,1.0,1.0,zip combinelatest and amb operators throw when supplied with observablesource implementation that doesnt subclass observable please add unit tests so this doesnt happen again in case of any future change merging
675.0,6756,1.0,0.0,1.0,1.0,1.0,fix observable amb combinelatest & zip arraystoreexception when using iterable of sources the initial array is the wrong type and causes arraystoreexception unit tests were added to verify the other implementations merging
6776.0,6779,1.0,1.0,1.0,1.0,1.0,java add blockingstream & flatmapstream to flowable add java interoperation methods to flowable blockingstream essentially blockingiterable with close support concatmapstream map and concatenate streams flatmapstream map and concatenate streams inherently same as concatmapstream related marbles https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamfipng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamfipng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamfipng merging
6772.0,6780,1.0,0.0,0.0,0.0,1.0,java add autocloseable disposable conversions nicen docs add disposablesfromautocloseable and disposablestoautocloseable methods improve javadocs styling resolves you could also do javainterface disposable extends autocloseable { boolean isdisposed void dispose default void close { dispose }} merging
6776.0,6783,1.0,0.0,1.0,1.0,1.0,java add fromopt stage mapoptional tocompletionstage to m s c add the following java operators to various reactive base classes operator maybe single completable fromoptional fromcompletionstage image image image mapoptional image image tocompletionstage image image tocompletionstage t image image should it be implemented as optionalempty singleerror new nosuchelementexception no reason to implement always completablecomplete no value to map no value to emit thus it is better to ask the user for a completion value never empty no reason to implementrelated marbles image https rawgithubcom wiki reactivex rxjava images rx operators fromoptionalmpng image https rawgithubcom wiki reactivex rxjava images rx operators fromcompletionstagespng image https rawgithubcom wiki reactivex rxjava images rx operators fromcompletionstagecpng image https rawgithubcom wiki reactivex rxjava images rx operators mapoptionalmpng image https rawgithubcom wiki reactivex rxjava images rx operators mapoptionalspng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagempng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagemvpng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagespng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagecpng merging
6767.0,6786,1.0,0.0,1.0,1.0,1.0,diamond operators in unit tests observable package hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal operators observable there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving merging
6767.0,6787,1.0,0.0,1.0,1.0,1.0,diamond operators in unit tests flowable package hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal operators flowable there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving
6767.0,6788,1.0,0.0,1.0,1.0,1.0,diamond operators in tests hello in this pull request ive changed all ide marked explicit types with diamond operator affected packages is internal internal operators there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving merging
6767.0,6789,1.0,1.0,1.0,1.0,1.0,diamond operators in tests small packages hello in this pull request ive changed all ide marked explicit types with diamond operator affected packages is in tests rootthere is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving merging
6794.0,6799,1.0,0.0,0.0,1.0,1.0,xprocessoroffer to throw npe immediately make offer throw a nullpointerexception immediately instead of turning it into an error signal in addition have multicastprocessoroffer throw an illegalstateexception if called when the processor is in fusion mode merging
6776.0,6805,1.0,0.0,0.0,1.0,1.0,java add flattenstreamasx to maybe single add maybeflattenstreamasflowable maybeflattenstreamasobservable singleflattenstreamasflowable singleflattenstreamasobservable related in addition adjust the validators to appreciate the new patterns marbles https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasflowablempng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasobservablempng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasflowablespng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasobservablespng merging
681.0,6814,1.0,0.0,1.0,1.0,1.0,remove fromfuture scheduler overloads those overloads were only applying subscribeon with no other benefitsresolves merging
681.0,6817,1.0,0.0,0.0,0.0,1.0,deleted functionsnaturalorder removes a duplication of the natural order comparator merging
6828.0,6837,1.0,0.0,0.0,1.0,1.0,remove a pointless observableconcatmapiterable overload remove the concatmapiterable function int overload as there is no buffering involved with the operator
683.0,6839,0.0,0.0,0.0,1.0,0.0,enable javac parameter saving in class files related merging
684.0,6844,1.0,0.0,0.0,1.0,1.0,remove maybeonexceptionresumenext it was always very peculiar to let only checked exceptions resumed merging
683.0,6847,1.0,0.0,0.0,1.0,1.0,simplify return sentences in flowable javadocs simplify the wording of return in javadocs merging
6852.0,6857,1.0,0.0,1.0,0.0,1.0,wiki improve operator matrix with links and notes update the operatormatrixgenerator to add anchors and links to notes about why operators are not present in one or another class operators are missing and will be added as part of merging
6855.0,6857,1.0,0.0,1.0,0.0,1.0,wiki improve operator matrix with links and notes update the operatormatrixgenerator to add anchors and links to notes about why operators are not present in one or another class operators are missing and will be added as part of merging
6852.0,6862,1.0,0.0,0.0,0.0,1.0,add maybe single completable blockingsubscribe add the missing blockingsubscribe methods to maybe single and completable for symmetry with flowable and observable usually wed like to avoid blocking but now that project loom preview transparently turns latch based awaiting into suspension inside virtual threads they will act as free interop operators for exiting the reactive world into the continuation worldrelated marbles maybe single image completable image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeapng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeacpng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeopng merging
6863.0,6864,1.0,0.0,1.0,1.0,1.0,adding delayerror to maybedelay merging
5806.0,6867,1.0,0.0,0.0,0.0,1.0,add onerrorcomplete to flowable observable and single add the onerrorcomplete and onerrorcomplete predicate operators to the remaining base classesalso created the missing marble for maybeonerrorcomplete related https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletefpng merging
6852.0,6867,1.0,0.0,0.0,0.0,1.0,add onerrorcomplete to flowable observable and single add the onerrorcomplete and onerrorcomplete predicate operators to the remaining base classesalso created the missing marble for maybeonerrorcomplete related https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletefpng merging
5806.0,6868,1.0,0.0,0.0,1.0,1.0,add completableonerrorresumewith this pr adds the missing completableonerrorresumewith present in the rest of the base classesalso marbles for maybeonerrorresumenext and maybeonerrorresumewith have been updatedrelated https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumenextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumewithpng merging
6852.0,6868,1.0,0.0,0.0,1.0,1.0,add completableonerrorresumewith this pr adds the missing completableonerrorresumewith present in the rest of the base classesalso marbles for maybeonerrorresumenext and maybeonerrorresumewith have been updatedrelated https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumenextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumewithpng merging
5806.0,6869,1.0,0.0,0.0,1.0,1.0,add single completable retryuntil marbles retryuntil was missing from single and completable added marble for maybe as wellrelated https rawgithubcom wiki reactivex rxjava images rx operators completableretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryuntilpng merging
6852.0,6869,1.0,0.0,0.0,1.0,1.0,add single completable retryuntil marbles retryuntil was missing from single and completable added marble for maybe as wellrelated https rawgithubcom wiki reactivex rxjava images rx operators completableretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryuntilpng merging
6852.0,6870,1.0,0.0,0.0,0.0,1.0,add maybe single completable switchonnext & switchonnextdelayerror add the missing switchonnext and switchonnextdelayerror operators which are essentially delegated to the respective flowable switchmapx operators with identity mappingrelated https rawgithubcom wiki reactivex rxjava images rx operators completableswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators completableswitchonnextdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators singleswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators singleswitchonnextdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchonnextdelayerrorpng
6852.0,6871,1.0,0.0,0.0,1.0,1.0,add maybedematerialize add the dematerialize operator to maybe to be in sync with the other classesrelated https rawgithubcom wiki reactivex rxjava images rx operators maybedematerializepng merging
6852.0,6873,1.0,0.0,1.0,1.0,1.0,add many fromx operators marbles add a cross section of from operators present fromaction fromsingle operator f o m s c fromaction present notes present namefromcompletable fromcompletable present notes absent notes frommaybe present notes present namefromobservable fromobservable present notes present namefrompublisher frompublisher present namefromrunnable fromrunnable present notes present namefromsingle fromsingle present notes present https rawgithubcom wiki reactivex rxjava images rx operators flowablefromactionpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablebufferpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablelatestpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservabledroppng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablemissingpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromrunnablepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromactionpng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromrunnablepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators maybefrompublisherpng image https rawgithubcom wiki reactivex rxjava images rx operators maybefromobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators singlefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators singlefrommaybevpng merging
6852.0,6874,1.0,0.0,0.0,0.0,1.0,add timeinterval & timestamp to m s add timeinterval and timestamp operators overloads each to maybe and single related https rawgithubcom wiki reactivex rxjava images rx operators maybetimeintervalpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeintervalspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimestamppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimestampspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeintervalpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeintervalspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimestamppng image https rawgithubcom wiki reactivex rxjava images rx operators singletimestampspng merging
6852.0,6875,1.0,0.0,0.0,0.0,1.0,add maybe completable tofuture add tofuture to maybe and completable related https githubcom reactivex rxjava wiki images rx operators maybetofuturepng image https githubcom reactivex rxjava wiki images rx operators completabletofuturepng merging
580.0,6876,1.0,1.0,1.0,1.0,1.0,add singleoftype add oftype to single already available to the other non empty base typesrelated addition diagrams for maybefilter and maybeoftype have been updated image merging
6852.0,6876,1.0,1.0,1.0,1.0,1.0,add singleoftype add oftype to single already available to the other non empty base typesrelated addition diagrams for maybefilter and maybeoftype have been updated image merging
6852.0,6877,1.0,0.0,0.0,1.0,1.0,add doonlifecycle to maybe single & completable add the doonlifecycle operator to the remaining classesrelated https rawgithubcom wiki reactivex rxjava images rx operators maybedoonlifecyclepng image https rawgithubcom wiki reactivex rxjava images rx operators singledoonlifecyclepng image https rawgithubcom wiki reactivex rxjava images rx operators completabledoonlifecyclepng merging
6852.0,6879,1.0,0.0,1.0,1.0,1.0,add concatmapx operators aliases add the following operator aliases maybeconcatmapcompletable maybeconcatmapsingle singleconcatmapcompletable singleconcatmap singleconcatmapmaybe related addition some missing or wrong maybe marbles have been image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatmappng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapcompletable png image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapsingle png image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapsingleelementpng merging
6852.0,6881,1.0,0.0,1.0,1.0,1.0,add various concatxdelayerror operators add the following concat kind of operators maybeconcatarrayeagerdelayerror maybeconcatdelayerror publisher int singleconcatarraydelayerror singleconcatarrayeagerdelayerror singleconcatdelayerror completableconcatarraydelayerror completableconcatdelayerror related addition the maybeconcatdelayerror publisher marble has been image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatdelayerror ipng merging
6852.0,6882,1.0,0.0,0.0,0.0,1.0,add singlemergearray & mergearraydelayerror single was missing the mergearray and mergearraydelayerror operators already present in the other classesrelated https rawgithubcom wiki reactivex rxjava images rx operators singlemergearraypng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergearraydelayerrorpng merging
6852.0,6884,1.0,0.0,0.0,1.0,1.0,add completablesequenceequal the operator was available in all other classesrelated https rawgithubcom wiki reactivex rxjava images rx operators completablesequenceequalpng merging
6852.0,6885,1.0,0.0,0.0,0.0,1.0,add missing startwith overloads add missing add startwith overloads source \ other f o m s c flowable present absent add add add absent present add add add add add add add add add add add add add present present add add present https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithppng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithopng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithppng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithopng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithspng merging
5806.0,6886,1.0,0.0,0.0,1.0,1.0,add completableonerrorreturn item the operators were already available elsewhererelated addition the maybe variants have received updated marbles as well image merging
6852.0,6886,1.0,0.0,0.0,1.0,1.0,add completableonerrorreturn item the operators were already available elsewhererelated addition the maybe variants have received updated marbles as well image merging
6878.0,6891,1.0,0.0,0.0,1.0,1.0,swap maybeflatmapsingle and maybeflatmapsingleelement dropped the old maybeflatmapsingle and replaced it with maybeflatmapsingleelement hmm for xflatmaptestmaybesingle if i replace flatmapsingle tosingle with tosingle flatmap then the test will pass the test checks if disposing while in the function the returned single never gets subscribed to and thus no error is signaled to the downstream or the global error handler put an ignore on it for now and ill look into the operator tomorrow merging
5806.0,6893,1.0,0.0,0.0,1.0,1.0,reenable xflatmaptestmaybesingle add missing single operators reenable the xflatmaptestmaybesingle and make sure all flatmap variants behave the same when the flow is cancelled disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at all while adding the extra tests i noticed two flatmap variant is missing from single a combiner of the original and inner success item flatmap function bifunction a notification type mapper flatmap function function the same combiner variant for maybe received a marble diagram too image merging
6892.0,6893,1.0,0.0,0.0,1.0,1.0,reenable xflatmaptestmaybesingle add missing single operators reenable the xflatmaptestmaybesingle and make sure all flatmap variants behave the same when the flow is cancelled disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at all while adding the extra tests i noticed two flatmap variant is missing from single a combiner of the original and inner success item flatmap function bifunction a notification type mapper flatmap function function the same combiner variant for maybe received a marble diagram too image merging
5806.0,6897,1.0,0.0,0.0,0.0,1.0,add remaining maybe marbles https rawgithubcom wiki reactivex rxjava images rx operators maybeambwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockinggetpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockinggetvpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecachepng image https rawgithubcom wiki reactivex rxjava images rx operators maybecomposepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecountpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedefaultifemptypng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelayppng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytbpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytsbpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoaftersuccesspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoafterterminatepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedofinallypng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoondisposepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoonsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoonterminatepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmappublisherpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeisemptypng image https rawgithubcom wiki reactivex rxjava images rx operators maybemergewithpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatnpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatwhenpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryfpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrygpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrynpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrynfpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrypng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrywhenpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchifemptympng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchifemptyspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetakeuntilmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetakeuntilppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutmmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutpmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttsmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetopng image https rawgithubcom wiki reactivex rxjava images rx operators maybetoflowablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybetoobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybetosinglepng merging
6880.0,6899,1.0,0.0,0.0,0.0,1.0,add concateagerdelayerror across flowable observable maybe and single now have a concateagerdelayerror delegating to the appropriate concatmapeagerdelayerror operatorin addition maybe and single received an overload concateager iterable int to expose the maxconcurrency option already present in the rest of the typesnote that completableconcateagerdelayerror is essentially the same as mergedelayerror because there are no items to keep emitting in order the flowable and observable variant of concateager also received fresh marble diagrams related flowable observable image maybe image single image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerinpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerpnpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorinpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorpnpng merging
6947.0,6960,1.0,0.0,0.0,1.0,1.0,fix observableflatmap with maxconcurrency hangs just a backport to x of the fix for the scalar queue max concurrency issue already for x in the code for the fix has been added and also the test for itin addition as was also done for the corresponding test for flowableflatmap has been added merging
696.0,6969,1.0,0.0,1.0,1.0,1.0,allow setting the drift tolerance timeunit via system property adds the new system property rx schedulerdrift tolerance unit to allow specifying a more fine grained tolerance amount merging
6987.0,6996,1.0,0.0,1.0,1.0,1.0,suppress undeliverableexception handling in tests i used a junit testrule to suppress handling of undeliverableexception for test methods annotated with suppressundeliverable this approach is coarser than the suggested approach it suppresses the handling of all undeliverableexceptions for the entire annotated test method i thought this approach was clean but i can switch to the suggested approach if preferredi added suppressundeliverable to most tests that were logging undeliverableexceptions with the test method in the stack trace this may be more suppression than was required so just let me know merging
7001.0,7028,1.0,0.0,0.0,1.0,1.0,allow mbe in flowablegroupbytestissue runpart noevict issue above test can probabilistically throw an exception thus above assertion would be invalid i have removed the invalid assertion merging
711.0,7163,1.0,0.0,0.0,1.0,1.0,testscheduler option to use onschedule hook the testscheduler is a bit inconsistent regarding the use of rxjavapluginsonschedule it extends scheduler so the scheduledirect methods do invoke the hook whereas the workers schedule methods dontthis pr adds a constructor flag to enable the use of the hook in the workers schedule methods as well this addition should avoid issues with existing tests not expecting the hook to be invoked all of a sudden merging
716.0,7164,1.0,0.0,0.0,0.0,1.0,updating documentation for scheduleactual method remove unnecessary sentence from newthreadworkerscheduleactual merging
706.0,7165,1.0,1.0,1.0,1.0,1.0,add fusion support to concatmap{maybesinglecompletable} this pr adds front fusion support to flowableconcatmapcompletable flowableconcatmapmaybe flowableconcatmapsingle observableconcatmapcompletable observableconcatmapmaybe observableconcatmapsingle the operators have been tidied up by factoring out common code pathsin addition the deferredscalarsubscription s fusion emission had to be in async fusion mode onnext null is generally expected from the upstream but deferredscalarsubscription sent the value itself now it correctly sends null deferredscalardisposable already did this correctly merging
