issueNumber,prNumber,Util,NLP,APM,Network,DB,Interpreter,Logging,i18n,DevOps,Logic,Test,IO,UI,Security,App,corpus
136.0,137,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,unify and simplify gui actions using lambdas for the simpler actions some code cleanup extract string commands as string constants to actionsjava and use the constants in jabrefframe basepanel and rightclickmenu use the constants already defined in keybinds to get keystrokes for the actions in jabrefframe basepanel entryeditor and rightclickmenu e ad d remove quickfix for sfnet bug and implement feature properly instead of deactivating show hide toolbar when no database is open the action has been move to jabrefframe and works now even if no database is opensee also i propose to merge the current status into master the changes described above cover the changes possible without restructuring the whole action architecture in the gui lgtm ah answered just here https githubcom matthiasgeiger jabref commit e ad d be cf f e efcaae ddfe commitcomment
1285.0,143,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix sf bug restores the cursor resp caret position when a field is store during editingthis fixes sfnet bug be done backport to dev_ ask for confirmation on sfnet and close the issue there why does it lose focus anyway this makes no sense to me saving should be a background process triggered by a key event i think a backport to dev_ is not necessary stefan kolb i agree very strange that the focus is changed debugging this code is hell scream the new fix fixes the problem where it is caused method updatefield in entryeditortab re sets the textfield which causes a loss of the current caret position this looks way better and easier to maintain blush
122.0,175,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,increase saving speed intended to this pr turned into a major api change it replaces string in the return types of bibtexentrytype with list this allows to return immutable lists instead of mutable arrays and improves the stability of the program additionally the rewrite allowed to replace a lot of duplicate object creation with instance variableswith respect to the immutability of the new lists removes the necessity to create defensive copies and therefore avoids a lot of cloning are there further improvements to be made otherwise this pr is ready to merge
191.0,200,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,added conversion menu on right click in text field accessing these conversions without going through clean up can be quite useful great looks good to me thank you for this pull request it really looks very good could you add tests similar to the casechangerstest class we try to improve the code quality in jabref and automated tests for the logic package is an essential part for this a very minor comment instead of unicodetolatex can you please write unicode_to_latex as it makes it a little bit more readable ok will add test cases and change tab to spaces in changelog i fixed the changelog issue in my opinion the tests are more related to the htmlconverter file than the rightclick menu as that is where the conversion logic is as such it makes more sense to add a test next time i work on that ok i now realized the test thing i thought this was primarily the right click menu but indeed i did add the converters class which clearly needs testinghowever i had an issue which i think relates to that the jabref preferences are not accessed it seems like globalsprefs is not activated during testing as such i had to add a bit of logic to check for this which i guess in general is good but actually running jabref i assume it will always be non null is there a better way to deal with this we thought at the wiki that you add globalsprefs jabrefpreferencesgetinstance somewhere in your tests ahh great the characters i used in the failed test were åäö is this an issue with the test environments or should we avoid directly representing every character above i could of course write \u but since this worked when running it on my computer and i had the impression that all code should be in utf recalling some discussion a few years back regarding the changelog i thought it was ok yes utf is the way to go jabref\src\test\java\net\sf\jabref\logic\util\converterstestjava is encoded in cp as far as i can see could you please recode itin my eclipse i had to change at the preferences general workspace text file econding to utf i just pushed a patch to buildgradle to have gradlew eclipse generate the right encoding information for the jabref projectplease vote at gradle to have the encoding information also transformed into eclipse at gradlew eclipse automatically without any patch ok the test seem to go through now however the changelog seems to be filled with two lines are you sure about the copyright statements in the header at least the year in conversionmenujava doesnt match you could also add yourself explicitly i think we can merge this thank you for your contribution
114.0,211,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fix latex field formatter another attempt to fix the line wrapping as far as i can see some of the current behavior is due to the formatting implemented in latexfieldformatter this pr tries to rectify some of this behavior by explicitly excluding the review and abstract fields from line wrappingrelated lenhard see the branch if you havent done already from my first tests there are some more problems with this class stefan kolb the branches have different targets you works aims at _parsing_ while this pr aims at _writing_ oups sorry just delete the comments then does this make obsolete innocent koppor no it does not it just addresses latexfieldformatter which does formatting of bibtex field text bibtexwriter still does field sorting and bibtexparser is a completely different construction site
185.0,211,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fix latex field formatter another attempt to fix the line wrapping as far as i can see some of the current behavior is due to the formatting implemented in latexfieldformatter this pr tries to rectify some of this behavior by explicitly excluding the review and abstract fields from line wrappingrelated lenhard see the branch if you havent done already from my first tests there are some more problems with this class stefan kolb the branches have different targets you works aims at _parsing_ while this pr aims at _writing_ oups sorry just delete the comments then does this make obsolete innocent koppor no it does not it just addresses latexfieldformatter which does formatting of bibtex field text bibtexwriter still does field sorting and bibtexparser is a completely different construction site
186.0,211,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fix latex field formatter another attempt to fix the line wrapping as far as i can see some of the current behavior is due to the formatting implemented in latexfieldformatter this pr tries to rectify some of this behavior by explicitly excluding the review and abstract fields from line wrappingrelated lenhard see the branch if you havent done already from my first tests there are some more problems with this class stefan kolb the branches have different targets you works aims at _parsing_ while this pr aims at _writing_ oups sorry just delete the comments then does this make obsolete innocent koppor no it does not it just addresses latexfieldformatter which does formatting of bibtex field text bibtexwriter still does field sorting and bibtexparser is a completely different construction site
173.0,219,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,ieee journal abbreviations why see what is does bugfix correct abbreviations are loaded when storing preferences through the advanced tab ieee abbreviations are either plain text or in latex code form for each of them a separate file exist now the config option use_ieee loads the latex one if it is true and the plain one otherwise
208.0,287,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,doaj search search for directory of open access journals quite functional but the remaining things should probably be done ~~help page~~ decide on where the bibjsonconverter class should be positioned input more fields ~~issn~~ ~~better more error checking~~ ~~handle search results with more than entries properly~~ ~~fill empty methods in doajfetcher~~ ~~update status bar~~ add test for bibjsonconverter ~~enable stopping search~~implements what is discussed in i think im done there looks good to me one minor thing the current title is doaj directory of open source journals which is much longer than the rest of the fetcher titles this introduces horizontal scrollbars in the fetcher sidebar when using the default width doaj screenshot from this ready to go from my side too there is no such property like text overflow in swing is it star i think java actually does snip too long texts if the component has a fixed size so this does not help hereill merge the current state but a potential improvement would be to define tooltips for the combobox to show some hints what the various abbreviations actually mean
328.0,330,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,added more and better information with unsaved database capturedialog this case it was a new database otherwise the full path is shown oscargus tooltip for screenshots grabndrop http wwwscyvde gnd
367.0,370,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,add compatibility check for utf this pr attempts to we have a bit of a problem utf came from these lines java try inputstreamreader reader openfile filetoopen suppliedencoding fallbackencoding { bibtexparser bp new bibtexparser reader parserresult pr bpparse prsetencoding readergetencoding it is set in this method call thats the java api the inputstreamreader says that the proper name of the encoding is utf my solution is an ugly compatibility hack in which we just insert the manually ugly but works what do you think what about replacing all string representation of encodings by charset then on export getencodingname returns the correct description utf sounds like a good idea we should give it a try tobiasdiez great advice charset already implements the correct encoding name translation all we have to do is through it into charset and read it our again and we can skip the hack javaprsetencoding charsetforname readergetencoding name please merge master we did a mayor overhaul of the opendatabaseaction deleted code etc lenhard glad this was helpful i think the code would even further improve if the parserresult and maybe some other classes doesnt hold the encoding as a string but as a charset ie public charset getencoding and similarly for setencoding koppor done tobiasdiez sure but i think this should be part of a new pr since this pr just attempts to fix one particular issue
388.0,418,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,proxy authentication support feature this pull request enables support for proxy authentication via command line arguments d and jabref preferences network tab btw the tests in netsfjabreflogicfetcher and the urldownloadtest still fails because the authenticator is not initialized in unit tests why is the codecov project check marked as failed but shows passed on details is marked as fail as you added code which is not covered by a junit test reducing code coverage but we do not have a gui strategy yet and you added mostly gui code hence no problem there i forgot to create a special branch for this pr hmmm this is not a big problem as long as you do not start working on another issue in your master branch wink hmm if i change the proxy settings a restart is required we have other settings which upon change indicate to the user that jabref has to be restarted for the settings to be applied see the remote preferences under advancedtab maybe reuse the code from there hmm looking for config changes in six values looks quite ugly with if conditions i can create a hashmap or stringbuilder out of these values and later on just compare the hash values or do you have any other suggestion you just need to compute the final proxy string username password hostname port which you can easily compare and then the two remaining boolean variables thats what i have implemented with a stringbuilder comparing the hashcode is much faster than comparing the string okay please check my pr thank you for the pr nice and clean implementation we would gladly accept more prs from you
167.0,422,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,move edit mode switch to file tab to make it more prominent and a file based thing in the future can you please rebase on master mhmm that was a quick merge two things see comments is currently not released so each merge to master will a be automatically part of not or b requires effort to be excluded from the release v milestone means needs to be done by release but may be earlier i know but we should discuss the strategy for those bugfix releases probably not here wink
315.0,452,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,revise maintable complete check and rewrite of maintable and related classesthis will fix and implement show tooltip for header columns show tooltip for contents which are too long for table columns add ability to drag and drop specialfield columns ~~ allow storing position of specialfield columns~~ postponed to another pr remove table column for pdf ps which is obsolete remove option show one letter heading for icon columns which is now obsolete changed default order in main table all file based icons file url doi all bibtex field based icons bibtexkey entrytype author title all special field icons ~~ ~~ postponed ~~ think about must be implemented vernünftig matthias entry table fit table horizontally from the minutes~~ postponed final cleanup changelog awesome before i invest much time to fix it jabref developers are we dropping support for the pdf ps column in the main table in this column potential contents of the legacy fields pdf and ps are shown in the legacy tools are already droppedand we already have the abilility to define special columns based on a filetype eg show a column for excel files so it would be possible to show specific columns for pdfs stored in the file field yes support has been dropped for pdf ps fields all over the place we should do this as well for the main table for removing these legacy columnscould someone create a faq entry in htdocs or send me a plain faq on how to mimic that behavior with the special columns very nice pr with this we already have a koppor q the pdf ps column in the main table is missing how can i restore them a as the bibtex fields pdf and ps are migrated to file the table column was obsolete however it is possible to define columns specifically for each file type in the preferences see preferences entry table columns show extra columns show extra mhmm but this gui stuff is quite unnerving wink and we already have issues with the pdf ps columns which no longer seem to work correctly this confirms the need for their removal just rebased from my point of view the current state is good enough to be merged into master
384.0,452,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,revise maintable complete check and rewrite of maintable and related classesthis will fix and implement show tooltip for header columns show tooltip for contents which are too long for table columns add ability to drag and drop specialfield columns ~~ allow storing position of specialfield columns~~ postponed to another pr remove table column for pdf ps which is obsolete remove option show one letter heading for icon columns which is now obsolete changed default order in main table all file based icons file url doi all bibtex field based icons bibtexkey entrytype author title all special field icons ~~ ~~ postponed ~~ think about must be implemented vernünftig matthias entry table fit table horizontally from the minutes~~ postponed final cleanup changelog awesome before i invest much time to fix it jabref developers are we dropping support for the pdf ps column in the main table in this column potential contents of the legacy fields pdf and ps are shown in the legacy tools are already droppedand we already have the abilility to define special columns based on a filetype eg show a column for excel files so it would be possible to show specific columns for pdfs stored in the file field yes support has been dropped for pdf ps fields all over the place we should do this as well for the main table for removing these legacy columnscould someone create a faq entry in htdocs or send me a plain faq on how to mimic that behavior with the special columns very nice pr with this we already have a koppor q the pdf ps column in the main table is missing how can i restore them a as the bibtex fields pdf and ps are migrated to file the table column was obsolete however it is possible to define columns specifically for each file type in the preferences see preferences entry table columns show extra columns show extra mhmm but this gui stuff is quite unnerving wink and we already have issues with the pdf ps columns which no longer seem to work correctly this confirms the need for their removal just rebased from my point of view the current state is good enough to be merged into master
443.0,452,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,revise maintable complete check and rewrite of maintable and related classesthis will fix and implement show tooltip for header columns show tooltip for contents which are too long for table columns add ability to drag and drop specialfield columns ~~ allow storing position of specialfield columns~~ postponed to another pr remove table column for pdf ps which is obsolete remove option show one letter heading for icon columns which is now obsolete changed default order in main table all file based icons file url doi all bibtex field based icons bibtexkey entrytype author title all special field icons ~~ ~~ postponed ~~ think about must be implemented vernünftig matthias entry table fit table horizontally from the minutes~~ postponed final cleanup changelog awesome before i invest much time to fix it jabref developers are we dropping support for the pdf ps column in the main table in this column potential contents of the legacy fields pdf and ps are shown in the legacy tools are already droppedand we already have the abilility to define special columns based on a filetype eg show a column for excel files so it would be possible to show specific columns for pdfs stored in the file field yes support has been dropped for pdf ps fields all over the place we should do this as well for the main table for removing these legacy columnscould someone create a faq entry in htdocs or send me a plain faq on how to mimic that behavior with the special columns very nice pr with this we already have a koppor q the pdf ps column in the main table is missing how can i restore them a as the bibtex fields pdf and ps are migrated to file the table column was obsolete however it is possible to define columns specifically for each file type in the preferences see preferences entry table columns show extra columns show extra mhmm but this gui stuff is quite unnerving wink and we already have issues with the pdf ps columns which no longer seem to work correctly this confirms the need for their removal just rebased from my point of view the current state is good enough to be merged into master
445.0,452,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,revise maintable complete check and rewrite of maintable and related classesthis will fix and implement show tooltip for header columns show tooltip for contents which are too long for table columns add ability to drag and drop specialfield columns ~~ allow storing position of specialfield columns~~ postponed to another pr remove table column for pdf ps which is obsolete remove option show one letter heading for icon columns which is now obsolete changed default order in main table all file based icons file url doi all bibtex field based icons bibtexkey entrytype author title all special field icons ~~ ~~ postponed ~~ think about must be implemented vernünftig matthias entry table fit table horizontally from the minutes~~ postponed final cleanup changelog awesome before i invest much time to fix it jabref developers are we dropping support for the pdf ps column in the main table in this column potential contents of the legacy fields pdf and ps are shown in the legacy tools are already droppedand we already have the abilility to define special columns based on a filetype eg show a column for excel files so it would be possible to show specific columns for pdfs stored in the file field yes support has been dropped for pdf ps fields all over the place we should do this as well for the main table for removing these legacy columnscould someone create a faq entry in htdocs or send me a plain faq on how to mimic that behavior with the special columns very nice pr with this we already have a koppor q the pdf ps column in the main table is missing how can i restore them a as the bibtex fields pdf and ps are migrated to file the table column was obsolete however it is possible to define columns specifically for each file type in the preferences see preferences entry table columns show extra columns show extra mhmm but this gui stuff is quite unnerving wink and we already have issues with the pdf ps columns which no longer seem to work correctly this confirms the need for their removal just rebased from my point of view the current state is good enough to be merged into master
490.0,452,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,revise maintable complete check and rewrite of maintable and related classesthis will fix and implement show tooltip for header columns show tooltip for contents which are too long for table columns add ability to drag and drop specialfield columns ~~ allow storing position of specialfield columns~~ postponed to another pr remove table column for pdf ps which is obsolete remove option show one letter heading for icon columns which is now obsolete changed default order in main table all file based icons file url doi all bibtex field based icons bibtexkey entrytype author title all special field icons ~~ ~~ postponed ~~ think about must be implemented vernünftig matthias entry table fit table horizontally from the minutes~~ postponed final cleanup changelog awesome before i invest much time to fix it jabref developers are we dropping support for the pdf ps column in the main table in this column potential contents of the legacy fields pdf and ps are shown in the legacy tools are already droppedand we already have the abilility to define special columns based on a filetype eg show a column for excel files so it would be possible to show specific columns for pdfs stored in the file field yes support has been dropped for pdf ps fields all over the place we should do this as well for the main table for removing these legacy columnscould someone create a faq entry in htdocs or send me a plain faq on how to mimic that behavior with the special columns very nice pr with this we already have a koppor q the pdf ps column in the main table is missing how can i restore them a as the bibtex fields pdf and ps are migrated to file the table column was obsolete however it is possible to define columns specifically for each file type in the preferences see preferences entry table columns show extra columns show extra mhmm but this gui stuff is quite unnerving wink and we already have issues with the pdf ps columns which no longer seem to work correctly this confirms the need for their removal just rebased from my point of view the current state is good enough to be merged into master
498.0,452,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,revise maintable complete check and rewrite of maintable and related classesthis will fix and implement show tooltip for header columns show tooltip for contents which are too long for table columns add ability to drag and drop specialfield columns ~~ allow storing position of specialfield columns~~ postponed to another pr remove table column for pdf ps which is obsolete remove option show one letter heading for icon columns which is now obsolete changed default order in main table all file based icons file url doi all bibtex field based icons bibtexkey entrytype author title all special field icons ~~ ~~ postponed ~~ think about must be implemented vernünftig matthias entry table fit table horizontally from the minutes~~ postponed final cleanup changelog awesome before i invest much time to fix it jabref developers are we dropping support for the pdf ps column in the main table in this column potential contents of the legacy fields pdf and ps are shown in the legacy tools are already droppedand we already have the abilility to define special columns based on a filetype eg show a column for excel files so it would be possible to show specific columns for pdfs stored in the file field yes support has been dropped for pdf ps fields all over the place we should do this as well for the main table for removing these legacy columnscould someone create a faq entry in htdocs or send me a plain faq on how to mimic that behavior with the special columns very nice pr with this we already have a koppor q the pdf ps column in the main table is missing how can i restore them a as the bibtex fields pdf and ps are migrated to file the table column was obsolete however it is possible to define columns specifically for each file type in the preferences see preferences entry table columns show extra columns show extra mhmm but this gui stuff is quite unnerving wink and we already have issues with the pdf ps columns which no longer seem to work correctly this confirms the need for their removal just rebased from my point of view the current state is good enough to be merged into master
458.0,459,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,use default directory when adding files to an entry see the current implementation is hard to understand i dont get how these three existing folder preferences are used also the method itself should be simplified and return a list after going through the documentation i found it jabref can have a directory per database but what if you and me have different directories do we have to agree to one normally its simply the directory of the bib file meaning is used as database directory but what if the users somehow share a bibliography and use different directories then this feature comes in i can set another directory then you do both settings are serialized in the bib file with as suffix in the jabref meta field if jabref saves a file and my loginname matches the name stored in the bib file it chooses that directory if no match is found it uses the general file directory of the bib file if that is not found it uses the one configured at options preferences external programs main file directory here some text from the documentation and mailing lists but i think the documentation has to be improved sunrise when thinking of it we should offer the users a button use current directory next to general file directory and add a little help text that denotes that or render as then hopefully the user specific file directory can be dropped i dont see any other use case why would i share a bib file and not share the pdfs if i share the pdfs together with the bib file a relative directory can be put in general file directorypossibly the general file directory should be stored _relatively_ from the current directory of the bib file faq then at the field “general file directory” choose the directory specific for the database if you want to set a directory for you only and other users should use the default directory use the field “user specific file directory” file help in the database properties dialog you can set a user specific file directory which will be valid only when you are the one working on the bib file mail from the mailing list by thomasa of revision jabref supports an option to specify a user and host specific file directory in the database properties this allows each user of a particular database to store her his personal path setting in the database it furthermore allows the same user to specify different paths on different computers must have different host names thanks koppor for this detailed clarification i think we might simplify this somehow smile we need a better internal datastructure
470.0,472,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,show author editor and journal publisher in the main table by default implements looks like follows grabbed_ is okunsure if journal publisher is confusing i think booktitle journal would be the right correspondence we should replace the default journal column by booktitle journal and maybe add the publisher column as default columnhow often is inbook used consequently title should become chapter title but that heading is confusing id also vote for journal booktitle as that is what i use dealing primarily with journal and conference papers on the other hand a good thing with this pr is that it indicates that these things are possible and how to do it the journal says where an article is published similarly the publisher iswell the publisher of the book so i would advocate the proposed journal publisher booktitle would probably only make sense for articles in conference proceedings i think articles and books are the most common types so we should focus on them koppor inbook s also have an author and title so there shouldnt be a problem guess it depends on scientific area i would possibly argue that in general a publisher doesnt really add any important information even for books while in the case of conference papers the booktitle is crucial i know that the publisher is important to create a valid reference but it doesnt really add any information when browsing a database in my discipline computer science id see the correspondence as follows bibtex fields inproceedings journal title title author author booktitle journal publisher publisher year year for instance take an elsevier article the publisher is elsevier but the journal is international journal of information management elsevier publishes more than one journali read where something is published as the conference and the concrete journal the conference is stored in booktitle whereas the concrete journal is stored in journal both kinds of works are published by a publisheris it different in your discipline tobiasdiez i do not think tobiasdiez disagrees with that analysis but i got theimpression that he cites more books than conference papers in that case ican probably agree that publisher is the next field to add mainlybecause of lack of others journal booktitle publisher except for the very long heading ok apparently the majority is for booktitle hence i changed it accordingly my reasoning was indeed based on book s for which the publisher is the equivalent of a journal since books occur more often in my database i thought this addition was more valuable for inproceedings the booktitle indeed makes more sense i suppose journal booktitle publisher is too confusing i really agree that the column journal booktitle is empty too often if many books are in the databaseill merge it and lets see what others say sunflower
314.0,491,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,add close all others in database tab menu see changelog is missing otherwise
167.0,500,1,0,0,1,0,1,1,1,0,1,1,1,1,1,1,database type detection please see bibdatabasetypedetectionjava for reviewsome refactoring and a class for auto detection of database types algorithm should we introduce a hard coded field like encodings inside the bib file fast enough what about false detection refactoring bibtexdatabase bibdatabase bibtexentry bibentryalso see the refactorings are fine from my point of viewthe detection is based on in memory operations on collections so no need to worry about speed at the momentif i understand the algorithm correctly any database that contains a non biblatex non bibtex type will be categorized as bibtex so a database with one biblatex entry and a customn entry would be detected as bibtex is that really the desired result i would rather ignore all non bibtex non biblatex types for the decision customentry unkownentry ieeetranentry and do the decision solely on valid types with bibtex as the default result lenhard no it should always detect as biblatex if it finds one exclusive entry the algorithm looks good to me i would move the detection class into the logic package instead of model but that is your decisionstrangely the circleci test says there are still compilation errors due to the renamings as far as i can see locally all is fine
495.0,500,1,0,0,1,0,1,1,1,0,1,1,1,1,1,1,database type detection please see bibdatabasetypedetectionjava for reviewsome refactoring and a class for auto detection of database types algorithm should we introduce a hard coded field like encodings inside the bib file fast enough what about false detection refactoring bibtexdatabase bibdatabase bibtexentry bibentryalso see the refactorings are fine from my point of viewthe detection is based on in memory operations on collections so no need to worry about speed at the momentif i understand the algorithm correctly any database that contains a non biblatex non bibtex type will be categorized as bibtex so a database with one biblatex entry and a customn entry would be detected as bibtex is that really the desired result i would rather ignore all non bibtex non biblatex types for the decision customentry unkownentry ieeetranentry and do the decision solely on valid types with bibtex as the default result lenhard no it should always detect as biblatex if it finds one exclusive entry the algorithm looks good to me i would move the detection class into the logic package instead of model but that is your decisionstrangely the circleci test says there are still compilation errors due to the renamings as far as i can see locally all is fine
495.0,501,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,prototype for new entrytype interface this is a prototype for an idea to resolve the issues discussed in and right now the entry type is converted from a string representation in the bibtex file to an entrytype by the parser the problem with this approach is that the parser has to know about the bibtex vs biblatex mode the idea was to add an intermediate step string in bibtex file entryclass by parser entrytype by some factory using information from the preferences there is an enum standardentryclass holding all the standard types regardless of bibtex or biblatex so article mvbook etc all are there to support also unknown entry types we have the class nonstandardentryclass so for example parsing article{} results in class standardentryclassarticle while gibberish{} yields class nonstandardentryclass with name gibberish in this way the type information is stored in a relative convenient form better then a string the idea of an enum implementing an interface was taken from the way java handles standard file locations see the oracle blog or another blog the entryclass does not know about required and optional fields these information are provided by the entrytypefactory for example entrytypefactory prefs gettypefor standardentryclassarticle getrequiredfields gives the required fields please ignore all the my prefixes in the class names so what are your opinions on this idea should i start implementing it properly or is there a better way to solve this issue new and simpler solution can be found in pr
116.0,560,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,write all field keys in lower case write all field keys in lower case no more camel casing of field names eg title is written instead of title howpublished instead of howpublished and doi instead of doi the configuration option use camel case for field names eg howpublished instead of howpublished is gonerefs maybe the ui also has to display lower case values or should it use the currently removed camelcase functionality i dont like the current entryutilcapitalizefirst solution found in maintablecolumnjava in my opinion it should use lower case since we are standardizing on that id say you are free to implement what you find more beautiful on lower case
565.0,567,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,implements highlighting matches works now also for regular expr… …essions in preview panel and entry editor
564.0,568,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fixed cite command changes are immediately reflected in the pus… …h to application actions and not only after restart
116.0,569,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,remove field saving options as decided in all field saving options should be removedthis pr purges the options from the gui and cleans up related reader and formatter classes this simplification greatly reduces the complexity of bibentrywriter
593.0,594,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,solved and cleaned up the oo code a bit hopefully solved try it out at cleaned up the code a bit based on pmd the actual fix is on lines in ooutiljava looks good is it possible that the dependency on unoiljar can be removed unoiljar was in a separate directory before changing the default paths to be the same for unoil and the other jars where jurtjar is the one searched for was the biggest change to get it to work with the most recent versions of oo and lo
545.0,595,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,fixed acm fetcher works again fixed and some pmd cleanup i just tried to check if this is fixed but i am still getting the error javaioioexception cannot parse number of hits at netsfjabrefimporterfetcheracmportalfetchergetnumberofhits acmportalfetcherjava at netsfjabrefimporterfetcheracmportalfetcherprocessquerygetpreview acmportalfetcherjava at netsfjabrefimporterfetchergeneralfetcher$ run generalfetcherjava at javautilconcurrentthreadpoolexecutorrunworker threadpoolexecutorjava at javautilconcurrentthreadpoolexecutor$workerrun threadpoolexecutorjava at javalangthreadrun threadjava the exception is thrown since the matcher seems to find no match maybe getnumberofhits should return zero in this case instead of throwing the exception ahh thats right final fix lets remove all the checking as i have much better regexps now not sure it ill start up eclipse again today but ill take care of it sounds good smile and no need to hurry there are enough other pull requests to review should be good to go now confirmed works for me as well thanks a lot
495.0,605,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,change entrytype to string in bibentry this pr tries to resolve the issues discussed in and right now the entry type is converted from a string representation in the bibtex file to an entrytype by the parser the problem with this approach is that the parser has to know about the bibtex vs biblatex mode the idea was to just store the string in the bibentry and only get the corresponding entrytype whenever it is really necessary oh that change surely was much effort unfortunately i find the old way more fitting even though the bibtex biblatex mode switching was difficult why not using entrytype but only as proxy to the real type dependent on the bibtex biblatex mode i currently dont know the gof pattern name for that see_no_evil all entries should have a non abstract entrytype and there should be abstract bibtexentrytype and biblatexentrytype all of them should implement ientrytype offering hasallrequiredfields etc entrytype and entrytype should not be in a inheritance relation entrytype should proxy to the appropriate bib la textype depending on the mode thanks olly for your feedback let me elaborate a little about why ive chosen to store the entry type as a string the type of the entry is per se a state less information article{} signifies an article in the bib file independent on any preferences in jabref i think it it thus a good idea to also have a state independent representation of the same information in jabref in other words i prefer a system where the type is stored in the bibentry class independent on anything else much like the author field is also stored as a string and not as a authorlist object then in a latter step this data can be enriched by the preference dependent information about optional and required fields this reflects more or less the impression i got from that we came to the conclusion to see the bibentry class only as a data object without any logic now you can think about implementing such a system in java the easiest way and the one i have chosen in this pr is to store the type as a string variable one can also store the type information as an enum as i have suggested in but this feels over engineered especially since there is no code checking whether a entry is an article or a book the second step is to augment this information by optional required fields i have chosen a constructor based approach but maybe your idea about using the proxy pattern is better i have to think about it more regarding string vs authorlist i would have preferred that bibentry uses authorlist possibly calculated on demand and not during creation of the object similar for the files fieldunsure whether im wrong i would pack as much interpreted data in bibentry and get rid of strings as much as possible maybe we then reimplement an in memory relational database system for instance if we store the crossref as reference and not as string what if the referenced entry is deleted and then recreated etc ok as requested here a short summary in bullet list form_status quo_ parser converts the string article to a bibtype class instance and saves this in the entry makes changing from bibtex to biblatex mode hard as the type stored in every entry has to be changed adds additional dependency in the parser bibtypes class the parser has to know whether we are in biblatexmode or in bibtexmode however a priori this information is not necessary to parse a bib file does not store the type information as a string_pr_ parser stores the type information as a plain string in the entry this string will be converted to bibtype class when needed changing from bibtex to biblatex mode is easier since the required optional fields are used only in a few places makes dependencies clearer which class needs to know the bibtype or bibtex biblatex mode parser does not depend on bibtype class and on biblatexmode stores the type information as a string however this is in my opinion no real caveat the previous code also contains something like if entrygettype getname article which is now replaced by if entrygettype article so often the name of the bibtype is used which somehow destroys the advantage _alternative solution_ store type information as an enum in the entry and convert this enum to a bibtype when neededthis approach keeps all the advantages but does not have the stringy problem it feels however a little bit overengineered mainly because there are unknown types which are not covered by a simple enum refs typedbibentry as a wrapper around bibentry typedbibentry has high level api bibentry has low level api typedbibentry bibentry bibentry rawbibentry rebased not sure why there is a merge commit and introduced typedbibentry aka goodeasygodbibentry is this the correct way to implement it todo other pr bibdatabasegetresolvedfield should accept optional database
647.0,648,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,partly implemented added the possibility to copy the preview panel text not exactly what is requested in but probably quite usefulnote that the key binding is not working nor is the print preview key working so ill open an issue for that i would change the changelog entry to just describe the added functionality without refering to the other issue as it suggest another approach in my opinion lgtm please rebase then this can be merged in fixed and rebased
650.0,660,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,add test for parsing accents i tried to replicate the problems of but in the progress realized that the problem lied in the bib file provided there and not in the parser so the added test is rather useless but i figured it does not hurt to have more tests
621.0,677,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,make bibtex parser more robust against missing newlines as described in and the parser has some problems when an entry or preamble follows directly the file encoding header on the same line ie encoding myencoding article{} actually as the tests reveal it was not a problem with the actual parser but within the file opening logic i dont view this pr as a complete fix for and since not just the parser but also the serialization should be improvedalso fix a bug that prevented the import of bibtex entries having only a key as its content except my minor comment corrected for some reason the code style was not imported correctly in intellij hm i just use the default intellij code style tobiasdiez what do you think should be done to fix the above issues completely lenhard in my opinion jabref should add new lines after the encoding and preamble im working on a solution right now including a bit of refactoring to make testing easier tobiasdiez ok good to hear ill concentrate on other issues then
669.0,677,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,make bibtex parser more robust against missing newlines as described in and the parser has some problems when an entry or preamble follows directly the file encoding header on the same line ie encoding myencoding article{} actually as the tests reveal it was not a problem with the actual parser but within the file opening logic i dont view this pr as a complete fix for and since not just the parser but also the serialization should be improvedalso fix a bug that prevented the import of bibtex entries having only a key as its content except my minor comment corrected for some reason the code style was not imported correctly in intellij hm i just use the default intellij code style tobiasdiez what do you think should be done to fix the above issues completely lenhard in my opinion jabref should add new lines after the encoding and preamble im working on a solution right now including a bit of refactoring to make testing easier tobiasdiez ok good to hear ill concentrate on other issues then
667.0,683,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,remove url sanitizer as it is malfunctioning and unclear where needed… also see jabref developers if someone knows a use case where this is needed and why we can try to reimplement it properly but this way it really makes no sense imho so then either urldecoderdecode or uritoasciistring converts to of course not impossible but seems like one has used the incorrect methods in that casei think the main things it does is replacing space with in the urls and removing any \url{} commands there will probably be users that will run into problems but maybe one can add a url cleanup that does the corresponding thingi think an alternative solution would just be to do a replaceall at the end the problem is that is really hard to correctly encode a url if we are not aware of its structure regardless of what methods we useso if we are not completely sure we need it we should probably not do this sounds reasonable koppor what do you think about this especially is it possible that users have a url{\url{ in their bibfile and what about escaping symbols for latex like or unsure the method comment states following make sure an url is portable in that it doesnt contain bad characters that break the open command in some oses a call to this method will also remove \url{} enclosingsthat reads perfectly fineok i also read the following fixme everything below is really flawed atmmaybe we should cleanup the url fields and not do the cleanup at the place of opening although i see the issue of malicious bib files which could have an url executing malicious code however that risk is so low that i would not count on itmeaning and open a new issue for cleanup
410.0,690,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,simplify matching complexity of unlinked file finder reenables functionality important point removed one fileexists check in fileutiljava expandpath i think one check after replacing and \ is enough without checking the expanded path with directory in front cache is filled at initial creation for bibdatabase therefore no checks against the whole database for each file entry parse logic for file field should moved from the filelisttablemodel to filefieldjavawe could still improve quite a lot here but maybe its good enough tm for now
520.0,711,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,remove global sorting functionality refs global file sorting options are removed sort functionality is still available but no localized to every file and the file sorting options are stored in the file lenhard i have already implemented the other half of make sorting configurable in database properties & write it to file code is coming soon tobiasdiez that feature has always been available
706.0,715,1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,file based bibtex mode see changes file based setting of bibtex biblatex mode which is stored as a metadata in the bib file if no metadata is found jabref tries to detect the mode by checking if there are biblatex entry types which results in biblatex mode and otherwise in bibtex mode except one has set the biblatex mode setting in the global preferences in that case it would use the biblatex mode ui changes completely no restart necessaryplease provide feedback very very nice any last comments jabref developers i plan to merge this in soon as the effort to keep this pr up to date with master is really high due to the high amount of changes lgtm i cannot launch jabref at this branch exception in thread awt eventqueue javautilnosuchelementexception no value present at javautiloptionalget optionaljava at netsfjabrefspecialfieldsspecialfieldvaluegetaction specialfieldvaluejava at netsfjabrefguibasepanelsetupactions basepaneljava at netsfjabrefguibasepanel basepaneljava at netsfjabrefguijabrefframeaddtab jabrefframejava at netsfjabrefguijabrefframeaddparserresult jabrefframejava at netsfjabrefjabrefopenwindow jabrefjava at netsfjabrefjabreflambda$start$ jabrefjava it works well on master my above issue was which now has been fixed by oscar in master
116.0,716,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,introduce save actions this pr introduces the save actions feature described in it is possible to configure a netsfjabreflogicformatterformatter to be applied for the content of a specific field all formatters in netsfjabreflogicformatter are available to support file sharing the save actions are configured in the meta data of a file as a comment in the following syntax comment{jabref meta saveactions titlelowercasechanger} this above save action applies the lowercasechanger for the content of every title field on savein the future we need to enable the configuration of save actions via the ui in the database properties
621.0,718,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,improve database writer the aim of this pr is to improve the database writer in particular and also add tests to the writer and parser and do some refactorings to make test writing easier changes to serialization fix and by adding new lines after encoding and preamble the idea is that everything is terminated by a new line and the parsed serialization only safes newlines which separate it from the previous entry comments and preamble are serialized with capitalized first letter ie comment instead of comment and preamble instead of preamble this should follow the convention for entries there is no space anymore between string and the bracket and after the bracket ie string{name {string}} instead of string { name {string} } implemented add possibility to reformat all entries on save under preferences file refactorings renamed fileactions to bibdatabasewriter merged code for export and save in bibdatabasewriter extracted savesettings class from fileactions to own file and extended it & renamed to savepreferences note that this class has some setters against the recently established convention for preference classes since there are quite a few cases where the values from the preferences have to be overriden change usage of arrays to list in many places remove unused boolean parameters checksearch checkgroup moved writing of metadata and customentrytypesmanager to bibdatabasewriter extracted and reused gui code for displaying and editing sort preferences saveorderconfigdisplay could you rebase this on master as both pre requisite prs are already merged in so this could be completed now one question currently the save methods take parameters boolean checksearch boolean checkgroup which specify that only entries satisfying the active search group selection are exported or saved as far as i can see these boolean parameters are always set to false which means all entries are exported should i remove both parameters i guess that if this is merged in first it should be quite ok to rebase although many changes are redundant regarding your question it would be nice to be able to save like this but i guess it is another of jabrefs almost finished commented out and then removed features considering that one can save selected entries and it is quite easy to see which entries are in the active group search selection id say remove i think the code is now mature enough to be reviewed i added some notes above in the first post sorry that this pr is rather big i also pushed it to the branch jabref databasewriter so that a build should be available under do we have the only update if it changed functionality for the preamble strings and comments as well for strings and the epilogue yes for the preamble kind of the text in the preamble is stored and exactly rewritten but the preamble tag and newlines around it are not stored for the metadata there is no such functionality tobiasdiez regarding the two parameters arent they used for save selected as plain bibtex koppor no it is not used for this function save selected gets all the selected items and pass them to the save function the code in question reads javaif selectedonly { session fileactionssavepartofdatabase panelgetbibdatabasecontext file globalsprefs panelgetselectedentries encoding fileactionsdatabasesavetypedefault } else { session fileactionssavedatabase panelgetbibdatabasecontext file globalsprefs false false encoding false } please rebase i think this should be merged one suggestion regarding the savepreferences you could create a new instance after the call of a setter this would result in the benefits of having final variables and it still allows to create derivations of this savepreferences prefs new savepreferences globalsprefs savepreferences otherinstance prefswithencoding utf assert prefs otherinstance && prefsequals otherinstance rebased and implemented the withencoding suggestion ie removed all setters in the preferencesyou really dont like them right smile in my case jabref on and bit windows the problem is not fixed original lines encoding windows preamble{{\providecommand{\noopsort} {}}} or preamble are always changed to encoding windows preamble{{\providecommand{\noopsort} {}}}after saving changed bib filekind regardsjanez komelj jkomelj you have to use the latest development version or wait for the release of probably in weeks thank you
669.0,718,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,improve database writer the aim of this pr is to improve the database writer in particular and also add tests to the writer and parser and do some refactorings to make test writing easier changes to serialization fix and by adding new lines after encoding and preamble the idea is that everything is terminated by a new line and the parsed serialization only safes newlines which separate it from the previous entry comments and preamble are serialized with capitalized first letter ie comment instead of comment and preamble instead of preamble this should follow the convention for entries there is no space anymore between string and the bracket and after the bracket ie string{name {string}} instead of string { name {string} } implemented add possibility to reformat all entries on save under preferences file refactorings renamed fileactions to bibdatabasewriter merged code for export and save in bibdatabasewriter extracted savesettings class from fileactions to own file and extended it & renamed to savepreferences note that this class has some setters against the recently established convention for preference classes since there are quite a few cases where the values from the preferences have to be overriden change usage of arrays to list in many places remove unused boolean parameters checksearch checkgroup moved writing of metadata and customentrytypesmanager to bibdatabasewriter extracted and reused gui code for displaying and editing sort preferences saveorderconfigdisplay could you rebase this on master as both pre requisite prs are already merged in so this could be completed now one question currently the save methods take parameters boolean checksearch boolean checkgroup which specify that only entries satisfying the active search group selection are exported or saved as far as i can see these boolean parameters are always set to false which means all entries are exported should i remove both parameters i guess that if this is merged in first it should be quite ok to rebase although many changes are redundant regarding your question it would be nice to be able to save like this but i guess it is another of jabrefs almost finished commented out and then removed features considering that one can save selected entries and it is quite easy to see which entries are in the active group search selection id say remove i think the code is now mature enough to be reviewed i added some notes above in the first post sorry that this pr is rather big i also pushed it to the branch jabref databasewriter so that a build should be available under do we have the only update if it changed functionality for the preamble strings and comments as well for strings and the epilogue yes for the preamble kind of the text in the preamble is stored and exactly rewritten but the preamble tag and newlines around it are not stored for the metadata there is no such functionality tobiasdiez regarding the two parameters arent they used for save selected as plain bibtex koppor no it is not used for this function save selected gets all the selected items and pass them to the save function the code in question reads javaif selectedonly { session fileactionssavepartofdatabase panelgetbibdatabasecontext file globalsprefs panelgetselectedentries encoding fileactionsdatabasesavetypedefault } else { session fileactionssavedatabase panelgetbibdatabasecontext file globalsprefs false false encoding false } please rebase i think this should be merged one suggestion regarding the savepreferences you could create a new instance after the call of a setter this would result in the benefits of having final variables and it still allows to create derivations of this savepreferences prefs new savepreferences globalsprefs savepreferences otherinstance prefswithencoding utf assert prefs otherinstance && prefsequals otherinstance rebased and implemented the withencoding suggestion ie removed all setters in the preferencesyou really dont like them right smile in my case jabref on and bit windows the problem is not fixed original lines encoding windows preamble{{\providecommand{\noopsort} {}}} or preamble are always changed to encoding windows preamble{{\providecommand{\noopsort} {}}}after saving changed bib filekind regardsjanez komelj jkomelj you have to use the latest development version or wait for the release of probably in weeks thank you
756.0,718,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,improve database writer the aim of this pr is to improve the database writer in particular and also add tests to the writer and parser and do some refactorings to make test writing easier changes to serialization fix and by adding new lines after encoding and preamble the idea is that everything is terminated by a new line and the parsed serialization only safes newlines which separate it from the previous entry comments and preamble are serialized with capitalized first letter ie comment instead of comment and preamble instead of preamble this should follow the convention for entries there is no space anymore between string and the bracket and after the bracket ie string{name {string}} instead of string { name {string} } implemented add possibility to reformat all entries on save under preferences file refactorings renamed fileactions to bibdatabasewriter merged code for export and save in bibdatabasewriter extracted savesettings class from fileactions to own file and extended it & renamed to savepreferences note that this class has some setters against the recently established convention for preference classes since there are quite a few cases where the values from the preferences have to be overriden change usage of arrays to list in many places remove unused boolean parameters checksearch checkgroup moved writing of metadata and customentrytypesmanager to bibdatabasewriter extracted and reused gui code for displaying and editing sort preferences saveorderconfigdisplay could you rebase this on master as both pre requisite prs are already merged in so this could be completed now one question currently the save methods take parameters boolean checksearch boolean checkgroup which specify that only entries satisfying the active search group selection are exported or saved as far as i can see these boolean parameters are always set to false which means all entries are exported should i remove both parameters i guess that if this is merged in first it should be quite ok to rebase although many changes are redundant regarding your question it would be nice to be able to save like this but i guess it is another of jabrefs almost finished commented out and then removed features considering that one can save selected entries and it is quite easy to see which entries are in the active group search selection id say remove i think the code is now mature enough to be reviewed i added some notes above in the first post sorry that this pr is rather big i also pushed it to the branch jabref databasewriter so that a build should be available under do we have the only update if it changed functionality for the preamble strings and comments as well for strings and the epilogue yes for the preamble kind of the text in the preamble is stored and exactly rewritten but the preamble tag and newlines around it are not stored for the metadata there is no such functionality tobiasdiez regarding the two parameters arent they used for save selected as plain bibtex koppor no it is not used for this function save selected gets all the selected items and pass them to the save function the code in question reads javaif selectedonly { session fileactionssavepartofdatabase panelgetbibdatabasecontext file globalsprefs panelgetselectedentries encoding fileactionsdatabasesavetypedefault } else { session fileactionssavedatabase panelgetbibdatabasecontext file globalsprefs false false encoding false } please rebase i think this should be merged one suggestion regarding the savepreferences you could create a new instance after the call of a setter this would result in the benefits of having final variables and it still allows to create derivations of this savepreferences prefs new savepreferences globalsprefs savepreferences otherinstance prefswithencoding utf assert prefs otherinstance && prefsequals otherinstance rebased and implemented the withencoding suggestion ie removed all setters in the preferencesyou really dont like them right smile in my case jabref on and bit windows the problem is not fixed original lines encoding windows preamble{{\providecommand{\noopsort} {}}} or preamble are always changed to encoding windows preamble{{\providecommand{\noopsort} {}}}after saving changed bib filekind regardsjanez komelj jkomelj you have to use the latest development version or wait for the release of probably in weeks thank you
705.0,719,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,removed preference setting solves it can be discussed if the setting in the auto generate group dialog should be removed as well i think that there are good arguments to have a configurable separator and even have two different separators one fundamental and one for hierarchical keywords see and therefore i close this pr
454.0,734,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,add an optional tab that shows fields that are not displayed inside t… …he predefined tabs
738.0,739,1,0,0,1,0,1,1,0,0,1,1,1,0,1,1,use urldownload instead of getresults for fetching stuff relates to fixed some things in gvkparser to hopefully get rid of the final coverity warnings there not sure why the tests fail although it is related to internet connections i cannot really see that it has anything to do with the things ive modified since those fetches rely on unirest and not urldownload seems like the tests pass now without changing anything i removed some coverity warnings as well so that i just didnt repush the same stuff twice
751.0,752,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fixed this should should be merged in without waiting for confirmation
741.0,755,1,0,0,1,0,1,1,0,0,1,1,1,1,0,0,fix npe at saving does not reset save flag and a lot of other null pointer exceptions gettype and getstandardtype now return an optional instead of possible null values looks good to me would be cool if we can increase the test coverage especially for the newly created branches otherwise lgtm i added tests for all uncovered branches in typedbibentry and after two lgtm will merge this in oscargus have fun rebasing smile
685.0,807,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,fixes mysql export for more than one entry fixes the export of more than one entry through the connection option added ability to add server specific connection parameters in dbstrings because mysql and postresql parameter names differusing setcatalog instead of use database recommended in mysql doc see section initial database for connection thanks for this prideally i guess one would like to set parameters pairwise as dbstringsaddparameter allowmultiqueries true and then have dbstringsgetparameters form the correct connection string see eg however i assume that this may be the only parameter of interest to add siedlerchr could you rebase this on master there is also a good chance that this fixes your failing tests lenhard yes i wil check it this evening i have recreated the pr on the current upstream master branch so ignore this one here im still figuring out that whole git mergin stuff
492.0,842,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,fixed all text is copied if nothing is marked and preview of pa… fixed when nothing is selected the whole field is copied if the field is empty the right click copy item is disabledpreview of text to be pasted in tool tip now maximum characters should it be longer
685.0,843,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,fixes the mysql export for more than one entry fixes the export of more than one entry through the connection option added ability to add server specific connection parameters in dbstrings because mysql and postresql parameter names differusing setcatalog instead of use database recommended in mysql doc see section initial database for connection oscargus simonharrer edit i dont know why it says there is a conflict i did a fetch from upstream checked out upstream master and created a new branch
834.0,851,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,ignore non displayable fields for indent during writing long term fix would be to not indent at all and just write key value the indent has been agreed upon during the discussion at and it seems to be liked by users as there was a question regarding it on texstackexchange indent would us bring closer to original bibtex format but away from the biblatex formatexample from page of biblatexs manual grabbed_ for devall decision do not merge do the long term fix described at refs
859.0,864,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,add dialog to show all preferences in their raw form plus some filtering relates to adds a dialog which shows all preferences in a table by their type key value and default value table can be sorted table can be filtered to show only the preferences which deviate from their default value this is the most helpful one and it revealed various bugs when having a closer look count is shown as well reachable through options preferences show preferences button is below import export preferences converts default values of null to empty string change in changelogmd described looks good to me just rebase on master and this can be merged looks good some minor comments which probably can be ignored fixed later
815.0,874,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,fixing openoffice citation with curly braces and manual connection browsing change in changelogmd described fixed clicking on browse for manual openoffice does now workfixed curly braces in oo lo citation no longer ignored code cleanup replaced actionlistener with lamdbasone point for discussion defaultformbuilder jgoodies is deprecated is there already a replacement for the creation i found this thread koppor regarding defaultformbuilder there is an alternative jgoodies approach however it has been decided to leave it as is as a javax conversion is planned any year now i havent looked at the code carefully but what happens with {} around eg capitals ah thanks for your hint yeah it seems like it needs more checking for special cases i will try to come up with a solution to this i noticed that the authors name arp{\\i}rez then appears as arp{i}rez et al i tried some variants eg adding the curly braces manually before and end if stringutilisincurlybrackets field { braces at the start and the end of the string sbinsert { sbappend } systemoutprintln in curly braces sb sb } return sbtostring replace &dollar $ replace &dollar with $ this works well for authors however the problem is that i have no control over the field type this creates then a problem when you have an entry with curly braces around the title field those curly braces would then be printed in the generated bibliographyany ideas appreciated i havent tried it but i think that oobibbasegetcitationmarkerfield is the place to try basically check if there are surrounding braces format using the old formatter that removes all braces if there were surrounding braces add them back before returning the formatted stringa potential problem is author lists which starts and ends with braces but are not enclosed say {\aa}sa stor{\aa} but there are methods for checking that in integritycheckbracketchecker so as long as the basic mechanism is working one can always improve step later thanks for your tip i think i found a working solution in fact i copied the method and added a check for curly braces code is based on the integrity checker like you proposedthe copied method is manual tests look promising i will add some unit tests found a solution by enhancing the stringutil method and by adding a check for curly brackets in getauthorcitationmarkerfield the only thing which bothers me is that it is kind of double code i thought about this but did not come up with a nice solution maybe one of you has an idea i think you can simply check if field is author or editor in the old method not correct but there are other methods using similar logic i guess ideally each field of the predefined entry types should have properties eg if it is a name field apart from that i think the pr looks good to go i believe that one probably can add a bit of code to handle escaped curly brackets for the rare cases that someone needs to put a single \{ in a field but hardly anything important
856.0,874,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,fixing openoffice citation with curly braces and manual connection browsing change in changelogmd described fixed clicking on browse for manual openoffice does now workfixed curly braces in oo lo citation no longer ignored code cleanup replaced actionlistener with lamdbasone point for discussion defaultformbuilder jgoodies is deprecated is there already a replacement for the creation i found this thread koppor regarding defaultformbuilder there is an alternative jgoodies approach however it has been decided to leave it as is as a javax conversion is planned any year now i havent looked at the code carefully but what happens with {} around eg capitals ah thanks for your hint yeah it seems like it needs more checking for special cases i will try to come up with a solution to this i noticed that the authors name arp{\\i}rez then appears as arp{i}rez et al i tried some variants eg adding the curly braces manually before and end if stringutilisincurlybrackets field { braces at the start and the end of the string sbinsert { sbappend } systemoutprintln in curly braces sb sb } return sbtostring replace &dollar $ replace &dollar with $ this works well for authors however the problem is that i have no control over the field type this creates then a problem when you have an entry with curly braces around the title field those curly braces would then be printed in the generated bibliographyany ideas appreciated i havent tried it but i think that oobibbasegetcitationmarkerfield is the place to try basically check if there are surrounding braces format using the old formatter that removes all braces if there were surrounding braces add them back before returning the formatted stringa potential problem is author lists which starts and ends with braces but are not enclosed say {\aa}sa stor{\aa} but there are methods for checking that in integritycheckbracketchecker so as long as the basic mechanism is working one can always improve step later thanks for your tip i think i found a working solution in fact i copied the method and added a check for curly braces code is based on the integrity checker like you proposedthe copied method is manual tests look promising i will add some unit tests found a solution by enhancing the stringutil method and by adding a check for curly brackets in getauthorcitationmarkerfield the only thing which bothers me is that it is kind of double code i thought about this but did not come up with a nice solution maybe one of you has an idea i think you can simply check if field is author or editor in the old method not correct but there are other methods using similar logic i guess ideally each field of the predefined entry types should have properties eg if it is a name field apart from that i think the pr looks good to go i believe that one probably can add a bit of code to handle escaped curly brackets for the rare cases that someone needs to put a single \{ in a field but hardly anything important
295.0,877,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,add ability to run arbitrary formatters as cleanup actions add ability to run arbitrary formatters as cleanup actions by reusing save actions thus some old cleanup entries could be removed this also implements moreover an erase formatter is added which just deletes the corresponding field untitled changes rename saveactions to fieldformattercleanups some smaller refactorings to reuse saveactions mainly to separate them from metadata change in changelogmd described i think it would look better if the check boxes were aligned vertically untitled are right when i compare both uis before after this pr we loose a lot of documentation and guidance for the user because how the user has to think which formatters would be well suited for which fields to be helpful making it harder to configure it correctly we need to find a way to fight this why not add a section about suggestions which can be checked unchecked and upon change change the table with the actions as well all the previous cleanup actions appear as the default value for the field formatters activeformattercleanupsadd new fieldformattercleanup date bibtexfieldformattersdate activeformattercleanupsadd new fieldformattercleanup month new monthformatter activeformattercleanupsadd new fieldformattercleanup title new casekeeper activeformattercleanupsadd new fieldformattercleanup title new unitformatter activeformattercleanupsadd new fieldformattercleanup title new latexformatter activeformattercleanupsadd new fieldformattercleanup title new htmltolatexformatter so opening the cleanup dialog for the first time shows essentially the same information as previously this is not apparent from the screenshots since i already removed some of the default values i could add a button which resets the field formatters to their default value or if you prefer adds the default formatters make paths of linked files relative if possible could also be a formatter and hence added to the save actions a button which resets to the defaults is a good idea we really need to think how the formatters can be better explained to the user would it make sense if each formatter itself has a short localized description how it works similar to the sentences used before which are shown in the table as well new update with reset button in cleanup dialog as well as in database properties dialog add descriptions of the formatters as tooltips in the list and in the combo box not ideal but better then nothing untitled the make paths relative cleanup as a save action should be covered with i dont want to implement this cleanup as a formatter formatters are just in out converters without any side effects keep name concept key is for serialization name is for display description is a long text improve keys and names of formatters separate issue with a table key and name eg unit as key eg name dateformatter normalizedatetoyyyymmdd add description text as box below the line of enter field name updated upon change of dropdown eg normalizes dates added now a description text box from my side this pr can be merged in the only missing thing is the naming of the formatters but i would prefer if this would be a separate pr not sure how much time i have the next days and since this is a blocker for untitled last point what happens when the description is longer than this line does it wrap automatically does it allow to use newlines for formatting since this is just an jlabel all the nice limitations and or features come along so no there are no automatic line breaks except if you put everything around tags and you also need to use for a new line hm this limits the description we can display there nevertheless i think it is best to merge it for now and then do the improvements in another pr just rebase and get this in i really like it and only have minor issues which i also can file as separate issue if it is too much effort to resolve nowis it possible to display a description with the given field in place of the field name if no field is given reason i find the empty description irritating and thought that the content of the white box was the descriptionabove at save sort order one can select a field i would have expected the same choice for the selection of the fields to apply the save action reason i am too lazy to input the field name manuallyi experience layout issues at the end the dialog height should be the size of all content including the white box shouldnt it grabbed_ i added your suggestion about adding the given field could you please open an issue for the other things thanksill now merge this in
466.0,879,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,rename pdf cleanup now also changes case of file name change in changelogmd described please remove the unused imports according to the codacy warnings otherwise i think it is fine
883.0,884,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fixed should solve change in changelogmd described no tests already passed this is a gui issue yes merging this as the changed visibility of the constructors prohibits a proper build at the moment if you pass null to the database then getresolvedfield is invoked with a null database thus the crossref functionality is not supported in the rename pattern i think this is not a big deal but easy to fix just pass the right db i think that at the moment null is always passed in the code which also means that it the two one and two argument constructors areonly used in tests they can be removed and nulls passed which of course isthe current behaviour but seems to make more sense to provide alternativeconstructors if they are used in actual code
890.0,903,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,fixed this should change in changelogmd described not relevant i think the method public string dolayout bibentry bibtex bibdatabase database { return dolayout bibtex database null } in layoutjava should be changed too and then there is test public void testhighlightinginvalidparameter { string content test word content textarea ta new textarea content should not matter at all tahighlightpattern null } which also sets the highlightpattern to nullthus i would expect ie add test for it that an npe is thrownotherwise i think that is the method i changed is there another method i searched but rather quickly yes the layout package could benefit from more testing no you are rightyou exactly changed the method i mentioned my bad smile what i meant in the second part is that setting the higlightpattern to null does not throw an exception since the test pass although i would have expected one so probably a objectsrequirenonnull is missing somewhere but there is a corresponding method in layoutentry which i think should be fixed as wellah ok ill have a look or maybe the highlighter is never invoked in the test case i fixed the other place as well but happened to change to more use of switching in the long term it would make sense to change the integers now used to an enumerationi also realized that all \n are stripped from the fields when doing a layout so even though eg htmlchars will convert the line breaks to something clever they are not there anymore once the formatter is invoked not sure where they go missing though
455.0,915,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,add button in preference dialog to reset preferences implements and or change in changelogmd described only ui change nice looks good but i would add a note that resetting the perferences requires a restart see change the language or the remote settings good point an info message is now shown looks good to me
707.0,925,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,add tests for metadata parsing this solves and prepares the way to refactor the metadata classi added a few methods to the metadata class to make testing more convenient many calls to getdata in fact can be replaced by these new methods i think this is something for a new prone question to write the tests in a nice way i had to overwrite a few equals methods in particular for the lowercasechanger should i also override equals for all other formatters when is the equals required except for simplifying this test seems like one can add them later if requiredthe pr looks good no as far as i can see equals is never used for the formatters and also no getkey equals which could be replaced with an internal equals
649.0,926,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,key bindings are now working in preview panel until now the toolbar within the preview panel held the key bindings which werent active when the toolbar wasnt created now the preview panel itself carries the key bindings change in changelogmd described looks good to me looks good please extract the setting of the key bindings as a method otherwise looks good to me too for each action one has to register a string two times one at the input map and one in the action map eg print can you extract variables so that this is made more clear a local variable for each of the blocks should suffice making it a constant moves it away from the code in question hence just create a local one extracted the key bindings and the actionmapkeys
410.0,929,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,find unlinked files freezes when using for pdf fixed reason was an illegalargumentexception thrown by doi class when pasting the contents of the whole first pdf page to the constructor the doi class can only handle real dois and does not extract strings that might look like a doi from the text therefore the whole doi scraper was removed in the whole pdfimporter class is screwed and a monkeypatch it should be reimplemented from scratch the usage of dois was requested by a user if the pdf contains a doi string the data of the doi should be used and not the guessed content with old jabref code that code worked do you have a proposal to bring that functionality back the parsing results are better for springer and ieee papers than with other existing open source scrapers and mr dlib that fact has to be regarded too the doi finding should work again now but the doi class has quite some redundant code now as i need to exclude spaces from the findintext regex i dont know if there are any dois out there that include spaces but theoretically it seems to be allowed for me src test resources encryptedpdf is not raising any exception also importentries is not throwing any ioexception which is propagated to other methods later on the functionality is really flawed spaces should be encoded as in a doi so i do not think it will be a problem see seem to recall that we changed the encoding of dois at some stage maybe this should be revisited so you mean we can replace the exact_doi pattern with the doi_pattern
936.0,937,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,preview panel is now updated when an entry is cut deleted when an entry is cut deleted the preview panel will be hidden due to the fact that no entry is selected anymore change in changelogmd described looks good does the panel show up again when selecting another entry after deleting one if so yes it does we really should consider to implement an event system for the event system maybe use the stuff that comes with google guava
941.0,944,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,removed fetch in title from database fetchers removed translation of fetcher names because that are proper nouns lgtm this doesnt it side comment the entires in menu_ properties had to be removed too see cff further changes in the language files at still missing medline oai acm are still in the language files siedlerchr do you want to take over first this fix was for but i did not remove the gvk long description is still useful about the rest i can document this on the websiteoh i just saw that i only checked the normal language property files will continue removing and will propose a pr for documentation on the website
796.0,947,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fix for undoing deletion cutting multiple entries workaround for when an undo with multiple entries is undone each entry is undone one at a time the problem herein lies that when the first entry is undone the insertion in the database triggers the creation and insertion of an namedcompund into the undomanager which kills the main undo the one with the multiple entries which result in just one entry being undonewith this workaround each entry has its own namedcompund which solves the problem but the user has to call the undoaction several times ctrl z for each entry change in changelogmd described im unsure whether this is the correct behavior if i delete multiple entries at once all of them should be restored i thought that the undo redo concept of jabref is that always undo and redo actions are packaged as a wholeis it a valid workaround to globally flag whether an redo undo action is in progress and thus no new undo thing is put on the undo stack i would also prefer that the undo stuff is fixed so restoring several bibentries works but good that you found out the reason for the failing multiple entries ok ill look further into it and search for a better solution bartsch dev can you point me to the code where the insertion adds a new change in the undomanager as far as i see the revert action just calls databaseinsert which does not call the undo manager thanks when an entry is about to being restored undoableremoveentryundo is calledthe entry is inserted back into the database which fires a databasechangeevent and calls specialfielddatabasechangelistenerdatabasechanged databasechangeevent e and adds another edit into the undomanager if we follow that trail we see that the undomanager trims the edits line which calls die line and kills the namedcompound which contains the other entries we havent undone yet i wonder whether it is a solution to add a second paramter to insertentry indicating whether the action should be a silent change or not or add a second method insertentrysilently thank you bartsch dev for you helpful explanation i think the cleanest way is to remove the specialfielddatabasechangelistener and let the calling code handle the undo management ie if i call databaseinsert then i also have to create the undo event there otherwise we have problems everywhere with handling multiple changes undo an import i think this strategy is also applied everywhere else at least the group interface handles the undo thing itselfbut maybe you come up with another solution when removing the specialfielddatabasechangelistener it should be taken care that the special fields still work currently the fields are stored in the keyword field and are put into normal fields to enable rendering in the table if the specialfielddatabasechangelistener is removed this rendering imho wont take place any morewhen we rewrite the special fields this might change another working solution i found was to create a new undoableedit which manages multiple entries with a list when undoing the removal it uses the new addentries method inside bibdatabase which adds all the entries and after that finally fires the databasechanges koppor tobiasdiez wdyt as i explored deeper into the code i noticed that the undo which the specialfielddatabasechangelistener adds doesnt do anything basically its an empty namedcompund which gets discarded by the undomanager can that confirm anyone currently without code here but double check that the stars in the columnrating are displayed in all undo cases deleting adding an entry is ok butwhat about undo redo of adding keyword rank in the keyword field myfeeling is that undo redo if that wont work when the updatelistener ischangedalso if an entry with keyword rank is added is the column rankingupdated to show one star the specialfielddatabasechangelistener only reacts on the insertion of entrieson another note when changing the rank of an entry you have to click into the entry list to repaint it but i think there was opened an issue on that a short time ago i deleted the specialfielddatabasechangelistener and adjusted l nas far as i can tell everything works just fine tested it with deleting undoing entries with rank marked color marked tschechlovdev maybe you can do some additional testing i removed the id generation in undoableremoveentry since its not necessaryi have no idea why circleci fails and how to fix it compilejava home travis build jabref jabref src main java net sf jabref gui basepaneljava error cannot find symbol databaseadddatabasechangelistener specialfielddatabasechangelistenergetinstance ^ symbol variable specialfielddatabasechangelistener location class basepanel should be quite obvious what is wrong and not be that hard to fix woops i slipped there i extracted some code for another bugfix which will get its own pr and extracted too muchnow all checks pass but before that the build on circleci exceeded the memory of g no typing error but i think circleci meant gb and failed lgtm its nice that a bug can be fixed by removing code special fields functionality is disturbed by this patch steps to reproduce open special fieldsbib double click on second entry key entry with rank go to bibtex source copy the complete string into notepad close the entry editor change rank to rank in both the key and the keywords field mark everything copy into the clipboard focus jabref ensure that the entry editor is really closed click into the white area paste the entry using ctrl v expected four stars shown at ranking column as is no stars shown at ranking column grabbed_ intermediate solution open the editor go to the general tab change rank to rank save change rank to rank general remarksi know that the keyword based synchronization is a code which is not that straight forward as other code in jabref i personally like the functionality to have columns shown which are based on keywords i made the reason might be that i sometimes edit my bibtex files manually which also nearly half of the survey participants do thanks for that detailed explanationimo the addition of the undo object in specialfielddatabasechangelistener is not usefulmostly because its added before the more important undo object the undo of the entry paste and when you undo the paste this undo object is irrelevant bartsch dev could you add an integrationtest meaning a test for the ui demonstrating the undo redo behavior then we dont have to rely on the above manual steps for testing bruehldev and braunch should be the experts in ui testing ill do it it the next sprint which starts today current coverage is merging into master will decrease coverage by diff master diff files lines methods messages branches hits misses partials files not in diff in net sf jabref event were deleted more files not in diff in n java net sf jabref were deleted more files not in diff in va net sf jabref sql were modified more misses files not in diff in jabref specialfields were modified more files not in diff in f jabref model entry were modified more misses partials hits files not in diff in abref model database were modified more misses partials hits files not in diff in sf jabref logic util were modified more misses partials hits files not in diff in f jabref logic msbib were modified more misses partials hits files not in diff in jabref logic cleanup were modified more misses hits files not in diff in net sf jabref logic were modified more misses hits powered by codecov last updated by fe d d d lgtmplease rebase to allow it to be marged please resolve the conflicts i rebased and resolved the conflicts tests fail in master can you have a look otherwise i will revert this merge hm thats very strange the tests in this pr passed i will look into it after a quick study i noticed that assertj is simply to fast for jabref meaning that the entry table after opening the database is simply not loaded and thus cannot be found by increasing the delay between events from assertj robot settings delaybetweenevents it can be averted but i dont like it that way as it depends on the power of the executing machinei will look further into it tomorrowyou can revert the merge if you like that way we can have a clean commit without a mess in between the test seems to fail randomly making it stable enough is fine for me
941.0,948,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,introduce search and error while fetching from instead of having separate strings for each fetcher the placeholder is used nowrefs
920.0,974,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,always trim fields on save and remove trimformatter the consensus in was that fields should always be written without leading or trailing whitespace this is done in this pr and the trimformatter is removed by the way empty fields are never written as one of the added tests shows change in changelogmd described lgtm
978.0,979,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,refactored singlebibtexfield based on the initial ideas in the class singlebibtexfield is extracted and two enumsets are used for implementing the existing functionality very good points too much copy paste as usual will sort it out tomorrow looks good other improvements can be made in separate prs
623.0,988,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,when clicking on a tab the first field now has the focus change in changelogmd described this is referes to i just had to add the activatevisible method to the changelistener to ensure the focus is set what happens if i am scrolling through the list of entries in the table via the keys does the focus can jump away to the field editor if it is open from what i recall we had the issue i mentioned before and had to remove the functionality to automatically focus the first field please test this exhaustively with different entry editors for different entry types open and then scrolling via keys i am going to figure that out after our exam this week so your comment is recognized i had a chat with koppor today bruehldev and i will write an automated test for this in our upcoming sprint starting on monday th april when this is done we should have verified if the focus is lost on scrolling or not what is the current status here i have run the integration tests on it and tried it manually the entry tables focus is not lost when going through the entries only when opening the entry editor as intended i wonder why the travis jobs are not executed because you violate the correct imports order and this cannot be merged without the build failing at the moment i will fix the order soon probably on friday maybe pushing on the branch will then trigger the jobs again lgtm just fix the import order and improve the changelog then this can be merged in from my point of view can this be merged why did the gradlew scripts change otherwise lgtm gradle scripts are back to normal ok
958.0,992,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,better layout of databasepropertiesdialog does not fully solve but at least betteri do not fully understand why the formatter part doesnt scale horizontally uh isnt siedlerchr currently working on this dialog see and öhm you didnt need to do that as i am already working at this see assigned label i know however since ive struggled with jgoodies earlier i thought youcould use some input regarding your question in that issue use it asinspiration yeah it was the scaling of the icons to the buttons i will try later i think the solution is to putt the icon button and the other buttons in a button bar i think i solved that part only tested on linux where it looked ok tostart with though the key thing i did was to use fill siedlerchr shall we merge this in and you work with oscargus improvements as a basis or do you prefer to create another pr beginning from scratch i will manually try to apply the fixes because i changed some more in thelayout removed textfields etc gmt matthias geiger notifications githubcom siedlerchr shall we merge this in and you work with oscargus improvements as a basis or do you prefer to create another pr beginning from scratch — you are receiving this because you were mentioned reply to this email directly or view it on github https githubcom jabref jabref pull issuecomment
991.0,996,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,fix entry deletion from database a bug introduced in b aee bae b aa ef f b d bd while moving from map to list as the data structure for the stored bibentries is has been forgotten to adjust the removeentry method change in changelogmd described is it really impossible to add a test case enhanced the tests a little bit and added a null check while inserting an object into the database lgtm thanks for fixing the bug i had introduced the changes look goodplease try to adhere to the convention for tests outlined in the wiki especially the naming of the tests and only one test per test method comments test methods shouldnt be necessary but the test name should contain all the information after some minor naming improvements this can be merged in in my opinion good job
957.0,999,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,db properties layout and save order config changed change in changelogmd described and fix height of the dialog and add spacing between ok cancel button and borderchanged jcomboxbox to editable and removed the unnecessary textfieldsadded jcombobox for selecting the fields to apply the selected formatter tochanged position of delete buttonremoved indexoutofbound exception when no item is selectededit i just see this pr is is it possible to write a simple ui test for it innocent refs ui test i will try to write one added gui test und fixed checkbox label not displaying correclty the code looks good so i give my for merging if you add a nice looking screenshot smiley tobiasdiez here you are dbproperties oscargus i tried to fix this but i could not get the damn jlist resized horizontally or vertically i tried around a lot the code for this is located in fieldformatterscleanuppanel from this one it sounded very simple this is how it scales after my fix dbpropertiesresized my code did everything except horizontal sizing and i also tried alot so check there for possible hints i think that when spanningmultiple columns using a fourth alignment argument to xyw is one thing siedlerchr i think it is good to go so please rebase and it can be merged i reserve the right to fix change the scaling at some stage oscargus okay otherwise i would have looked at the gui resizing in more detail the next days siedlerchr up to you i just wasnt sure what the status of the pr was and was thinking of merging it if it was possible feel free to look at the resizing oscargus as i just rebased it on the master i would suggest merging it for once now so that the biggest changes eg the comboxes are into itthe resizing are only some minor things i will try to experiment with them in the next days and release it then as a new pr
958.0,999,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,db properties layout and save order config changed change in changelogmd described and fix height of the dialog and add spacing between ok cancel button and borderchanged jcomboxbox to editable and removed the unnecessary textfieldsadded jcombobox for selecting the fields to apply the selected formatter tochanged position of delete buttonremoved indexoutofbound exception when no item is selectededit i just see this pr is is it possible to write a simple ui test for it innocent refs ui test i will try to write one added gui test und fixed checkbox label not displaying correclty the code looks good so i give my for merging if you add a nice looking screenshot smiley tobiasdiez here you are dbproperties oscargus i tried to fix this but i could not get the damn jlist resized horizontally or vertically i tried around a lot the code for this is located in fieldformatterscleanuppanel from this one it sounded very simple this is how it scales after my fix dbpropertiesresized my code did everything except horizontal sizing and i also tried alot so check there for possible hints i think that when spanningmultiple columns using a fourth alignment argument to xyw is one thing siedlerchr i think it is good to go so please rebase and it can be merged i reserve the right to fix change the scaling at some stage oscargus okay otherwise i would have looked at the gui resizing in more detail the next days siedlerchr up to you i just wasnt sure what the status of the pr was and was thinking of merging it if it was possible feel free to look at the resizing oscargus as i just rebased it on the master i would suggest merging it for once now so that the biggest changes eg the comboxes are into itthe resizing are only some minor things i will try to experiment with them in the next days and release it then as a new pr
1001.0,1010,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,added initial tests for exportformat really trivial and early test but could maybe avoid bugs like to happen and form a foundation to extend on mhhi am missing an assertion in these tests ie reading the exported file and checking that it is empty i have changed the code based on all comments major implications now all exporters returns an empty file for an empty set of entries and are tested for this earlier some heading information was generated all exporters are now tested that they throw an npe with a null database or null entries list the change that is in practice reverted and solved such that the exportformat calls add all entries instead of null for all entries the test disabled in is active again i had to break the new guideline in to be able to test all exporters for npes in a simple way if theres a better way please let me know this shows that adding a quite crappy initial test can lead to good things as the export is now not performed for empty databases entries lists as a side effect the coverage is more accurate now as well earlier it increased quite a bit but no actual testing was done well apart from that the code executed without any errors this looks way better then the initial pr good job not obvious that parameterized is executed before beforeclass but once i figured that out lgtm i think this is probably as far as we get right now and that the code is quite ok since it is rather general and only tests what is actually tested or how to formulate it
1012.0,1014,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,improved exception handling in tests cases never catch an exceptionremoved unnecessary exceptionsthrow specific exceptions never only exceptionref good work siedlerchr btw you should assign your commit email with your github account see oscargus fixed stefan kolb i just added my git mail address to my github account as secondary mail address was done by eclipse will change this back
103.0,1037,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,implemented added a button that can be used to determine if the search results should be updated on every pressed key or on enter only based on the suggestion in two issues select a good icon the current one is quite intuitive if it wasnt for the fact that the symbol is rarely used for selecting a state when using autocompleting and search on enter enter needs to be pressed twice once to select the completing once to search searchontype will be available at in minutes or so change in changelogmd described i dont like the boolean parameter to much i would prefer if the performsearch method is not changed but a second method performlivesearch including the check is introduced otherwise good job i do not know why i so rarely use overloading which this is a sort of i changed now performsearch and performsearchiflive changed to the sync icon not sure why eclipse formats the icontheme file as it does but i cannot get around it newsearch found auto renew so changed to that basically a mirrored version of sync so clockwise arrows hm idea what about issuing the search request only after ms of nothing happened in the text field this would require less icons and less buttons the user has to interact and understand and could provide similar results what do you think oscargus i see your point regarding the number of buttons but then it seems like one either has a small enough database and then it is probably just annoying or you have a big database in which case it might still not solve the issueit seems like this setting and filter float are user preferences rather than search preferences in the sense that you wont change this depending on your current search as opposed to regex and case maybe one should tuck the user preferences away as they are more rarely changed i mean you would like to have live search by default but be able to disable it if required i can also imagine that some people want to get rid of autocompletion sometimes with that said i havent checked if one can configure it an advanced settings button with pop up menu i am somewhat unsure where we should be heading here i think we should try to reduce the number of preferences the user can input as jabref has so many options it can make it very hard to use if we detect whether the database is small medium or large in size we could adjust the search automatically somehow so it will not update immediatly if there are more than k entries or use a formula which computes the amount to wait between after a search the issue is not the search itself which is done in a separate thread but the update of the ui after the search is done so basically we could try to keep track of the search queries that are currently active through an atomic counter and only update the ui when the counter has reached the value i agree on the preference thing in general still i think this is a rather straightforward setting and more importantly it doesnt really break anything if set the wrong waysomehow these automatic things will always turn out bad for some users and then they cannot change it apart from that i agree that it should be possible to come up with a scheme that is reasonable for most users however im not convinced it is worth the effort compared to the simple and fully waterproof switch to me it can even be hidden in the preferences under a performance tab where that and eg the new cell formatting can be switches off if required all bells and whistles on but can be disabled if performance is sufferingi have some thoughts related to preferences in general and will open an issue any day now hm ok maybe the quickest thing is to add a settings dropdown menu using some kind of wrench or so symbol in the search bar there we can also move the float thing as well oscargus nevertheless i think we should ensure this overlapping of searches does not happen this could maybe help enough already reducing the pain of having a large database without loosing the live feature im with simon here and think a button is not necessary why not just perform a search every time directly after the input changed if the user types quicker then the search is performed then the old search is just aborted and a new one started so for small databases you see a direct consequences for larger ones you get a delayed response the only thing required for this approach is to make sure that an ongoing search does not block inputs in the search fieldgoogle also somehow manages to show live results without a toggle instant search button and i believe their database is bigger than the average bib file smile so the user response in is irrelevantden mar skrev tobias diez notifications githubcom im with simon here and think a button is not necessary why not just perform a search every time directly after the input changed if the user types quicker then the search is performed then the old search is just aborted and a new one started so for small databases you see a direct consequences for larger ones you get a delayed response the only thing required for this approach is to make sure that an ongoing search does not block inputs in the search field google also somehow manages to show live results without an instant search button and i believe their database is bigger than the average bib file image smile — you are receiving this because you were mentioned reply to this email directly or view it on github no of course not but i find the part blocking further typing into the search box the most critical and annoying if the input in the search field is not blocked the user will not notice that we actually search in the background ah ok now i understand your comment sure that would be another way to solve it probably better from many perspectives i tried to implement a settings button and while it works im not really fond of the results ive tried having both one menu item for filter float which is quite unclear and having radio buttons for both options which is better as one can have the full sentence but i think that the additional icon is still the best the whole search bar is quite compact now so i do not think that the previous width problem is relevant also if when live search is removed eg if non overlapping search is implemented and works for entries it will be easier to just remove the button rather than remove the menu etc do you think this is still necessary or this can be closed in favor having a faster overall search no if the search speed has improved as much as it seems i do not think this one is required if it turns out to be it is easy to recover
1034.0,1037,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,implemented added a button that can be used to determine if the search results should be updated on every pressed key or on enter only based on the suggestion in two issues select a good icon the current one is quite intuitive if it wasnt for the fact that the symbol is rarely used for selecting a state when using autocompleting and search on enter enter needs to be pressed twice once to select the completing once to search searchontype will be available at in minutes or so change in changelogmd described i dont like the boolean parameter to much i would prefer if the performsearch method is not changed but a second method performlivesearch including the check is introduced otherwise good job i do not know why i so rarely use overloading which this is a sort of i changed now performsearch and performsearchiflive changed to the sync icon not sure why eclipse formats the icontheme file as it does but i cannot get around it newsearch found auto renew so changed to that basically a mirrored version of sync so clockwise arrows hm idea what about issuing the search request only after ms of nothing happened in the text field this would require less icons and less buttons the user has to interact and understand and could provide similar results what do you think oscargus i see your point regarding the number of buttons but then it seems like one either has a small enough database and then it is probably just annoying or you have a big database in which case it might still not solve the issueit seems like this setting and filter float are user preferences rather than search preferences in the sense that you wont change this depending on your current search as opposed to regex and case maybe one should tuck the user preferences away as they are more rarely changed i mean you would like to have live search by default but be able to disable it if required i can also imagine that some people want to get rid of autocompletion sometimes with that said i havent checked if one can configure it an advanced settings button with pop up menu i am somewhat unsure where we should be heading here i think we should try to reduce the number of preferences the user can input as jabref has so many options it can make it very hard to use if we detect whether the database is small medium or large in size we could adjust the search automatically somehow so it will not update immediatly if there are more than k entries or use a formula which computes the amount to wait between after a search the issue is not the search itself which is done in a separate thread but the update of the ui after the search is done so basically we could try to keep track of the search queries that are currently active through an atomic counter and only update the ui when the counter has reached the value i agree on the preference thing in general still i think this is a rather straightforward setting and more importantly it doesnt really break anything if set the wrong waysomehow these automatic things will always turn out bad for some users and then they cannot change it apart from that i agree that it should be possible to come up with a scheme that is reasonable for most users however im not convinced it is worth the effort compared to the simple and fully waterproof switch to me it can even be hidden in the preferences under a performance tab where that and eg the new cell formatting can be switches off if required all bells and whistles on but can be disabled if performance is sufferingi have some thoughts related to preferences in general and will open an issue any day now hm ok maybe the quickest thing is to add a settings dropdown menu using some kind of wrench or so symbol in the search bar there we can also move the float thing as well oscargus nevertheless i think we should ensure this overlapping of searches does not happen this could maybe help enough already reducing the pain of having a large database without loosing the live feature im with simon here and think a button is not necessary why not just perform a search every time directly after the input changed if the user types quicker then the search is performed then the old search is just aborted and a new one started so for small databases you see a direct consequences for larger ones you get a delayed response the only thing required for this approach is to make sure that an ongoing search does not block inputs in the search fieldgoogle also somehow manages to show live results without a toggle instant search button and i believe their database is bigger than the average bib file smile so the user response in is irrelevantden mar skrev tobias diez notifications githubcom im with simon here and think a button is not necessary why not just perform a search every time directly after the input changed if the user types quicker then the search is performed then the old search is just aborted and a new one started so for small databases you see a direct consequences for larger ones you get a delayed response the only thing required for this approach is to make sure that an ongoing search does not block inputs in the search field google also somehow manages to show live results without an instant search button and i believe their database is bigger than the average bib file image smile — you are receiving this because you were mentioned reply to this email directly or view it on github no of course not but i find the part blocking further typing into the search box the most critical and annoying if the input in the search field is not blocked the user will not notice that we actually search in the background ah ok now i understand your comment sure that would be another way to solve it probably better from many perspectives i tried to implement a settings button and while it works im not really fond of the results ive tried having both one menu item for filter float which is quite unclear and having radio buttons for both options which is better as one can have the full sentence but i think that the additional icon is still the best the whole search bar is quite compact now so i do not think that the previous width problem is relevant also if when live search is removed eg if non overlapping search is implemented and works for entries it will be easier to just remove the button rather than remove the menu etc do you think this is still necessary or this can be closed in favor having a faster overall search no if the search speed has improved as much as it seems i do not think this one is required if it turns out to be it is easy to recover
963.0,1041,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,write database type in lower case into the bib file this finally a quick fix has been introduced in eea e but that does not cover the lower case writing of the type comment{jabref meta database_type bibtex} finally gets comment{jabref meta databasetype bibtex} change in changelogmd described this has been introduced in the development versions after the last release thus no entry required tests have been adapted to match this new implementation is the parsing case insensitive is that tested oscargus the value is parsed case insensitive
103.0,1050,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,restructrued cleanup formatters dialog reworked cleanup formatter dlg description updates when and item is selected also on startup the field is now also multilane with auto resizing and word wrap after deleting a selected item in the list the next one previous is selected changed layout to be more consistent renamings to be more precise and moving in new packageadded tests change in changelogmd described cleanupentriesdialog https cloudentcom assets fa ac f f e d c a ad png looks good to me just a few small remarks which should be fixed then this can be merged in tobiasdiez applied your proposed changesinstead of run selected field formatters it is now run listed field formatters i think this looks good koppor what do you think why is this assigned to koppor what is blocking this is my request and id like to have the example displayed for that i need to get throughmy aim to have the dialog understandable to usersfurther i need to test the thing for which i didnt have time yet see_no_evil \ when changing the focus of the list the description does not update is it possible to update the description when the focus of the list changes \ when the formatters are disabled it is not clear where the description comes from maybe hide the field grabbed_ when i enable the formatting no formatter is selected could there the first formatter if available be enabledchange at the combobox works koppor the focus of the description only updates when you select it in the combobox it would be otherwise too confusing if the combobox displays formatter a and you select formatter b in the list which one should be displayed thenfrom my point of view the workflow atm is select the field eg abstract and select the formatter to add to the list therefore the description is referring to the current selected formatterthe other things regarding the enabling disabling could be done easilyas tomorrow my new semester starts i dont know if i can get this whole thing done in time for v release on friday siedlerchr do you still have time yep wil look at it this evening or tomorrow morning the thing is that a user might now what a specific formatter does when opening the dialog the first time as far as i remember we have some default formatters enabled and the user doesnt know what to do therefore this quick suggestion note that i added the formatter string at the sketch at that was aimed to reduce confusion somehow innocent decision from developers tooltip on existing formatters is enough decision we merge as is siedlerchr could you just resolve the conflicts innocent thank you for working on it siedlerchr can you please rebase this so we can merge will do this today evening gmt stefan kolb notifications githubcom siedlerchr can you please rebase this so we can merge — you are receiving this because you were mentioned reply to this email directly or view it on github we decided to use the existing translation string instead of introducing new ones a few days before the release refs run_listed_field_formatters wished run field formatters existing lgtm http lgtmin p ebbdqgpn http lgtmin i ebbdqgpn
1051.0,1054,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,fix sorting of entries on save fix sorting of entries on save this shouldnt affect the sorting of export so is unrelated to in the end it was just a wrong boolean in the preference change in changelogmd described no i think the issue was introduced in this version kind of there is a test for the sorting now but it passed before any fix no test added for the boolean in the preference context decision to add new entries at the end user wants to have other sort options user wants to have other sort options as defaultthe idea is that a user can configure a bib template which contains the default preferences for a database such as the bibtex key patterns and the sort order configuration when the user creates a new bib file the template is usedwe discussed sometime ago the plethora of preferences maybe that approach could help to reduce that however the system of a bib template could increase complexity since i care for sharing and group editing of bib files i want to a have as much as possible bib affecting configurations directory key patterns in the bib file itself see for instance and b enable new users to have a properly configured bib file and not requiring an expert to configure jabrefa is imho mostly achievedb is some thing we are working on to have correct default settings my personal feeling is that some groups however do not want to follow our conventions for instance bibtex keys sort order and thus require different settingsmaybe i should open a separate issue asking for support of bib template innocent koppor commented on the wrong issue tobiasdiez no not the wrong issue i tried to give some context above hope that helps to understand my text
1055.0,1056,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fixes npe in export to external db fixes npe in export to external dbadd db type to export succesful messagereformatting no changelog because i think it was new introduced by the redesign of the entry sorting passing null export now all entries by default
1062.0,1064,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,merge entry with doi information now also applies changes to entry type change in changelogmd described no test because a test requires an online connection innocent other than that lgtm lgtm
672.0,1089,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,filelist field size now dependent on its content the filelist within the entryeditor now automatically resizes its columns dependent on the length of its content java change in changelogmd described i rearranged the imports a bit using the settings tobiasdiez describes in looks good to me me jabref developers anybody else any comments maybe we could integrate that in v already apart from my comment regarding the changelog this is fine and can be merged moved the changelog entry from fixed to changed
393.0,1116,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,open jdk problems with look and feels see still not sure if this only applies to openjdk and gtk l&f or also to oracle jdk and gtk l&fmetal l&f seems to work but looks uglyidea is to try metal on openjdk and wait if more bug reports pop up even for oracle maybe we should close at least one of the two bug reports that seem to be related to openjdk and gtk or maybe even open a new one with possible solutionsalso see see we can just ignore this and wait for it to be fixed in openjdk and add a hint to our faq and documentation when merging this in please use squash merge to make it easy to revert this change when this is obsolete for openjdk later on oh where did aa d b go as far as i can see only ac bae which is very short in comparison to the changes shown above has been cherry picked related
638.0,1116,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,open jdk problems with look and feels see still not sure if this only applies to openjdk and gtk l&f or also to oracle jdk and gtk l&fmetal l&f seems to work but looks uglyidea is to try metal on openjdk and wait if more bug reports pop up even for oracle maybe we should close at least one of the two bug reports that seem to be related to openjdk and gtk or maybe even open a new one with possible solutionsalso see see we can just ignore this and wait for it to be fixed in openjdk and add a hint to our faq and documentation when merging this in please use squash merge to make it easy to revert this change when this is obsolete for openjdk later on oh where did aa d b go as far as i can see only ac bae which is very short in comparison to the changes shown above has been cherry picked related
1130.0,1135,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,and re enable gui test koppor its just a simple if smile gui test seems to brake after a few runs they are really quite unstable
1134.0,1138,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,importformatreader test added initial tests for importformatreader now seven different formats are imported without specifying the format and the number of imported entries is checked should avoid bugs like i also removed unused methods and moved a totally unrelated method to a better home lgtm nice work
318.0,1149,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,replace normalizenamesformatter by authorlist and so and refs removes comma as delimiter of author names in normalizenamesformatter the problem is that comma separated authors cannot be distingued from one author in bibtex format for example name della first could be three names separated by commas or if interpreted as valid bibtex string it is one author with lastnamename jrpartdella firstnamefirst add colon as delimiter of author names in authorlistparser thanks at all but especially oscargus for creating many tests made implementing this pr way easier change in changelogmd described looks very nice the md thing is a bit challenging and either way we will do it wrong for one of the cases if i were in medicine i would probably prefer not to expand md especially lgtm
1163.0,1168,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,by removing the strange functionality which enabled sorting… we have some very strange logic in jabref which allows to handle years using only the two last numbers so we can detect that means this causes a lot of issues i do not think that jabref should still support such strange logic and just use the value which is in the year field hence i removed it this also solves the issue of having that yearutil in the model package which duplicated a method in the stringutil class refs lgtm lgtm should we readd yearutil as a cleanup to convert two digit years to four digit years if we add it we should make use of the java functionality instead of the own ugly parsing this one http stackoverflowcom questions parsing string to local date doesnt use desired century
936.0,1192,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,preview panel is now updated when an entry is cut deleted again when i fixed some time ago pr i made a tiny errorthe issue was to hide the preview panel when deleting cutting an entry but it also hid it when aborting the delete confirmation dialogi too refactored both actions a little to make it easier for future changesi also removed in undoableremoveentry and undoableinsertentry the id generation
1080.0,1207,1,0,0,1,0,1,1,0,0,1,1,1,0,0,1,restructure importers the aim of this pr is to reduce the overlap between the importer package and some code in gui in particular the class opendatabaseaction moreover and are fixedin detail the following things were changed the abstract importformat class is almost completely rewritten please have a look at this class almost all other changes are a direct consequence of the edits made to the importformat class the biggest change is that the import method returns a parserresult instead of a list of entries in this way metadata can also be imported and error messages are communicated more effectively instead of throwing ioexceptions moreover the import method operates on a reader instead of an input stream in order to reduce some common code in all importers add method importdatabase path file charset encoding to the importer interface which opens the file and passes the stream to the other import method the bibteximporter overwrites this new import method and uses the logic from opendatabaseactionloaddatabase to determine the encoding of the bib file change opendatabaseaction to operate against the bibtex importer remove get set iscustomimporter was not really used just for sorting now everything is alphabetical empty entries are no longer imported thus a few test had to be changed remark the methods getextension and getdescription are not implemented by almost any importer this should be done maybe this is something for the stupro will add the changelog entry and add a few tests later change in changelogmd described any comments or can i rebase and merge i do not fully understand why the getcliid method is removed how is the importer selected from cli now also since there is a method setcliid maybe that should change name as well as it appears as getcliid is sometimes replaces with getid somehow it seems like getcliid is a better name but no strong opinions many changes are related to imports and replacing extension strings with a list of extension strings right now i think i understand why however i think that getcliid and getformatname in general should return different things well maybe i do not understand the code fully again tired but what i was worried about with getid doesnt seem to the case so to me this looks good there is a method getid previously getcliid in importformat which constructs the id based on the name of the formatter thus some of the hand coded ids in the specific importers could be removedi couldnt find the method setcliid where does it exists i saw repec new economic papers nep and then that getid used that string which caused one comment but then i saw the tests and realized that one wasnt supposed to type something like that now i also know why waiting for the last to be merged then this pr can clean up all the importer code uniformly this is unblocked now go it
1153.0,1207,1,0,0,1,0,1,1,0,0,1,1,1,0,0,1,restructure importers the aim of this pr is to reduce the overlap between the importer package and some code in gui in particular the class opendatabaseaction moreover and are fixedin detail the following things were changed the abstract importformat class is almost completely rewritten please have a look at this class almost all other changes are a direct consequence of the edits made to the importformat class the biggest change is that the import method returns a parserresult instead of a list of entries in this way metadata can also be imported and error messages are communicated more effectively instead of throwing ioexceptions moreover the import method operates on a reader instead of an input stream in order to reduce some common code in all importers add method importdatabase path file charset encoding to the importer interface which opens the file and passes the stream to the other import method the bibteximporter overwrites this new import method and uses the logic from opendatabaseactionloaddatabase to determine the encoding of the bib file change opendatabaseaction to operate against the bibtex importer remove get set iscustomimporter was not really used just for sorting now everything is alphabetical empty entries are no longer imported thus a few test had to be changed remark the methods getextension and getdescription are not implemented by almost any importer this should be done maybe this is something for the stupro will add the changelog entry and add a few tests later change in changelogmd described any comments or can i rebase and merge i do not fully understand why the getcliid method is removed how is the importer selected from cli now also since there is a method setcliid maybe that should change name as well as it appears as getcliid is sometimes replaces with getid somehow it seems like getcliid is a better name but no strong opinions many changes are related to imports and replacing extension strings with a list of extension strings right now i think i understand why however i think that getcliid and getformatname in general should return different things well maybe i do not understand the code fully again tired but what i was worried about with getid doesnt seem to the case so to me this looks good there is a method getid previously getcliid in importformat which constructs the id based on the name of the formatter thus some of the hand coded ids in the specific importers could be removedi couldnt find the method setcliid where does it exists i saw repec new economic papers nep and then that getid used that string which caused one comment but then i saw the tests and realized that one wasnt supposed to type something like that now i also know why waiting for the last to be merged then this pr can clean up all the importer code uniformly this is unblocked now go it
405.0,1215,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,improved conversion maps and conversion speed the html unicode latex conversion map source was based on regular expressions making it a jungle of backslashes now replace is used instead of replaceall so fewer backslashes and theoretically a bit fasteri also added benchmarking for the following conversions html to latex used at import cleanup and save action latex to html used for preview latex to unicode used for table rendering and i got a slight improvement although i cannot really tell why the two latter are faster now as they are based on cleaned versions one reason might be that the tests are based on latex symbols with more backslashes in them for the old casebefore benchmarkshtmltolatexconversion ▒ ops sbenchmarkslatextohtmlconversion ▒ ops sbenchmarkslatextounicodeconversion ▒ ops safter benchmarkshtmltolatexconversion ▒ ops sbenchmarkslatextohtmlconversion ▒ ops sbenchmarkslatextounicodeconversion ▒ ops shere one can see that only searching the string to be converted once is far better than running replace on all possible characters which is not surprising but require quite complicated codefinally with the simpler strings it was easier to add most all of the curly brackets required to solve with the benchmarks in place you might also try out the recommendations of and so using apaches stringutilsreplace and or dont make a pattern for every single replaceall line but try to combine them regex has a or operator and let pattern optimize the regex do use the compiled pattern and dont compile it in every call its fairly expensive at the moment there are almost only replace so very few actual regexes there are a few cases where the several characters are replaced with the same so in those cases it may be worthwhile to use an or regexstill i think the way to go here for html to latex would be to parse the string and once either html tags or html encoded characters are found those are replaced rather than blindly replacing all possible characters in that way one can probably honor more tags as well i would not prematurely optimize things which does not reduce the speed of jabref except that optimizing code is quite fun speedboat im quite sure should be fixed now what is the current state here can this be merged this should be good to go now only better compared to the earlier version although of course the correct way to convert can be argued infinitely thanks oscargus
1188.0,1217,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,added integrity checker for odd number of will sometimes help for and lgtm i think we slowly approach the point where it might make sense to extract the checkers as separate classes simonharrer what do you think hm yes would make sense tobiasdiez i would merge this in with the current structure but for the next checker we should create separate classes go ahead an merge this in
1212.0,1217,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,added integrity checker for odd number of will sometimes help for and lgtm i think we slowly approach the point where it might make sense to extract the checkers as separate classes simonharrer what do you think hm yes would make sense tobiasdiez i would merge this in with the current structure but for the next checker we should create separate classes go ahead an merge this in
1091.0,1229,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,apply and ensure correct import sort order see lgtm
1188.0,1238,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,added integrity checker to detect html encoded characters in fields based on discussions in lgtm oscargus in the url field your detection now finds html encoded characters maybe we should exclude the check for the url field oscargus same holds true for the odd number of unescaped warning which also occurs in a url field of mine
124.0,1246,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fixed this should so that it is possible to set empty strings is jstyle files as key lgtm but can you please add a test for the fix yes but not right now good point could you please add a test for it so we can merge this in smile we already closed the related issue done will merge when i see that the tests pass
1245.0,1246,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fixed this should so that it is possible to set empty strings is jstyle files as key lgtm but can you please add a test for the fix yes but not right now good point could you please add a test for it so we can merge this in smile we already closed the related issue done will merge when i see that the tests pass
1251.0,1278,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,tried to but all tests pass will merge this in if the tests all pass on the ci server change in changelogmd described
625.0,1281,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,replace bibtexentryassert by overwriting bibentryequals method as proposed in a proper bibentryequals is provided in this pr and used for the tests this as a few advantages detect differences which are not visible in the canonical string representation so far this hit empty fields and different line breaks get more meaningful test failure messages for lists instead of expected got the added entry is displayed assertassertequals just works and no custom written assertequals method has to be usedi clicked around a bit but couldnt find any unexpected side effects due to the overwritten equals method if this pr is accepted then i would inline the bibtexentryassertassertequals methods change in changelogmd described great stuff love it heart lgtm lgtm
1271.0,1282,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,authors with compound first names are parsed properly change in changelogmd described looks good lgtmplease rebase and merge thanks fixed in jabref dev snapshot master ajar
871.0,1298,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,added option to copy version information in the about dialog added option to copy version information of jabref in the about dialog as described in this will help with filing issues and bug reports as the version of jabref os and java will be copied change in changelogmd described screen shot at https cloudentcom assets a bbc b e bbf b cb b cdpng just one minor comment otherwise this looks good please rebase current coverage is merging into master will decrease coverage by powered by codecov last updated by a f https codecovio gh jabref jabref compare a da e e b c a b ca f c e a aae b c f dd a a f
1290.0,1300,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,change jabref help to online help all translations must be added again lgtm
1290.0,1301,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,change jabref help to online help change in changelogmd described closed because duplicate of
1294.0,1304,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,implemented jstyle file filter and opening in last dir filter filter for jstyle files extended browseaction to display file filterfixed npe when selecting invalid jstyle prevented style dialog from opening change in changelogmd described lgtm simonharrer would you merge this in
1295.0,1310,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,npe when sorting tabs selected tab might be null when sorting tabs the logic is really strange in general so this fixes the problem but we need to rework the actions enabling in general imho
1312.0,1318,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,update localization instructions corrected gradlew task name koppor stefan kolb please check the order of the imports hm will check my eclipse settings again gradlew eclipse should be enough we are generating the correct settings no need for manual intervention koppor fixed the import order the setting was not activated in my eclipse saving options current coverage is merging into master will not change coverage diff master diff files lines methods messages branches hits misses partials powered by codecov last updated by aa b lgtm
1347.0,1349,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,open urls does not work with query strings this should work with query strings like normal urlshowever the question is does this impact the opening of any other file path or anything we need to be careful as this is a generic open method maybe thats also the problem because it needs to handle any kind of uri siedlerchr tobiasdiez please take a look tested it works but requires for urls a to be presenta simple wwwgooglede does not work but it also does not work with explorer wwwgooglede from the start menu so i assume this is some windows behaviourit would be nice to have a cleanup for this then or maybe we should automatically do this
1294.0,1350,1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,fix npe on selecting invalid jstyle follow up from npe was raised in comparator because name was initialized with null instead of empty stringonly store preferences if style is valid oscargus the fix has the side effect that a file where the name can not be parsed correctly is displayed as empty style i attached the problematic style file which was provided in however valid still returns true as you have worked recently with the styles things do you know what is required for a jstyle koppor maybe you know thisthen we could improved the validity check campus_formatenglishtxt https githubcom jabref jabref files campus_formatenglishtxt emptyjstyle https cloudentcom assets d c a e e eb e f ffa epng i suggest merging this for the discussion on a validity checker for oostyle i will create a new issue
1353.0,1355,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,update preview panel on generate bibtexkey fix for fixed some missing unlockssome formatting change in changelogmd described current coverage is merging into master will increase coverage by powered by codecov last updated by f c atm the crossref test is failing i get a timeout otherwise this build is fine lgtmplease address my comment then this can be rebased and merged gradle test execution fails on travis code travis issued a sigkill seems to be a memory resource related problem can be merged
1351.0,1368,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,removed possibility to automatically add braces via option preferen… …ces file store the following fields with braces around capital letters please use save actions instead for adding braces automaticallyrefs
872.0,1383,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,implemented error console in javafx this is the error console in jabref being implemented in javafx the console is highly flexible in positioning and styling its components through a fxml and corresponding css stylesheetalso to show better the error console content log output exception i have allowed to resize error console windows manually error console dialog update the error console screenshot new feature copy log user can copy the log report issue user can report directly issues from console have done change in changelogmd described please also add a screenshot for these new javafx dialogs moreover it would be nice if you could address the issues i think this is already covered with this prin this case please add a changelog entry and which are all connected to the error console please adress the language key related errors the first build failed because there were still some obsolete keys tobiasdiez siedlerchr slowly slowly let the students check this pr first and wait until it is labeled with ready for review wink current coverage is diff merging into javafx will increase coverage by diff javafx diff files lines methods messages branches hits misses partials powered by codecov last update bc f c e bbc i am having trouble to hide the developer information the css file probably needs some changes i tried to set the visibilty but that didnt work out tobiasdiez do you have some tips to handle this sorry for my later answer normally you do this by using a pseudoclass inactive and change it with pseudoclassstatechanged see for example then you can style them via list cell active and list cell inactive i would however only use the pseudoclasses for real styling purposes for example list cell error shows an error icon and sets the font color to red filtering should really happen on the basis of the viewmodel to which the listview binds as you have done it right now for debugging ui issues the tool scenic view is very helpful i had some problems with running it separately and bind it to jabref however adding it to the dependencies project structure modules dependencies add and then invoke scenicviewshow scene somewhere works tobiasdiez i have created filterlist to filter messages but i have one problem to view correctly entries in listview have a look at my screenshot it only runs correctly if entries run out of the listview i have created a test button to test this behavior this test button generates entry in systemout throws exception and generates entry in the cache this will be removed latercan you help me and tell me why listview doesnt displays the entry correctly notcorrectview sorry but i dont understand where your problem is it looks like it prints the test cache message as well as the first line of the error stack trace the systemout is ignored as i would have expected since you hide low priority messages hi tobiasdiez so i will explain you what is my problem the listview shoulds show you all log entries and other entries like systemout and exception if the button development information disable if the button on click it shoulds hide all systemout and exception entries i have handle this will a filterlist but the behavior by showing of entries is not correct reproduct start error console click on test button time or more times click on development information button click on this again if you do so like i have written then you will understand my problem sorry about my bad english i hope that you understand what i mean i need you help or some tipp how i can clear this problem thx you thanks for the additional description i added a comment to errorconsoleviewmodel which should help you to solve the problem for the next time please try to add some tests first there were quite a few things which could have been wrong are the messages correctly passed to the t stream do they have the correct priority is filtering of the list working properly and finally is is just a problem with the way how messages are displayed in the list viewthe first options could have been ruled out by automatic tests it would be good if you could add corresponding tests which also require some positve refactoring like making filteredlist a public class variable and moving its initialization to the constructor there are three solution for this problem with create issue function solution using of a github api to create issue directly from jabref with log in data which user not like to do it but i think that way will be nice solution and github will get more member take a look in create issue dialog screenshot from customer it will be nice this solution with a default account but it will be not work create issue with github api solution using oauth to create issue directly from jabref without log in data but the user must give the application access in their account to use it that will be difficult for some user solution this is my actual implement solution create issue over default browser with help of saved log and exception information in clipboard take a look in create issue pop up screenshot create issue with default browser close or click on ok button the default browser will open and show create issue site with default title automatic bug report current time with this format yyyymmddhhmmss and a default issue description jabref version operating system version java version during the show of this create issue site the log and exception information will be saved in clipboard so the user can be paste it for detail information in issue description take a look in create issue in default browser with paste detail information screenshot new issue which one did you implement i really like the copied to clipboard solution its simple yet effective can you please post a new screenshot of the actual lookedit and could you please test the look on hidpi screenstoo this is the new look of error console dialog errorconsoledialog button developer information it will show you the exceptions and outputs if it is existyou can copy the log and create issue directly from errorconsole edit i have test it on display with x i think that it is all okay please fix this bug when you activate the developer information button and then click copy log the exceptions will get hidden even though the developer information toggle button is still active pressing the developer information button twice will show the exceptions again please update your screenshots please fix bug open the developer information console click show developer information toggle button to show exceptions click ok button open the developer information console developer information toggle button is now deactivated again but the list view still shows the exception and the colour of the exception is black instead of red any idea for a better icon as pointed out in there is much more information than just errors here it might even be better to skip the icon what about the information icon some suggestions i would use the console image instead of the red error symbol also move it above the list and add some description left to it in spirit we now give you an insight into the inner workings of jabrefs brain this might help to diagonize the root of problems please use the button below to inform the developers about an issue rename create issue to report issue move copy log button to the left to group it with the other buttons there rename ok to close do we really need a way to hide errors and warnings i think every log entry should be shown to the user ie no developer information button i know you spent a lot of time to implement it but i just dont see any advantages in having such a button add a small non obtrusive icon in front of every line which indicates if it is an error warning info similar to some minor remarks and a bigger one with the icons once they are fixed im fine with thisall in all i really like how the console looks now good job 👍 tobiasdiez i have merged and done feedback thanks for the update the code looks better now i have just a few more remarks then this can be merged koppor pls do the final review tobiasdiez koppor feedbacks only this teestream thing i am not sure how to fix it 😄 maybe someone else from jabref stupro can help bartsch dev maybe its a kind of architectural decision try to use streameavesdropper instead of teestream tobiasdiez is this what you meant with moving the code to the streameavesdropper yes this looks betterso now i had a look at the code if i understand it correctly then there already exist two ways of listen to logger messages guiappender listens to everything which goes through the log j api ie loggerlog and writes it to cache streameavesdropper listens to everything which goes through the system streams systemout err and writes it to some streamsand you added logmessages listens to everything and writes it some some internal listcould you refactor the code so that everything is only written ̀to the internal list of logmessages ie get rid of the cache class and the printstreams in streameavesdropper and please add code comments to the classes it was hard to understand what they actually do appendum for myself since there is essentially no code which still uses systemout errprintln i would actually try to get rid of the streameavesdropper completely only problem uncaught exceptions are not written via the log j interface but this could be solved by setting the default handler tobiasdiez i have refactored and have done feedback hope it will be merged this time 😄
1334.0,1384,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,display correct number of entries in static groups fix of nice bonus total number of entries is displayed after all entries group change in changelogmd described bug not present in lgtm
135.0,1388,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fix sorting issue the logic is fucked but this should fix the issueproblem was that when sort in original order was selected the corresponding variable newsortorder would still read the disabled sort order inside the jdialog
1381.0,1389,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,file links containing blanks are broken if non default viewer is set runtimeexec with a string splits on white spaces
1063.0,1397,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,add fields for nbibimporter and add testfile regarding medlineplain importer doesnt have all fields that the nbib format has so i added the fields to the medlineplain format and added a test testfile for the nbib formata list of the elements that should be imported now can be found here you should also record your changes in the readme lgtm for somehow the travis ci is failing because an integration test scrollingthroughentrylist fails lgtm too just some minor remarks for readability
1399.0,1401,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,export to html html code is not well formed always write the footer no matter if encoding is given or not tobiasdiez wdyt you changed the code before lgtm
1408.0,1409,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,cleanup guiglobals implements cleans up the guiglobals class and move latexfieldformatter to the bibtex package which is now independent of the gui packageas a final step i would move the class netsfjabrefimporterfileformatfieldcontentparser to the bibtex package which would make the package self contained apart from imports to the preferences and related classes and would move the whole bibtex package into logic are there objections to this i restructured variable positioning as discussed in and turn max_back_history_size line_length and indent into proper preferences jabref developers what about turning the bibtex package into a subpackage of logic or should that rather stay a top level package the more stuff is in the logic package the better ok from side this is good to go i even was able to move some more classes into the model package lgtm lgtm just some minor remarkswhat i do not understand is the purpose of the bibtex package some of the classes seem like they do not have anything to do with writing or parsing bibtex and are rather general for example the comparators maybe it would make sense to completely dissolve the bibtex package by moving the parsing logic to the import package and writing to exportin the end the bibtex format is just a special import export format tobiasdiez thanks for your remarks i will integrate them as wellas for the bibtex package its existence is a historical thing and i do not know the exact motivation behind it seems like bundle parsing and writing of pure bibtex but with the addition of new importers and exporters responsibilities shifted and mixed over time the big advantage we have now is that the package moved to logic which means that there is a guarantee that it is independent of gui code and it can be re used for new gui stuff with relative safety if we move it out of logic to importers or exporters we loose that advantage ultimately the goal should be to get the gui independent code from the import export package into logic as wellout of topic i just noticed the codecov report how the hell did code coverage increase by a wooping with this pr i didnt even write new tests this has to be an error i implemented the above comments and the pr is once again ready to go from my sideone remark col_definition_field_separator cannot go to guiglobals since this would create dependencies from logic to gui therefore i moved it into col_definition_field_separator to globals this is fair i think since the variables relates to our bibtex sytnax and field content which is independent of the guii still don t get how the coverage can have increased that much
1342.0,1429,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,show description of case converters as tooltip change in changelogmd described lgtm
1420.0,1440,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,auto downloader should respect file pattern and propose correct filename https cloudentcom assets a fa e a cfac d png lgtm lgtm
651.0,1443,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,improve parsing of author names containing braces change in changelogmd described lgtm
888.0,1453,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,refactor placement of parsing and writing logic according to the following conventions all objects which can be read from a string have public static type parse stringy input method all objects which can be written to a string have a public stringy getasstring methodshould change in changelogmd described i am still an advocate of separate read write classes which handle the serialization in both ways because using an interface with fromstring tostring methods would allow to make this more explicit in the code and ensure that these methods are not renamed by accident using separate classes for reading writing would make the classes themselfs smaller and allow a better separation of concern easier to test as one only needs to look at a single cread write class with its own test yes you are right that separate read write classes are probably even better nonetheless i find the changes made in this pr are still an improvement and im quite satisfied with the result satisfied enough to have no motivation for introducing new read write classes i changed the names thanks for the feedback
661.0,1459,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,create update checker for the enduser implements the updater regularly checks if there is a new stable version of jabref available via github api there is a dialog will popup newversion download update points directly to fosshub ignore this update will ignore this specific version on automatic version checks remind me later will inform the user on the next version check automatic or manual of this version view changelog points directly to the changelog specific to this version eg v would point to help there is another button to check for updates updatetab preferences you can see the current version when the version was last checked and a button to check it now if theres a new version available and a download button if a version was ignored and a button to unignore it you can also define how often the automatic check should occur your tests mostly cover the version class did you also test at least manually if the new version dialog shows up as expected on the start if newer version is available or not if you already pressed ignore this update i guess this is not easy to test with real data as you are already on the latest version when running this branch good work 👍i have made a few minor comments but when they are addressed its fine by my side cant this be done by a mocking the current version mocking prefs andb mocking we already did both somewhere else in the code looks good to me too just some minor remarks and a bigger one for the handling of the dev version in isnewerthanfor testing unittests are not really possible since its a gui thing and mocking is not possible for ui tests right but you can change the version information in the gradle file build it and then run it ie pretend that you have an older version or for the sake of testing you can also modify the buildinfo class to return a hard coded version i should have considered all mentioned issuessome methods cant be extracted to another class eg jabrefguicheckfornewversion to version b c then they would violate the strict separation of the logic from the gui hm i am missing a changelog hm i could swear i wrote oneshould i write it quickly and open another pr or do you push it directly onto the master i added it directly
1455.0,1460,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,npe when retrieving bibtex data from doi see lgtm
145.0,1463,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix for this after changing the preferences the maintable is using a new splitpane object to divide table and entryeditor in the course of creating the actual table existing entryeditors are closed which causes a saving of the current entryeditor height in the prefs as this is calculated based on the already new splitpane a wrong value is storedto prevent this the previous state of the divider for the splitpane is restored based on the prefs before the maintable is recreated change in changelogmd described lgtm
1450.0,1463,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix for this after changing the preferences the maintable is using a new splitpane object to divide table and entryeditor in the course of creating the actual table existing entryeditors are closed which causes a saving of the current entryeditor height in the prefs as this is calculated based on the already new splitpane a wrong value is storedto prevent this the previous state of the divider for the splitpane is restored based on the prefs before the maintable is recreated change in changelogmd described lgtm
1026.0,1471,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,preserve user comments in bib file so i am finally having my take at the current solution was surprisingly easy so far despite what i had written before it looks explicitly for our encoding prefix in the file encoding and kills lines that contain it but only lines preceding an entry it will not delete something that is inside an entry other user comments are left untouched and are _always_ written out again even if the entry is reformatteduser comments that are above meta data bibtex strings or the preamble will still be removed though changing that would require large scale changes to these items in our model since we would also need to store the parsed serialization for them which we do not do so farthis should receive significant automated but also manual testing since it modifies a quite critical part and has the potential to destroy bib files i will add a few more tests for this pr change in changelogmd described ok id like to put this up for discussionuser comments are now kept under the following circumstances above any bibentry above any bibtexstring comments at the end of the filethis is independent of whether an entry is changed reformatted but not if it is deleted if it is reformated user comment text is located exactly one blank line above the reformated entryuser comments are still not kept when above meta data comments above the preamble contains jabrefs encoding_prefix above an entry that has been deletedis this good enough it should be sufficient in most scenarios and work if someone opens his non jabref bib file with jabref if someone starts adding arbitrary text between jabrefs metadata though the latter is hard to achieve since we do not store the serialization of metadata if we want to id have to make some additions to our metadata objects i could also store the comments between meta data and add them as a bunch at the end of the file but then the relative position gets lost before i do more work id like to clarify the following points does the storage of arbitrary text above metadata really matter is it ok to delete comments if the entry below them is deleted looks good to me just had some more or less minor remarks mostly about the testing code i think we dont need support for comments between jabref metadata tobiasdiez if not mentioned otherwise i addressed your comments abovewe tend to differ when it comes to testing in general though i really prefer integration tests when doing anything with reading writing in jabref these things are inherently coupled to implement this pr write out user comments correctly i also had to do significant changes to reading so as long as no overwhelming majority of jabref developers pressures me to write unit tests i will rather write integration tests lgtm i think integration tests are more valuable so this would suffice for me great let us talk briefly about this during the next devcall and decide if we take it into or for lenhard please squash the commits via github when merging this smile
1434.0,1474,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,static groups are now longer displayed as dynamic ones reason for this bug explictegroup now derives from keywordgroup and thus was sometimes displayed as a keyword group change in changelogmd described why does it make sense that the explicit group extends the keyword group i do not see any advantages from that despite making it more complex is really a lot of code saved maybe duplicating a few lines of code in explicit and keyword group creates a simpler structure overall i think it makes sense that the explicit group derives from keyword group a keyword group allows to collect all entries which contain a given word in a specified field the explicit group does exactly the same thing except that only the groups field is of interest if you have a look at the explicitgroup class you will notice that it contains absolutely no logic about how to determine the matched entries this is completely handled by the keyword group it might even make sense to expand the class hierarchy chain and let keywordgroup derive from searchgroup since in the end it only a very specific search query is used thanks for the detailed explanation makes sense instead of relying on the class i would recommend to introduce an enum that differentiates the group types and which is returned through a method gettype which each class overwrites if necessary
1063.0,1479,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,rewrite medlineimporter with jaxb and add nbib fields regarding rewritten the medlineimporter to be more specific the importdatabase method so that it uses a jaxb parser now instead of a sax parser ive also added the nbib fields to the importer tests for the changes will be coming change in changelogmd described very good work only a few remarks from my side please do not include the generated classes try to use to generate them does that work can you please document the source of the xsd you used to create the jaxb classes thanks koppor i didnt get the plugin work but ive wrote an ant task that ive found here this works local but for some reason travis ci says that src main gen is a non existend directory matthiasgeiger i wrote the source as a comment in the xsd file s is that ok made some comments but in general lgtm lgtm so can this be merged in or are there any other remarks sorry but this does not work at all for mesteps to reproduce go to select one or more entries click on send to file xml open jabref and try to import into new database the created xml filewhat happens there are two dialogs showing nothing medline import by an error message medline import i doing sth wrong yeah youre right im getting the same problem but for some reason the files that ive tested are working im looking for the problem matthiasgeiger now it should work im not sure why but somehow the first two lines or xml parsers should do that work do not walk through xml by handplease remove this method and try the solution presented at from xmlstreamreader seems to be your friend other than my small comments looks good codewise havent tried the ui ive adressed the comments are there any other remarks lgtm so can this be merged
1482.0,1483,1,0,0,0,0,1,1,0,0,1,1,0,1,0,0,correct number of matched entries is displayed for refining subgroups the issue was that for the number of hits jabref only checked if thegroup taken separately matched the entry that is it was completelyignored that the group sits in a tree and might be set up to refine thesearch of the parent taking the example given in entriessatisfy the condition articlé original but only are also matched by articlé change in changelogmd described lgtm lgtm lgtm ok lets merge this in smile
1485.0,1486,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,export shorttitle as standard field shorttitle shorttitleincludes the obvious migration problems which i dont know if they really occur lgtm
1444.0,1487,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,implement getextension and getdescription for importers implement getextension and getdescription for importers change in changelogmd described please fix the minor things after this mark it again for ready for review and we will merge this in
1507.0,1511,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,keywords are now separated by the delimiter specified in the preferences also did some small refactorings renamings change in changelogmd described lgtm some tests are failing and it would be great if you could push your branch to the jabref repo as this facilitates testing by simply running a build from ok fixed the failing tests and the build is available under will fix the checkstyle issues after green light for merge
1396.0,1526,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,journal abbreviations dialog ported to javafx i tried to extract the logic in a test driven approach to completely separate ui and ui model and to have a high code test coverage the design of the dialog was made after the ui model was finisehd and is close to what was specified in change in changelogmd described listview https cloudentcom assets b e ff d c e cpng listvieweditname https cloudgithubusercontentcom assets e fc e ad bfeaa aab png listviewbuiltinlist https cloudgithubusercontentcom assets f a e e f c e db png looks good instead of the button would suggest simply the text addwhat is the purpose of the icon deletion if yes a kind of trash can symbol would be more suitable i updated the description and added screenshots for the latest commit is it really the best idea to add the to the end of the list of journal abbrevaitions this would mean the user always has to scroll to the bottom to add more journal abbreviations to the list in my opinion this is less ideal than having a button that is always visible and in the same place any thoughts personally i prefer inline editing for lists tables with only a handful of columns see for example the very first row could be an insert row ie it shows in italic create new abbreviation and when you click you just have an empty textfield to insert the new abbreviation other from that i really like how the dialog looks maybe change the close remove icon btw what is the purpose of this jabref lists button at the bottom tobiasdiez so when clicking on the edit icon on the right the column should be editablethe jabref lists button shows the jabref built in journal abbreviations which are not modifyable in the swing version there is a view button to show these abbreviations in a separate window boceckts yes exactly clicking edit and i would also support double clicking makes the row editable mhh on second thought one might not even need the edit button but show it directly in the cell upon mouse hover and a single click then makes the cell editable decide based on what is easier to implement for the jabref list button you also have a jabref built in list in the drop down what is the difference here tobiasdiez the built in lists in the drop down will only appear when the toggle button is activated is there a need to hide it from the drop down list if not then i would just remove the toggle button tobiasdiez i just thought its nice to give the user the option to only display their custom lists boceckts please remove jabref lists button sunflower current coverage is diff merging into javafx will increase coverage by diff javafx diff files lines methods messages branches hits misses partials powered by codecov last update bc f c ca i just made some final remarks after these are fixed this pr can be merged in my opinion koppor pls do the final review & merge thanks boceckts and the all others who worked on this pr good job i really like your code especially that you wrote tests to implement the logic one can see that you learned a lot in the last few weeks i think i now addressed all of your comments ill merge this now since it looks good to me and all the javafx code will be finally reviewed anyway does not work in javafx boceckts can you please check exception in thread javafx application thread javalangillegalstateexception cannot load netsfjabrefguijournalsmanagejournalabbreviations at comairhacksafterburnerviewsfxmlviewloadsynchronously fxmlviewjava at comairhacksafterburnerviewsfxmlviewinitializefxmlloader fxmlviewjava at comairhacksafterburnerviewsfxmlviewgetview fxmlviewjava at netsfjabrefguijournalsmanagejournalabbreviationsviewshowandwait managejournalabbreviationsviewjava at netsfjabrefguijournalsmanagejournalsactionlambda$actionperformed$ managejournalsactionjava at comsunjavafxapplicationplatformimpllambda$null$ platformimpljava at javasecurityaccesscontrollerdoprivileged native method at comsunjavafxapplicationplatformimpllambda$runlater$ platformimpljava at comsunglassuiinvokelaterdispatcher$futurerun invokelaterdispatcherjava at comsunglassuiwinwinapplication_runloop native method at comsunglassuiwinwinapplicationlambda$null$ winapplicationjava at javalangthreadrun threadjava caused by javafxfxmlloadexception no resources specified c git repositories jabref jabref build resources main net sf jabref gui journals managejournalabbreviationsfxml at javafxfxmlfxmlloaderconstructloadexception fxmlloaderjava koppor i will look into it did this happen after the javafx branch has been updated koppor ok so i tracked the issue and came to the conclusion that the this pr causes the exception as described in the prs description tobiasdiez had to out comment the line bundle localizationgetmessages since otherwise the localization tests would fail after adding it back it works for me again boceckts do the localization tests also work after readding the bundle line no but it gives me the same errors when the line is out commented im not sure if this statement is causing the failing tests yes this happens with the current javafx branch merge of master i did not check the state before the merge my gut feeling is that the merge broke it but im not surei is not about failing tests it is about that options manage journal abbreviations is a noop yes its about opening the dialog but still re adding the line as described by me two comments ago fixes the issue for me reenabled in
825.0,1549,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,searchbar across all bib files instead each having its own implemented the searchbar is now in the top toolbar instead of each tab having its own always at the right on tab change the tab gets updatedthe autocomplete is bound to the current tab maybe extend this one in another pr the old global search opening all findings in a new window is gone do we really need it jabref_globalsearch change in changelogmd described good work 👍 i am really happy that you are working on this is it correct that the global search window will be abandoned i have no idea whether it is causing any conflict with the current implementation of the search mechanism but i am one of those who is using it rather extensively there are two scenarios where a global search is useful often i create a separate bib file for a project eg a journal article where i put all related papers some of them are of interest just for this project and are not supposed to be part of my database core eg newspaper articles hence i often use search queries that include results of the core and project related file i have a bib file for papers which i use in a certain context but that havent been read thoroughly yet some of them will eventually be moved to the core database also in this case i use a global search to find results within both bib filesboth scenarios could be managed by creating groups and if global search gets abandoned i will certainly do however i like the tab based style of several bib files very much because i dont have the feeling that my project related articles get lost in my huge database with thousands of entries for keeping the global search window please readd it bartsch dev there are many jabref users having more than bib files they do not want to click through all files for each search another aspect what happens if the horiztonal space is not enough to display all icons and the search bar will the searchbar be displayed beneath the icon bar based on another issue the minimum width of the window is already around pixels depending on look an feel os etc so it is crucial that it will foldbut it indeed looks promising if the window is too small for the toolbar it will now wrap between the normal buttons and the searchbarthe search result dialog will now remember its location the global search has a shortcut ctrl shift f enter in the result dialog will select the entry in the basepanel the reuslt window is cloasable with ctrl w if fdocused and the result dialog wont stay at top anymore if the mainframe is focused and they are on top of each other please resolve conflicts enter in the result dialog will select the entry in the basepanel i have two databases open and search for a keyword i open the global search and it finds my result entries from both databases i press enter on an entry and it focuses the correct tab but it always selects the first entry in this tab edit it does focus the correct entry if i am already in the right tab but if it has to focus a different tab it always selects the first entrydid i missunderstand the sentence or is this a bug should be fixed now is it possible to work on the global search in this pr too the shortcut ctrl shift f should focus the search field if it is empty instead of doing a globally searching the empty string esc in the global search should focus the search field currently the focus just stays where it was the global search popup should show the bib file name implemented all things what happens if the window is too small will the search bar be moved to the new line a lot of people use jabref only with x resolution yes if the width is too small the entire searchbar will move into a new line what ive done so far searchbar instead of each bib database having its own the searchbar is now in the toolbar if the window width is too small the whole searchbar will move into a new line added shortcut global search ctrl shift f if the search field is empty it focus the searchbar fixed when searching the first match will be selected if the current selection is no match searchresultwindow the window will now remember its location each entry now shows which bib file it belongs to when the user closes the window without selecting an entry the searchbar is focused when the user double clicks on an entry it will correctly be selected in the bib file enter will select the entry in the bib file added shortcut closing the window ctrl w the result window wont stay on top anymore the main frame is focusedwhat do you think sounds good wink ill test it later and give you some feedback good job almost all your described functionality is working fine the exception is fixed when searching the first match will be selected if the current selection is no match this still is not working for me in filter modesome ideas for further improvments the database column in the result window should be longer the current width is determined by the word database and only the first characters of the filename is shown in windows re accessing the result window after switching the focus to another application is hard as it is not added to the windows task bar was no issue before as it was modal above the jabref main window im not sure whether it might be helpful to use a titled border to group the search related textfields buttons and labels see or maybe align the search stuff on the right side the exception is fixed when searching the first match will be selected if the current selection is no match this still is not working for me in filter modewhen no entry was selected at all the search wouldnt select a match it now does did you mean that the database column in the result window should be longer the current width is determined by the word database and only the first characters of the filename is shownthe database column is now as wide as the author column in windows re accessing the result window after switching the focus to another application is hard as it is not added to the windows task bar was no issue before as it was modal above the jabref main window the searchresultframe will now show in the taskbar you can focus it with the global search shortkey too or maybe align the search stuff on the right side i wanted to do that too but if i do that the toolbar is not wrapable anymore the exception is fixed when searching the first match will be selected if the current selection is no match this still is not working for me in filter mode when no entry was selected at all the search wouldnt select a match it now does did you mean thatas far as i understand you description of the fix always the first matching entry should be selected if the search if the currently selected entry is not a match of the search rightthis is working fine if the float mode is active but does not work in the filter mode the preview or entry editor is still showing the entry selected before performing the search which is not visible in the list of matches at all unbe nt your pr is currently broken exception in thread awt eventqueue javalangarrayindexoutofboundsexception at netsfjabrefguisearchsearchresultframesetwidths searchresultframejava at netsfjabrefguisearchsearchresultframeinit searchresultframejava at netsfjabrefguisearchsearchresultframe searchresultframejava at netsfjabrefguisearchglobalsearchworker globalsearchworkerjava at netsfjabrefguisearchglobalsearchbarperformglobalsearch globalsearchbarjava at netsfjabrefguisearchglobalsearchbarlambda$new$ globalsearchbarjava at javaxswingabstractbuttonfireactionperformed abstractbuttonjava sadly i cannot reproduce your problem i will be gone the next weeks i will be continuing working then what needs to be done for this pr to be closed please fix my minor comments matthiasgeiger any additional comments otherwise i would merge this in after double check changelogmd and headers could you please make search globally make a toggle button and change the functionally of the button before to behave acoordinglyif the search globally is on the global search is active otherwise the search string is local for each database you can also use the icon earth codepoint f e and earth off f e for this as i was just writing something similar as matthiasgeiger here are the images for reference earth added a global mode to the search if the global mode is off each tab has its own searchterm the search result dialog only shows local findings if the global mode is on in each tab the searchterm is the same taking the one when it was activated the search result dialog shows findings in all bib files does the help file need an update the global search needs to be added to the help filethe show results in window functionality needs to be described too what is the current status on this is there anything bartsch dev should do here
1338.0,1563,1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,added button to crossref entry editor field to select parent entry based on the idea in a button is added in the crossref entry editor field to select the parent entry in the main table it is not exactly the same thing as suggested in though change in changelogmd described well now it is more like the actual feature request the reverse linking is not obvious how to implement graphically and relates to as well i kept the button name and didnt understand the lambda thing other than that the comments are honored oscargus forget about the lambda thing i oversaw that it contains more than one method confused
1530.0,1567,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fix integrity checker should ignore unescaped hashes in url field addresses change in changelogmd described lgtm lgtm rebase and merge
1356.0,1572,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,implement implements and provides a formatter that converts html to unicode converting characters and eliminating tags change in changelogmd described lgtm lgtm i have only a few small remarks for merge in general
126.0,1581,1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,fixed i finally got around to understand the reasons for and parts of it turned out that commands starting with c was handled in a special way and that {\v{s}} was for unknown reasons used as line tabulation setas a result not only does jabref now render \v{s} and \chi correctly it also renders combining accents see screen shot img width altcapture src change in changelogmd described oscargus do the tests from pass in your branch stefan kolb as it was only \chi that was failing i would expect that yes the other two did already work right oscargus it was only the \chi yes because \c is handled as special character if my test from the pr pass we can merge my test pr into your branch and then merge your fix smile in general i would like tests for this pr my pr includes tests for the bug stefan kolb there is a \chi first at the second row of the screen shot turned out all commands starting with c didnt work as c was hardcoded into globals as an accent so \chi was interpreted similar to if it had said {\c{h}}i and since \c{h} wasnt listed it was simply removed now \c{h} works as well giving ḩ tobiasdiez i was considering that however the main feature is adding support for accented unicode characters and they are a hassle to type properly nor will they make much sense except lots of comments for example spot the difference between ä and ä oscargus can you just cherry pick my commit from the pr and you have your first test smile and then just close my pr afterwards i added some tests now stefan kolb im afraid that is a bit out of my comfort knowledge zone my solution would be to almost simultaneously merge both prs oscargus then just copy my tests and close the pr smile stefan kolb that should be within grasp lgtm thanks for the quick solution lgtm lgtm just some minor remarks about naming variables and tests
1264.0,1581,1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,fixed i finally got around to understand the reasons for and parts of it turned out that commands starting with c was handled in a special way and that {\v{s}} was for unknown reasons used as line tabulation setas a result not only does jabref now render \v{s} and \chi correctly it also renders combining accents see screen shot img width altcapture src change in changelogmd described oscargus do the tests from pass in your branch stefan kolb as it was only \chi that was failing i would expect that yes the other two did already work right oscargus it was only the \chi yes because \c is handled as special character if my test from the pr pass we can merge my test pr into your branch and then merge your fix smile in general i would like tests for this pr my pr includes tests for the bug stefan kolb there is a \chi first at the second row of the screen shot turned out all commands starting with c didnt work as c was hardcoded into globals as an accent so \chi was interpreted similar to if it had said {\c{h}}i and since \c{h} wasnt listed it was simply removed now \c{h} works as well giving ḩ tobiasdiez i was considering that however the main feature is adding support for accented unicode characters and they are a hassle to type properly nor will they make much sense except lots of comments for example spot the difference between ä and ä oscargus can you just cherry pick my commit from the pr and you have your first test smile and then just close my pr afterwards i added some tests now stefan kolb im afraid that is a bit out of my comfort knowledge zone my solution would be to almost simultaneously merge both prs oscargus then just copy my tests and close the pr smile stefan kolb that should be within grasp lgtm thanks for the quick solution lgtm lgtm just some minor remarks about naming variables and tests
1527.0,1583,1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,fixed and some refactoring cleanups fixed and did some refactoring and cleanups change in changelogmd described changes lgtm however the usage of magic numbers for the diff modes should be avoided but this can also be solved in another pr wink just a minor comment otherwise looks goodhave a thought on my suggestion and decide if you want to implement it afterwards rebase and merge matthiasgeiger i agree however i do not really get how to map a jcombobox and an enum new jcombobox enumtypevalues should work
124.0,1584,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,added layout dateformatter see added a configurable layout formatter for dates change in changelogmd described lgtm just merge after you removed the generated comment
1249.0,1584,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,added layout dateformatter see added a configurable layout formatter for dates change in changelogmd described lgtm just merge after you removed the generated comment
1345.0,1590,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,implemented cleanup issn implemented cleanup that adds a missing dash in the issn field if it looks like an issn checksum is not controlled but eight digits where the last may be an x change in changelogmd described the whole purpose of this pr was indeed to add the missing dash if it otherwise looks like an issn yes that works at the momentwould we actually need a clean up action then if properly used the issn class would provide automatic clean up right which is useful but may be annoyingbtw i doubt using the different parts explicitly is very useful though but if there is a valid use case where the string is not enough so sure should the parts then be string or int x is and only appears in the checksum it really looks like over engineering to me i must say though extracted an issn class for checking validity and cleaning up i am missing tests for the issn class otherwise lgtm
159.0,1599,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,fixed this should change in changelogmd described lgtm
1592.0,1599,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,fixed this should change in changelogmd described lgtm
1579.0,1601,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,move event moves the event package into model as discussed in no need for changelog since this has no externally visible effect commits will be squashed on merge lgtm
1579.0,1604,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,move preferences moves preferences related classes into a new top level package as outlined in this is a pure refactoring no functional changes it doesnt fix the dependencies on preferences but separates them from the remaining classes in the root packageadditionally the class jabrefpreferencesfilterdialog is moved into the gui package where it belongs this also allows to rename the class and reduce its visibilitycommits can be squashed on merge lgtm
1613.0,1616,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,use jabref default icon for uninstaller for now using standard icon for now should be replaced by specific uninstaller icon after redesign lgtm can you add a changelog please then just merge it
482.0,1616,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,use jabref default icon for uninstaller for now using standard icon for now should be replaced by specific uninstaller icon after redesign lgtm can you add a changelog please then just merge it
1321.0,1622,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,improved latex to unicode html formatters to output more sensible val… see main thing is that \latex{} outputs latex same for all unknown commands also behaves a bit better for some other situations with unknown commands and there are now tests for it to make sure that it happens change in changelogmd described
1632.0,1638,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,keep comment text in a bib file implements user comments marked by comment are now kept in the bib file regardless of whether they use brackets or not change in changelogmd described manually tested changed features in running jabref looks goodis it possible to comment multiple entries comment{ article{} book{}} guess it is greatand just to be sure i added another unit test for a comment that contains multiple entries
1665.0,1666,1,0,0,1,0,1,1,1,0,1,0,1,0,0,0,rewrite bibtexml importer with jaxb parser regarding ive rewritten the bibtexml importer it was written with a sax parser and ive used a jaxb parser i will be addings some more tests for the changes ive madenote exporting in bibtexml format and then trying to import in bibtexml format is not working because of manually tested changed features in running jabref are there any other remarks travis is failing because of ui tests please not that the ui tests but ignored please read the travis output and check for red lines checkstyle failed your ide settings seem to be non formant please double check error home travis build jabref jabref src main java net sf jabref logic importer fileformat bibtexmlimporterjava netsfjabrefimporterfileformatbibtexmlentry should be separated from previous imports importorder failedfailure build failed with an exception what went wrong execution failed for task checkstylemain checkstyle rule violations were found see the report at file home travis build jabref jabref build reports checkstyle mainhtml try run with stacktrace option to get the stack trace run with info or debug option to get more log outputbuild failedtotal time mins secs
898.0,1666,1,0,0,1,0,1,1,1,0,1,0,1,0,0,0,rewrite bibtexml importer with jaxb parser regarding ive rewritten the bibtexml importer it was written with a sax parser and ive used a jaxb parser i will be addings some more tests for the changes ive madenote exporting in bibtexml format and then trying to import in bibtexml format is not working because of manually tested changed features in running jabref are there any other remarks travis is failing because of ui tests please not that the ui tests but ignored please read the travis output and check for red lines checkstyle failed your ide settings seem to be non formant please double check error home travis build jabref jabref src main java net sf jabref logic importer fileformat bibtexmlimporterjava netsfjabrefimporterfileformatbibtexmlentry should be separated from previous imports importorder failedfailure build failed with an exception what went wrong execution failed for task checkstylemain checkstyle rule violations were found see the report at file home travis build jabref jabref build reports checkstyle mainhtml try run with stacktrace option to get the stack trace run with info or debug option to get more log outputbuild failedtotal time mins secs
1288.0,1671,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,newly opened bib file is not focused open a new file and it is correctly focused afterwards open a file that was already opened before is correctly focused afterwards open a file two times and it is only opened once matthiasgeiger should work now smile lgtm apart from the minor comments via skype wink
1669.0,1678,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,fixed oo lo manual connection dialog on linux doesnt fix the whole issue but at least the bug in the ui code so that the manual connection dialog can be drawn on linux
1682.0,1683,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,do not cite entries without a key in openoffice libreoffice check that all entries to be cited have non empty keys show a popup if there are empty keys and generate keys if instructed to do soreferences change in changelogmd described manually tested changed features in running jabref img width altcapture src please do not use implemented as title one cannot follow the link to the root issue smile a small description makes it much easier otherwise please rebase and merge
1716.0,1717,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fixes broken serialization of bibentries containing an change in changelogmd described ~~ ~~ manually tested changed features in running jabref ~~ helpjabreforg this is rather crucial it would be great if someone else checks what i have done to explain get the text before the entry string prolog parsedserializationsubstring parsedserializationlastindexof did not work properly if an is used within an entryhowever determining from the complete parsed serialization where the entry begins and what are comments before the entry is not so trivial thus i added another attribute in the bibentry commentsbeforeentry in which the serialized form of the comments stored in front of the entry is directly saved during parsing the entry lgtm just some minor remarks lgtm we are discussing the failing unstable gui tests at just my two cents regarding this pr by looking at the code should be fine i was thinking about implementing something similar separate comment field in bibentry before but had avoided it so far there are a lot of tests regarding parsing so i am confident that we should not meet unexpected nullpointerexceptions and the likegood to see that we have a new person who is responsible for implementing the parsing logic forget it this parsing stuff is still some black magic for me refs
1726.0,1732,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,changed possibly giant undo redo texts in status field now it only says undo or redo although the much more detailed information can be obtained from the tooltipnothing in changelog since this is an inter version issue
1724.0,1733,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,fixed concurrentmodificationexception when removing a field in the so… really simple it turned outno changelog since im not sure if it was in manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1519.0,1734,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,removed seiten from pagetotal and fixed a totally unrelated npe fixed and an unrelated npe due to bad documentation it says that it can be null but it couldnt and there is a use case where it now is null added tests for the fixed npe change in changelogmd described tests added manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgtm
1499.0,1755,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,fixed name column rendering and fixed and better to format the author names before converting latex to unicode bah img width altcapture src change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues good work simple change for fixing two issues at the same time lgtm lgtm please slightly rewrite the tests and then you can merge it
153.0,1755,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,fixed name column rendering and fixed and better to format the author names before converting latex to unicode bah img width altcapture src change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues good work simple change for fixing two issues at the same time lgtm lgtm please slightly rewrite the tests and then you can merge it
1531.0,1755,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,fixed name column rendering and fixed and better to format the author names before converting latex to unicode bah img width altcapture src change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues good work simple change for fixing two issues at the same time lgtm lgtm please slightly rewrite the tests and then you can merge it
1750.0,1765,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,export to office first fix for i will continue reworking some other fields too and will add some more tests change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i would like to merge this in for no localization changes after i rebase looks good just some minor comments i will fix it this afternoon evening regarding the language mapping there is not yet a simple solution as we would have to integrate the whole table of lcid address comments as far as possible
1767.0,1770,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,implements add help button to access new help page refs manually tested changed features in running jabref
1776.0,1780,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,fix arxiv fetcher not working correctly remove cookie handler implementationour urldownload works without or own cookiehandler cookies tooedit worked partly for me with arxividall unit test and manual tests work againi think the problem was that due to the inheritance our cookie handler was called in every connection no idea why it failed with arxiv only stefan kolb i wanted to remove this cookie handler anyway not sure what it did before if everything works without it it would be great yes everything works fine without it i checked some urldownloads eg lookup fulltex and some other manual fetching things i really have no idea why it was added before maybe because as a workaround for some things in the past please remove the empty lines other than that im happy with removing the cookie impl
1795.0,1797,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,improved main table rendering when using eg title author earlier on a name formatter was used if any of the fields in a column contained person names now it is determined by the used field marginally related to or at least one step towards a solution figuring out which field actually was used before img width altcapture src width altcapture src can be seen the author editor column is still rendered as it should change in changelogmd described manually tested changed features in running jabref
1803.0,1812,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,working directory is set to full path including filename lgtm
1804.0,1823,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fixed url field is not removed by integrity check better to disable the check than remove the field from the entry change in changelogmd described one may think of adding a test that no fields are removed from the entry in the integrity check but i havent done that here ideally the entry should have every possible field included manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgtm
1687.0,1837,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,month field ascending descending sorting swapped when sorting according to month ascending descending are switched change in changelogmd described manually tested changed features in running jabref lgtm great with the comparator test
184.0,1848,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,allow setting the etal string empty implements earlier it was not allowed to set the etal string in the authors layout formatter to be empty however as clear from there is at least one use case for it and it is not obvious why it wasnt allowed earliera side note it is still not allowed to set sep and lastsep empty maybe there are good reasons for that change in changelogmd described helpjabreforg https githubcom jabref helpjabreforg issues
1841.0,1848,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,allow setting the etal string empty implements earlier it was not allowed to set the etal string in the authors layout formatter to be empty however as clear from there is at least one use case for it and it is not obvious why it wasnt allowed earliera side note it is still not allowed to set sep and lastsep empty maybe there are good reasons for that change in changelogmd described helpjabreforg https githubcom jabref helpjabreforg issues
1841.0,1857,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fixed npe when loading a style file that has no default style found when trying although non related change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues maybe we could get that into too yes i think it would make sense be safe a better solution is discussed in
1663.0,1865,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fixed better multi monitor support location of windows is keep also for multi monitor setups location of window is only reverted when it is not displaybale no multi monitor anymore wrong preferences removed duplicate maximized state logic dialogs are centered as overlay over the main window not always on the main screen jabref developers please try on your multi monitor setup work and or a home the location of the windows should stay the same or should be adapted to a visible alternate location also the maximized state should be remembered correctly on all monitors do you see any dialogs that are not correctly centered in multi monitor scenario jabref on nd screen dialog on main screen i run a single x screen two monitor setup and i cannot tell the difference compared to before if any dialog cover both monitors it is moved and resized to stay inside one of the monitors is it really inside the boundaries of the screen rectangle only then it can work sometimes the resolutions are different between monitors see screenshot when closing the merge entries window screenshot opening it screenshot may be that the size is kept better now that i didnt think of same with the main window which is adapted to the left monitor on both images with that said im sure that this pr solves some problems and im not sure that the behaviour i report really is a problem as such no your example should work for me and my horizontal horizontal setup it works it looks like for your horizontal vertical it does not we have to test more settings to smooth this functionality oscargus i tried your use case on a similar setup on windows and it worked maybe a linux problem image could indeed be especially with the option to have more than one x screen which i dont but some people do are you interested in any numbers from my setup obtained from the code sure maybe you can also take a look i simplified the code very much so it should be easy to debug if java the os supports our case or if we cannot do anything about the problemits basically just javaif isdisplayable storedposition checking for the current location inside a virtual rectangle of all available screens union lgtm stefan kolb i will try to see why things go wrong on my office setup soon
1496.0,1869,1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,download many files in one go implements and also allows selecting multiple documents to find full text documents for i think that it doesnt always show a dialog for every failed files when having multiple ongoing downloadsplease try it out at change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues if it does what you promise i love you heart_eyes laughing will try this tomorrow think that it doesnt always show a dialog for every failed files when having multiple ongoing downloadsnot sure if i understand you correctly so i download eg files and fails is then the dialog failed dl displayed timesor after all downloads are finished it shows a dialog with eg files downloaded succesfully works technically fine but i have some remarks as its currently not effective usable i ran it over quality look up fulltextwhen the process is finished it shows the file save download failed dialog for every entry which i previously selectedso if i have entries select after the process it opens dialogs even for canceling i would have to click times of canceland there is apparently no option to cancel the lookup processi would suggest having just a final download result dialog or directly a process window perhaps sth like this from down them all dta well what you select is what you get i agree that your approach would be even better but that is out of the scope for me at the moment one could still reenable one selected entry at a time with the added benefit of being able to start more than one but i do not really know if that is a better way to do it maybe it is better to pop up a dialog asking if the user is sure they want to try to find full text documents as this can be quite a hassle agree with you add this dialog warning for more than x entries for the rest we should create a new issue enhancement mabye the other devs have some other regarding the blocking does not block the ui atm i updated and set it to not sure how much one should actually write in the dialog code lgtm just move that magic number to a constant yeah was thinking about the constant thing as well will fix it i guess it is a good idea to merge now so people have time to find possible issues improved the file name generation as well if the formatter does return an empty string the bibtex key is used if no bibtex key default is used
1881.0,1888,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,do not mark a new database as changed i missed an if statement when inverting an if else in ~~ change in changelogmd described~~ introduced in development version only fortunately manually tested changed features in running jabref
1882.0,1893,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,fix invalid bibtexkey freeze reference change in changelogmd described manually tested changed features in running jabref please add label ready for review thanks lgtm i tested your changes and they are working good workplease resolve the merge conflicts and then we can merge it itto resolve the merge conflicts i recommend installing and setting up a merge tool for way merge eg meld or kdiff or your favorite tool then you do git checkout mastergit fetch upstreamgit merge upstream mastergit push git merge upstream open git gui to see and resolve merge conflicts be careful with the changelog well done merged
1506.0,1894,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,implemented title and camel key modifiers implemented change in changelogmd described helpjabreforg https githubcom jabref helpjabreforg issues lgtm just some misisng space in the changelog added lower_case upper_case sentence_case capitalize and title_case modifiers the two first are just additional names unmodifiable return from titlegetwords but the function of the modifier rely heavily on mutable word oscargus could you follow up so that we can merge koppor oscargus pls also move metadatasetbibtexkeypattern bibtexkeypattern to the setup method tobiasdiez sorry for overlooking your second move comment i also created formattersgetformatterformodifier hope this is good to go nowthe tests are locally ok the failing test is unrelated to the update yes looks good now thanks koppor for finishing this pr 😄
1092.0,1899,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,move files to subfolders in file directory implementation for already implemented copy and move methods from change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues jabreffiledirpattern https cloudentcom assets ad b dc e e f fe d c ebpng todo pass global as paramtodo check relative path jabref developers i need some help with the gui i desperately tried to add the new field below the other but i cant get it work no matter what i tried rage the original layout code is this formlayout layout new formlayout dlu dlu left pref dlu fill dlu in new field is there but kinda hidden no idea how to change it back settingsimportpanel yeah finally the layout works sunglasses thanks for the work im really missing this feature in jabref however the current behavior is a little unexpected first the file seems to be moved relative to its current directory for example directory pattern \entrytype moves the file with every execution of cleanup to a new subdirectory for me expected behavior would be that the new path is relative to the directory of the bib file or some otherwise specified root directory second the file field in the bib entry seems to be adjusted only if the option use the bib file location as primary file directory is set otherwise the file is moved but the file path is not adjusted dierkes thanks for your feedback i would have asked you to test it otherwise too the moving files is a bit complicated as it has to be kept backwards compatiblethe file directory is the first found directory a global file dire from setting b bib file relative c bib specific setting atm not sure about the order b and c regarding the file field i will check it regarding the new file directory thats not the behavior i observedmy test case was original file phdthesis xyz_ pdf all paths relative to the bib file file name pattern \bibtexkeyfile dir pattern \entrytypecleanup phdthesis phdthesis xyz_ pdfcleanup phdthesis phdthesis phdthesis xyz_ pdfcleanup phdthesis phdthesis phdthesis phdthesis xyz_ pdfit didnt matter if use the bib file location as primary file directory was set or if the default directory for files was set i tried with setting it to the directory of the bib file i didnt try to set the default file directory for the specific bib file however can do that later from my perspective a backward compatible solution could be if the file dir pattern is not set rename the file in its current location if it is set move the file to the directory specified by file dir pattern relative to bib file directory if its a relative path and rename it there however an empty file name pattern could mean a rename the file in place or b move file to bib file directory so an additional option is probably necessary that specifies whether moving files is active or notinterpreting the file dir pattern as a path relative to the current directory of the file doesnt make sense to me since executing cleanup would always change the file path which is probably the opposite effect one expects from a cleanup ah i see you are rightwill look around gmt dierkes notifications githubcom regarding the new file directory thats not the behavior i observed my test case was original file phdthesis xyz_ pdf all paths relative to the bib file file name pattern \bibtexkey file dir pattern \entrytype cleanup phdthesis phdthesis xyz_ pdf cleanup phdthesis phdthesis phdthesis xyz_ pdf cleanup phdthesis phdthesis phdthesis phdthesis xyz_ pdf it didnt matter if use the bib file location as primary file directory was set or if the default directory for files was set i tried with setting it to the directory of the bib file i didnt try to set the default file directory for the specific bib file however can do that later from my perspective a backward compatible solution could be if the file dir pattern is not set rename the file in its current location if it is set move the file to the directory specified by file dir pattern relative to bib file directory if its a relative path and rename it there however an empty file name pattern could mean a rename the file in place or b move file to bib file directory so an additional option is probably necessary that specifies whether moving files is active or not interpreting the file dir pattern as a path relative to the current directory of the file doesnt make sense to me since executing cleanup would always change the file path which is probably the opposite effect one expects from a cleanup — you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread dierkes i fixed it when all tests are green you could try it out now it works mostly as expected for meof course as described above with the current state its not possible to rename a file only if its current location doesnt match the file dir pattern so we might need the option to activate deactivate moving the filesand a very strange thing i noticed if filedir pattern is empty and main file directory is empty and use the bib file location as primary file directory is not set then the file is not moved and a directory relative to the jabref directory or maybe to the current working directory is created with the name of the desired file path staying in the example from above instead of renaming the file to literature phdthesis xyz_ pdfa directory named jabref phdthesis xyz_ pdf is created thanks for the feedback i will check itnormally renaming file only should work if filedirpattern is empty in thesettingsam nachm schrieb dierkes notifications githubcom now it works mostly as expected for me of course as described above with the current state its not possible to rename a file only if its current location doesnt match the file dir pattern so we might need the option to activate deactivate moving the files and a very strange thing i noticed if filedir pattern is empty and main file directory is empty and use the bib file location as primary file directory is not set then the file is not moved and a directory relative to the jabref directory or maybe to the current working directory is created with the name of the desired file path staying in the example from above instead of renaming the file to literature phdthesis xyz_ pdf a directory named jabref phdthesis xyz_ pdf is created — you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread dierkes i fixed the strange behaviour there was some directory path which was just and not null so it was resolved to the current dir of the jar now it only renames the fileand the old behaviour now works too when filedirpattern is empty the file is moved to the file directory the file directories are checked in this order the settings are prioritized in the following order and the first defined setting is used metadata user specific directory metadata general directory preferences directory bib file directory this works almost i encountered a similar problem when dragging a file and dropping it to an entry when i select to move the file again instead of a file a directory is created same path as the file should have and another issue if multiple files are linked to an entry the first file is renamed and the other file links get lost in jabref the first file is renamed and the other files are moved to the same directory thanks for your intenstive testingthe issue with the drag and drop is now fixed there was a problem with the layout which would have been default to bibtexkey if the pattern param is emptyi am aware of the thing with the multi files as far as i discovered the first successful rename move exits the function will try to find out why not sure if i find time for it next weekaddtionally i will create some automatic tests too if it works finally i think i fixed the issue with the multiple files see the behavior now as far as i understand it is the function will try to move rename all attached files if a file with the new file path already exist that happens if two attached files have the same file extension it doesnt move rename the file and keeps the old file path in the bib entryfor example lets consider we have three attached files olddir oldname pdfolddir oldname pdfolddir oldname txtthe new file paths will be newdir newnamepdfolddir oldname pdfnewdir newnametxti think there is some room for improvement for example to keep oldname but move the file to newdir if possible however before doing this i think its necessary to define the desired behavior in detail thanks for your work just one thing it would be nice if you could check that locally toothere is a junit test i set to ignore due to the bug which should now work too just remove the ignore tagand execute it either directly or run gradlew check cleanuprenamepdfrenameswithmultiplefiles in src test java net sf jabref logic cleanup cleanupworkertestjava i removed the tagwhen i run gradlew check the test cleanuprenamepdfrenamesrelativefile in cleanupworkertestjava fails however i think the problem lies within the design of the test the expected path of the file is toottmp but the actual path is misc toottmp i guess there is some default value set for filedirpattern hm i think the value has to be set to an empty string in the test becauseotherwise it will take the value of the settingsam vorm schrieb dierkes notifications githubcom i removed the tag when i run gradlew check the test cleanuprenamepdfrenamesrelativefile in cleanupworkertestjava fails however i think the problem lies within the design of the test the expected path of the file is toottmp but the actual path is misc toottmp i guess there is some default value set for filedirpattern — you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread dierkes i just fixed the failing test as i expected it it was due to the setting which got read great is there a chance to integrate this branch into the next release technically this branch is based on the current master but not includedwith the release which will be probably released todayso if you stick for the moment to the dev version of this branch you haveall stuff from release plus this featureof course it will be in the next release then there are only some testswhich now have to be added to make it ready for a merge documentation could you please add an issue at helpjabreforg or even create an initial page with skeleton true in the headeryou can link for a description of the formatters which can be used i fixed the things from the review included feedbacjk one or two of my comments are still open when i look at the github ui above actually im only interested why you initialized the array with a length of im fine with the rest as thes are only cosmetic changes fixed the rest and the one test which koppor commented out in c d e af d b a d c b c works fine on travis now again jabref developers we can merge right stefan kolb siedlerchr yes we can that is once the merge conflict in the italian localization gets fixed jabref developers all conflicts fixed hi on my system two tests are failing cleanuprenamepdfrenameswithmultiplefiles and cleanuprenamepdfrenamefiledirectorypatternsubdirectory however the problem seems to be that these and other tests do not remove the temporary files properly after execution the behavior of the cleanup function itself is as expected but since a file with the target path exists already left from another test the attached file is not renamed and the assertion fails im running the tests on fedora
1897.0,1906,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,check integrity year check added added last four nonpunctuation characters should be numerals in check integrity year change in changelogmd described manually tested changed features in running jabref thanks the tests fails because of missing translation stringsif you run the logic i localizationconsistencytestjava you will get a list of strings which are not in the translation files add those to the english one and run the script that the output tells you to then all languages are updated and the test should pass you may have to refresh the files in your ide in case it fails again also see you can add a test to integritychecktest or whatever it is called that really tests for this new feature it would be great i hope it is correct now please set label ready for review thanks thanks for your work lgtm if you reword the changelog we can merge it in a probably stupid question why not just check that the year field consists exactly of digits tobiasdiez because the offical bibtex spec says so see the issue for details got minor comments and then we can merge thanks smile lgtm lgtm too
1912.0,1914,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,check integrity edition check implemented implemented a check for the field edition the check differentiates between bibtex and biblatex mode of the database change in changelogmd described manually tested changed features in running jabref please set label ready for review thank you lgtm just let someone other look at it tooanother thing i just got in mind is that the whole checker code could be refactored to use lamdbas because we have a nice functional interface will create a new issue for discussing that lgtm too just change the order in the if statement as siedlerchr suggest and then this could be merged and please extract the checker to its own file lgtm from my side now grimes please rebase this on master and we will merge it in thanks for your contribution
1922.0,1926,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,extract all integrity checker classes to its own file issue change in changelogmd described manually tested changed features in running jabref you have still some checkstyle erorr with your imports if you run eclipse and have the jabref profile inlcuded then you can just do strg shift o for oganizing imports and your checkstyle error will go away ps you should also run gradlew check before a commit to see if all is right ahh laughing thanks please set label ready for review looks fine code wise solid work can be merged in my point of view yes lgtm too
119.0,1928,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,support citationstyles implements the user can choose multiple citationstyles which he can cycle threw in the preview panel forward with f backwards shift f both are in the context menu and the menu bar as discussed i removed the nd preview preview before preview_before preview after preview_after preferences before preferences_before preferences after preferences_after didnt include the localization other the english on purpose because they create unnecessary conflicts when rebasing quite often i push them when everything else is fine the help page has to be updated too i do that as soon as this pr is merged change in changelogmd described manually tested changed features in running jabref helpjabreforg currently i read the available citationstyles at runtime i had problems reading them from the gradle dependency thus currently they are only found when jabref is started from the jar the text of the preferences tab is not completely visible either reword or adjust the width of the side panel when pressing the up or down button the selected entry becomes deselected and i have to select it again this can be quite frustrating if i want to move a citation style to the top can you please change it so the selected entry stays selected the preview panel is not being updated after changing the citation style but rather displays always the first selected entrysteps to reproduce go to preferences and add a citation style in the main table select an entry and open the preview panel press f to see the newly added citation style select a different entry and the preview panel will not update but use the information of the first selected entry edit it will update the citation style though the preview panel is not being updated after changing the citation style when working with multiple databasessteps to reproduce go to preferences and add a citation style open at least two databases with at least one entry in the main table select an entry and open the preview panel select the second database and an entry press f to change to the newly added citation style the preview panel will not update at all but the status says the citation style has changedwhen switching to the first database the preview panel has updated and responds to citation style changes i think it would be great to also add the selected citation styles to the export to clipboard dialog when the bugs are fixed and the other minor comments have been addressed then its fine by me fixed the bug both were caused by the same thing is the export to clipboard important you can already copy the current preview via context menu on the preview panel the context menu exports text only is it possible to export the html when pasting into microsoft word everything is formatted correctlythe export to clipboard is not important if some interested user requests it work on it can be done is the use of citation styles only for the preview pane i have downloaded the latest developer version and connected to a libreoffice document to see if i could use the csl styles to format my bibliography but when i open the select style window only the jstyle format seems to be supported i think this would be the next logical step to use citation styles in libre office please open a new issue to offer tracking the status maybe oscargus has some time to work on that if i use biblatex style biblio entries then i have fields like journaltitle location and date instead of journal address and year these are not picked up by the new preview citation styles further as reported by boceckts above one cant get the citation style displayed so as to edit itthe whole new preview citation feature is wonderfully helpful i use it a lot thank you
1851.0,1931,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,export number field as number if not patent or issue in office xml add export key field not to be confused with bibtexkey field add test for custom entry type and key field refs documentation has to be updated change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues added mapping between note field and comments fieldnow all official fields should be mapped i will update help accordingly
1920.0,1942,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,mods importer regarding adds an importer for the mods xml format the importer is written with a jaxb parserdetails on the format and the newest xml schema can be found here used the newest schema version change in changelogmd described manually tested changed features in running jabref i just merged my xmlunit changes n i think it can useful for you too allows checking validating xml against a schema too i think your code looks good but generally i would like to see more comments and try using more lambdas i dont really get why travis is failing the problem seems to with the integration tests not related to your changes hm im also wondering why codecov is not running the tests the test coverage should be much higher i dunno about codeco from my point of view its good boceckts please have a final look okay i merge it in now as all things are resolved regarding the failing tests we should investigate that in a new issue
1943.0,1944,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,try around with xmlunit see for details change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues please fix the two comments and then directly merge it
1877.0,1950,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,towards hierarchical keywords this pr is the first step towards supporting hierarchical keywords refactor the keyword related code to use new classes keywordlist and keyword unified keyword delimiter to be a single character and in this way fixed the issues mentioned in and move keyword delimiter from preferences to metadata database properties new pr add hierarchical delimiter and change parsing logic in keywordlist accordingly new pr change ui to support hierarchical keywords new prnote i also moved the stringutil class to model in some sense it is jabrefs own string class and removed entryutil only had methods related to strings stringutil or keywords keywordlist change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
628.0,1950,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,towards hierarchical keywords this pr is the first step towards supporting hierarchical keywords refactor the keyword related code to use new classes keywordlist and keyword unified keyword delimiter to be a single character and in this way fixed the issues mentioned in and move keyword delimiter from preferences to metadata database properties new pr add hierarchical delimiter and change parsing logic in keywordlist accordingly new pr change ui to support hierarchical keywords new prnote i also moved the stringutil class to model in some sense it is jabrefs own string class and removed entryutil only had methods related to strings stringutil or keywords keywordlist change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
705.0,1950,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,towards hierarchical keywords this pr is the first step towards supporting hierarchical keywords refactor the keyword related code to use new classes keywordlist and keyword unified keyword delimiter to be a single character and in this way fixed the issues mentioned in and move keyword delimiter from preferences to metadata database properties new pr add hierarchical delimiter and change parsing logic in keywordlist accordingly new pr change ui to support hierarchical keywords new prnote i also moved the stringutil class to model in some sense it is jabrefs own string class and removed entryutil only had methods related to strings stringutil or keywords keywordlist change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1949.0,1952,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,fix wrong path in error message an error message directs to the wrong preference tab change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues please resolve conflicts then its ready to go conflicts resolved lgtm ill merge it in
1959.0,1962,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,minor improvements to the javafx about dialog follow up of bartsch dev had a great idea to use his version class to get the changelog url since it already provides a method for it i only adjusted it slightly so dev versions will be redirected to links will also stay gighlighted after they have been visited normal version snapshot versions a new label will be added for the complete version string snapshot change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i think the license prefix is not really necessary mit license is already self explanatory koppor do you really want thisalso remove the snapshot part in the title eg dev tobiasdiez i get the version string from globalsbuild_infogetversion do you only want to remove snapshot in the about dialog or in general for example copy version also calls the same method like the idea with the versioinfo solution is commit included snapshot is part of the builds delivered by buildsjabreforgfor example jabref dev snapshot javafx bd dbe windows amd java _ the complete version string should be shown somewhere in the about dialog does the text wrap work also for this long string without whitespace grimes yes it will automatically be broken down to fit multiple lines longversion ok leave it like that with snapshot it is only for the dev version so no reason to be pixel perfect thats fine the normal versions jabref or jabref dev will anyway fit in one line and for the authors all informations are now delivered thank you i still have the opinion that license should be removed but apart from that 👍 for merge koppor your call after talking to koppor i changed minor things and how the snapshot versions will be displayed i updated the screenshots in the description of this pr accordingly the about dialog is not centered on the jabref window see attached screenshotjabref dev snapshot javafx a e awindows amd java _ grabbed_ hmm i just tried it with the jar available at and it worked perfectly for me thinking aboutdialogcenter dev snapshot javafx windows amd java _ works on a single screen have to connect to an external screen and check again i have the feeling that javafx does not work well with two screens having a different magnification this was actually tested on a second screen thats why there are no icons your build is also a newer one maybe this is the reasonon oct at oliver kopp notifications githubcom wrote works on a single screen have to connect to an external screen and check again i have the feeling that javafx does not work well with two screens having a different magnification you are receiving this because you authored the thread reply to this email directly or view it on github https githubcom jabref jabref pull issuecomment
1958.0,1970,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,verbatim url field is no longer checked for html encoded chars change in changelogmd described manually tested changed features in running jabref please adjust the javadoc comment and then its good to merge
1979.0,1981,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,icon does not change when toggling global search issue
1937.0,2005,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,check avaiable help lanugages when opening specific help page if help lang not avaiable use englishfix for change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
2012.0,2015,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,implemented integrity monthchecker monthchecker added change in changelogmd described manually tested changed features in running jabref pattern thing fixed thanks for your contribution looks good now i will merge it in now
463.0,2027,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,disable context menu action on selection of multiple entries if multiple entries are selected some context menu toolbar and menu actions are now disableddisabled actions print entry preview attach file edit entry open folder enable only if file exist open file enable only if file exist open url or doi enable only if url or doi exist merge entries enable only on select of two entries these actions make no sense to be used when there are multiple entries selectedfor further information have a look at context menu before change _ h _ menu after change _ h _ menu before change _ h _ menu after change _ h _ menu before change _ h _ menu after change _ h _ menu before change _ h _ menu after change _ h _ menu before change _ h _ menu after change _ h _ button edit entry before change _ h _ button edit entry after change _ h _ button merge entries before change _ h _ button merge entries after change _ h _ take a look for merge thx 😄 change in changelogmd described manually tested changed features in running jabref internal qs complete to disable menu item toolbar button and context menu on multiple select of entries merge entries needs to be enabled only if exactly two entries are selected also disable the following if multiple entries are selected tools open filetools open url or doi all things are complete 😄 please resolve conflicts all things 👍 if all thing is okay then it will be nice to take a look to mergea big thx 😄 besides minor comments lgtm the send as email action internally works with multiple entries but outlook cannot receive that long string as text thus it is ok for me to exclude this action all things are done 🎅 okay looks good now merge it in
1074.0,2028,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,fix ris import regarding doi import should now work with the do field also ive added some fields that are available in the ris specification ive also done some code cleanups should be also fixed now ive added the scopus file as test file manually tested changed features in running jabref travis fails because the architecture tests say that the stringutil class should be kept as small as possible speak with lenhard if its okay to increase it and how to fix the test i tried to contact lenhard but didnt get an answer so for the moment i think it is the best to remove the method from the stringutil class so that this pr dont have to wait to long in addition it would only be classes who would use this methodtravis is still failing because of a doi test yes it is the proper way for the moment we can think later on for moving iti would merge it in then tschechlovdev you contacted me how this mention of myself is the first sign i see but maybe i overlooked something lenhard the question was about the failing travis test regarding the stringutil methodthe ideas was to add a method for replacing unicode dashes string entries linesasstringreplace \u replace \u replace \u which is also used in medline plain i know im late to the party but one question is this unicode dash needed for the page numbers because then there is a cleanup formatter which does the job page number normalizer or some permutation of these words the reason for moving more functionality to stringutil in model was if i recall it correctly that the group fixes needed these methods if the dash replacement functionality is not needed by model classes why should it go into that package if you need that in multiple importer classes why not introduce a util class for the importer package
1647.0,2028,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,fix ris import regarding doi import should now work with the do field also ive added some fields that are available in the ris specification ive also done some code cleanups should be also fixed now ive added the scopus file as test file manually tested changed features in running jabref travis fails because the architecture tests say that the stringutil class should be kept as small as possible speak with lenhard if its okay to increase it and how to fix the test i tried to contact lenhard but didnt get an answer so for the moment i think it is the best to remove the method from the stringutil class so that this pr dont have to wait to long in addition it would only be classes who would use this methodtravis is still failing because of a doi test yes it is the proper way for the moment we can think later on for moving iti would merge it in then tschechlovdev you contacted me how this mention of myself is the first sign i see but maybe i overlooked something lenhard the question was about the failing travis test regarding the stringutil methodthe ideas was to add a method for replacing unicode dashes string entries linesasstringreplace \u replace \u replace \u which is also used in medline plain i know im late to the party but one question is this unicode dash needed for the page numbers because then there is a cleanup formatter which does the job page number normalizer or some permutation of these words the reason for moving more functionality to stringutil in model was if i recall it correctly that the group fixes needed these methods if the dash replacement functionality is not needed by model classes why should it go into that package if you need that in multiple importer classes why not introduce a util class for the importer package
2029.0,2031,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,fix localization task hints fixes replaces hints to the old gradle localization task names with the new ones
1542.0,2034,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,fix bad web search error messages i rewrote the error messages when the fetchers fail or added them zellerdev currently rewrites the medline fetcher probably the strange error message automatically disappears when the medline fetcher is ported to the new interfacethus i think it is ok to merge this pr and double check before merging uhm the change in generalfetcherjava causes a quite weird exception exception in thread jabref cachedthreadpool javalangindexoutofboundsexception index size at javautilarraylistrangecheck arraylistjava at javautilarraylistget arraylistjava at javaawtcontainercreatehierarchyevents containerjava at javaawtcontainercreatehierarchyevents containerjava at javaawtcontainercreatehierarchyevents containerjava at javaawtcontainercreatehierarchyevents containerjava at javaawtcontainercreatehierarchyevents containerjava at javaawtdialogconditionalshow dialogjava at javaawtdialogshow dialogjava at javaawtcomponentshow componentjava at javaawtcomponentsetvisible componentjava at javaawtwindowsetvisible windowjava at javaawtdialogsetvisible dialogjava at netsfjabrefguiimporterfetchergeneralfetcherlambda$actionperformed$ generalfetcherjava at javautilconcurrentthreadpoolexecutorrunworker threadpoolexecutorjava at javautilconcurrentthreadpoolexecutor$workerrun threadpoolexecutorjava at javalangthreadrun threadjava occurs on successful searches with an internet connection in my branch for has anyone else this problem and there is another problem caused by the same change the whole ui freezes after some consecutive searches eg using the ieee fetcher bartsch dev can you investigate this issues ill look into it tomorrow evening to get the fetchers back working i just reverted your change in generalfetcherjava see daa b why have you changed it in your pr to not show the fetcher dialog if the fetching was not successfulnow fetcher dialog opens the error message is on top of that and closes when the error message gets closed
549.0,2037,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,added new menu and action to copy bibtex key as url added a new sub menu item to the menu and the right click menu to quickly copy the bibtex key as a hyperlink to the entries url as described in in case of an empty url the bibtex key will be copied by its own rightclickmenuentry bibtex keys as hyperlink with their url source screen shot at bibtex keys as hyperlink with their url markdown formated screen shot at change in changelogmd described manually tested changed features in running jabref bartsch dev i think you recently reworked the localization script so maybe you can help me here when i add a new translation string to en property file is there anything else to do than to execute gradlew update because this gives me a syntax error in the python script traceback most recent call last file users tobias git jabref scripts synclangpy line in update extendedlen sysargv and sysargv extended file users tobias git jabref scripts synclangpy line in update update_properties main_property_fileget_main_menu_properties other_property_filesget_other_menu_properties file users tobias git jabref scripts synclangpy line in update_properties keys not_fixed fixed fix_duplicates lineslines file users tobias git jabref scripts synclangpy line in fix_duplicates fixedappend {key}{value}format keykey valuevalue unicodeencodeerror ascii codec cant encode characters in position ordinal not in range the linked pr fixes that i forgot to mark some strings as unicode strings i extracted the method to a new action class thanks 👍 can be merged from my point of view
490.0,2040,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,right click menus should allow copying doi url right clicking on the doi field in the main table or the entry editor shows a sub menu where the user can copy the url of the doi to the clipboard refs right click menu when doi field isnt present rightclick click menu in entry editor when doi field is not empty entryrightclick click menu in entry editor when doi field is empty emptydoi add the menu to the entry editor change in changelogmd described manually tested changed features in running jabref thanks tobiasdiez a bit too fast at least the equals thing should be fixed siedlerchr can i still push to this branch or should i create a new branch pull request hm not sure better create a new one based on master and then fix the things and we merge it in i fixed it in tobiasdiez thank you
1993.0,2043,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,use parallel stream while searching with this the search should be much faster on platforms where multiple cores are available could you please create one benchmark which uses the normal stream and one for the parallel one please also post the benchmark results so that we can see the improvement the differences between parallel and normal stream will be only visible inlarge database there the parallel stream is more advanced because the jvmoptimizes it stream benchmark mode cnt score error unitsbenchmarkshtmltolatexconversion thrpt ± ops sbenchmarksinferbibdatabasemode thrpt ± ops sbenchmarkskeywordgroupcontains thrpt ± ops sbenchmarkskeywordgroupcontainsword thrpt ± ops sbenchmarkslatextohtmlconversion thrpt ± ops sbenchmarkslatextounicodeconversion thrpt ± ops sbenchmarksparse thrpt ± ops sbenchmarkssearch thrpt ± ops sbenchmarkswrite thrpt ± ops s parallel stream benchmark mode cnt score error unitsbenchmarkshtmltolatexconversion thrpt ± ops sbenchmarksinferbibdatabasemode thrpt ± ops sbenchmarkskeywordgroupcontains thrpt ± ops sbenchmarkskeywordgroupcontainsword thrpt ± ops sbenchmarkslatextohtmlconversion thrpt ± ops sbenchmarkslatextounicodeconversion thrpt ± ops sbenchmarksparse thrpt ± ops sbenchmarkssearch thrpt ± ops sbenchmarkswrite ok that are good numbers perfect could you please keep the original benchmark with normal stream and add a new one for the parallel stream just copy the method then this can be merged created a separate benchmark thanks
2054.0,2055,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,fix ignore version made a rookie mistake and ignored the already ignored version againreworked the preferences to the new design the only test that failed is the getbydoi test from the springer servicenot surprising since the springer service is currently down for mainte ce okay i merged it in
2012.0,2066,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,medline fetcher using new infrastructure rewrite the medline fetcherrefs manually tested changed features in running jabref please make sure that creating the bibentry is done in utf encoding please also make sure that the strange error message reported in does not appear anymore thanks i couldnt reproduce the issue in my case i had one single error message containing all messages i changed the exception message eutilsncbinlmnihgov to a more understandable one ci fails due to mainte ce on ebookde so a few isbnfetcher tests fail 👍 good job can be merged from my point of view other than the minor comments lgtm please ping me as soon as you have fixed the minor comments now i use the counter to inform the user if more entries then the fetched ones are available i completely removed retmax and retstart and use the default values i also updated the comments koppor i preferred the version where entries were returned 😄 tobiasdiez didnt want to change the semantics with my comments i just read the code should zellerdev revert this part of his changes for me both is fine as long as the fetcher works 😇 i always thought the limit of was some server side thing i think the part witch changed the number of fetched entries from to can be reverted but removing the local variables was indeed a good observation i think even the count variable is not necessary and maybe can be replaced by list of fetched bib entriessize can you please have a look whether is fixed with this pr tschechlovdev is preparing a fix he wrote the medlineimporter in the first place tests fail but i could fix them locally to get the fix into the master branch e e d fba a and e db da please consider rewriting the fetcher using xsd
2064.0,2067,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,undo undo see
1808.0,2069,1,0,0,1,0,1,1,0,0,1,1,1,1,0,0,fix changing the font size not working when importing preferences i initialized the fontselectordialog with the variable that keeps changes made in the dialog instead of the current globals this seems to fix both issues named here change in changelogmd described manually tested changed features in running jabref i made the preferencedialog store the settings when preferences are exported so that the exported preferences are the same as the ones shown in the dialog i thought about doing the same when the show preferences button is pressed but i am not convinced that the user would expect that the changes made in the dialog are stored when he wants to show them maybe he just wants to compare stuff and then accidentally changes the settings the preference dialog now gets disposed when preferences has been imported this prevents that the user overrides the imported preferences can this be merged
2021.0,2070,1,0,0,1,1,1,1,0,0,1,0,1,1,0,0,fix execution of preference migrations follow up of to fix the key pattern part of preference migrations are executed too late after other operations already worked on the prefs node execute them directly in the main class
2064.0,2075,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,other fields fix and changes these are the claimed improvements removed optional fields from other fields bibtex removed deprecated fields from other fields biblatex see change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues im sorry but i am not sure if i get understand your changes because what does otherfields refer toi have the following tabs in bibtex required optional general abstract review source and in biblatex required optional optional deprecated general abstract review source deprecated fields exist for bibtex compatibility when you import an entry you often get in bibtex so these fields are somehow still required tab other fields shows the remaining fields otherfields i think i found the bug in it was not a regression a new entry editor was not instantiated on changing an entry of the same type so some other fields were not displayed please set label ready for review thanks the idea was originally to have a better performance so the entry editor is retained for the same type this is not a good idea the entry editor needs to be build completetely new in all cases because the new entry can have some additional layout changing other fields so the whole entryeditors list can be deleted right because its sole purpose was to cache the entry editor for each type moreover there is a similar code in the showentry method which differentiates between cached vs not yet cached to indicate which entry is currently shownprivate final map entryeditors new hashmap i think entryeditors stores all the old entry editors and the new entry editor so im not sure that the sole purpose is to store an entry editor of each type the similar code in showentry should also be adjusted but there is currently no bug report for it ive checked the code tobiasdiez you are right the whole entry editor caching for each type can be removed i have no performance issues with my databases i noticed a very small latency if you quickly switch from editing one entry to another for example with the arrow keys but as i dont think this is a big deal ill merge this pr now yes fast scrolling of the entries causes a small latency and moderate cpu usage but i think this is no problem i have an idea for caching the entry editor entry editor a b a a can be cached but this takes real effect only on heavy usage of the database or cache based on the properties of the entry one could generate aunique id for each entry property property entry type other fields future hadpdfattached braunch the problem is generating the textfields so especially in biblatex mode there are around fields which are generated every time i would not cache the whole editor but just generate the textboxes when the tab is focused the other field tab is optional no field no tab i would prefer to create the other fields tab always no field empty tab the advantage is that every entry editor has always the same layout of the tabs this preserves the active other fields tab on changing the entry
1886.0,2082,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,quick fix google scholar entry fetching google scholar fetching was broken again see with this fix at least getting the first search hits is possible again configuration is no longer possible in the current form and google generally limits the responses per page to hits however even using this will cause a captcha challenge for jabref as only hits are allowed a rewrite to the new fetcherinfrastructure should now be possible thus omitting the step approach change in changelogmd described manually tested changed features in running jabref helpjabreforg update of might be useful to indicate that only hits are currently shown
2078.0,2088,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,rewrite mods exporter and add test follow up of and regarding rewrites the mods exporter with a jaxb parser in comparison to the last pr i do not longer rely on the namespaceprefixmapper i added an annotation in the package infojava which also does the namespace prefix mapping only problem is that this annotation cannot be automatically generated by a gradle or ant script thats why added the package infojava to src main java net mods manually tested changed features in running jabref okay now all seems to be executed fine on travis and codecov is increased yeah codecov was increased but the class modsexportformattestfiles was still not run so this issue still remains codecov itself does not run any tests it relies on the results from travis its a travis configuration thing no idea it would be nice if you could search for information about that yeah i will try to find a solution for this
1993.0,2091,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,speed up search refers to at the request of koppor i speed up the search by using a second map of fields inside bibentry which stores the field latex freei also internalize these fields and set the necessary jvm arguments in install j i hope those are right todo identifiy all the uses of the latextounicodeformatter and replace it this pr breaks our architecture do we need a more sophisticated solution netsfjabrefarchitecturetests fistpackageisindependentofsecondpackage is netsfjabrefmodel independent of netsfjabreflogic failed javalangassertionerror expected but was koppor could have told you so the architecture issue was pretty obvious here let us talk this through before implementing a quick shot i have a number of solutions on my mind to this architecture stuff as well as for the restlet us also keep in mind that the vm args might not be quite be as portable or effective for non oracle jvms just use latextounicode instead of latextounicodeconverter indeed at the devcall we decided to implement basically everything ie cached latex free fields in bibentry string internalization additional command line args and some pre compilation of regular expressionill hijack this pr and create a new one shortly albeit not today i have moved over the ideas here into and build some more on top hence ill close this pr
2021.0,2094,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,make all files selectable in file chooser dialogs make all files selectable in filechooser fixed change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate does this make the __ file filter the default file filter selected no the default one is still the specific one eg xml great thanks christoph
1993.0,2102,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,store latex free fields in bibentry based on the discussion in and the work of bartsch dev in this pr aims to improve the speed of search by storing latex free versions of field values in a cache it aims at a balance between better performance and an acceptable memory footprint basically all ideas from are implemented a cached store of latex free fields which is computed on demand string internalization and regex performance improvements in latextounicode here are measurements with the new branch benchmark mode cnt score error unitbenchmarkslatextounicodeconversion thrpt ops sbenchmarksparallelsearch thrpt ops sbenchmarkssearch thrpt ops s the memory footprint of a database with entries is ~ mb on my machineand on current master benchmark mode cnt score error unitbenchmarkslatextounicodeconversion thrpt ops sbenchmarksparallelsearch thrpt ops sbenchmarkssearch thrpt ops s the memory footprint of the same entry database is ~ mball in all this looks like a hefty performance improvement at little memory cost change in changelogmd described manually tested changed features in running jabref lgtm although the converter is probably not perfect and we might run into new problems caused by that fact the functionality in the converter has not changed it is just a rewording of stringreplace calls into regular expressions that are compiled once instead of every time thus there should be no new problems that werent broken before anyway you can never be sure thoughi still think the converter should be written from scratch but that should really be a separate pr regarding grammarbasedsearchrule i am not sure but it looks like it on the one hand builds upon containbasedsearchrule but it also has some self searching code which i modified to use the latex free version this was probably a bug implementation alternatives for the latex to unicode conversions are discussed at as a few people have looked at the code and only criticized minor aspects which i fixed ill merge this now the codacy build seems to be broken somehow but then it is also not that critical
2104.0,2106,1,0,0,1,0,1,1,0,0,1,1,1,1,0,0,crash after saving bibtex source with parsing error change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate i just tested your pr following the instructions stated in jabref does not crash anymore however no error message appears and the additional faulty comma is just not stored silently when i look into the error console i see the errorimho this is not quite the behavior we want it is fine to avoid storing the broken bibtex but there should be an error message that does not crash jabref otherwise a user might expect that the save worked and would be surprised to see that it did not this is critical since all changes made to the entry are lost not just the comma therefore we need the error message so that the user has a change to fix the mistakes i get an error message parsingerror dont know why it does not work for you edit keeps the bibtex source with parsing error and gives the opportunity to correct the error revert to original source does not store the changes you are correct my bad i was hitting ctrl s and not pressing the button in the toolbar your pr can be merged and apologies for not getting itdidnt we use to have a keyboard shortcut for saving ohh is this another bug ctrl s should also trigger the error message grimes for me it did not can you please double check if you can reproduce it would you be willing to submit a second pull requestthis could be a keybinding issue though not directly related to the saving logic file save database worksctrl s failsstrangeill open a new pr thanks a lot
2109.0,2114,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,ctrl s parsing error message ctrl s doesnt trigger parsing error messageproblem conflict of local shortcut of the entry editor with the global shortcutsolution local shortcut removed the action assigned to local and global shortcut is essentially the same save database change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate i have tested it and can confirm that it works removing the local shortcut is fine this was certainly the relic of some migration since it is not too much in size there is no need for a second review and ill merge right away grimes good job as always
2050.0,2121,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,fix codecov issue fix for ive added a gradle task that copys the resource to where they should be tobiasdiez one for you to approve so the problem is that the test resources are not copied on build and thus the tests dont found the test files the gradle job does work code coverage if i understand the solution correctly then a normal build in intellij or eclipse still dont copy the resource files and thus locally the importer tests are still not performed is this right i have no idea about our build script but is there no other way to always copy the resources the language files are automatically copied right tobiasdiez if you run the test locally in eclipse it executed all parameterized tests however only when executed via intellij or gradle it did not locate the correct directory thus no tests files were foundsee here for details okay i would say i merge it in
2142.0,2129,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,dont change the selected entry after search if you edit an entry fixes when the search is active and you edit an entry until the entry doesnt match the search an longer the first match would be selectednow if you edit an entry the selected entry wont change i tested this locally and lgtm will also fix this potentially also fixes i think
1670.0,2145,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,change download url to downloadsjabreforg we want to get back control of the download site we offer thus we created with a redirection to fosshubrefs pro more convenience for the userscon we have to update the deep links for each release the users wont see the welcome page of fosshub any more this is different to sourceforge there a deep link leads to a landing page too we have to implement an operating system detection
2098.0,2161,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,fix group drag and drop this and ~~ change in changelogmd described~~ introduced in dev builds ~~ ~~ ~~ ~~ manually tested changed features in running jabref helpjabreforg ~~ if you changed the localization did you run gradle ate ~~
2119.0,2161,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,fix group drag and drop this and ~~ change in changelogmd described~~ introduced in dev builds ~~ ~~ ~~ ~~ manually tested changed features in running jabref helpjabreforg ~~ if you changed the localization did you run gradle ate ~~
2133.0,2163,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,fix highlighting issues earlier highlighting was done manually by adding tags to matches in the html text being sent to the pane instead i have opted to make use of the highlighting features of the jeditorpane class this gives the additional benefit that the highlight colour is changed automatically based on the system theme changes created jeditorpanewithhighlighting class removed matchhighlighter class and its tests removed highlighting related tests from layoutentrytest change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate checkstylemain ant checkstyle error home travis build jabref jabref src main java net sf jabref gui worker citationstyleworkerjava javaxswingjeditorpane should be separated from previous imports importorder thanks for your contributionwhat stefan kolb is telling you that the tests are currently failing as you do not respect the order of the import we defined in your changed classesplease check and or run gradlew eclipse to adjust the settings of intellij eclipse to order the imports correctly thanks stefan kolb and matthiasgeiger i forgot to run the checks before submitting no worries shitikanth 😄 these check style things are a little bit nitpicky 😉
2168.0,2169,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,fix failing ads test added missing fields are really strange field values but this is a discussion for a post cleanup for now this hotfix is good
2166.0,2175,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix memory leak in entry editor this is to list of changes updated microba to latest version unregister entryeditor as a listener to entry implement searchqueryhighlightobservable using entrybus make entryeditor unregister all fields that are listening on the global search bar lgtm
2177.0,2179,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,clear bibtexkey exception nullpointerexception caused by clearing bibtexkey field in entry editor change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate the version does not have exactly the same bug but the old code was also buggy because in a short test i run in severe freezes ive removed changelog entry
2184.0,2196,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,fix for add space after separator seems to be as simple as thatchange has been introduced as the delimitor is no longer saved as a string but as a character which chops away the space after the comma ~~ change in changelogmd described~~ introduced in dev builds ~~ ~~ manually tested changed features in running jabref ~~ helpjabreforg ~~ if you changed the localization did you run gradle ate ~~ that looks simple indeed since we cannot let you get away with a one liner please add a test that detects the bug you fixed so that the build would break if this happens again yes this fix works im unsure if we should use the keywordlist class here since in the end we assume that the field is a list of words and we are adding a new keyword tobiasdiez sorry i dont get it ive put it in the keywordgroup class as the add list entriestoadd method is not overriden in the subclass explicitgroup apart from that if talking only about keywords without the group context the keywordseparator is there followed by a too sorry im currently on my way home and have just closed intellij so i cannot provide a pointer for now matthiasgeiger sorry for being cryptic what i meant was that the class keywordlist probably should be used to modify the field instead of being text based the code then looks similar to string oldcontent keywordlist wordlist new keywordlist oldcontent wordlistadd searchexpression string newcontent wordlistgetasstring seperator ahhh i see and this is exactly the position where the addition is made for keywordswill check whether using this is actually possible without sideeffects done will merge after travis is green edit harvard astrophysics database is curently down
1908.0,2198,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,integrity hotkey the check integrity action seems to be in need of a hotkey see i used ctrl f for this action because f is currently used to cleanup entries these functions seem to be related so it would make sense to group them change in changelogmd described manually tested changed features in running jabref if you changed the localization did you run gradle ate internal qs thanx so please no copynpaste solutions here and useage of menutitle i changed it to menutitle and removed the unused keys
2208.0,2211,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,prevent the search to get focus when deleting pasting an entry fixes when you delete an entry the focus will no longer jump to the searchbar instead it will select the next entry also counts for pasting now it works for cutting entries tooi removed the code duplicate although im not sure about the the pattern not able to use runcommand actionsdelete to me code looks good
2210.0,2212,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,improvements to the javafx error console the log messages in the list view of the error console can now be selected and copied the error message will also automatically scroll to the newest log message refs ok rebase and merge
2210.0,2213,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fix strange styling behaviour of the error console this should fix the wrong styling behaviour of the different log messages when scrolling it seems like the styling error came because we never resetted the style classes of the cells when adding new onesi also created a generic listfactory class similar to so this issue wont occur in the future refs
2222.0,2223,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,urldownload now resolves redirects by default could you please also add a test for the arxiv entry which failed to download before the fix a test for the entry would be no different it must be done for the urldownloader but im not entirely sure how right now
2220.0,2225,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix editor freeze possibly fixes mainly i removed swingutilitiesinvokelater i also added some lines to remove the event listener from the old entry editors for grimes this fixed the issue my issue is also fixed
2218.0,2226,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fix for reenable ads fetcher see fetcher is now working again ~~ change in changelogmd described~~ affected search based fetcher still unreleased tests ~~created for changes~~ pass again ~~ ~~ manually tested changed features in running jabref ~~ helpjabreforg ~~ if you changed the localization did you run gradle ate ~~
2228.0,2229,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,fix medline fetcher by using https fix for change in changelogmd described helpjabreforg write blog post regarding november ncbi servers will redirect or reject all requests
2233.0,2236,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,biblatex mode add month and year field to deprecated tab issue in biblatex the date field is recommended for backward compatibility the bibtex fields month and year are also accepted ive added both fields to the deprecated fields tab although the year field is present in the required fields tab too change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate koppor has an opinion here in my experience in a typical setting one does not know the correct date but only the year together with an experienced librarian georgd i maintain a high quality example bib file at there we use year and urldate but never date i currently dont see where the month file is currently shownso i would vote for keeping as is and not merge the problem is that an existing month field is not shown at all the month field should be shown in deprecated or in other fields tab i prefer the deprecated tab because the month field is mentioned in the biblatex manual i think it is better to remove the year field from deprecated fields because it is present in required field the year is imho not in the depricated fields is it could you provide a screenshotwe can add the month to the deprecated fields the biblatex manual states biblatex will also consider the fields year and month for backwards compatibility with traditional bibtex but this is not encouraged as explicit year and month are not parsed for date meta information markers or times and are used as iswhich is a polite way to say they are deprecated thus i support grimes here and think these two fields should be added to the deprecated tab koppor you can also put only the year in the date field if you dont know the month day of publication typically bibtex things from the web have year and not date this imhowont change in the future im also in favour for putting journal in therequired fields and not other fields reason main bib file biblatex butpaper bib file in bibtex no converter for biblatex to bibtex and notforcing everyone to use biblatex jabref
2249.0,2262,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,change log level to debug fixes a side aspects mentioned in currently a search will throw errors if one types author as the search term is still incomplete those exceptions should not be visible to the normal user
684.0,2266,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,when an isbn is not available on ebookde the error message is more clear when fetching a valid isbn from ebookde but the site has no data of the isbn the error message just showed filenotfoundexception this pr fixes thatthe issue itself is a kind of regression as it has been fixed for verison see change in changelogmd described n a manually tested changed features in running jabref helpjabreforg n a if you changed the localization did you run gradle ate lgtm failing test seems to be the astrophysics fetcher the test failed because of the changed implementation i adapted the test accordingly in cdf mathscinet timeouts which seems to be unrelated to the improvement above
1359.0,2283,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,implement collect telemetry in this pr microsoft azure application insights is used to record the following information about how jabref is used number of users and sessions dialogs opened so far only the about dialog is tracked as proof of concept new database is opened along with how many entries it contains all exceptions are automatically recorded a few user information country os screen size jabref version java version if you give your ok i will continue and implement the following track all dialogs add opt out preferencein we decided to use google analytics for this but as microsoft already provided a nice interface for java i went for this route change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate well since it was decided in the devcall to implement this it is ok for me if you go ahead regarding the choice of the tracking technology i trust your skills the code that is needed to track a dialog seems to be very simple in any casei am just not sure if an opt out is the way to go or if it should rather be an opt in maybe we could display a dialog asking for consent on first startup that would be more privacy friendly in my point of view and we do not want jabref to appear that it tries to grab user data i am sure there would be enough people who are willing to contribute their data even in case of opt in for opt in nice that you give it a try 😄 👍 ga had no appropriate library why do you want to spy almost everything i do grimes my guess i havent participated in the discussion on this is that this would enable us to see which features are actually used and which are not if we had had data on content selector usage we would not have removed them at the same time we would be able to see if there is a point at all in optimizing jabref usage for really large databases or if this is a waste of time i added tracking of other dialogs and changed the default to do not share telemetry data also after the first minute of using jabref the user is asked whether he wants to share is data i actually preferred to have a more non invasive notification similar to ie provides a notificationpanel exactly for this scenario however it doesnt work if the rest of the application is in swing anyway this pr is now finally ready for your feedback for later reference i will add this links also to the wiki walk through of how to use azure application insights in java azure application insight github project i tried it out locally the dialog appears as desired and the option can be disabled via the preferences code wise i have no objections however jabref does not terminate when i close it and i get the a lot of messages in the console eg ai trace telemetry configuration illegal instrumentation key nullai trace inprocesstelemetrychannel sending telemetryai error failed to send bad request {itemsreceived itemsaccepted errors {index statuscode message invalid instrumentation key} }ai trace telemetry configuration illegal instrumentation key nullai trace inprocesstelemetrychannel sending telemetryai error failed to send bad request {itemsreceived itemsaccepted errors {index statuscode message invalid instrumentation key} } since this is a very sensitive topic i think we should make the dialog a little more explanatory currently it says to improve the user experience we would like to collect data on the features you use no personal data will be collectedwhile everything is in that statement i think we should be more explicit and repeat ourselves suggestion to improve the user experience we would like to collect anonymous statistics on the features you use we will only record what features you access and how often you do it we will neither collect any personal data nor the content of bibliographic items the collected data will be stored on xxx and we will only use it to prioritize our development efforts if you choose to allow data collection you can later disable it via options preferences generali know this is quite long but since this is a delicate topic i think it is necessary btw where is the data actually stored jabref developers i think this is so important that everyone should consider it brieflyand a last comment we will get flack from the linux freaks when they find out that we dare to include a microsoft library so be prepared for it i like your suggestion for the dialog text and updated it accordingly the data is store on microsoft azure serverno idea where exactly 😄 the reason for the error message is that a correct instrumentation key is only inserted by travis and thus you get these messages when you run jabref from the ide by the way this is what i just got after installing soapui soapui course they have a much more explicit privacy policy page for that
2279.0,2286,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,copy file attributes should and tooedit needs testing for remove posixfilepermission as this will throw an exception on win change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate add copy_attributes flag okay permissons are not copied maybe it is enough to check for unix os posix support yes i think checking private static final boolean isposixcompilant filesystemsgetdefault supportedfileattributeviews contains posix should be enough do you want to add this or should i please do add this i am answering from phone gmt tobias diez notifications githubcom yes i think checking private static final boolean isposixcompilant filesystemsgetdefault supportedfileattributeviews contains posix should be enough do you want to add this or should i — you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread
2285.0,2286,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,copy file attributes should and tooedit needs testing for remove posixfilepermission as this will throw an exception on win change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate add copy_attributes flag okay permissons are not copied maybe it is enough to check for unix os posix support yes i think checking private static final boolean isposixcompilant filesystemsgetdefault supportedfileattributeviews contains posix should be enough do you want to add this or should i please do add this i am answering from phone gmt tobias diez notifications githubcom yes i think checking private static final boolean isposixcompilant filesystemsgetdefault supportedfileattributeviews contains posix should be enough do you want to add this or should i — you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread
2219.0,2300,1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,fix local metadata synchronization fixes issue issue is fixed by overloading and using the parse method in metadataparser the reason was a reset of the local field metadata in dbmssynchronizer this caused other instances containing this field not to be up to date change in changelogmd described manually tested changed features in running jabref i merged it because it is a hotfix obraliar do you think it is possible to add a testcase for that i am testing postgresql using elephantsqlcom i am having autosave activated i restart jabref i get following exception awt eventqueue info netsfjabreflogicimporteropendatabase opening c \users\koppor\btsync\projects\ dagstuhl paper\dagstuhlbibnov pm comgooglecommoneventbuseventbus$logginghandler handleexceptionsevere exception thrown by subscriber method listen netsfjabrefmodelmetadataeventmetadatachangedevent on subscriber netsfjabrefshareddbmssynchronizer f f when dispatching event netsfjabrefmodelmetadataeventmetadatachangedevent f e javalangnullpointerexception at netsfjabrefsharedpostgresqlprocessornotifyclients postgresqlprocessorjava at netsfjabrefshareddbmssynchronizerlisten dbmssynchronizerjava at sunreflectnativemethodaccessorimplinvoke native method at netsfjabrefmodelmetadatametadatapostchange metadatajava at netsfjabrefmodelmetadatametadatasetmode metadatajava at netsfjabreflogicimporterutilmetadataparserparse metadataparserjava at netsfjabrefshareddbmssynchronizersynchronizelocalmetadata dbmssynchronizerjava at netsfjabrefshareddbmssynchronizerinitializedatabases dbmssynchronizerjava at netsfjabrefshareddbmssynchronizeropenshareddatabase dbmssynchronizerjava at netsfjabrefshareddbmssynchronizeropenshareddatabase dbmssynchronizerjava at netsfjabrefguisharedshareddatabaseuimanageropenshareddatabasefromparserresult shareddatabaseuimanagerjava at netsfjabrefjabrefguiopenwindow jabrefguijava at netsfjabrefjabrefgui jabrefguijava at netsfjabrefjabrefmainlambda$start$ jabrefmainjava koppor oh yes this now also fixed thanks for the objection
2221.0,2301,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,readd drop down content selectors first attempt at readding the code for refs code does not compile yet some adjustments need to be made regarding metadata stuff etc change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate tobiasdiez there are some things with the metadata to make it compile again could you please have a look thanks how to handle the metadata is indeed a problem i remember that i removed the content selectors mainly because they were the last not so easy to convert to the new metadata item the next few days i will not find the time to assist you here sorry still some language related errors the localization keys existed before the feature was removed i wonder why the revert did not restore them in the language files i did a manual revert because there were some more changes which would have led to conflicts otherwisewas somehow decided as this was a rather old feature i suppose there were translations for most languages can you readd the translated values as well or should i go digging in the history 😉 so i re implemented parsing and serialization of content selectors and added tests for it it is probably not the most beautiful fashion but i need to want to link to the old code and not have to re write the gui speaking of the gui the content selectors seem to be working fine if the metadata is in the bib file the gui in the entryeditor is not actually beautiful but i guess it has never been does anybody feel like polishing the ui however i do not see options – manage content selectors maybe that has not been ported from yet maybe someone who is more familiar with the menu than me can have a look finally the test currently say netsfjabreflogichelphelpfiletest refertovalidpage failed although there seems to be a help page here someone certainly has a pointer for that regarding the help file there is an enum called helpfiles or similar forthe name of the help pagei can take a look at the dialog thing in the menuam nachm schrieb jörg lenhard so i re implemented parsing and serialization of content selectors andadded tests for it it is probably not the most beautiful fashion but ineed to want to link to the old code and not have to re write the gui speaking of the gui the content selectors seem to be working fine if themetadata is in the bib file the gui in the entryeditor is not actuallybeautiful but i guess it has never been does anybody feel like polishingthe ui however i do not see options – manage content selectors maybethat has not been ported from yet maybe someone who is more familiarwith the menu than me can have a look finally the test currently say netsfjabreflogichelphelpfiletest refertovalidpage failed although there seems to be a help page here someone certainly has a pointerfor that — you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread i pushed a commit which should take care of the menu item hopefully i directly edited it on github tobiasdiez indeed it does nice that means the feature is backregarding the help files there is content_selector contentselector in netsfjabreflogichelphelpfile so the test really should not fail should it ok seems we are back on track only the google scholar test is failing now which i hope is just a random connection problem on the side of travis the same might have applied for the help file testso now we can do some more code review and at a certain point have the users from try out the feature to make sure that it works tobiasdiez i addressed most of your comments i agree that content selectors is probably not the most appropriate name for the stuff this feature does but it is the name under which it has existed for a long time and is known at least by some people i would say that consistency in naming tops appropriateness of the namefurthermore i removed the entry editors update code as you asked for the updating of the content selectors did not even work with this code i tried to replace it with something else and failed so for now you have to restart jabref to get a change in the content selectors to work maybe someone from jabref developers can provide a hint on how the refresh of the entry editor should workfinally i will leave the problems in the localization for siedlerchr to fix closing and reopening of the entry editor does not work potentially with selecting another entry matthiasgeiger unfortunately not the changed data makes it into the metadata but the gui does not notice it is only up to date when the metadata is re read from disk and the entryeditor is re built closing and reopening the bib file does the trick or restarting jabref so we would like to get this into v which hopefully can be released in december what is missing correct the language files have selector keywords updated without reloading of the bib file have the users play around with it to see if it really worksi was hoping that siedlerchr could do the first two points and hopefully soon siedlerchr what is your opinion on that yeah i will try to work on it at least i tried to fix the language files yesterday i will continue working on it the weekend
2311.0,2314,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,rework dblpfetcher to new structure also change in changelogmd described ~~ ~~ manually tested changed features in running jabref helpjabreforg ~~ if you changed the localization did you run gradle ate ~~ thanks to the feedback from dagstuhl we now directly use the standard form of bibtex entries containing all relevant information esp dois and full book journal conf titles
2206.0,2328,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,add bibtex key deviation check refs adds integrity check to determine all entries which bibtex keys deviate from the set bibtex key generation pattern change in changelogmd described manually tested changed features in running jabref if you changed the localization did you run gradle ate
2261.0,2331,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve entrytype customization goals entry customization based on bibdatabasemode working for custom entry types defined in bib db storage is working for new customized entries instead of creating three four prefs strings for each customized entry type in the form custom_type_ _name custom_type_ _req two distinct pref nodes one for bibtex one for biblatex for customized entry types are used which simply use the custom type name as key and the string serialization as value parsing can be reused loading is working for newly created customized entries write prefs migration is performed on first startup of new version existing prefs will be put as new custom types for defaultbibdatabasemode old prefs are not deleted enable testing with cleanup after test execution bibtex biblatex various bug fixes and improvements eg refactor rewrite parts of entrycustomizationdialog to improve performance refs and also clearing of bibtexkeypatterns using reset preferences deleting custom type restoring customized default type from exported prefs no multiple import of customized entry types check resetting overridden default entry types does not work sometimes even crashes not reproducible in reworked state ask stefan kolb whether still an issue related to caused by running through all entries in all open dbs x if a customized type is declared in a file it will be tried to import the declarations if a customtype already exists a warning should be shown that it will be overwritten before this pr no import of already existing customizations custom import before now more control custom import new x a customized standard type should not appear in the custom section of the new entry dialog and not in the custom entries section of the change entry type menu x changelog okay i think the current state is now a good improvement of the old status quo at the moment the prefs migration and a dialog showing a warning if customized entries would be overridden is still missing apart from that i would appreciate some feedback apart from a changelog and some more tests this is good to go from my side mlep frith th it is not yet decided whether we will include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manuallythanks select_all_customized_types_to_be_stored_in_local_preferencescurrently_unknowndifferent_customization_current_settings_will_be_overwritten on thu dec at am matthias geiger wrote mlep include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manually thanks select_all_customized_types_to_be_stored_in_local_preferences select_all_customized_types_to_be_stored_in_local_preferencesseleziona_tutti_i_tipi_personalizzati_da_registrare_nelle_preferenze_locali currently_unknown currently_unknownattualmente_sconosciutothats the singular mode the plural is attualmente_sconosciutibut since italian is profoundly evil thats ok if referred to a masculinenoun the feminine forms are different but im digressing different_customization_current_settings_will_be_overwritten different_customization_current_settings_will_be_overwrittenpersonalizzazione_differente_i_parametri_correnti_saranno_sovrascritti — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata thank you frith th youre welcomeon fri dec at pm matthias geiger wrote thank you frith th — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata how did we proceed regarding standard types is it a v issue see https githubcom koppor jabref issues
2318.0,2331,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve entrytype customization goals entry customization based on bibdatabasemode working for custom entry types defined in bib db storage is working for new customized entries instead of creating three four prefs strings for each customized entry type in the form custom_type_ _name custom_type_ _req two distinct pref nodes one for bibtex one for biblatex for customized entry types are used which simply use the custom type name as key and the string serialization as value parsing can be reused loading is working for newly created customized entries write prefs migration is performed on first startup of new version existing prefs will be put as new custom types for defaultbibdatabasemode old prefs are not deleted enable testing with cleanup after test execution bibtex biblatex various bug fixes and improvements eg refactor rewrite parts of entrycustomizationdialog to improve performance refs and also clearing of bibtexkeypatterns using reset preferences deleting custom type restoring customized default type from exported prefs no multiple import of customized entry types check resetting overridden default entry types does not work sometimes even crashes not reproducible in reworked state ask stefan kolb whether still an issue related to caused by running through all entries in all open dbs x if a customized type is declared in a file it will be tried to import the declarations if a customtype already exists a warning should be shown that it will be overwritten before this pr no import of already existing customizations custom import before now more control custom import new x a customized standard type should not appear in the custom section of the new entry dialog and not in the custom entries section of the change entry type menu x changelog okay i think the current state is now a good improvement of the old status quo at the moment the prefs migration and a dialog showing a warning if customized entries would be overridden is still missing apart from that i would appreciate some feedback apart from a changelog and some more tests this is good to go from my side mlep frith th it is not yet decided whether we will include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manuallythanks select_all_customized_types_to_be_stored_in_local_preferencescurrently_unknowndifferent_customization_current_settings_will_be_overwritten on thu dec at am matthias geiger wrote mlep include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manually thanks select_all_customized_types_to_be_stored_in_local_preferences select_all_customized_types_to_be_stored_in_local_preferencesseleziona_tutti_i_tipi_personalizzati_da_registrare_nelle_preferenze_locali currently_unknown currently_unknownattualmente_sconosciutothats the singular mode the plural is attualmente_sconosciutibut since italian is profoundly evil thats ok if referred to a masculinenoun the feminine forms are different but im digressing different_customization_current_settings_will_be_overwritten different_customization_current_settings_will_be_overwrittenpersonalizzazione_differente_i_parametri_correnti_saranno_sovrascritti — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata thank you frith th youre welcomeon fri dec at pm matthias geiger wrote thank you frith th — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata how did we proceed regarding standard types is it a v issue see https githubcom koppor jabref issues
365.0,2331,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve entrytype customization goals entry customization based on bibdatabasemode working for custom entry types defined in bib db storage is working for new customized entries instead of creating three four prefs strings for each customized entry type in the form custom_type_ _name custom_type_ _req two distinct pref nodes one for bibtex one for biblatex for customized entry types are used which simply use the custom type name as key and the string serialization as value parsing can be reused loading is working for newly created customized entries write prefs migration is performed on first startup of new version existing prefs will be put as new custom types for defaultbibdatabasemode old prefs are not deleted enable testing with cleanup after test execution bibtex biblatex various bug fixes and improvements eg refactor rewrite parts of entrycustomizationdialog to improve performance refs and also clearing of bibtexkeypatterns using reset preferences deleting custom type restoring customized default type from exported prefs no multiple import of customized entry types check resetting overridden default entry types does not work sometimes even crashes not reproducible in reworked state ask stefan kolb whether still an issue related to caused by running through all entries in all open dbs x if a customized type is declared in a file it will be tried to import the declarations if a customtype already exists a warning should be shown that it will be overwritten before this pr no import of already existing customizations custom import before now more control custom import new x a customized standard type should not appear in the custom section of the new entry dialog and not in the custom entries section of the change entry type menu x changelog okay i think the current state is now a good improvement of the old status quo at the moment the prefs migration and a dialog showing a warning if customized entries would be overridden is still missing apart from that i would appreciate some feedback apart from a changelog and some more tests this is good to go from my side mlep frith th it is not yet decided whether we will include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manuallythanks select_all_customized_types_to_be_stored_in_local_preferencescurrently_unknowndifferent_customization_current_settings_will_be_overwritten on thu dec at am matthias geiger wrote mlep include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manually thanks select_all_customized_types_to_be_stored_in_local_preferences select_all_customized_types_to_be_stored_in_local_preferencesseleziona_tutti_i_tipi_personalizzati_da_registrare_nelle_preferenze_locali currently_unknown currently_unknownattualmente_sconosciutothats the singular mode the plural is attualmente_sconosciutibut since italian is profoundly evil thats ok if referred to a masculinenoun the feminine forms are different but im digressing different_customization_current_settings_will_be_overwritten different_customization_current_settings_will_be_overwrittenpersonalizzazione_differente_i_parametri_correnti_saranno_sovrascritti — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata thank you frith th youre welcomeon fri dec at pm matthias geiger wrote thank you frith th — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata how did we proceed regarding standard types is it a v issue see https githubcom koppor jabref issues
366.0,2331,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve entrytype customization goals entry customization based on bibdatabasemode working for custom entry types defined in bib db storage is working for new customized entries instead of creating three four prefs strings for each customized entry type in the form custom_type_ _name custom_type_ _req two distinct pref nodes one for bibtex one for biblatex for customized entry types are used which simply use the custom type name as key and the string serialization as value parsing can be reused loading is working for newly created customized entries write prefs migration is performed on first startup of new version existing prefs will be put as new custom types for defaultbibdatabasemode old prefs are not deleted enable testing with cleanup after test execution bibtex biblatex various bug fixes and improvements eg refactor rewrite parts of entrycustomizationdialog to improve performance refs and also clearing of bibtexkeypatterns using reset preferences deleting custom type restoring customized default type from exported prefs no multiple import of customized entry types check resetting overridden default entry types does not work sometimes even crashes not reproducible in reworked state ask stefan kolb whether still an issue related to caused by running through all entries in all open dbs x if a customized type is declared in a file it will be tried to import the declarations if a customtype already exists a warning should be shown that it will be overwritten before this pr no import of already existing customizations custom import before now more control custom import new x a customized standard type should not appear in the custom section of the new entry dialog and not in the custom entries section of the change entry type menu x changelog okay i think the current state is now a good improvement of the old status quo at the moment the prefs migration and a dialog showing a warning if customized entries would be overridden is still missing apart from that i would appreciate some feedback apart from a changelog and some more tests this is good to go from my side mlep frith th it is not yet decided whether we will include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manuallythanks select_all_customized_types_to_be_stored_in_local_preferencescurrently_unknowndifferent_customization_current_settings_will_be_overwritten on thu dec at am matthias geiger wrote mlep include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manually thanks select_all_customized_types_to_be_stored_in_local_preferences select_all_customized_types_to_be_stored_in_local_preferencesseleziona_tutti_i_tipi_personalizzati_da_registrare_nelle_preferenze_locali currently_unknown currently_unknownattualmente_sconosciutothats the singular mode the plural is attualmente_sconosciutibut since italian is profoundly evil thats ok if referred to a masculinenoun the feminine forms are different but im digressing different_customization_current_settings_will_be_overwritten different_customization_current_settings_will_be_overwrittenpersonalizzazione_differente_i_parametri_correnti_saranno_sovrascritti — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata thank you frith th youre welcomeon fri dec at pm matthias geiger wrote thank you frith th — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata how did we proceed regarding standard types is it a v issue see https githubcom koppor jabref issues
772.0,2331,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve entrytype customization goals entry customization based on bibdatabasemode working for custom entry types defined in bib db storage is working for new customized entries instead of creating three four prefs strings for each customized entry type in the form custom_type_ _name custom_type_ _req two distinct pref nodes one for bibtex one for biblatex for customized entry types are used which simply use the custom type name as key and the string serialization as value parsing can be reused loading is working for newly created customized entries write prefs migration is performed on first startup of new version existing prefs will be put as new custom types for defaultbibdatabasemode old prefs are not deleted enable testing with cleanup after test execution bibtex biblatex various bug fixes and improvements eg refactor rewrite parts of entrycustomizationdialog to improve performance refs and also clearing of bibtexkeypatterns using reset preferences deleting custom type restoring customized default type from exported prefs no multiple import of customized entry types check resetting overridden default entry types does not work sometimes even crashes not reproducible in reworked state ask stefan kolb whether still an issue related to caused by running through all entries in all open dbs x if a customized type is declared in a file it will be tried to import the declarations if a customtype already exists a warning should be shown that it will be overwritten before this pr no import of already existing customizations custom import before now more control custom import new x a customized standard type should not appear in the custom section of the new entry dialog and not in the custom entries section of the change entry type menu x changelog okay i think the current state is now a good improvement of the old status quo at the moment the prefs migration and a dialog showing a warning if customized entries would be overridden is still missing apart from that i would appreciate some feedback apart from a changelog and some more tests this is good to go from my side mlep frith th it is not yet decided whether we will include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manuallythanks select_all_customized_types_to_be_stored_in_local_preferencescurrently_unknowndifferent_customization_current_settings_will_be_overwritten on thu dec at am matthias geiger wrote mlep include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manually thanks select_all_customized_types_to_be_stored_in_local_preferences select_all_customized_types_to_be_stored_in_local_preferencesseleziona_tutti_i_tipi_personalizzati_da_registrare_nelle_preferenze_locali currently_unknown currently_unknownattualmente_sconosciutothats the singular mode the plural is attualmente_sconosciutibut since italian is profoundly evil thats ok if referred to a masculinenoun the feminine forms are different but im digressing different_customization_current_settings_will_be_overwritten different_customization_current_settings_will_be_overwrittenpersonalizzazione_differente_i_parametri_correnti_saranno_sovrascritti — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata thank you frith th youre welcomeon fri dec at pm matthias geiger wrote thank you frith th — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata how did we proceed regarding standard types is it a v issue see https githubcom koppor jabref issues
2335.0,2339,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,fix biblatex cleanup for date field this moved biblatex cleanup to new test change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues failing test is something from medline not related however in this case that would result in the original bug again when checked for ifpresent if the field is not yet in the biblatex entry which is obviously the casewhen you only have year it returns an emtyoptional and thus you wouldhave the same situation as in the original codethis is why i splitted it failing snap ci is due to error in astrophysicsdatasystemtest could you please merge master again i merged and thus snapci only does the basic tests as described at 😇 siedlerchr sorry i dont understand you commentlets go through this case by case with the following code optional date entrygetfield fieldnamedate boolean isblank stringutilsisblank date case date isblank no date at all optionalempty trueempty string optionalof truesomething else optionalof something falseyou want to move year and month to the date field exactly in the first two cases ie if and only if isblank true what do i miss ah now i understand your comment the first case was not obvious for me that an empty should return true tobiasdiez the confusion came from the naming stuff i previously had the apachecommons stringutil class and not the jabref specific one changed that besides the micro comment lgtm
1323.0,2344,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,follow up for batch fulltext downloader rename menu item to plural for finding full texts disable menu item when there are no documents selected for fulltext retrieval fix layout of file dialog and increase size of file path significantlyold https cloudentcom assets bb ce bca e b f e f d dpng new image https cloudgithubusercontentcom assets a bca e d png
1446.0,2348,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,only add non empty paths suggest current bib folder when no defaults are set
1779.0,2349,1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,integrity checker improvements follow up for linking to bibentries inside the integrity checker should be done via a reference to the entry not the key focus by id rather than bibtexkey also the field bibtexkey can now be focused i changed the internal list from unmodifiable and returned another unmodifiable list this needs some close examination in my opinion as im not sure if i introduced any side effects please also test the feature if it is still working as expected i did a quick check and it appears to work uhh browsing this from my mobile im not sure but tobiasdiez you have closed the pr and not merged it 😉 anything that needs to be changed here from my point of view its good i merge it in
2012.0,2358,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,use bibtexformat for month field in medlinefetcher checks if the month field is present in the case its present the month field is set to bibtex format using monthutil could you add a test casemedline tests are failing i just updated the test cases as far as i understood it this should be the normal behavior so no additional tests should be necessary
1681.0,2361,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,fix a few group related issues this pr and since i didnt understood the groups code i also refactored it main changes split keywordgroup class into wordkeywordgroup which splits field content into words and then matches them and regexkeywordgroup that uses a regular expression for this job extract serialization of groups to groupserializer previously every group decided about its own serialization via the tostring method move a few things from model and logic to gui since they mostly contained ui related stuff eg groupdesrciptions change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate the groups code is a mess thanks for being willing to put up with thisunfortunately the amount of changes is too large for meaningful review and my knowledge on groups and the related code is too limited i would trust your ability and the amount of tests that you added here together with the working build cosmetic changes can be made on a later occasion i am sure this is not the last visit to the groups codesince this is on your private branch we have no build on buildsjabreforg if we had we could ask the people that reported the issues to try out this version any chance of getting a build for this decision merge so that many people will be able to test it we can include code review comments later in a separate pri am very aware of the risk refs dragging an entry to a group does not refresh the main table keyword based group context menu shows remove group keep subgroups even though there are no subgroups deletion of a static group does not remove the assignment of entries to it clicking on a group and pressing del triggers the dialog do you want to remove the selcted entries if i press cursor down the next group is selected thus del should really apply to the current groupnothing important or me think this was also happening using the old groups code
1873.0,2361,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,fix a few group related issues this pr and since i didnt understood the groups code i also refactored it main changes split keywordgroup class into wordkeywordgroup which splits field content into words and then matches them and regexkeywordgroup that uses a regular expression for this job extract serialization of groups to groupserializer previously every group decided about its own serialization via the tostring method move a few things from model and logic to gui since they mostly contained ui related stuff eg groupdesrciptions change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate the groups code is a mess thanks for being willing to put up with thisunfortunately the amount of changes is too large for meaningful review and my knowledge on groups and the related code is too limited i would trust your ability and the amount of tests that you added here together with the working build cosmetic changes can be made on a later occasion i am sure this is not the last visit to the groups codesince this is on your private branch we have no build on buildsjabreforg if we had we could ask the people that reported the issues to try out this version any chance of getting a build for this decision merge so that many people will be able to test it we can include code review comments later in a separate pri am very aware of the risk refs dragging an entry to a group does not refresh the main table keyword based group context menu shows remove group keep subgroups even though there are no subgroups deletion of a static group does not remove the assignment of entries to it clicking on a group and pressing del triggers the dialog do you want to remove the selcted entries if i press cursor down the next group is selected thus del should really apply to the current groupnothing important or me think this was also happening using the old groups code
2334.0,2361,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,fix a few group related issues this pr and since i didnt understood the groups code i also refactored it main changes split keywordgroup class into wordkeywordgroup which splits field content into words and then matches them and regexkeywordgroup that uses a regular expression for this job extract serialization of groups to groupserializer previously every group decided about its own serialization via the tostring method move a few things from model and logic to gui since they mostly contained ui related stuff eg groupdesrciptions change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate the groups code is a mess thanks for being willing to put up with thisunfortunately the amount of changes is too large for meaningful review and my knowledge on groups and the related code is too limited i would trust your ability and the amount of tests that you added here together with the working build cosmetic changes can be made on a later occasion i am sure this is not the last visit to the groups codesince this is on your private branch we have no build on buildsjabreforg if we had we could ask the people that reported the issues to try out this version any chance of getting a build for this decision merge so that many people will be able to test it we can include code review comments later in a separate pri am very aware of the risk refs dragging an entry to a group does not refresh the main table keyword based group context menu shows remove group keep subgroups even though there are no subgroups deletion of a static group does not remove the assignment of entries to it clicking on a group and pressing del triggers the dialog do you want to remove the selcted entries if i press cursor down the next group is selected thus del should really apply to the current groupnothing important or me think this was also happening using the old groups code
2209.0,2364,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,be more friendly when using journal alias field id like to copy bibtex entries to biblatex databases and vice versa when using required fields only this works perfectly when in biblatex mode jabref does not display the value of journal in the required fields because jabref demands the field journaltitle this is not only confusing for me but also for other users i know that a clean solution is this however wont happen this yeari also know that a bibtex to biblatex converter and biblatex to bibtex converter is another solution this however forces users to run these when copying and pasting between databases this could be solved by running these converters silently when copying and pasting when jabref is used in parallel to other software such as notepad this does not help i cannot force everyone to use jabref thus simply supporting journal in jabref is the solution for me the biblatex manual states journal field literal an alias for journaltitle provided for bibtex compatibility see § thus it is not deprecated but an alias and should imho be considered as full alternative for journaltitle i am aware that this patch makes it hard for users using full biblatex with journaltitle instead of journal i am assuming that not much users are aware of the different modes of jabref and that they switch back and forth for the same file or for the bibentries we now show both journaltitle and journal if these fields exists in as required fieldsthis whole discussion somehow refs minor improvement enhanced integrity checks testing for biblatex only fields to be aware of more fields eg location all fetchers return now bibtex before arxiv and msbib created biblatex screenshot current jabref grabbed_ screenshot updated jabref grabbed_ checklist change in changelogmd described manually tested changed features in running jabref n a helpjabreforg n a if you changed the localization did you run gradle ate hehe let us see how political this will get code wise the pr looks fine and i give my for merging the only blocker is that for some reason the gui tests are failing edit i restartet the build for the push lets see if it works on a second try you could also create a discussion point at in case i want to start a discussion im going to do that on the dante ev mailing list or same dante ev event 😇 the gui tests are also failing on master i dont like thisdespite im not using the biblatex mode i think it is the wrong approach to use the deprecated field instead of the intended field only because we are too lazy to implement our fetchers in the right way or because the user is too lazy to convert copied bibtex entries to biblatex wink journaltitle is the main biblatex field for journal names and hence jabref should support it as a first class citizen this means it should be displayed as a required field and to biblatex should convert journal to journaltitle moreover the journal is not the only controversial field date is the preferred way to store the publication date but bibtex only supports year and month in my opinion we shouldnt reinterpret the biblatex standard just because some users have problems but of course i can see that the new conventions are sometimes inconvenient if users switch between bibtex and biblatex as far as i see it the main problem is that journal lands in deprecated although it is an alias to a required field would it be a solution to show the journal field right below journaltitle in required if it has a value then it would work similar to year month vs date matthiasgeiger journal is not deprecated it is just an alias field tobiasdiez yes that would be a solution therefore i put it in quotes all comments addressed should be good to go now
521.0,2364,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,be more friendly when using journal alias field id like to copy bibtex entries to biblatex databases and vice versa when using required fields only this works perfectly when in biblatex mode jabref does not display the value of journal in the required fields because jabref demands the field journaltitle this is not only confusing for me but also for other users i know that a clean solution is this however wont happen this yeari also know that a bibtex to biblatex converter and biblatex to bibtex converter is another solution this however forces users to run these when copying and pasting between databases this could be solved by running these converters silently when copying and pasting when jabref is used in parallel to other software such as notepad this does not help i cannot force everyone to use jabref thus simply supporting journal in jabref is the solution for me the biblatex manual states journal field literal an alias for journaltitle provided for bibtex compatibility see § thus it is not deprecated but an alias and should imho be considered as full alternative for journaltitle i am aware that this patch makes it hard for users using full biblatex with journaltitle instead of journal i am assuming that not much users are aware of the different modes of jabref and that they switch back and forth for the same file or for the bibentries we now show both journaltitle and journal if these fields exists in as required fieldsthis whole discussion somehow refs minor improvement enhanced integrity checks testing for biblatex only fields to be aware of more fields eg location all fetchers return now bibtex before arxiv and msbib created biblatex screenshot current jabref grabbed_ screenshot updated jabref grabbed_ checklist change in changelogmd described manually tested changed features in running jabref n a helpjabreforg n a if you changed the localization did you run gradle ate hehe let us see how political this will get code wise the pr looks fine and i give my for merging the only blocker is that for some reason the gui tests are failing edit i restartet the build for the push lets see if it works on a second try you could also create a discussion point at in case i want to start a discussion im going to do that on the dante ev mailing list or same dante ev event 😇 the gui tests are also failing on master i dont like thisdespite im not using the biblatex mode i think it is the wrong approach to use the deprecated field instead of the intended field only because we are too lazy to implement our fetchers in the right way or because the user is too lazy to convert copied bibtex entries to biblatex wink journaltitle is the main biblatex field for journal names and hence jabref should support it as a first class citizen this means it should be displayed as a required field and to biblatex should convert journal to journaltitle moreover the journal is not the only controversial field date is the preferred way to store the publication date but bibtex only supports year and month in my opinion we shouldnt reinterpret the biblatex standard just because some users have problems but of course i can see that the new conventions are sometimes inconvenient if users switch between bibtex and biblatex as far as i see it the main problem is that journal lands in deprecated although it is an alias to a required field would it be a solution to show the journal field right below journaltitle in required if it has a value then it would work similar to year month vs date matthiasgeiger journal is not deprecated it is just an alias field tobiasdiez yes that would be a solution therefore i put it in quotes all comments addressed should be good to go now
1721.0,2368,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,never manually set id of a bibentry the internal id of a bibentry should never be set manually closes done removed constructors that allow setting the id of an entry __every__ bibentry now gets an id on creation a clone of a bibentry __always gets a unique id__ now only option to change id of an entry is now via setid pending is idgenerator really global and consistent between calls now can we import bibentries without an open database see c importers used a static id value before not sure if this change has any side effects setid may still be replaced for some occurences maybe we can even remove this execpt for a few test cases or so this is ready for review now please carefully see the changes in the initial post and think about possible side effects i might have missed i also need some advice for the setid replacement lgtm shouldnt we i use this id as hashcode or ii get rid of the id completely we could use it as hash code we also use it to distinguish duplicated cloned entries in our integrity checks to jump to an entry that might have no key for example i dont quickly get why we cant use equals etc ok probably the code needs to be rewritten accordingly maybe we could do this eventually code looks good your issues seem hard to tackle we merge after v and then test in production 😇
2370.0,2372,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,relevance and read status field actions were switched
2011.0,2375,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,preserve sign inside bibtex fields via cleanup you can now use latexcleanup inside quality cleanups to escape to \ how about a changelog entry and we are ready to go put ruhe latex cleanup in single quotes as it is a command in jabref when importing via the firefox plugin the percent sign are excaped importing via the medline websearch they are not i do not find any mentioning in the cleanup dialogue of percent sign changed to \ signsjabref windows amd java _ bernhard kleine the cleanup is not done automatically you should use cleanup and then select the field you want to cleanup eg abstract together with latex cleanup i updated to jabref today i choose the bit version i took a new database i imported via the medline web search pmid the abstract has unescaped percent signs therefore i went to quality cleanup and as the abstract field is already selected i checked all the entries in the field to the right but can not find percent sign latex cleanup did not find anything to cleanup what do i miss i had to add it first and then run the cleanup sorry for the noise i added latex cleanup for the abstract field still percent sign are saved as they are which leads to errors when running biber in case the percent sign is escaped jabref removes the backslash when saving j hannes this has been fixed with thank you for reporting this issue we think that is already fixed in our development version and consequently the change will be included in the next releasewe would like to ask you to use a development build from and report back if it works for you siedlerchr i tried version and it seems to be quite unstable i had to force quit the application each time as it was hanging before crashing it destroyed some of the keys so im going back to now is there any other way to address the percent problem j hannes could you please open a new issue for the problems you encounter with the version in detaileg operation system any errors in from the logyou could manually escape the signs by adding a backslash \ before it that worksyou could simply search for the sign to see all problematic entries and then escape them manually i have raised issues for the backslash and the sign before myproblems are gone with version using quality cleanup entries and adding abstract latex cleanup the the run field formatter beforeclicking okthe errors due not excaped signs turn out to be tiresome since theerror message for example in texstudio plus latexmk are not direct onlyby checking the log you know that a sign was not escapedam um schrieb christoph j hannes issue for the problems you encounter with the version in detail eg operation system any errors in from the log you could manually escape the signs by adding a backslash \ before it that works you could simply search for the sign to see all problematic entries and then escape them manually — you are receiving this because you were mentioned reply to this email directly view it on github spitzhalde d lenzkirchbernhardkleine gmxnetwwwb kleinecom wwwurseetalnet thunderbird mit enigmailgpg schlüssel d fingerprint b f a fc c ca a c f a e d after changing my bib file manually version is not crashing anymore still it modifies all my citation keys and i dont find any way to stop it j hannes did you run a cleanup operation or a save action did you check the keypattern settingsi would suggest opening a new issue if this problem still exists siedlerchr no it happens right when typing loading or after inspecting manual changes to the bib file when typing keys are changed when the focus moves to a different field i can confirm that the problem still persists with abstract latex cleanup enabled in version dev every time i enter \ it is immediately changed to and ends up as in the bib file which causes latex to fail i can not reproduce this sign is correctly escaped and only once to \ using latex cleanup for abstract it certainly was caused by the latex to unicode filter
938.0,2388,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,rename xmp data to xmp metadata i worked with the import inspection dialog which offers to offer entry creation based on xmp meta data refs the dialog renders as follows grabbed_ issue is that is uses both xmp data and xmp metadata for the same thing i wanted to rename xmp metadata to xmp data but xmp metadata appears in jabref much more often thus i decided to keep xmp metadata and just adapt two other strings to that writingnew rendering grabbed_ maybe we should use xmp metadata without dash or even xmp meta data
2390.0,2396,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,introduce explicit list of all_biblatex_only_fields this the last implementation used entryconverterfield_aliases_ltx_to_tex this implementation is based on bibtexentrytypes and biblatexentrytypes issue jabrefpreferencescustom_tab_name_num_ should be used to really determine the fields to check this however is really a huge architectural reworkit has to be checked in following seldom situation field x is defined in jabrefs biblatexentrytypes field x is added by the user to a general tabjabref now complains that x is biblatex only further changes isbn and isbn are now bibtex fields too reason even though both are not listed in wikipedia and the lncs style ftp ftpspringerde pub tex latex llncs latex e splncs bst i see them so hard tied to a book and article that i would add it in the case of a doi jabref more or less enforces it by offering that field in the general tab moreover it is part of plainnatbst and natbib is a popular package fieldnamecomment instead of fieldnamecomments affects oaiimporter only preferences use fieldname constants at setlanguagedependentdefaultvalues change in changelogmd described n a manually tested changed features in running jabref n a helpjabreforg n a if you changed the localization did you run gradle ate
2394.0,2400,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,groups matching with brackets in name change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2403.0,2405,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,datepicker fix fix for and as i was just touching this stuff again i replaced our custom easydateformat class with a standard datetimeformatter change in changelogmd described ~~ ~~ manually tested changed features in running jabref ~~ helpjabreforg ~~ if you changed the localization did you run gradle ate ~~ documentation at not work with master and v on my side v does not compile any more could not find deundercouch citeproc java snapshot does also not work with v the solution is to reset the preferencessolution works for me matthiasgeiger thank you for the fix does not work for me even after resetting the preferences jabref dev snapshot master b bfdjar mlep after resetting the preferences the timestamp field appears for me and the datepicker works as desired the dev version you mention in your comment is not the most recent one maybe it did not yet include the fix can you try again with jabref dev snapshot master d e jar indeed the calendar is displayed nowhowever the clear function does not work as expected the timestamp field is not cleared if i click on today then clear works mlep indeed clear only works if a proper date is already in the field if you insert something else such as abc then clear does not work matthiasgeiger can you please address this since this pr is already merged i guess we need a follow up pr note for me it does not clear even if the field content looks good like timestamp { }
240.0,2410,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,change in changelogmd described manually tested changed features in running jabref if you changed the localization did you run gradle ate
2385.0,2415,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fix several file cleanup rename issues separated move rename cleanup logicmove rename files in general tab file now use internally the cleanup operations logicseparated gui context menu operations for move cleanuprename files no longer moves files it only renames themfiles are not overwritten if they exist or have the same name todo apply new targetfiledir in test todo adapt test finally todo rework gui action code fix for and includes fix for and jabrefgeneralfilefield describe the changes you have made here change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate gui cleanuppreset panel metadatagetdefaultfiledirectory seems not to check bibtex location somehow todo find a wy to cleanup only one file todo add some preview dialog stuff prevent filedirpattern subfolder creation on each run if already exists i had a look at the code which in general is good and fixed a few minor issues directly missing getters setters that were missing well before this pr but this is a good time for a fix i also played around a little with the ui and tried to find errors but was unsuccessfulin the spirit of progress and as suggested by siedlerchr i am merging now directly more far fetching suggestions by tobiasdiez should be addressed in a follow up pr as discussed above siedlerchr thanks again for this heap of work
2454.0,2415,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fix several file cleanup rename issues separated move rename cleanup logicmove rename files in general tab file now use internally the cleanup operations logicseparated gui context menu operations for move cleanuprename files no longer moves files it only renames themfiles are not overwritten if they exist or have the same name todo apply new targetfiledir in test todo adapt test finally todo rework gui action code fix for and includes fix for and jabrefgeneralfilefield describe the changes you have made here change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate gui cleanuppreset panel metadatagetdefaultfiledirectory seems not to check bibtex location somehow todo find a wy to cleanup only one file todo add some preview dialog stuff prevent filedirpattern subfolder creation on each run if already exists i had a look at the code which in general is good and fixed a few minor issues directly missing getters setters that were missing well before this pr but this is a good time for a fix i also played around a little with the ui and tried to find errors but was unsuccessfulin the spirit of progress and as suggested by siedlerchr i am merging now directly more far fetching suggestions by tobiasdiez should be addressed in a follow up pr as discussed above siedlerchr thanks again for this heap of work
2526.0,2415,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fix several file cleanup rename issues separated move rename cleanup logicmove rename files in general tab file now use internally the cleanup operations logicseparated gui context menu operations for move cleanuprename files no longer moves files it only renames themfiles are not overwritten if they exist or have the same name todo apply new targetfiledir in test todo adapt test finally todo rework gui action code fix for and includes fix for and jabrefgeneralfilefield describe the changes you have made here change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate gui cleanuppreset panel metadatagetdefaultfiledirectory seems not to check bibtex location somehow todo find a wy to cleanup only one file todo add some preview dialog stuff prevent filedirpattern subfolder creation on each run if already exists i had a look at the code which in general is good and fixed a few minor issues directly missing getters setters that were missing well before this pr but this is a good time for a fix i also played around a little with the ui and tried to find errors but was unsuccessfulin the spirit of progress and as suggested by siedlerchr i am merging now directly more far fetching suggestions by tobiasdiez should be addressed in a follow up pr as discussed above siedlerchr thanks again for this heap of work
2319.0,2416,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,fix collapse sub tree functionality for groups tree fix of function collapse subtree is working again change in changelogmd described ~~ ~~ ui only ~~ ~~ manually tested changed features in running jabref ~~ helpjabreforg ~~ if you changed the localization did you run gradle ate ~~
2417.0,2424,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,by removing the url when creating an entry by doi change in changelogmd described omg two prs for the same thing this is the first time ever in jabrefs github history 🎈 since we introduced dopostcleanup we will continue at the other pr thank you simonharrer for following up there too simonharrer just to make this clear i didnt wrote my pr as a counter to yours i finished mine and then read that you already solved the issue sorry for this by the way good look with your thesis but of course we like to see more prs from you 😄
2417.0,2425,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,doi no longer contains url counterproposal to 😈 change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate i did not want to introduce this dependency less dependencies seemed better to me
2427.0,2428,1,0,0,1,0,1,1,0,0,1,1,1,0,0,1,arxiv fetcher works with prefix change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate i merged it and will do the requested changes now to get this into
2458.0,2459,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix conversion of tilde n and although i said that i would not work on jabref for the next two weeks here is a pr this stuff is addictive and i need help author name formatting in the main table is handled different from the formatting of the remaining columns and we simply forgot to perform the unicode conversion also for the author column change in changelogmd described manually tested changed features in running jabref failing tests are again the damn fetchershowever i merge itin
2458.0,2464,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,fix conversion of n and \{n} from latex to unicode this is a follow up for fixing the combinations \n and \\{n} are converted from latex to different symbols in unicodethis was really hard to track down it was not a problem in our conversion maps but in latextounicode the ultimate reason is that this code is just an utter mess of hacks and i could only fix this by adding another ugly map on top of this heapwe have already identified this class to cause performance issues and as you can see here it is very difficult to maintain we should consider removing the functionality and rewriting it from scratch or preferably replace it with an external library after all converting a latex string to unicode seems sufficiently well defined that there is some library for this out there change in changelogmd described manually tested changed features in running jabref
2472.0,2473,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,remove html code from acm fetcher remove html code from acm fetcher change in changelogmd described~~ ~~~~ ~~ manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate ~~ looks good codewise i tested it locally and it did not get any html code with the entry so i am merging it right away
2486.0,2487,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,make sure that unregistered event sources do not stop jabref from shu… …tting down unregistering event sources that have not been registered before should not stop jabref from shutting down orderly this pr logs such a problem instead of halting the shutdown of the program change in changelogmd described manually tested changed features in running jabref would it be possible to first check if the event is registered and only doing a shutdown thenthis should be implemented at best in unregister itself siedlerchr unfortunately the implementation of the event bus from google supports no such checking functionality hence we would have to remember subscribers in a custom list which in my point of view would be an unnecessary overhead however i have now moved the exception handling code to all the different event sources in jabref i hope i found them all that way we catch the exception as early as possible i cannot think of a circumstance where trying to remove a listener that never listened should crash the complete applicationit is not always logged though since not all of the classes that are event sources use a logger but again i do not think that this is very tragic or indeed important there is already discussion about checking it fixing check style you should add the comments for switching it off at hat position siedlerchr sorry but i am not getting your comment regarding checkstyle the builds seem to fail because of the usual random fetcher errors lenhard i meant the codacy which will complain about the empty catch blocksbut i think i confused it with checkstyle module siedlerchr ok i understand however i am not too fond of codacy and refuse to add comments just because the tool produces false positives i am well aware that it is near impossible for a tool to tell if an empty catch block makes sense or not but it is false positive nonetheless the existing comment in there is meaningful to humans which is way more importanti just pushed a few minor formatting fixes ill take the thumps up as an ok for merge which ill do right away
2481.0,2490,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,classcastexception because of wrong cast will merge as soon as build passes change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2251.0,2496,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,change key binding for cleanup from f to alt f this solution is the quick solution by changing the shortcut the alternative is to change the actiontable etcl change in changelogmd described no n a manually tested changed features in running jabref n a helpjabreforg n a if you changed the localization did you run gradle ate as quick fix imho okay maybe that will sooner or later be resolved with javafx
2498.0,2499,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,display latex free version of field content in entry preview panel the pr implements a new method in bibentry getresolvedfieldoraliaslatexfree that builds upon our existing latexfree methods and extends this functionality to resolved fields this method can be reused in the ui parts of jabref that should rather display a unicode version of a field than a latex version such as the entry preview change in changelogmd described manually tested changed features in running jabref there seems to be some problems now with the layout files if you look at travis output it seems that using a formatter for html conversion in the layout conflicts with the latextounicode conversion im not sure what our take on this is maybe this pr is not the solution at all maybe the correct solution would be to use latextounicode in the entry preview configuration maybe the correct solution would be to use latextounicode in the entry preview configurationsounds like the better solution in my opinion i think the formatter can be specified in the layout file something like \format latextounicode {} \begin{author} \format authors lastfirstinitialssemicolonamp htmlcharslatextounicode {\author} \end{author}this is the way to go documented in this pr can be closed
2500.0,2507,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,fix apostrophe conversion this repairs the apostrophe handling in the latex to unicode conversion broken by and maintains the special handling of apostrophes in conjunction with the character n that intended to fix it increases complexity and reduces performance in the unicode conversion a tiny bit through the additional checks that are now in there ultimately the goal should be to replace the conversion with an external library change in changelogmd described manually tested changed features in running jabref ich merge das mal rein und hoffe dass cih das dann dan fürs erste erledigt hat
2506.0,2510,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,fix journal title in ris importer fix for the problem was that the t field was used for the journal title if it comes first now t is only used for the journal title if the field jo does not appear ive also added the file from science direct as test case thanks
2451.0,2519,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,fix repeated escaping of sign extracted regexe in patternsfix for change in changelogmd described ~~ ~~ manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate ~~
2451.0,2521,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fix sign cleanup fix previous stackoverflow errror with large inputfollow up from
2522.0,2527,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix error when path is no valid directory fixes the exception folder parameter must be a valid folderinternal fix onlywhen no working directory is set and last used path was an actual file file dialog could not be opened lgtm but what is the normal behavior for system dialogs if i select a file ijnstead of a directory is it possible and selects the parent folder or is the select button inactive stefan kolb my fix has only impact when opening the dialog that it opens in a directory without an exception it has no impact on the selection of files etcparent does not mean parent directory but the directory itself the parent of the file example your last selected file was x \abc\defgpdf when you try to set the initaldirectory to this complete path including filename it gives an exception because it is obviously no a folder directory therefore the fix now sets the dir to x \abc which is the parent of x \abc\defgpdf ah sorry for that yeah i know i was aware of that
2431.0,2531,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,check more results returned by crossref api for matching changes we will now check results instead of just the first one for a matching title lgtmdo you want to implement as well heart_eyes_cat ok i interpret this as a no wink nah will do that later maybe at jabcon is a separate task
2063.0,2532,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,switch to latex unicode motivation is discussed in fixes many conversion problems such as those discussed in and change in changelogmd described manually tested changed features in running jabref please remove the old latex unicode formatter code otherwise good to go since the build is passing and there are two approved reviews i will merge this into master now and close the related issues
207.0,2532,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,switch to latex unicode motivation is discussed in fixes many conversion problems such as those discussed in and change in changelogmd described manually tested changed features in running jabref please remove the old latex unicode formatter code otherwise good to go since the build is passing and there are two approved reviews i will merge this into master now and close the related issues
2465.0,2532,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,switch to latex unicode motivation is discussed in fixes many conversion problems such as those discussed in and change in changelogmd described manually tested changed features in running jabref please remove the old latex unicode formatter code otherwise good to go since the build is passing and there are two approved reviews i will merge this into master now and close the related issues
209.0,2550,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,bib database library
2546.0,2554,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,replaced lrumap with a guava cache this is intended as a fix for note that the guava caches would allow for automated reloading of the entries but this is not undertaken in this implementation instead everything should work as before with the lrumap change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks ❤️ can you please also change the external librariestxt and remove commons from there also small issues checkstylemain ant checkstyle error home travis build jabref jabref src main java net sf jabref logic pdf fileannotationcachejava wrong order for netsfjabrefmodeldatabasebibdatabasecontext import importorder ant checkstyle error home travis build jabref jabref src main java net sf jabref logic pdf fileannotationcachejava wrong order for javautilhashmap import importorder checkstyle help thanks for the feedback there is quite a potential to improve stuff with these caches maybe ill have a look at the big picture there later
1179.0,2558,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,move whole codebase to package orgjabref implements ~~ change in changelogmd described~~ not relevant existing tests are still passing ~~ ~~ manually tested changed features in running jabref helpjabreforg ~~ if you changed the localization did you run gradle ate ~~ when merging old prs please use git config global mergerenamelimit
2580.0,2583,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,keyword special field synchronization synch should now work appropriatelyfew questions here koppor and all others if keyword sync is enabled there is the possibility that we have multiple rank rank keywordsonly the first one is synched with the special field was this always like this seems like a bug to me if we change the preferences from write special fields to file to keyword synchronization the data gets lost did i introduce this or was this a bug lenhard talked to koppor this was always the case writable fields and keyword fields were never synchronized we have to defer this until a reimplementationsee
2571.0,2586,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,and another unhandled exception fix two unhandled exceptions stringindexoutofboundsexception reported in the forum easy fix by illegalargumentexception reason was that the writing code threw a illegalargumentexception when the field content contains unbalanced braces ie title {some text containing { } however illegalargumentexception is a runtime exception and so it was easy to miss that one should catch this exception properly fixed by introducing the checked exception invalidfieldvalueexception in the longer term we should probably replace this check completely by the integrity checkerrest is a bit of automatic code reformat that my intellij now performs for some reason on every commit change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate i considered to remove the new exception but in the end decided to keep it as i outlined above these checks should be done as integration checks and dont throw an exception in order to locate these bad checks i left the exception but marked it as deprecated
1904.0,2588,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,implement filter groups add textbox add the bottom of the groups panel which allows for filtering the groups by name implements snipimage change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate great idea however i would place the search bar on top of the screen and not at the bottom or alternatively is there a way to reuse the existing search bar and add an option to search for groups maybe its indeed a good idea to move the search bar and button to the topas this is an easy change i would postpone it for the moment and see what kind of further user controls are necessary in the group pane on the bottom looks good to me i think having the search box at the bottom is fine for now since we can also change it easilythe feature works nicely with normal size bib files but i just checked it with the large bib file and there the feature scales very badly if i enter something into the search field it freezes and nothing happens for one or two minutes until the rearrangement of the groups appears as desired do you see a chance to speed this up maybe some parallelism using parallel in streams could help looks like other people see a group related performance degradation so this is most likely not specific to this pr and you could go for a mergehowever we really need to follow up with a performance improvement pr since as indicated in the degraded performance for large bibs is expected at the moment and will be tackled separately i think this is ready for merge which i am doing right away one suggestion as i just stumbled over it i think the searching should be case insensitive although this might further slow down the searching should the performance issue with the groups filtering which is still massive also be added to the milestone aegit i am not exactly sure which issue you are referring to but yes we should try to improve performance before a final release so if there is an open issue that should be in please point me to it lenhard the performance issue im referring to happens with large databases k entries ~ k static groups in conjunction with the groups filtering when you try to find a group using the newly implemented groups search filter you have to wait for several minutes for the search to complete during that time jabref behaves as if it had crashed you mentioned this problem yourself in this comment i open a new ticket for this aegit yes please open a new ticket for this so that we do not forget it done https githubcom jabref jabref issues
2596.0,2601,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,remove ordinalstosuperscriptformatter from recommended biblatex save actions the latextounicode is conflicting with the ordinalstosuperscriptformatter but both are recommended for the same fields for biblatex this pr removes the latter since biblatex is usually used together with utf and unicode conversion should be sufficient i see that this is an issue the initial idea is as follows no bibentry should contain latex encoded umlauts each bibentry should use superscripts whereever possiblewhy is this not possible any more why cant i have properly formatted bibentries with jabref any more thats really weird i never had problems with that setting yeah i worked with that for ages 🌞 is this maybe due to the new lib yes i would expect that this is due to the new lib i assume that it leads to the following ordinals formatter converts nd to \textsuperscript{nd} latex formatter converts \textsuperscript{nd} to ⁿᵈ ordinals formatter interprets ⁿᵈ as nd and converts it to \textsuperscript{nd} and so oni might be wrong though i did not debug this siedlerchr koppor do you have problems with it now what would you recommend instead when using the defaults in the cleanup entries dialog everything works fine it is possible to have different defaults for save actions and for cleanup i really need that functionality koppor the problem are the defaults for biblatex not for bibtex which are depicted in your screenshot abovean alternative solution and maybe even a better one might be to have the ordinals formatter correctly recognize ⁿᵈ as ordinals so that it does not try to replace that should be doable but right now i cannot make any promises time wise so if anybody wants to take this over be my guest i am not sure whether all unicode fonts support ⁿᵈ therefore i really like the idea to have the ordinals formatter recognize that i second jörgs and tobias opinion i really like the ordinals to suprscript formatter as it provides great formatted bibliographiespeople write nd conference on something which should appear as ⁿᵈ conference on something in the proceedings if i understand the fix correctly biblatex papers wont have the superscript more or less automatically from now onsince most publishers use bibtex the solution for me is to have an unclean personal biblatex file and always to the bibtex conversion when working on a paper the superscript will be injected when copying the entry to the paper by a cleanup https githubcom jabref jabref issues
2589.0,2610,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,fix title related key patterns in bibtexkeypatternutil related to and the class bibtexkeypatternutil ive added cases for title and camel to try and make them conform to the documentation was also working on this issue here i found out that caseformatlower_camelto caseformatupper_camel entrygetfield fieldnametitle orelse replaceall \\s didnt work because to be able to transform the title into upper_camel this way the title has to be in lower_camel case initially which is often not the caseive added some test cases and changed a few others to conform to the documentation i still need to take a look at the failing tests change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate codewise looks good 👍 thank you very much for your contribution would you please check the failing tets just click details on the red marked travis build and you are able to see the log from what i saw there is jut another unit test which tests key generation which has to be adapted thanks ill try to fix it tomorrow 👍 siedlerchr ive taken a look at the failing tests and after making a small change to the code and to some tests its now workingsome tests failed because most of the formatter classes only work if the input is a non concatenated string from my point of view it looks good however another dev should take a look too if you could just add a changelog entry it would be nice otherwise we can create it on merge i wonder whether it would be possible to add test cases to makelabelwithdatabasetestjava with all patterns listed at saw that you also added camel and added a test for that in bibtexkeypatternutiltestjava to test the user experience i would like to ask to add some tests for that in makelabelwithdatabaseteststrangely camelequals val is not test covered even though it should grabbed_ it is too much effort we can just go ahead and merge i have added a test for the camel case to makelabelwithdatabasetestjavahope the camelequals val is covered now are there any additional test cases i should addedit about checking all the patterns listed at i can work on that but im pretty busy the next couple of daysso id rather have this merged now and work on adding the additional test cases later yeah its covered go ahead with the merge and look forward to other tests general improvements we have a huge list of smaller tasks at you for the good work we just discovered that our documentation was wrong and that camel should be a modifier title camel it should work with title capitalize see hmm ok ive responded in the issue since it is not entirely clear to me what has to happen
2604.0,2610,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,fix title related key patterns in bibtexkeypatternutil related to and the class bibtexkeypatternutil ive added cases for title and camel to try and make them conform to the documentation was also working on this issue here i found out that caseformatlower_camelto caseformatupper_camel entrygetfield fieldnametitle orelse replaceall \\s didnt work because to be able to transform the title into upper_camel this way the title has to be in lower_camel case initially which is often not the caseive added some test cases and changed a few others to conform to the documentation i still need to take a look at the failing tests change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate codewise looks good 👍 thank you very much for your contribution would you please check the failing tets just click details on the red marked travis build and you are able to see the log from what i saw there is jut another unit test which tests key generation which has to be adapted thanks ill try to fix it tomorrow 👍 siedlerchr ive taken a look at the failing tests and after making a small change to the code and to some tests its now workingsome tests failed because most of the formatter classes only work if the input is a non concatenated string from my point of view it looks good however another dev should take a look too if you could just add a changelog entry it would be nice otherwise we can create it on merge i wonder whether it would be possible to add test cases to makelabelwithdatabasetestjava with all patterns listed at saw that you also added camel and added a test for that in bibtexkeypatternutiltestjava to test the user experience i would like to ask to add some tests for that in makelabelwithdatabaseteststrangely camelequals val is not test covered even though it should grabbed_ it is too much effort we can just go ahead and merge i have added a test for the camel case to makelabelwithdatabasetestjavahope the camelequals val is covered now are there any additional test cases i should addedit about checking all the patterns listed at i can work on that but im pretty busy the next couple of daysso id rather have this merged now and work on adding the additional test cases later yeah its covered go ahead with the merge and look forward to other tests general improvements we have a huge list of smaller tasks at you for the good work we just discovered that our documentation was wrong and that camel should be a modifier title camel it should work with title capitalize see hmm ok ive responded in the issue since it is not entirely clear to me what has to happen
2600.0,2611,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,fix exception when parsing groups which contain a top level group fixes the import of the problem occurred when after the definition of a subgroup of level a group definition with level followed explicitgroup \ \ explicitgroup \ \ explicitgroup \ \ change in changelogmd described ~~ ~~ manually tested changed features in running jabref~~ helpjabreforg ~~ if you changed the localization did you run gradle ate ~~ failing test was google scholar
2501.0,2614,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,cleanup window has a scrollbar now fix for issue change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate it should be fixed now thanks again for your contributionill merge this in as the failing google scholar tests are not related to your changes
2613.0,2623,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix provided a macos specific routine for opening tex editors to import citations to the solution has been tested with texstudio and texmaker change in changelogmd described manually tested changed features in running jabref looks good to me as a small fix in general i wondered if it isnt useful to integrate the pushtoapplication somewhere in the desktopos classes i mean there are already methods for opening a file with an application for each os lgtm 👍 would also love to see more os specific stuff integrated in the desktop classes
2572.0,2625,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,change dialog of download fulltext to save dialog fix for when running get fulltext the dialog is now a save dialog which enables to select a different folder or even a different filename the initial filename which jabref assigns is now also visible in the file dialog change in changelogmd described~ ~~ manually tested changed features in running jabref~ helpjabreforg ~ if you changed the localization did you run gradle ate ~ savefile https cloudentcom assets cd e ed d c png https cloudgithubusercontentcom assets ed a e e a be bd eaapng lgtm 👍
1173.0,2634,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,finally write the new group properties to the bib file icon with color description expanded status and automatic groups serialize and parse icon with customizable color that is shown in the groups panel implements a feature request in the forum description text that is shown on mouse hover implements old feature requests and automatic groups that automatically create subgroups based on a certain criteria eg a subgroup for every author or keyword implements and expansion status implementing these changes i had to introduce a new staticgroup label in the bib file that replaces the old explicitgroup the problem was that the old group with legacy bib references explicitgroup staticgroup\ \ \ \ \ otherwise couldnt be distinguished from a new explicit group with icon and color staticgroup staticgroup\ \expansion\icon\color\description\ i think we really should switch to at some point change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate codewise lgtm just one thing i dont get from your description the old groups can be imported right what happens when you modify one of these old sub groups does it get changed to a new group thenplease take a look at the codacy checkstyle failures yes the old line explicitgroup in the file will automatically replaced by staticgroup when you save the bib file besides the minor differences outlined above they are treated completely the same and this change is only related to parsing serialization in particular there is no new staticgroup class fixed the imports
1428.0,2634,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,finally write the new group properties to the bib file icon with color description expanded status and automatic groups serialize and parse icon with customizable color that is shown in the groups panel implements a feature request in the forum description text that is shown on mouse hover implements old feature requests and automatic groups that automatically create subgroups based on a certain criteria eg a subgroup for every author or keyword implements and expansion status implementing these changes i had to introduce a new staticgroup label in the bib file that replaces the old explicitgroup the problem was that the old group with legacy bib references explicitgroup staticgroup\ \ \ \ \ otherwise couldnt be distinguished from a new explicit group with icon and color staticgroup staticgroup\ \expansion\icon\color\description\ i think we really should switch to at some point change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate codewise lgtm just one thing i dont get from your description the old groups can be imported right what happens when you modify one of these old sub groups does it get changed to a new group thenplease take a look at the codacy checkstyle failures yes the old line explicitgroup in the file will automatically replaced by staticgroup when you save the bib file besides the minor differences outlined above they are treated completely the same and this change is only related to parsing serialization in particular there is no new staticgroup class fixed the imports
210.0,2639,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,add option to copy title of bibentries implements issue from koppor an option to copy the title of a bibtex entry when right clicking one or more to the clipboardalso adds the option to copy the title using edit copy title edit_menu change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate so as we all agreed on this and the code is looking good i will merge this in nowthank you very much for your contribution
2573.0,2641,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,improve issue reporting a bit see i also wanted to add the log details to the report without the necessity to paste them later on dunno why this was implemented this way initially see however the explorer will cut off the arguments at some point so this did not work for mei think it is not convenient if the user needs to add this info manuallymaybe someone else has an idea how to change thisi still think the current addition for now https cloudentcom assets d b f e ea a c png image https cloudgithubusercontentcom assets e d f e c f ef dcf a png tobiasdiez actually it is not the restriction of the url which is quite high over i think but the call from the command line eg explorerexe seems like the explorer does not take such a long argument from my point of view looks good will merge it in now
2484.0,2644,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,refactor oo connection also trying to simplify oo detection logic removed cancel option in auto detection logic removed some of the preferences variables for oo directories and try to keep only the root directory and search for the necessary files inside this directory added two file finder helper methods inside fileutil lots of variable method and class renamings used javanio were possible some graphical ui improvementstested on windows with libreoffice and multiple installations windows open office will only work with bit jre javalangunsatisfiedlinkerror c \program files x \openoffice \program\jpipedll cant load ia bit dll on a amd bit platform linux libreoffice unoiljar is missing however it would even work without that jar not sure whats the problem here and why it is gone two other jars java_uno and unoloader are there looks like we can maybe include the uno libraries from gradle rather than loading them from the classpath of the installation maybe a license problem koppor for ubuntu you need to install the additional package linux open office osx openoffice osx libreoffice jabref developers chochreiner i think this has improved quite a bit now need your help on a few question especially libreoffice linux jar poblem and your testing here i can test windows and ubuntu with libre office regarding the inclusion of jars arent the jars version depended on the installed version of open office libre office open office works fine on macoslibreoffice cannot be detected automatically chochreiner great thanks is libreoffice missing the unoiljar inside the program classes folder probablythe logic basically is look inside applications for folder names that contain case insensitive libreoffice openoffice folder names check for sofficebin executable mostly inside program check for the uno jars unoiljar jurtjar juhjar ridljar mostly inside prgram classes libreoffice seems to have a new internal package structure compared to oothey have migrated to dylibs hm im not sure what this means for our current logic as far as it is implemented right now every connection will fail if any of those libs are missing still it was perfectly fine for a few tests even without the unoiljar libreoffice provides this libs to his project the libs can be found search for the libreoffice jars unoiljar juhjar jurtjar ridljar unoloaderjar you find them here macos applications libreofficeapp contents resources java ubuntu usr lib libreoffice program classes windows c \program files\libreoffice \program\classes\ siedlerchr i installed lo on windows and ubuntu and the unoiljar is missing the rest is there stefan kolb under windows lo bit the unoiljar is there in c \program files\libreoffice \program\classes for ubuntu you need to install the additional package siedlerchr hm thats bad for us as the user needs to install that manuallyprobably there is an equal problem with osx i can confirm that all jars are availalable in applications libreofficeapp contents resources java we then should add this at least for linux to the installation instructions that the common java package is required chochreiner hm ok then the automatic detection should work siedlerchr tobiasdiez i have added a new directory chooser in the fx dialog service can you please take a look one thing that i noticed is that all of these dialogs have no parent ie not model therefore hide in the background if the user clicks somewhere else dunno if we want them to behave like this the openoffice provides both sofficebin and soffice libreoffice only provides soffice with this fix the automatic detection works for me chochreiner ah nice thanks so much christoph jabref developers otherwise im done with this thanks everybody for your help and input 😄 👍 i also added our finds to the documentation under __known issues__
2455.0,2645,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,add crossref as fetcher for everything id entry search based amounted to an almost rewrite of the existing crossref fetcher then adding the new functionality was done in lines 😄 besides this change i have done a few refactorings related to fetchers and the doi more fetcher things in logic entryfetchers webfetchers and moved the identifier classes from logic to model this pr also contains commits from my previous prsince well i will never learn it change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate also the diff is hardly reviewable tho this is not your fault
2483.0,2659,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,oo formatting openoffice text formatting now handles nested tags properly it was a set so nested tags were not kept and consequently the first closing tag removes both opening tags formerly some test text i i now i ii i
2660.0,2661,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,add possibility to clear the log at runtime tobiasdiez the dialog is not modal but does not update itself when new events arrive ie needs to be closed and opened again to see new events is this expected can we fix this yeah stefan kolb is now an active javafx developer 😼 code looks good so ill merge this actually new logs should be displayed automatically in the console this is why it is modal thus this is probably a bug can you please open a new issue i dont have time right now to further investigate this thanks
2599.0,2666,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,add sorting of all groups and subgroups recursively implements some features from recursively sort all groups or selected groups replaced screenshot the sorting is not always directly correct visible after sorting this is somehow an update problem of the gui i think when you switch db back and forth its correctly there ~~ change in changelogmd described~~~~ ~~ manually tested changed features in running jabref~~ helpjabreforg if you changed the localization did you run gradle ate yeah i will change that however the fxml tag are not in the formatting yeti will try to change that as wellam vorm schrieb tobias diez tobiasdiez approved this pull requestthe code looks good i would however argue that sort subgroups shouldsuffice if you want to sort the whole tree then just right click theroot and maybe add recursively to the menu text to make it a bit clearerby the way we should discuss at some point which other menu entries makesense and which we should remove instead of reimplementing them eg idont see a point in the move actions in src main java org jabref gui groups grouptreecontrollerjava grouptree fxml private treetablecolumn maincolumn fxml private treetablecolumn numbercolumn fxml private treetablecolumn disclosurenodecolumn fxml private customtextfield searchfield fxml private treetableview grouptreeplease leave the formatting as it is right now it is kind of ajavafx thing that normally the fxml tag is onthe same line and i like it that way because otherwise the private fieldsdeclaration takes more space —you are receiving this because you authored the threadreply to this email directly view it on github mutethe thread tobiasdiez changed localization but i dunno how to display the menu entry only when the root nod eis selectedi read about adding a change listener and then setting the contextmenu however i am not sure how that plays together with the binding stuff in createcontextmenuforgroup you can use isroot of the groupnodeviewmodel group to determine if the right clicked group is the root or notand then create the menu depending on this valuehowever i would completely leave of the sort subgroups option i thin we should stuck with simply having the sort groups recursively then we could omit the explicit chek for root node
2667.0,2681,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,and fix swing errors are catched properly and without freezing hopefully fixes that the error console is not updated properly as well as that swing errors lead to frezzing at least for me it works now without problems stefan kolb lynyus can you please also check itfor the error console i took the suggestion by matthiasgeiger the freezing after a swing message occurred since ̀ loggerwarn no localized message exception message defined falling back to getmessage lead to recursive calls actually log j has some logic to prevent deadlocks but these dont take effect since the original message is thrown in the swing thread while the above no localized messsage is posted in the javafx thread i simply changed it to log level debug which effectively hides it in most cases as a positive side effect the scroll issue mentioned in is also fixed change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate will look at it console update seems to be fixed unavailable fetcher results in normal console log again without ui freezes matthiasgeiger you are right my changes are more a workaround than a proper solution however since the deadlock only appears if an exception is logged in the swing thread and afterwards the guiappender also logs something i decided not to invest more time probably a application wide lock for the appender is needed
2680.0,2681,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,and fix swing errors are catched properly and without freezing hopefully fixes that the error console is not updated properly as well as that swing errors lead to frezzing at least for me it works now without problems stefan kolb lynyus can you please also check itfor the error console i took the suggestion by matthiasgeiger the freezing after a swing message occurred since ̀ loggerwarn no localized message exception message defined falling back to getmessage lead to recursive calls actually log j has some logic to prevent deadlocks but these dont take effect since the original message is thrown in the swing thread while the above no localized messsage is posted in the javafx thread i simply changed it to log level debug which effectively hides it in most cases as a positive side effect the scroll issue mentioned in is also fixed change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate will look at it console update seems to be fixed unavailable fetcher results in normal console log again without ui freezes matthiasgeiger you are right my changes are more a workaround than a proper solution however since the deadlock only appears if an exception is logged in the swing thread and afterwards the guiappender also logs something i decided not to invest more time probably a application wide lock for the appender is needed
2676.0,2684,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,fileannotationtab now only shows the filename not the full path okay lgtm
1497.0,2688,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,export single corporate author to ms office xml if the author in jabref is enclosed in curly braces eg {jabref developers} it is now recognized as corporate author and exported in the corresponding fieldthis should also work for editor and other ms office author fields refs change in changelogmd described ~~ ~~ manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate ~~ tobiasdiez i now used the author authorlist parsing classes i created a new class for msbib which is essentially a wrapper class around the author class but handles a few more things only relevant to ms bib checking for corporate authors is not possible inside the author parser as there are surrounding braces already stripped on calling good job code looks ok now and only fetcher tests fail merge
628.0,2703,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,implement hierarchical keywords the automatic keywords group now supports hierarchical keywords the changes mainly concentrate on the keywords classso this may have some unwanted side effects in other parts but i didnt noticed anything unusual in my tests note bib files containing an automatic keyword from prior tests can no longer be opened and the lines containing automatickeywordgroup have to be deleted change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate note bib files containing an automatic keyword from prior tests can no longer be opened and the lines containing automatickeywordgroup have to be deletedisnt there a possibility to migrate this from a user point of view this is not really acceptable matthiasgeiger i formulated it a bit awkwardly automatic keywords groups are a new feature in so this only hits users of the current development version not users of
2664.0,2711,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,avoid conversion of single underscores single underscores that are not followed by { are not converted to unicode during the latex to unicode conversion this is not actually correct according to the rules of latex but seems to be an important exception required by our usersthis is achieved by the following replace all single underscores with jabrefunderscore do the unicode conversion replace jabrefunderscore with an underscoretodo we should find a better magic word instead of jabrefunderscore because every character will be processed by latex unicode and that costs performance however it should still be long and unique enough so that we avoid accidental conversions suggestions anyone change in changelogmd described manually tested changed features in running jabref what about the unicode replacement char excellent idea siedlerchr i have implemented this using the replacement char and it still works as discussed in the devcall this can be merged aber fixing checkstyle
2617.0,2719,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,extend architecture tests to javafx and javafxcollections extends the architecture tests to also cover javafx and javafxcollections as discussed in it seems that it is high time for this since javafx classes are already being misused as this pr uncovers thus this currently fails the build the misuses are orgjabreflogicexportergroupserializer groupserializertest groupsparsertest uses javafxscenepaintcolor orgjabreflogicjournalsabbreviation uses javafxbeanspropertysimplestringproperty test orgjabreflogicl nlocalizationparser uses fxmlloader platformimplalthough we might think about making exceptions for the beans and tests i dont see why the color class should be directly accessed in the gui change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for your reply looking at the color class it is just a representation of the rgb code so not too problematic i am still not sure assuming we would switch to a new gui technology would we be using javafxcolor objects or would we have to refactor the model classes to only use the rgb code string i would really like to have a third opinion from someone from jabref developers on this so that we can sort of say that we have a majority consensus i dont think very highly of our custom event bus and have always said so so bean properties would be acceptable to me especially considering the fact that we allow observable collections which are essentially just bean data structures it might make sense to exclude the whole test sources from the architecture tests imho they are not really relevant for static architecture checks i will have a look at that i have been thinking a little more about color isnt this the very same thing as we have in there we also have all the color codes but in the gui package and not in model so what is our reasoning to allow the javafx version of color in model but not the awt version also had we used the awt version in model wouldnt that have meant that we would have had to rewrite all such usages for the javafx migration if yes isnt that a good argument for not allowing the javafx version of color in modeland interestingly i found this this is a plain violation of our architecture rules tobiasdiez did you do the import like that on purpose so that the tests do not find it or was that an accident i think the issue with the color class is that previously there was no need to have anything color related in the model as no class in model relied upon it thus there was never situation where the usage of awtcolor in model was on the table from an architectural standpoint the cleanest solution is probably to implement our own version of color in model and use this the gui contains then a converter from this color to whatever color is used in the corresponding ui framework however this is additional work and apart from making a migration to a new gui easier i dont see any advantages simonharrer as i have our discussion about various architectural points in good memory i would highly value your opinion on this matter if you find the time to look into it i cant remember that i was creative enough to use the full path to hide the dependency from our architecture tests but good to know that this works i will now definitely ab use it and make my life way easier 😄 of course i will fix it tomorrow tobiasdiez the fix will go into this pr color to add it as exception because it is just a data model i would not implement a separate color class even though this would be the cleanest solution effort saving beans to allow them tests yes please exclude them side comment macker seems to be a tool which also implements architecture checks example ok it is outdated but i thought it is nice to know 😇 i still think that making an exception for color is a bad decision that will come back to bite us in the course of moving to javafx we are currently losing a lot of independence in our model packages something that we invested a lot of effort when trying to get rid of the swing dependenciesbut if this is the consensus in the team ill bow to that i created exceptions for the remaining fx classes and this pr should be ready to go when the build succeeds on travis
2722.0,2727,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fixed freeze on mac os x when creating editing groups fixed that jabref for mac os x was freezing not responding when using the add subgroup or edit group feature also fixed some menu items which had the wrong functionality refs manually tested changed features in running jabref
2701.0,2732,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,fix too may files found i would like to offer my fix for the issue jabref would find too many files when they are search with the year _ auth pattern the reason seems to be a null database passed to the bibtexkeypatternutilmakelabel bibentry string character bibdatabase method and a null pointer exception is triggered as a result the auth part of the pattern was erased and ignored with the suggested fix jabref uses the auth part of the pattern and finds just the files with the matching author as expected a relevant unit test was added no other tests were broken change in changelogmd described no functionality changes restored the previous state unit test added no gui changes none helpjabreforg the issue still open if you changed the localization did you run gradle ate no localisation changes thank you very much for your contribution 👍 codewise it looks very good to me if the test passes and another dev gives his okay we can merge it thanks for the contribution sauliusg great when users find an issue and even fix it themselves the reason seems to be a null database passed to the bibtexkeypatternutilmakelabel bibentry string character bibdatabase method and a null pointer exception is triggeredi will investigate this tomorrow because im not entirely sure if your fix solves the symptoms or we should dig a bit deeper and eliminate the main problem which could be that bloody null database dear siedlerchr dear lynyusthank you for the instant replyi have got feedback from codacy and fixed removed an unused variable from the new unit test also i added another second unit test to cover the second if statement added by me sorry if it breaks the changes approved status i will investigate this tomorrow because im not entirely sure if your fix solves the symptoms or we should dig a bit deeper and eliminate the main problem which could be that bloody null databaseplease have a look it seems to me that the null can be traced to the explicit null argument passed to it from the private static list findfile bibentry entry file directory string file string extensionregexp character keyworddelimiter method line string filenametolookfor expandbrackets filepart entry null keyworddelimiter replaceall ext_marker extensionregexp regardssaulius lynyus your suggestions sounds reasonable we should try to not pass null as an argument moreover the label generation code probably needs a complete refactoring especially get rid of the huge amount of static methods but this will be probably a bigger project while i would welcome prs from you or sauliusg in this direction i think the current pr is an acceptable workaround within the boundaries of the current code infrastructure okay lgtm i merge it in thank you very much for your contribution 👍 feel free to take a look at other issues thanks
2739.0,2744,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,null pointer exception on get fulltext fixing issue a check in the bibdatabasecontextgetfiledirectories string filedirectorypreferences method is added bibdatabasecontextjava to make sure that dbpathgetparent is not null before its toabsolutepath method is called this fixes null pointer exception when searching files for databases opened without explicit path as in the cli jabref bibliographybib commandasserts were added to make sure that dbpathgetparent and other variables are not null before invoking methods change in changelogmd described internal bug fix no functionality added changelog not changed test added to cover new code regression tests added to make sure old functionality works as before no ui changes manually tested on the linuxmint installation from the build distributions jabref devtar file helpjabreforg help pages need not be changed if you changed the localization did you run gradle ate no localisation changes thank you for the pr im not sure whether the codacy coplaint can be fixedunfortunately we want to release a beta version today since its a beta version id like to postpone your improvement please forgive me for that 😄 i hope we get the improvment in the next days the codacy complaint should be fixed by now commit deedc unfortunately we want to release a beta version today since its a beta version id like to postpone your improvement please forgive me for that smile i hope we get the improvement in the next daysno problem it would be great though if the pr is not lost smile we essentially depend on its behaviour in our use of jabref but i can easily install my local branch on our computers and install the next release as it comes outregardssaulius thank you very much for your pr i only have a few small remarks the rest looks very good to meas soon you fixed the things and the beta is out we can merge it
2095.0,2747,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,replace datenbank by bibliothek this addresses for german
2739.0,2751,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,sauliusg fix null pointer exception on get fulltext followup from sauliusg pr fix for
2766.0,2774,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,if file is not found annotations might be null still the real reason is a missing file
2777.0,2778,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,fixes handling of unknown pdannotation types refs please change method name resolve the conflict and then merge
2806.0,2816,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,date editor also accepts incomplete dates should fix and change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2825.0,2826,1,1,0,1,0,0,1,0,0,1,0,1,0,0,0,fix invalid folder when passed file path is empty string return the correct working dirfix for internal beta change only ~~ change in changelogmd described~~~~ ~~~~ ~~ manually tested changed features in running jabref~~ helpjabreforg if you changed the localization did you run gradle ate ~~ i found the problem it was not due to preferences but due to an empty filename which would create a folder outside the junit tmp dir and would stay persistent
2786.0,2845,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,implement allow selection of multiple groups this pr re implements the ability to select multiple groups users can switch between or and and selection mode in the preferences as this was the last remaining feature not implemented in the new groups interface finally most of the swing code could be removed change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for the feedback i fixed all the issues mentioned except preference changes still dont trigger a refresh of the view we just dont have a convenient interface to listen for changes in preferences and i rather not give the preference tab direct access to the groups functionality agreed the missing update after the preference change is relatively minor and id rather see effort invested into other things
2859.0,2862,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,fix export and import of ms office day year month acessed fields fix possible npe in date parsing change in changelogmd described ~~ ~~ manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate ~~ change the code to optionals merge it in now
2785.0,2864,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,implement resort groups using drag & drop with this pr it is now possible to resort groups using drag and dropwhen the user drags a group over the center of another one then the target group is highlighted as follows the source group is added as a child in contrast when the user hovers over the bottom or top part of a group then a line is added that indicates that the source group is added at this point ie between test and test in this picture image are still some problems with the selection status after a drag and drop change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for the positive feedbackill fix the not mark as dirty issue as part of as in my opinion the cleanest solution for this is a global listener instead of manually calling markaschanged after every action
2843.0,2875,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix entry editor and this was a tricky bug javafx creates empty dummy cells at the end of a list view for some reason the list view for the linked files had an initial size of e and well creating that many dummy cells takes a while probably longer than the universe took to create humans and eventually lead to a freeze of the javafx threadthe fix was easy just add maxheight and be happy finally after trying to debug the problem for ages change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2851.0,2875,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix entry editor and this was a tricky bug javafx creates empty dummy cells at the end of a list view for some reason the list view for the linked files had an initial size of e and well creating that many dummy cells takes a while probably longer than the universe took to create humans and eventually lead to a freeze of the javafx threadthe fix was easy just add maxheight and be happy finally after trying to debug the problem for ages change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2881.0,2882,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,fix loading of preferencesservice the else part tried to instantiate the interface otherwisefix for change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2890.0,2891,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,adjust tests ads fetcher returns url dblp no longer works with negative operators internal change only some adjusted tests
2854.0,2921,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,readd context menu to linked files editor this was the last feature missing from the old file list editor the old class could thus be deleted change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate codewise looks good but you do have an architectural violatin your model class depends on gui import orgjabrefguiexternalfiletypeexternalfiletype and i tested it locally apart fromt he keybindings problem it works but i found one bugi can not delete a file entry which has no underlying file just add this line in your bibdatabase and try to delete the entry then file { kitamura a supporting tool for requirements elicitation using a domain ontologypdf pdf} it gives you an error message file not found
2901.0,2923,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fix key combination related exceptions use keycombination match methodmanual tests sucessful some unit tests fail for unknown reasons change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate hm thats strange i will go deeper in thisedit i tested in on windows and i could change the key combination and after a restart of jabref the new keybindings did work i did some debuging and it turns out that its the fault of keybindingrepository getkeycombination jabref constructs the keycombination via the valuesof method eg as keycombinationvalueof ctrl c however the correct format for the valueof method is with a plus sign keycombinationvalueof ctrl c in the first example the key combination has as character ctrl c and no modifiers active while in the second case we get the expected result that the character is c and the modifier ctrl is down ah thanks for the debugging i will try to fix this i fixed this stuff and added the modifiers and now all tests including previouslly ignored work
2931.0,2935,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,open urls for recommneded articles in the browser added a generic hyperlinklistener which opens any hyperlink in a new browser windowby defeault javafx opens all urls in the same webview window change in changelogmd described~~ ~~~~ ~~ manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate ~~
2855.0,2937,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix propagation of key events back to the jabref main frame related to the new entry editorwe need to consume the key events on the jfx panel to stop propagation back to the main framefix for and the other lkeybindings ctrl c ctr x change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate this makes the add new entry dialog working again i can paste dois this is a necessary hotfix and therefore i merge before we got another review
2938.0,2939,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,ask before deleting associated files from disk in entry add new dialog describe the changes you have made here change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate we can change the text always laster but i suggest we leave it for the moment to have the functionality i just noticed that in the right click menu it is still permanently delete the local file which is kind of confusing as you later get the option to decide wheter to delete the file or just the link so to options a provide two context menus for unlink and delete local file but not the dialog you added in this pr orb rename also the context menu entrycan you please have a look and provide a follow up pr thanks yes but the dialog is still necessary when you hit the del keyam nachm schrieb tobias diez i just noticed that in the right click menu it is still permanently delete the local file which is kind of confusing as you later get the option to decide wheter to delete the file or just the link so to options a provide two context menus for unlink and delete local file but not the dialog you added in this pr or b rename also the context menu entry can you please have a look and provide a follow up pr thanks — you are receiving this because you modified the open close state reply to this email directly view it on github the thread
1323.0,2943,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,add a shortcut to quality look up full text documents this pr adds a shortcut key alt f to the function quality look up full text documents ive found that a issue was already raised in after finishing the code revision hence i happened to use the modifier alt rather than ctrl change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate ive no idea why the build fails but since these changes should not be the reason for the failing test ill merge it now
549.0,2952,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix the function edit copy bibtex key and link this pr fixes the function edit copy bibtex key and link to pass a hyperlink rather than an html statement a copied hyperlink is more useful than an html statement in practice like when writing emails this is related with change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate lgtm i just removed the comment that contained the non working code we had a discussion about such code and decided to almost always remove them as jabref was cluttered with these kind of comments can you please fix the import order see wiki on how to set up your ide and then this is ready to gowe should think about reimplementing the clipboardmanager using the javafx facilities follow up pr in this direction is highly welcome thanks again for you contribution siedlerchr thanks for the comment i was not aware of the issue tobiasdiez thanks a lot for telling me the configuration file but im not sure if i did it correctly because the only change was an addition of a blank line _ if something has to be done again please let me know everything is fine now thanks
2949.0,2957,1,0,0,0,0,1,1,0,0,1,1,1,1,0,1,fix closing entry editor with esc rename escape to esc for javafxrenamed enum variables as key for the constant was amibiuousfirst part of internal change only from the new entry editoredit you may need to reset the keybinding for close_entry_editor in the manage keybinding dialog as the old stored value from the prefs no longer works for javafx change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2968.0,2972,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,add remove link context menu entry in file editor fix for change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2960.0,2991,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,check for different editions in the duplicate check by checking for different editions before the actual duplicate checkif both bibentries have a edition field that mismatches it cannot be a duplicate change in changelogmd described
2993.0,2995,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,less backups addresses the frequent events are due to the bidirectional binding which transfers every change directly into the bibentry if we want fewer events the only solution will probably be to break the binding which would be very disappointing for the javafx implementation in my point of view the problem is not on the side of event creation after all every change should trigger an event and javafx triggers many changes imho this should be fixed in how we react to eventsi also noticed the exception but do not get a dialog this seems to happen because of the save operation invoked by the backupa solution might be to do less backups by doing backups only every x events and not for every event ignoring fieldchangeevents in the backup adding the size of the field change in the fieldchangeevent class so that you can ignore it if only character changedthis pr combines options and ie the backup manager ignores events that are very minor and only does a backup if enough of them have happened currently set to five what do you think change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2787.0,2997,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,changes in the entry editor mark the database as dirty partial fix to changes in the entry editor now mark the database as dirty this are somewhat proactive even only opening the entry editor will mark the database as changed id say this isnt a problem id rather have it do the marking than forget oneessentially this adds another listener to the properties in the entry editor that propagates the change whenever the property changes i havent figured out how to do this for groups change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate id say this is a hack whereas it is better than missing a changed state for now we should only mark the db as dirty if we really changed something im also not very happy with this solution from an architectural view why should the gui handle the dirty clean state and not the logic i would propose to add listeners to the database metadata in databasecontext which sets a corresponding flag the ui can then listen to changes of this new property and display the star in the tab accordingly the databasechangedevent is already realized with the eventbus system so it just needs a couple of listeners if i understand it correctly and one event bus can have multiple listeners for the same event ok i see so far it had been implemented only in the basepanel but i aggree that the cleanest solution is probably to track it in the database itself this wont be as quick as the current solution though the consensus seems to be that we are not going in this direction so ill close this pr
2998.0,3002,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,improve auto completion change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2970.0,3005,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,javafx replacement for file dialog the open functionality has been removed directly possible in the entry editorcontextmenu on maintable attach file now opens a file chooser dialog and afterwards this dialog for editing eg adding a description resizable to max screen size on my with x grafik describe the changes you have made here change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate discussion siedlerchr with tobiasdiez required dialog only for edit and not for adding linked files for this just create a new linked file instance with path to file and empty directory failing tests are only the l n ones from the maintable branch yeah i thought i could get rid of the old classes completely but that has to wait for a future pr as far as i remember its used in the import inspection window lot of ugly code tobiasdiez i tried to convert the editfiledialog to the new dialog structure from but i do still get an npe on loading the dialog caused by javalangnullpointerexception at orgjabrefguifilelistlinkedfileeditdialogviewinitialize linkedfileeditdialogviewjava ~ main and what is null there if line runs without any problems then the setup seems to be fine and the fxml nodes are injected maybe the description field is not defined in the fxml tobiasdiez no it fails directly in the initalize the viewmodel which gets initialized in the ctor is nullwhen debugging it crashes directly after when calling viewloaderview this load btw i noticed the same problem also occurs with the copylinkedfilesdialogview tools copy linked files ok this makes sense since the initialization method is called during viewloaderload and at this point the view model is not yet created just move the viewmodel line to the beginning of the initialization method and it should work works now i just additionally had to add a close cancel button to the dialogpane for the copyfiles because otherwise the dialog is not closeable i fixed all things open and did the renamings so i merge this now
2980.0,3007,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,add preference migration for keybdingings fix for change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2888.0,3019,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,update source tab when an entry is changed attempts to fix the remaining part of the source tab is now updated each time an entry is changed in the editorthere no part of a bibentry that represents the source tab per se to which we could bind therefore this pr adds a listener to the source tab it now listens to entrychangedevents and if the entry that it represents is changed then it updates its content change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3020.0,3024,1,0,1,1,0,1,1,0,0,1,1,1,1,0,0,link missing docbookeditors formatter in layoutentry it seems that we overlooked the createdocbookeditors layout formatter in the formatter map in layoutentry reported in change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2853.0,3030,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,fix keybinding in entry editor in localized installation check keycode to avoid localization problemsfollow up from change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate alternative solution without using the deprecated function java private optional determinekeycodefromkeyevent javaawteventkeyevent keyevent { special treatment of localized keyevents if keyeventgetkeycode javaawteventkeyeventvk_delete { return optionalof keycodedelete } return arraysstream keycodevalues filter k kgetname equals javaawteventkeyeventgetkeytext keyeventgetkeycode findfirst } but this only solves the problem for the delete key so we still might have other yet unidentified problemsso we should decide which route to take i would give a for siedlerchrs solution since we surely do not catch all possible keys and the maintable is our next target after the entry editor 😇
3035.0,3048,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,fix ads fetcher fix for change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate can we add a small test for this there are already tests present which failed before and now succeed ah right 👍
3034.0,3083,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,make font size in entry editor and group panel customizable this fix for is inspired and based on due to my limited git knowledge i was not able to directly hijack the other pr sorry lenhard change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3074.0,3092,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fetcher timestamp ok i tried to create a own preference class not sure if ive done that correctly as intended at the moment should i also replace calls to the preferences inside the general tab
3052.0,3095,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,fix for issue this is an atempt to fix the problem with entry editor focus as described in in detail when entryeditor opens up it is not focused automatically the desired behavior is to focus the first textfield on any of the entryeditor s tabsthe way the fix is implemented when entryeditor is opened the jfxpanel in which is the tabpane of the entryeditor is getting the focus the focus is given implicitly to a focustraversable node contained in the jfxpanel the selection of the node seems to be random even though consistent for a given tree of nodes as far as ive tested it consistently focuses the first textfield on any tab which is the desired behavior i make this pull requested as suggested in discussion by siedlerchr i should mention that i ran gradle check which results in tests failed in my setup but this was also the result when i ran the test before making any change change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for the pr
3063.0,3097,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,store changes in source tab when new entry is selected the problem was that the source tab only stored changes on focus change and this did not happen when you just select a new entry in the main tablethe pr modifies an attribute in the entryeditor movingtodifferententry and turns it into a booleanproperty so that you can bind to it and react to changesedit also fixes a second unreported issue now the base panel is marked as dirty when you type something in the source tabedit fixes also now the other fields tab is rebuilt whenever an other field is newly added or removed at the bibentry this is achieved with the event system and a new subtype of fieldchangedevent change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3086.0,3097,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,store changes in source tab when new entry is selected the problem was that the source tab only stored changes on focus change and this did not happen when you just select a new entry in the main tablethe pr modifies an attribute in the entryeditor movingtodifferententry and turns it into a booleanproperty so that you can bind to it and react to changesedit also fixes a second unreported issue now the base panel is marked as dirty when you type something in the source tabedit fixes also now the other fields tab is rebuilt whenever an other field is newly added or removed at the bibentry this is achieved with the event system and a new subtype of fieldchangedevent change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3103.0,3104,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,source tab doi by making sure that updates to the source tab are always performed on the fxapplication thread change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate the panel is now updated correctly however upon hitting replace entry after fetching the bibtex data there are still some exceptions log file uncaught exception occurred in thread awt eventqueue main javalangillegalstateexception not on fx application thread currentthread awt eventqueue at comsunjavafxtktoolkitcheckfxuserthread toolkitjava at comsunjavafxtkquantumquantumtoolkitcheckfxuserthread quantumtoolkitjava at javafxsceneparent$ onproposedchange parentjava at comsunjavafxcollectionsvetoablelistdecoratoradd vetoablelistdecoratorjava at comsunjavafxscenecontrolskintabpaneskin$tabheaderareaaddtab tabpaneskinjava at comsunjavafxscenecontrolskintabpaneskin$tabheaderareaaccess$ tabpaneskinjava at comsunjavafxscenecontrolskintabpaneskinaddtabs tabpaneskinjava at comsunjavafxscenecontrolskintabpaneskinlambda$initializetablistener$ tabpaneskinjava at comsunjavafxcollectionslistlistenerhelper$genericfirevaluechangedevent listlistenerhelperjava at comsunjavafxcollectionslistlistenerhelperfirevaluechangedevent listlistenerhelperjava at javafxcollectionsobservablelistbasefirechange observablelistbasejava at javafxcollectionslistchangebuildercommit listchangebuilderjava at javafxcollectionslistchangebuilderendchange listchangebuilderjava at javafxcollectionsobservablelistbaseendchange observablelistbasejava at javafxcollectionsmodifiableobservablelistbaseadd modifiableobservablelistbasejava at orgjabrefguientryeditorentryeditorreaddotherfieldstab entryeditorjava at orgjabrefguientryeditorentryeditorrebuildotherfieldstab entryeditorjava at orgjabrefguientryeditorentryeditorlisten entryeditorjava at sunreflectgeneratedmethodaccessor invoke unknown source at sunreflectdelegatingmethodaccessorimplinvoke unknown source at javalangreflectmethodinvoke unknown source at comgooglecommoneventbussubscriberinvokesubscribermethod subscriberjava at comgooglecommoneventbussubscriber$synchronizedsubscriberinvokesubscribermethod subscriberjava at comgooglecommoneventbussubscriber$ run subscriberjava at comgooglecommonutilconcurrentmoreexecutors$directexecutorexecute moreexecutorsjava at comgooglecommoneventbussubscriberdispatchevent subscriberjava at comgooglecommoneventbusdispatcher$perthreadqueueddispatcherdispatch dispatcherjava at comgooglecommoneventbuseventbuspost eventbusjava at orgjabrefmodelentrybibentrysetfield bibentryjava at orgjabrefmodelentrybibentrysetfield bibentryjava at orgjabrefguimergeentriesmergefetchedentrydialog$replaceactionactionperformed mergefetchedentrydialogjava at javaxswingabstractbuttonfireactionperformed unknown source at javaxswingabstractbutton$handleractionperformed unknown source at javaxswingdefaultbuttonmodelfireactionperformed unknown source at javaxswingdefaultbuttonmodelsetpressed unknown source at javaxswingplafbasicbasicbuttonlistenermousereleased unknown source at javaawtcomponentprocessmouseevent unknown source at javaxswingjcomponentprocessmouseevent unknown source at javaawtcomponentprocessevent unknown source at javaawtcontainerprocessevent unknown source at javaawtcomponentdispatcheventimpl unknown source at javaawtcontainerdispatcheventimpl unknown source at javaawtcomponentdispatchevent unknown source at javaawtlightweightdispatcherretargetmouseevent unknown source at javaawtlightweightdispatcherprocessmouseevent unknown source at javaawtlightweightdispatcherdispatchevent unknown source at javaawtcontainerdispatcheventimpl unknown source at javaawtwindowdispatcheventimpl unknown source at javaawtcomponentdispatchevent unknown source at javaawteventqueuedispatcheventimpl unknown source at javaawteventqueueaccess$ unknown source at javaawteventqueue$ run unknown source at javaawteventqueue$ run unknown source at javasecurityaccesscontrollerdoprivileged native method at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege unknown source at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege unknown source at javaawteventqueue$ run unknown source at javaawteventqueue$ run unknown source at javasecurityaccesscontrollerdoprivileged native method at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege unknown source at javaawteventqueuedispatchevent unknown source at javaawteventdispatchthreadpumponeeventforfilters unknown source at javaawteventdispatchthreadpumpeventsforfilter unknown source at javaawteventdispatchthreadpumpeventsforfilter unknown source at javaawtwaitdispatchsupport$ run unknown source at javaawtwaitdispatchsupport$ run unknown source at javaawtwaitdispatchsupport$ run unknown source at javasecurityaccesscontrollerdoprivileged native method at javaawtwaitdispatchsupportenter unknown source at javaawtdialogshow unknown source at javaawtcomponentshow unknown source at javaawtcomponentsetvisible unknown source at javaawtwindowsetvisible unknown source at javaawtdialogsetvisible unknown source at orgjabrefguimergeentriesfetchandmergeworkerdone fetchandmergeworkerjava at javaxswingswingworker$ run unknown source at javaxswingswingworker$dosubmitaccumulativerunnablerun unknown source at sunswingaccumulativerunnablerun unknown source at javaxswingswingworker$dosubmitaccumulativerunnableactionperformed unknown source at javaxswingtimerfireactionperformed unknown source at javaxswingtimer$doposteventrun unknown source at javaawteventinvocationeventdispatch unknown source at javaawteventqueuedispatcheventimpl unknown source at javaawteventqueueaccess$ unknown source at javaawteventqueue$ run unknown source at javaawteventqueue$ run unknown source at javasecurityaccesscontrollerdoprivileged native method at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege unknown source at javaawteventqueuedispatchevent unknown source at javaawteventdispatchthreadpumponeeventforfilters unknown source at javaawteventdispatchthreadpumpeventsforfilter unknown source at javaawteventdispatchthreadpumpeventsforhierarchy unknown source at javaawteventdispatchthreadpumpevents unknown source at javaawteventdispatchthreadpumpevents unknown source at javaawteventdispatchthreadrun unknown source uncaught exception occurred in thread awt eventqueue main javalangillegalstateexception not on fx application thread currentthread awt eventqueue at comsunjavafxtktoolkitcheckfxuserthread toolkitjava at comsunjavafxtkquantumquantumtoolkitcheckfxuserthread quantumtoolkitjava at javafxsceneparent$ onproposedchange parentjava at comsunjavafxcollectionsvetoablelistdecoratoradd vetoablelistdecoratorjava at comsunjavafxscenecontrolskintabpaneskin$tabheaderareaaddtab tabpaneskinjava at comsunjavafxscenecontrolskintabpaneskin$tabheaderareaaccess$ tabpaneskinjava at comsunjavafxscenecontrolskintabpaneskinaddtabs tabpaneskinjava at comsunjavafxscenecontrolskintabpaneskinlambda$initializetablistener$ tabpaneskinjava at comsunjavafxcollectionslistlistenerhelper$genericfirevaluechangedevent listlistenerhelperjava at comsunjavafxcollectionslistlistenerhelperfirevaluechangedevent listlistenerhelperjava at javafxcollectionsobservablelistbasefirechange observablelistbasejava at javafxcollectionslistchangebuildercommit listchangebuilderjava at javafxcollectionslistchangebuilderendchange listchangebuilderjava at javafxcollectionsobservablelistbaseendchange observablelistbasejava at javafxcollectionsmodifiableobservablelistbaseadd modifiableobservablelistbasejava at orgjabrefguientryeditorentryeditorreaddotherfieldstab entryeditorjava at orgjabrefguientryeditorentryeditorrebuildotherfieldstab entryeditorjava at orgjabrefguientryeditorentryeditorlisten entryeditorjava at sunreflectgeneratedmethodaccessor invoke unknown source at sunreflectdelegatingmethodaccessorimplinvoke unknown source at javalangreflectmethodinvoke unknown source at comgooglecommoneventbussubscriberinvokesubscribermethod subscriberjava at comgooglecommoneventbussubscriber$synchronizedsubscriberinvokesubscribermethod subscriberjava at comgooglecommoneventbussubscriber$ run subscriberjava at comgooglecommonutilconcurrentmoreexecutors$directexecutorexecute moreexecutorsjava at comgooglecommoneventbussubscriberdispatchevent subscriberjava at comgooglecommoneventbusdispatcher$perthreadqueueddispatcherdispatch dispatcherjava at comgooglecommoneventbuseventbuspost eventbusjava at orgjabrefmodelentrybibentrysetfield bibentryjava at orgjabrefmodelentrybibentrysetfield bibentryjava at orgjabrefguimergeentriesmergefetchedentrydialog$replaceactionactionperformed mergefetchedentrydialogjava at javaxswingabstractbuttonfireactionperformed unknown source at javaxswingabstractbutton$handleractionperformed unknown source at javaxswingdefaultbuttonmodelfireactionperformed unknown source at javaxswingdefaultbuttonmodelsetpressed unknown source at javaxswingplafbasicbasicbuttonlistenermousereleased unknown source at javaawtcomponentprocessmouseevent unknown source at javaxswingjcomponentprocessmouseevent unknown source at javaawtcomponentprocessevent unknown source at javaawtcontainerprocessevent unknown source at javaawtcomponentdispatcheventimpl unknown source at javaawtcontainerdispatcheventimpl unknown source at javaawtcomponentdispatchevent unknown source at javaawtlightweightdispatcherretargetmouseevent unknown source at javaawtlightweightdispatcherprocessmouseevent unknown source at javaawtlightweightdispatcherdispatchevent unknown source at javaawtcontainerdispatcheventimpl unknown source at javaawtwindowdispatcheventimpl unknown source at javaawtcomponentdispatchevent unknown source at javaawteventqueuedispatcheventimpl unknown source at javaawteventqueueaccess$ unknown source at javaawteventqueue$ run unknown source at javaawteventqueue$ run unknown source at javasecurityaccesscontrollerdoprivileged native method at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege unknown source at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege unknown source at javaawteventqueue$ run unknown source at javaawteventqueue$ run unknown source at javasecurityaccesscontrollerdoprivileged native method at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege unknown source at javaawteventqueuedispatchevent unknown source at javaawteventdispatchthreadpumponeeventforfilters unknown source at javaawteventdispatchthreadpumpeventsforfilter unknown source at javaawteventdispatchthreadpumpeventsforfilter unknown source at javaawtwaitdispatchsupport$ run unknown source at javaawtwaitdispatchsupport$ run unknown source at javaawtwaitdispatchsupport$ run unknown source at javasecurityaccesscontrollerdoprivileged native method at javaawtwaitdispatchsupportenter unknown source at javaawtdialogshow unknown source at javaawtcomponentshow unknown source at javaawtcomponentsetvisible unknown source at javaawtwindowsetvisible unknown source at javaawtdialogsetvisible unknown source at orgjabrefguimergeentriesfetchandmergeworkerdone fetchandmergeworkerjava at javaxswingswingworker$ run unknown source at javaxswingswingworker$dosubmitaccumulativerunnablerun unknown source at sunswingaccumulativerunnablerun unknown source at javaxswingswingworker$dosubmitaccumulativerunnableactionperformed unknown source at javaxswingtimerfireactionperformed unknown source at javaxswingtimer$doposteventrun unknown source at javaawteventinvocationeventdispatch unknown source at javaawteventqueuedispatcheventimpl unknown source at javaawteventqueueaccess$ unknown source at javaawteventqueue$ run unknown source at javaawteventqueue$ run unknown source at javasecurityaccesscontrollerdoprivileged native method at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege unknown source at javaawteventqueuedispatchevent unknown source at javaawteventdispatchthreadpumponeeventforfilters unknown source at javaawteventdispatchthreadpumpeventsforfilter unknown source at javaawteventdispatchthreadpumpeventsforhierarchy unknown source at javaawteventdispatchthreadpumpevents unknown source at javaawteventdispatchthreadpumpevents unknown source at javaawteventdispatchthreadrun unknown source indeed thanks for pointing out should be fixed nowit seems that we i need be more careful when updating fx components based on model events
3101.0,3105,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,remove entries from prior groups if move operation is selected there is one problem left to conclude this it does the proper operation on the selected entries and updates the group tree however it does not update the coloring in the group tree tobiasdiez could you give me a hint on how i can achieve this change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate unfortunately using the statemanager does not solve the coloring for mebut to be honest it seems rather broken anyway irrespective of this pr i have a database with entries and groups the only way to get a coloring is to click an entry with a group in a newly started jabref without opening the entry editor that coloring never changes even if i click different entries does coloring actually work for youi think this pr is ready to go someone else should check the fix in a running jabref the coloring problem should be investigated in another issue pr in general it works for me but i also noticed that sometimes the color is not updated probably related to https githubcom jabref jabref issues
1903.0,3111,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,trigger group display update when grouping changes attempts to makes the maintable update whenever grouping changes and not just when group selection changes change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3113.0,3116,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,move event processing from source tab into entry editor solves the most critical part of the source tab did not properly unregister itself from the event bus for some reason i did not manage to get this working when the source tab takes care of deregistration therefore i moved all event handling out of the source tab and into the entry editorusing jvisualvm i can see that garbage collection works with this pr cycling through the main table with the entry editor open increases used ram when you force garbage collection the used heap goes down to close to zero again instead of staying at a higher plateau see attached screenshot heap this fixes the memory leak the overall heap size doesnt go down but thats a different issue change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate as this is a small but important change i merge this i in now
2718.0,3120,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,additional filter functionality for check integrity popup i added new filter all and filter none buttons they can be clicked by the user tocheck uncheck all options in the filter menu when one of the buttons gets clicked the system will iterate through the existing menu components and toggle the checkmarks and info displayedi wasnt sure on the best placement of the buttons in the window so went with the simplest solution localization info with text for aforementioned buttons we still have many open translations so that is not a con thefeature has a very low risk break anything i would just include itam schrieb jörg lenhard lenhard approved this pull request thanks for your pr the simplest solution is usually best i have tested the pr locally and it works the code looks fine as well jabref developers wanted to do a feature freeze for so should we wait with merging this i would say we can merge it anyway after all its not too big the only problem is that the translators would need to do another round — you are receiving this because you are on a team that was mentioned reply to this email directly view it on github ok perfect andrew lev thank you very much for your contribution youre very welcome to provide more koppor does the timeframe for the release of allow a call to translators absolutelyam schrieb mlep koppor allow a call to translators — you are receiving this because you were mentioned reply to this email directly view it on github the thread
3136.0,3137,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,re add normalize to bibtex name format context menu item and menu i… …tem tooltips also re adds tooltips to context menu items which had been commented out change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate now we only need to fix the underlying algorithm i guess exactly but thats not part of this pr
2941.0,3141,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,increase size of file and keywords editors in the new entryeditor we have the problem that sometimes text in the textareas is hard to read because the areas are very narrow the reason for this is that java tries to fit them in the available display space examples this pr sets a minimum size for all textareas in the entryeditor the value of px is rather arbitrary and ill be happy to get some thoughts if this is good or if more or less is desirable with this minimum size all textareas are nicer to read even in the cramped up general tab the only problem is that you now need to scroll in the general tab most of the time all in all i think this should definitly go into change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate to be honest im not a big fan of the increased size i prefer to have as much information on the screen as possible and not to have to scroll on the other hand i acknowledge that the current layout is also suboptimal as the text fields are not expanding on their own when they contain much information maybe it is already enough to increase the prefered height instead of minimum also you should be able to increase the size of the files panel independently of the other fieldsfurthermore it is probably better to use scaling units like em instead of pixels tobiasdiez ok you have the same opinion as koppor i guessincreasing the preferred height didnt help unfortunately we can leave most field editors as they are but we have to increase the size of the file and the the keywords editor those are the two editors in the cramped general tab where users could enter information with more than a single line that doesnt look good at all and really does annoy usersive tried to change just these two editors in code but failed whenever i call setminwidth in or change the minheight in the related fxml file the min height of all field editors in the tab increase any hint the problem is probably where the rows are set to have the same height quick idea if the row constraints are the problem it might be an option to use two rows for the file keyword editors matthiasgeiger not sure if thats easily possible the best solution is probably to write new subclass of entryeditortab or extend the fxfieldeditor by a getweight method which you can use in it is already sufficient to remove these row constraints although there was probably a reason why i added them in the first place ok ive implemented a hack that assigns twice the space of normal rows to the keyword and file field editorsas i said this is a hack but before i turn this into something more acceptable along your suggestion tobiasdiez i would like to get confirmation from the team that this is a solution that we can live with visually in the jabref ui if not than i am just wasting my time with gui hacking and now i refactored it anyway jabref continues to ruin my lunch time i tried out the new solution locally and it looks good enough on two column tabs the things shrink too much but we discussed in the devcall that it is difficult to determine the right min height screen resolution etc so good to merge as discussed in the dev call i am merging this now
3117.0,3141,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,increase size of file and keywords editors in the new entryeditor we have the problem that sometimes text in the textareas is hard to read because the areas are very narrow the reason for this is that java tries to fit them in the available display space examples this pr sets a minimum size for all textareas in the entryeditor the value of px is rather arbitrary and ill be happy to get some thoughts if this is good or if more or less is desirable with this minimum size all textareas are nicer to read even in the cramped up general tab the only problem is that you now need to scroll in the general tab most of the time all in all i think this should definitly go into change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate to be honest im not a big fan of the increased size i prefer to have as much information on the screen as possible and not to have to scroll on the other hand i acknowledge that the current layout is also suboptimal as the text fields are not expanding on their own when they contain much information maybe it is already enough to increase the prefered height instead of minimum also you should be able to increase the size of the files panel independently of the other fieldsfurthermore it is probably better to use scaling units like em instead of pixels tobiasdiez ok you have the same opinion as koppor i guessincreasing the preferred height didnt help unfortunately we can leave most field editors as they are but we have to increase the size of the file and the the keywords editor those are the two editors in the cramped general tab where users could enter information with more than a single line that doesnt look good at all and really does annoy usersive tried to change just these two editors in code but failed whenever i call setminwidth in or change the minheight in the related fxml file the min height of all field editors in the tab increase any hint the problem is probably where the rows are set to have the same height quick idea if the row constraints are the problem it might be an option to use two rows for the file keyword editors matthiasgeiger not sure if thats easily possible the best solution is probably to write new subclass of entryeditortab or extend the fxfieldeditor by a getweight method which you can use in it is already sufficient to remove these row constraints although there was probably a reason why i added them in the first place ok ive implemented a hack that assigns twice the space of normal rows to the keyword and file field editorsas i said this is a hack but before i turn this into something more acceptable along your suggestion tobiasdiez i would like to get confirmation from the team that this is a solution that we can live with visually in the jabref ui if not than i am just wasting my time with gui hacking and now i refactored it anyway jabref continues to ruin my lunch time i tried out the new solution locally and it looks good enough on two column tabs the things shrink too much but we discussed in the devcall that it is difficult to determine the right min height screen resolution etc so good to merge as discussed in the dev call i am merging this now
3130.0,3141,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,increase size of file and keywords editors in the new entryeditor we have the problem that sometimes text in the textareas is hard to read because the areas are very narrow the reason for this is that java tries to fit them in the available display space examples this pr sets a minimum size for all textareas in the entryeditor the value of px is rather arbitrary and ill be happy to get some thoughts if this is good or if more or less is desirable with this minimum size all textareas are nicer to read even in the cramped up general tab the only problem is that you now need to scroll in the general tab most of the time all in all i think this should definitly go into change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate to be honest im not a big fan of the increased size i prefer to have as much information on the screen as possible and not to have to scroll on the other hand i acknowledge that the current layout is also suboptimal as the text fields are not expanding on their own when they contain much information maybe it is already enough to increase the prefered height instead of minimum also you should be able to increase the size of the files panel independently of the other fieldsfurthermore it is probably better to use scaling units like em instead of pixels tobiasdiez ok you have the same opinion as koppor i guessincreasing the preferred height didnt help unfortunately we can leave most field editors as they are but we have to increase the size of the file and the the keywords editor those are the two editors in the cramped general tab where users could enter information with more than a single line that doesnt look good at all and really does annoy usersive tried to change just these two editors in code but failed whenever i call setminwidth in or change the minheight in the related fxml file the min height of all field editors in the tab increase any hint the problem is probably where the rows are set to have the same height quick idea if the row constraints are the problem it might be an option to use two rows for the file keyword editors matthiasgeiger not sure if thats easily possible the best solution is probably to write new subclass of entryeditortab or extend the fxfieldeditor by a getweight method which you can use in it is already sufficient to remove these row constraints although there was probably a reason why i added them in the first place ok ive implemented a hack that assigns twice the space of normal rows to the keyword and file field editorsas i said this is a hack but before i turn this into something more acceptable along your suggestion tobiasdiez i would like to get confirmation from the team that this is a solution that we can live with visually in the jabref ui if not than i am just wasting my time with gui hacking and now i refactored it anyway jabref continues to ruin my lunch time i tried out the new solution locally and it looks good enough on two column tabs the things shrink too much but we discussed in the devcall that it is difficult to determine the right min height screen resolution etc so good to merge as discussed in the dev call i am merging this now
2539.0,3147,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,export pdf linked files because somehow my new changes did not update the pr correctly describe the changes you have made here change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate is it possible to add this to the context menu i once added send as email to the menu as i also needed a similar functionality for sending entries as email siedlerchr your pr did not update as you named the branches differently exportpdf vs exportpdf the letters d and f are cased differently thus these are different branches 🎉 current accessibility grafik and the following comments i do not like the word export in the tools menu it took me minutes to find the functionality context menu no entry for that file menu no entry for that file export cannot select pdfs somehowsuggestion rename to copy attached files to folderfurther minor issues progress always shows exporting file of x grafik last chosen folder is not remembered the browse dialog always starts in home pressing cancel when choosing the folder also triggers the export added devcall label to discuss milestone stays at v milestone as v will be our pdf feature release i think i fixed all issues raised by koppor and i also create a log file in the export dir tobiasdiez i followed your idea and added a tableview showing the log messages and the filei plan to replace the true false values with icons green checkmark and red x grafik looks good do you want to display this dialog everytime even through everything went fine and all files were exported successfully or just when an error occurs im unsure but would tend to the latter from my point of view all remaining issues should be resolved and this can be merged the result dialog is displayed way too small on my display screen shot at i try to resize it a magical fourth column appears screen shot at lynyus i changed the column size and there is also a tooltip for the file column
3100.0,3154,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,add preference to disable validation in the entry editor by default adds a preference option for enabling disabling validation in the entry editor but not the ui the reason is because the validation is simply broken at the moment the preference option is set to false by default and there is no ui to change it so this turns off validation in the entry editor we can add the ui to turn it on later when the display bug in controlsfx has been fixedwhen this is merged the related issues can be removed from the milestone change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate since the review comments have been addressed and for the sake of getting things done i am merging this now
3145.0,3154,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,add preference to disable validation in the entry editor by default adds a preference option for enabling disabling validation in the entry editor but not the ui the reason is because the validation is simply broken at the moment the preference option is set to false by default and there is no ui to change it so this turns off validation in the entry editor we can add the ui to turn it on later when the display bug in controlsfx has been fixedwhen this is merged the related issues can be removed from the milestone change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate since the review comments have been addressed and for the sake of getting things done i am merging this now
2946.0,3156,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,close entry editor when the shown entry is removed externally fixes the remaining part of when you externally delete an entry that is opened in the entry editor and accept the change in the dialog in jabref then the entry editor closes that way it prevents you from editing an entry that does no longer existas a side note the basepanel is ripe for a refactoring there are a good dozen classes that i could extract in the light of only doing bug fixes before the release ill avoid that now but when weve released this class gets it change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate for the sake of getting things done ill merge now directly even though theres only one review i guess because of our current shortage in personal well have to deviate from the two reviewer rule now and then
3157.0,3158,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,fix freezing on browse in protected terms dialog when adding from entrry editorchanged open file dialog to save file dialog change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate tested locally and works good job
3161.0,3162,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,update protected terms list in context menu when a new list is added the result of the dialog needs to be evaluated after the dialog is actually finished and the update of the context menu needs to be called change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3130.0,3163,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,fix unparseable fileannotation dates this should be the last aspect for being able to close hviethen should consider using another pdf annotation tool however the fault is of course on our side since we didnt validate the date format before change in changelogmd described manually tested changed features in running jabref
3165.0,3169,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,allow removal of online links from entry dont call pathsget on link to prevent an exception change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3170.0,3171,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,add undo functionality to the source tab the problem here as far as i understand was that the undo didnt happen on the fxapplication threadon top of that i found the the source tab isnt integrated in the undo framework at all so i have added this as well however it doesnt work problem free it seems that the fx codearea consumes undo events as well so when you hit undo in the sourcetab the codearea does the undo and then the undomanager tries to do it again and fails it has no consequence though apart from an exception the undo happens anywaysince this is an improvement add undo to source tab again i would like to merge this even if its not perfect i have zero time to dig deeper into these fx problems and i assume that no one else will do it so we can just merge the current state change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate tested it locally works as expected good job i would also vote to merge this in at the moment
3081.0,3182,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,fix focus and keybinding in search arrow keys left right up and down no work as expected and the up down enter can be used to select an entry from the autocomplete menu change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate done
316.0,3202,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,followup to issue entry editor now adds missing curly braces on closing change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate hey snisnisniksonah is this pr ready for review if so please notify us by adding the label and remove the tag from the title
3190.0,3203,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,when groups are removed also remove them from entries change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate ok i managed to get this done and i think ive addressed everything as the reviewers desired it can be merged from my point of view so please have a look and merge if you think it is ok one more try now only explicitgroups are removed from entries keyword based groups are kept i hope this is the last missing puzzle piece sorry for being pestic but with this implementation keyword groups that are children of the deleted explicit group are still handled wrongly i directly committed a fix if you are fine with it you have my ok for mergeby the way in order to convince you about the testability of javafx code you are invited to write a test covering the new behavior 😈 thanks challenge accepted i did not only add one test but threei will merge when the build goes through
3199.0,3204,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,drop latex editor support this removes latexeditor support push to latexeditor in jabref as stated in the last update to latexeditor was made in see and the software can be considered outdatedi removed latexeditor from the applications list in pushtoapplications class i deleted the pushtolatexeditor class since it is now unusedgradlew check was successfuli am new here first pull request and also still fairly new to java so any c&c would be greatly appreciated especially let me know if either the practice of commits or this request is not up to standard cheersbenedit removed latexeditor from preferences and corrected the url link style in changelog for your first pr you did all right 🍾 if you want to further contribute to jabref i would suggest looking at the wiki here where we have collected some jabref specific things regarding the architecture and also some java tips ill merge this now thanks for the contribution 🎉 have a look at the other issues those labeled with beginner are usually easier to fix if you dont have much prior experience with jabref
2775.0,3209,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,hyphens in last names are properly parsed i missed jabref so much that i even dared to touch the name parsing algorithm the only real changed consists in the few added lines the rest is only code formatting renaming of variables the added tests come from biblatex change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3208.0,3210,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,add file description to gui and fix sync bug change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate the problem is that the changes in the underlying linkedfile are not propagated to the list linkedfileseditorviewmodelfiles so that the serialization is never called by the way also changes to the file name or icon do not trigger an update and thus are not serializedas a solution i propose to convert the data fields in linkedfile to real properties add observable getobservables to linkedfile and return these observables here can you pls add a screenshot how the file editor now looks like with the description added especially when the file link is relatively long thanks tobiasdiez i did as you suggested but still does not work i think it has something to do with the listproperty but i am not that deep inside javafx binding stuff to know why it is not synced yeah got it now i just discovered that there is additional space between the icon and the file name if the file doesnt have a description can you please fix this thanks fixed in master
3172.0,3211,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,added logic to check whether linked file already exists added a check in linkedfileviewmodelrename to see if a file which isbeing renamed already exists in the target location if such a file isfound then an error popup displays informing the user of the conflictuser will be prompted to choose whether to overwrite or cancelalso see for additional details this work fine and includes all the requested changes from the previous pull request with one caveat if the file being overridden is related to a different entry and has different case such as entry abc renamed to def entry def then the nd entry file association will target a now non existing file its possible to get around this by searching the database for any entries that have the old filename def and changing the association to the new filename but i dont know if thats something desireable so i decided to push this as is for now ok i changed to an optional and removed filesexists targetfilepath as its redundant im still getting the hang of git and egit so hopefully the merge didnt mess anything up andrew lev i stick to git and git gui from command line a lot easier than struggling with the eclipse git client thanks this looks really good now
3229.0,3233,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,implemented issue added an error dialog if the file is open in another process and cannot be renamed this is my first contribution please give me feedback if you see any problems hi derebaba thanks for your pull request your contribution is certainly very welcome and looks good overalli still have two points that should be addressed you add two new localization entries here the way in which you use the localization strings in the code is fine but you need to add the keys to the language files otherwise the build will fail to do so you need to add the keys manually to the english file jabref src main resources l n jabref_enproperties and then execute gradlew ate on the command line which will synchronize the keys in all files theres also a pretty good description of that when you run the tests and the localization test fails apart from that you are using the older file api javaio for doing the rename check we try to get rid of that and try to use the new file api javanio instead i would expect something like filesiswritable to do the trick can you please adjust your solution to use the nio api hi lenhard thanks for your feedback are the keys ordered in any way in properties file or should i add new keys at the end derebaba you should first check if there is already a key with the same or similar text which you can reuse otherwise add it to the end and i synchronized the keys and removed the check which used the old api however filesiswritable returns true even if the file is open in another process i searched a lot but i dont think the check is possible with the new api therefore i moved the error dialog code to the catch block in fileutiljava
3230.0,3241,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,update link to renamed file this patch fixes the issue described in the link to the renamed file is successfully updated now change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thank you for the contribution derebaba this look very good now and will be merged as soon as another maintainer gives his okwe have quite some further open issues that wait for fixing so feel free to have a look at those meanwhile you can also join us at slack if you have questions i have merged this and moved the changelog entry to the right category
3143.0,3243,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,fix for issue import entry from clipboard in different formats see use all importers to parse pasted entries this allows the user to paste entries in different formats and not ony bibtex change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues hi m as i see you have some troubles with our checkstyle rules i recommend you to use our ide config files from which ide are you using we recommend intellij idea or eclipseyou can see if the tests a pass by calling gradle check if you only want to check for the code style rules you can call gradle checkstylemain if you have any questions feel free to ask them at slack i am using eclipse and just had to format a file because the saveaction is set to only reformat edited lines a missing newline in the imports wasnt corrected also thanks for pointing out gradle check i somehow missed that command m if you use eclipse just run gradlew eclipse to import the correct code formatting rules thanks for the feedback i integrated the requests with the last commiti also changed the pdfxmpimporter to return false when checking the format instead of throwing an exception to prevent the need for special treatment and make it consistent with the pdfcontentimporter ok then ill add this to the milestone i think the error message comes from my opinion you can just delete these loggerlog statements since its quite expected that a file in a wrong format is passed to isrecognizedformat and this importer is not used outside of internal code anyways
2811.0,3248,1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,fix for issue bibtexkey generator does not use crossref information see the bibtex key generator now uses crossreferenced entries if required fields are empty change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues m that is really an impressive amount of tests good jobthere are two merge conflicts could you resolve those once thats done this pr is ready to go into master and once again thanks
2955.0,3272,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,open statistics dialog from correct thread the dialog to ask for collecting anonymous statistics needs to be created inthe swing edt do so using swingutilitiesinvokelater this is a follow up on ef b a and should finally no addition to changelogmd as ef b a already included a corresponding entry change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3263.0,3287,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,change oo paths to libre office in preferences hopefully enough to change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3280.0,3288,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,empty string instead of n a in file annotations jabref developers any votes against this lynyus
3264.0,3303,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,open unix filenames with spaces we need to check if we need to escape the other unix paths too i have to try if this works but whille you are onto the code you could take this as a chance to resolve the alert warning from lgtm regarding string conceatenation in cmd parameters you try to resolve this as an array i think that would also resolve the problem i guess siedlerchr what would you say i guess we can merge should i add something similar for the other executables in linux too stefan kolb yes make it consistent and then we can merge linusdietz does my solution work then can you test it i changed it to your \ suggestion siedlerchr does my solution work then can you test it i changed it to your \ suggestion siedlerchr linusdietz ping is this working can we merge i think it should but i lack a linux system in question kde or gnome siedlerchr do you have gnome or kde i have tested the nautilus command so im merging now dont have a kde environment at the moment
3307.0,3308,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,add \textendash to the html conversion table by adding \textendash to the html conversion table change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3275.0,3318,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix npe in maintable as observed by stefan kolb in the npe resulted from the strange matches null code this is fixed now not sure if this actually fixes the problem of change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3292.0,3325,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,annotations are now automatically refreshed this pr aims to by removing the refresh button completely and monitoring the pdf files automatically for changes in the progress of the implementation a few refactorings were made extract the file monitoring functionality from fileupdatemonitor to a new class and convert the timestamp based method to the new nio watcher interface extract the conflict handling code by external bib file changes from the base panel to a new class databasechangemonitor where also some of the old code from fileupdatemonitor now finds a new home this class is still a bit ugly but in my opinion better than before i hope that the conflict handling still works as expected i tested it but might have missed some special cases configurations change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate the changes are a bit hard to review but i have tested it locally and the annotations are refreshed as desiredi have another point though one that might entail some work since you are already touching this code do you see a change of refactoring the complete collab package so that it fits better to our architecture if we just take the current dependencies in the package then the whole thing would basically go into gui this already would be an improvement because the source code packages in root would already look a little more like where we want to gobut to be honest i do not get why file monitoring functionality should belong into the gui part at least part of that should be extractable into a non gui part and should be movable into logic if i look at changescanner then basically everything from line downwards is gui independent code i also dont see why change and its subclasses should be so heavily tied to ui code as far as i can see this is only because the code is tied so strongly to the undo framework couldnt we extract that part and move the change classes to a deeper layer ok ill merge this now and will have a look at the collab package later i second your concerns lenhard much of the code their should actually reside in logic this would also help siedlerchr in his endeavor towards sharelatex integration
3342.0,3343,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,fix npe when calling with bib file as cmd argument follow up issue from use toabsolutepath before calling of getparent change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2802.0,3351,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,use cite_comment not only for external latex editors but also for cop… …y to clipboard hacktoberfest welcome back and thanks for the pr
3311.0,3364,1,1,0,1,0,0,1,0,0,1,0,1,1,0,0,replace linkedfiles backslashes with forward slashes ensures cross platform compatibility tested this under windows and it works fine change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate yes agree good point i readded it in the other pr
3346.0,3368,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,rework autosetfilelinks change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate tobiasdiez i now moved the common code to an own method in a class in the guiit cant be moved to logic because it depends on externalfiletypei tried adding a test for it but even with extensive mocking externalfiletypes are again the problem because its a singleton classmockito is not able to mock it thanks for the further refactoring the code looks better nowconcerning the tests you should be able to extract externalfiletypesgetinstance to a method parameter and then simply pass a mock externalfiletypesclass in the test thanks for the hints i was no able to create a test and to faciliate the code
3376.0,3378,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,treat crossref titles as optional change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3358.0,3388,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,added checking integrity dialog this change is related to jabref looked like it is hanging during long integrity checks i added a dialog with a progress bar to show that it is working checkingintegrity change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for fast response i fixed the problems thanks for your contribution i tested the changes locally and it works fine feel free to look at other issues as well
3347.0,3401,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix npe when saving new file no changelog entry since bug was introduced after release of change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3311.0,3403,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,replace linkedfiles backslashes with forward slashes follow up from damn case sensitivy change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3389.0,3404,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,strip invalid prolog when loading citationstyles by skipping invalid parts of the prolog of citation styles change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3046.0,3405,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,no longer allow duplicate fields in customized entry types problems in the entry editor caused by duplicate fields in customized entry types by no longer allowing duplicate fields ie moved from list to set change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate seems like you have forgotten to replace a list with a set in the testotherwiese lgtm
3432.0,3438,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,fix removal of special fields when syncing them via keywords fixes a bug where jabref special fields such as printed relevant were not cleared eg removing the printed flag when using synchronization of special fields via the bibtex keywords field change in changelogmd described manually tested changed features in running jabrefsee for more details made the requested changes thanks tobiasdiez for pointing that out fixed it
3381.0,3443,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,fix for issue because the javafx tooltip used in the globalsearchbar cannot render html tobiasdiez recommended in to create a textflow object in the searchdescriber classes for structuring the text i made the changes to return a textflow and its working fine so far without changing the logic that is used to build the text i moved the searchrulesdescriber package like proposed from the logic package to the gui package the existing tests were moved accordingly but still needs to be rewritten for the new textflow resultsthere are some open questions i would like to ask with no styling of the tooltip the readability was really bad black text on grey background so i changed the styling to look like the other tooltips in the bar hope it was okay to do this in the context of this issue i created a new styleclass for this in the maincss to not change any other styled elements the searchquery class stores a description of the search it is created with the searchdescribers but they are now inside the gui package and return a textflow so there is a javafx dependency in the searchquery class which resides in the logic package at the moment this doesnt sound right to me should the class be moved to the gui package too the groupdialog class uses a searchquery object to get a search description this class is written with swing and is not compatible to the now returned textflow if i understand it right the project is migrating to use javafx so i want to propose that i write a compatibility method in the groupdialog class to create an html string from the given textflow to be compatible while the groupdialog is still using swing sadly the localized strings used in the searchdescribers included the html tag elements so in many cases it is not possible to use existing translations just because the tags are gone im not sure what to do about this it could be possible to remove the tags manually from the translations not sure how long this would takethats how the tooltip looks with the changes screenshot seems to be something wrong with the logic of the tooltip text creation the first few words repeat itself and it already happened prior to my changes see the image in but i didnt had time to look very closely into this should i open a new issue for this problemi hope i didnt forget anything im happy to hear your feedback change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate first of all thanks for your contribution moving all logic code to gui seems like the only option here but in general should be avoided what about having a different approach keepiing all stuff string based in logic and in the gui you have a helper method for converting the html tags are only a few from the localization into the rtf equivalent and by adding it to a textflow i see no reason why this should not workif you look into the localization stuff you see there are only a couple of and tags so nothing really advanced after thinking a little longer about the package problem i think the architecture is actually not right if the searchdescribers generate html code and stay in the logic package because html code is only usable in a gui use case and has not really anything to do with logic so maybe they were not really in the right package to begin with if their only purpose is to create a structured text for the guii think the searchquery objects should not hold a description stored if it is removed there is no further moving of classes necessary at the places the description member of searchquery is used it can be generated with the searchdescribers class like in the searchquery class at the momentimho the package structure would be most honored that wayit would save the translations if the searchdescriber creates an html string which can be converted later to a textflow like you said but if the project really is moving towards javafx it seems wrong to me to keep html strings for structuring text because in javafx this is the task of a textflow i would try to look into removing the html tags from the translations to not lose them and make a step forward using javafx also a big thanks from me i dont have much time at the moment so just a short remark concerning your point i think it should be possible to completely remove the description field from the searchquery class just expose the rule and query via getters and then call the ̀ searchdescriptorgetdescriptionfor every time you need the description in the gui in this way the description completely disappears from the logic package concerning you can also embed javafx controls in swing which is probably easier to do then creating a conversion to html status update i removed the description from the searchquery class so it can remain in the logic package i recreate an html string in the groupdialog class for compatibility was very easy this way modified the tests for the searchdescriber implementations to properly check the textflow description created tests for the utility class i creatednow there is only one problem left the broken localizationsi looked into the localization files and it could be possible to rescue a lot of translations by just manually deleting the html tags from the translations when they are at the beginning or end but in some cases after translating the text the tags are positioned in the middle of words there it would be necessary to create a new translation because im not able to just delete the tag from the beginning or endthe only other alternative i see is using the old html strings for the localization and then break them up and convert them into javafx texts imho this would be really ugly and not a good readable solutionwhat do you think any other possible solutions when i see it right you only need to replace the html tags for the search descriptions right so the rest of the translations can and should stay as it iscant it be possible to strip replace the tags on the fly so if i encounter a in my text i have to switch to bold face at that position sadly its not so simple with textflows they consist of multiple text objects and you can set the font on each text so if there is a string like this xxx xxx xxxx xx that translates into xx xxx xxx xx xxxxthen there are three text objects needed text xx xxx text xxx text xx xxxx i will try to find an acceptable abstraction so the code will not be completely unreadable and the old translations can be used so now the old strings are used and the localization is working again i tried to make it as readable as possible what do you think now any more things to do anything else i should have considered so i think i made all your requested changes it now looks like this with the new styling screenshot thank you very much for the quick follow ups and of course for your contribution in general we are looking forward to see more prs from you 😉 your welcome grin
1664.0,3444,1,0,0,0,0,0,1,0,0,1,1,1,1,0,0,implements group based on aux file this pr implements by adding a group that contains all entries referenced in a given aux file so far the code is only a prototype but it already works really well what is missing is that changes in the aux file are automatically recognized and handled this should be easy to accomplish the user interface is very very basic and only contains a text field where the user can specify the path to the aux file in light of the upcoming rewrite of the groups dialog in javafx i dont want to spent to much time at ui stuff i have two questions ~~the implementation so far is against our architecture the new group texgroup is in the model but uses the auxparser from the logic any ideas how to resolve this issue more and more i dont like the strict rule that model is not allowed to access logic how im supposed to create intelligent objects in the model if they are not allowed to use advanced stuff from the logic package~~ the file path right now is stored as an absolute path is this ok if not what should be the base of a relative path the bib file change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate regarding the file directory stuff we have a method getfirstexistingfiledir which gives you the file directoy either main file idr bib file or library setting siedlerchr thanks do you think it makes sense to apply the same rules for the aux files as for pdf files when it comes to relative paths the architecture is not set in stone we can always decide to change it having said that i still think that the current separation of model and logic makes sense and i think that the tests are useful through the tests we always get a notification about changes that easily turn into circular dependencies and we have an opportunity to discuss them if we dont have that then the code will just silently turn into a big ball of mud with circular dependencies everywherelooking at the code i dont really see an architectural problem right now you are computing the set keysusedinaux on demand in a call to contains you can just do that when you create the group and pass the set into the constructor dependency problem solvedwhen you want to recognize changes in the aux file you will need to monitor the file which is functionality that is located in the higher layers anyway then you could add a setter to the group that resets the keys when a file change happens lenhard i now used your approach the tex group class only relies on interfaces defined in model while the concrete implementation of these interfaces resides in logic this pr is now ready for review we should really consider using a dependency injection frameworkmost of the line changes are just propagating the file monitor from globals to the tex group in order to somewhat keep the momentum up and reduce the number of open prs ill merge this now
2594.0,3454,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,replace swingx with standard swing in order to be able to properly move to java see we need to get rid of all accesses of internal apis unfortunately we also use libraries that make such internal accesses and we need to find a solution for thatone of these libraries is swingx originally by sun it is no longer maintained since quite a while we could not even upgrade to the newest version because of bugs in the library it is time to get rid of this dependency this pr replaces the usage of swingx with regular swing components only the new entries dialog and the side pane are affected for the new entries dialog the change is trivial just using a regular layout manager for the side pane a few changes are needed but i can make it roughly resemble the old layout theres one bigger change though that i happen to like very much the side panes are no longer exclusive you can display them together that means that i can have the web search and the groups panel open at the same time personally i think thats pretty cool and i would like to keep it that way you can of course still disable the side panes independent of each other heres a screenshot sidepane change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate yeah cool pretty good work theres one bigger change though that i happen to like very much the side panes are no longer exclusive you can display them together that means that i can have the web search and the groups panel open at the same timethis was already possible before 😉 huh good to know then at least no one can blame it on me when something related to that breaks
3109.0,3459,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix for issue in the comments to issue i already presented my solution approaches for the fileannotationtabs design change this discussion should be continued here there were two situations i have presented a design approach the linked file has no annotations the linked file has annotationsif there are annotations in the linked file two design solution approaches have been discussed either realising it with a list or a table no matter which of these solutions is chosen it would be nice to be able to order the annotations by date author or page so a table might be the clearest solution sorting a list on the other hand side could be realised by implementing a dropdown menu were the user can select what the list should be sorted byi implemented the no annotations approach so that the right side of the fileannotationtab showing the annotations attributes is either disabled if there are no annotations in the linked file or enabled if there are annotations as i said in the linked issue im in favor of a list like design lets see what the other jabref developers think i marked this pr as ready for review so that it gets attention sorting would be indeed a nice to have feature i second your idea of a drop down menu maybe hide it behind a sort icon and open the drop down choices on click similar to here my suggestion would be to replace the sort by subject in the screenshot with the sort icon tobiasdiez are you talking about the following like that and i assume that i can use the cursor keys cursor up cursor down to go through the table koppor yes this is the right screenshot the question is if we want a real table on the left side or go for a list like solution similar to the current layout pic with keys should work in both cases hi your build fails because you have an localization error junit vintage orgjabreflogicl nlocalizationconsistencytest findobsoletelocalizationkeys methodsource classname orgjabreflogicl nlocalizationconsistencytest methodname findobsoletelocalizationkeys methodparametertypes javalangassertionerror obsolete keys found in language properties file copy_to_clipboard check if the key is really not used anymore remove these from the english language file execute gradlew ate expected but was hey there i do not really understand how to fix these two failed checks can anybody give me a hint first failed check wrong order for javafxscenelayoutcolumnconstraints import import javafxscenelayoutcolumnconstraintsi changed the order of the import statements but this error still occurs second failed check no language set test_suitecheck optionsmodernizer min sec no language set test_suitecheckstyle min sec no language set test_suitefetchertest min sec hey for the import statement its probably a space between the packages missing or one too muchthe best is to use the code format settings we provide for eclipse and intellij if you use eclipse simply execute gradlew eclipse and with ctrl o you can sort the importsthat is the only error the no language set is just some travis job thing not relevant great the build is fixed ill check the changes soon so we can decide if this pull request is ready to be merged muntrob what is the status of this pr its been a month since the last updates any chance of moving this forward thanks for your contribution we are trying to get this in now in therefore i am closing this pr
3435.0,3486,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix threading issues and change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate this should be fixed now i reverted to my initial idea i heavily clicked around and switched tabs in the entry editor and randomly selected things in the main table and in the integrity check table no longer exception i have tested it locally and can confirm that it is working now
3485.0,3486,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix threading issues and change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate this should be fixed now i reverted to my initial idea i heavily clicked around and switched tabs in the entry editor and randomly selected things in the main table and in the integrity check table no longer exception i have tested it locally and can confirm that it is working now
3471.0,3497,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,fix npe in search bar in a npe was mentioned im not sure which object was null it should not be the scene since this is just set and the css file should also be always found moreover i could not reproduce the exception so this fix is a shot in the blue change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate seems like this could be a linux thing and related to our customjfx panel see also the log in i merge it now since it is still a slight improvement over the existing code ill have a look at the azure reports if a similar exception gets reported in the next days
3500.0,3502,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,update user agent and change acm to https fix acm fetcher change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate hmmmm thats odd for me it worked will take a look at it okay i tested things again and i cannnot reproduce your error works fine on my side tested again still same error regardless of how i configure the fetcher in the uiit seems that someone else should be testing this as well is this the right test setting works here i get the same error on current master so this is probably unrelated to this pr seems what i get back from acm is chinese instead of a web page which probably means some encoding problem acm shouldnt block the current pr which i am merging now
2533.0,3504,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,convert entry preview panel to javafx i migrated the entry preview to javafx my hope was to resolve the memory issues but this was sadly not successful thus the issues really come from the citation style cache and not from the display notable differences the default javafx font seems to be bigger in my opinion it looks better that way the description for two options in the right click menu has a display bug the reason is that i use langmenutitle to get the text but menu titles contain the acceleration key binding probably one needs to convert the main toolbar to javafx as well in order to fix this problem change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate tobiasdiez lenhard i hacked a version of the citationstylegenerator that manages a static instance of csl you find it in this gist it vastly improves performance and memory footprint the only sad thing is that csl itself needs so much memory even for one single instance i find over mb not acceptable even if many machines nowadays are equipped with at least gb laptops might notremarks csl is in general not threadsafe but im not sure this is a problem with our current implementation i tried to use threadlocal as well but we have an armada of worker threads and doinbackground selects one this means that several thread local csl instances are created which is not helping muchthe current behavior is that the first preview takes as long as it took and until the style or the output format is changed all follow up calls are cheap fast and dont use much memory in numbers this means that while before one call to create the preview text needed ms under profiling it now takes on average about ms the memory is better as well before we had about mb per preview and now previews need mb including the first expensive call btw dont be confused when i say it needs over mb and it needs mb the profiler does not count all objects and makes certain estimates so the profiling memory will usually be smaller than what you see in your memory monitor halirutan from my point of view we could just scrap the csls again and remove them from jabref completely but i think koppor has a strong opinion on it maybe the right way to go is to have them improve their implementation and ive seen that youve already opened an issue for that lets hope they react yeah csl was wished by many users and is a strong selling point 😇to improve speed we added the csl cache think with javascript v italso can get much better maybe we should put energy in thatreimplementing csl proc in java is also possible but much effort i checked out this branch and i would have included my fix in here but we still have the big problem that utf fonts are not displayed correctly this might be related to this question i asked recently although now its for javafx and im on linuxanyway in the old preview if an entry contains eg textit{} it looks like this in the preview img the javafx preview from this branch the same entry displays like this img you like to try this out here is the shortened entry phdthesis{debraga author {michael debraga} title {{the postcranial anatomy of \textit{procolophon} parareptilia procolophonidae and its implications for the origin of turtles}} school {department of zoology university of toronto} year { } type {phd thesis} address {canada} note { pp}} my pr for the csl performance should be almost unrelated to this here and can later easily be merged if we find it works acceptably thanks for the feedback i revised the code accordingly halirutan i couldnt replicate the problem with textit but i only tested it for the default preview layout not cls i would like to revisit this problem as soon as your pr with the simplified cls inclusion is merged so that testing gets easier according to google the problem occurs when custom fonts are used see eg stackexchange latex unicode uses the math alphabet instead of the normal alphabet for textit note hat in mathematics mathit is the command for italics text not textit see compare 𝐻 with 𝘏 everything wrong above there is only one italics h i totally misunderstood the comment at this is a test for italics and a test for bold see also metastackoverflowcom questions end from what i read the mathematic area is the only font which provides italics and i am unsure whether we really should support that question if there was a mystical latex html could this be a replacement for all usages of the latex unicode converterfor the mathematica plugin i had to transform the doc of built in function to html fortunately i could even use mathml and now the function docs contain everything from italics simple formulas and integrals halirutan there is a latex html converter but not all cases should be handled by this for example you typically want names with accents or other weird characters to be displayed as unicode i propose the following which may make our life a lot easier main table is a swing component which uses html the entry preview is soon a webview component so its also html csl gets also written to html if i am rightso why dont we use the latex html converter on both of themthis would make our life a lot easiermaybe we should discuss this in a devcall siedlerchr that was the reason behind my question i ran several times into this issue on both linux and os x and it was the reason for the question on so there it was also suggested to use html and im also confident that it would make life easierin addition to it is rendered at all we hopefully get a better quality on linux the italics look so ugly that it is almost not bearable therefore if easily possible i vote for using html for rendering latex one reason for using latex unicode was that our own custom conversion was relatively incomplete and partly broken i am not sure on the state of the html conversion but i wouldnt presume that its perfect so if we go for displaying html everywhere which is perfectly fine in my point of view it would also be cool if we had a robust java library that does the latex to html conversion i am not sure if such a library exists though and then we will have to make do with the current conversionthe main reason for latex unicode was to enable a proper search of entries independent of latex commands as far as i understand this shouldnt conflict with displaying html and can be kept as is so how do we want to proceed with this pr the discussion concerning latex unicode html is a bit decoupled from the actual purpose of this pr which is just to move forward with the migration to javafx maybe it also makes sense to extract our latex html code and merge it into the latex unicode library we use i remember the discussions with oscargus who argued that our latex html converter is the most complete one maybe we should offer it as library refs tobiasdiez i really would like to concentrate on the javafx part of this pr as well but until the unicode issue is resolved this breaks preview for entries that contain any latex on my machine as long as im not the only one where this happens i see no way we could merge this pr without annoying a lot of users therefore we need to discuss the latex xxx issue somewhere first do you have a suggestion how we should proceed for switchting to latex html in this case entry preview thus moved to v and not for v release i now used latex html for the preview and it seems to work fine i also implemented the citation style provider as discussed with halirutan in his recent prsadly i made some mistakes with while checking out my code and now cannot push to this branch anymore git claims everything is up to date well it isnt so continued at tobiasdiez in that case you have to do a force push eg when amending your last commit tobiasdiez only regarding the sadly i made some mistakes with while checking out my codewhen you merge updates into this branch and you use rebase then you cannot push it again if you are sure no one else has used your branch you have to make a force push and everything is fine rebasing your local branch looks nicer because you dont get a cluttered history wich merge commits but it should only be used you are working on a local branch thanks for the help but the problem was not about the rebase force pushed i created the branch on another pc and used the github gui tool to check it out on a new one for some reason git now thinks the remote branch associated to my local code is jabref javafxpreview instead of just javafxpreview i could probably remove readd the remote branch but it was easier to just create a new pr you can edit git config directly for changing branch config you can alsouse gitk all to check whats going onfinally git push f origin head branchnameatorigin always worksregardless of your local branch name no need to create a new pr thenam schrieb tobias diez thanks for the help but the problem was not about the rebase force pushed i created the branch on another pc and used the github gui tool to check it out on a new one for some reason git now thinks the remote branch associated to my local code is jabref javafxpreview instead of just javafxpreview i could probably remove readd the remote branch but it was easier to just create a new pr — you are receiving this because you were mentioned reply to this email directly view it on github the thread
3359.0,3506,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,automatically remove colon and apostrophe from key pattern colons and apostrophes are now removed from the generated key patterni also refactored the key generator mainly converting the static methods to instance methods change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate lenhard i manually tested most use cases where the code changes except openoffice since i dont use it what are our current plans for the release when do we want to release if there is still some time before the release i would prefer if this pr is merged before the release you may want to add the percent sign and the ampersand & which is problematic as it creates a problem with biber biblatex should this still go into tobiasdiez when you fix the checkstyle issues and conflicts then this pr can be merged
3493.0,3507,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,add option to remove the link when file is no longer found when pressing the del key and the file can not be found this dialog pops up and you can remove the file from the entry opening x \users\cs\documents\_jabreftemp\bibliographybibopening x \users\cs\documents\_jabreftemp\newbiblatextestbibcould not find file o’keefe feature selection and weighting methods in sentiment analysispdfcould not find file saggion ontology based information extraction for business intelligencepdf change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate or not showing the dialog at all we have the undo possibility and i would not think that users accidently press del would be nice if i could quickly delete attachments if jabref goes crazy ^^
3491.0,3508,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,implement clicking the pdf icon in the linked files editor opens the file a click on the pdf icon on a linked file in the entry editor opens the file this is consistent with the behavior in the main table and thus i didnt added a new button and or changed the double click behavior as it was suggested in the issue change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thats a nice solution btw do you have any idea why the second file in the listvie does not indicate the blue selection although it is selected lenhard the beauty of javafx siedlerchr no idea similarly there are these annoying padding problems of the first row the beauty of javafx 😄
3472.0,3509,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,files starting with bibtex key of a similar entry are no longer found by mistake the auto link algorithm just checked if the file starts with the bibtex key this leads to a lot of false positives since einstein apdf is found for the entry einstein although this pdf probably belongs to a second paper by einstein that was published in the same year this is fixed in this prwith the proposed implementation also the pdf file einstein aboutsomethingpdf is no longer found since there is really no possibility in telling the difference to einstein a a second paperpdf thus the user is advised to add some non letter character after the key change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate how does this relate with the preferences at these settings still respected koppor yes these settings are still valid the fix applies only if you select the first option auto link files that start with the bibtex key koppor why did you removed the ready for review flag and marked this pr as wip i was and i am still waiting for a second review otherwise this pr is ready from my point of view the minor issues pointed out by siedlerchr are now also fixed think because i watched this pr liked it and just wanted others to focus on other prs
3505.0,3512,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,another try to fix the npe in the search bar fiexes i think i managed to locate the problem of the npe and the missing search bar apparently in some conditions the syntax to access the parent in a path does not work for resources thus the css file is not found resulting in a npe change in changelogmd described bug introduced in dev manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate search bar appears here i think j hannes should run the build at his system currently one has to checkout the code and execute gradlew run as we currently have issues with our code signing certificate koppor i just rebuilt the package from git and the search bar is still not there j hannes did you checked out the branch fix or still used the master since this pr is not yet merged the fix is not included in the master branch if you used the correct branch to build is the same error message still there anyway i merge this now since the code still works under normal conditions and might help in others so a new checkout of the master branch should work now tobiasdiez now its back the package will certainly only use the master branch i though it was already merged there j hannes thanks for the feedback and your help debugging this issue much appreciated
3526.0,3529,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,add null checks in groupchangeviewmodel this avoids the npes in however i cant get the groups side pane to repaint and depict the modified groups tree ive tried different ways via calling the groupssidepane or setting selected groups in the statemanager but no success tobiasdiez how do i force the groupsidepane to display a changed group tree change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate sadly updates to the group tree in general are ignored see eg normally one would like that all changes are automatically propagated using the event bus javafx binding but for some reason this does not work sorry i forgot the details ok thanks for clarifying i am not sure what to do with this pr then under the hood it works avoids the exceptions but all of this is not visible to the user right now it requires a restart of the application is the view updated when you switch between databases this always worked for me so far i would say merge this pr here since it fixes the npe and comment in the above issue that there are more update problems ill have a look at this problem but not right now as this week is kind of a hell for me yes it is updated when switching between databases eg all groups are removed and the all entries group is displayed when i remove the group statement a rename of the group in the file doesnt carry over so there are probably deeper problemsi still have the problem that it tends to display the groups tree of the wrong database but at least the change is reflected somehow can this be merge now sure go ahead
2533.0,3533,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fix preview performance this unifies the access to the csl engine the adapter class will hold one instance of it and only recreate it when the style changes this improves the performance of from the second call to the preview drastically and should provide an acceptable speed to in addition i extended the search for citation styles when jabref is run during developmenti will add changelog and friends but for the moment my biggest problem is that the unit tests are broken on master at least for me change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate lenhard tobiasdiez thanks for the fast review here are to comments to lenhards first message in that case the configured citation style can be used but i cannot select a new one in the preferences dialog there the list is emptyyes i did not consider this case i assume the fat jar contains the styles still packed as jar im sure i can fix this then when trying to preview items i get exceptions but these exceptions happen reliably for certain bib items so it seems just like a bad combination of the randomly selected style i used for testing acm sig authors and the bib itemstook a while but i could pin it down im not sure i caught the exception before but now you will see cannot create preview and the exception appears in the log as usual the error comes from your bibentry when you look at your bibtex code you see month {december } if this is indeed valid bibtex then our csl converter does not handle it correctly you can find the json format of what orgjabreflogiccitationstylecsladapterbibentrytocslitemdata makes from your code its so short that you spot the error easily csl is choking on the invalid date partsas soon as you remove the days the item is rendered correctlythis error should have happened before as i did not touch that part im not sure how this can reliably be fixed as we only extract the latex free fields and turn them into strings that should probably be a different pr halirutan thanks for the investigation and i hope you did not waste too much time on that that is not correct bibtex well bibtex is very open and relaxed and of course you can write it in this way but this is not how the content of the month field is expected i just opened an old bib file and clicked around not caring too much about the actual data you can ignore that error in your pr herei think a viable strategy would actually be to absorb the exception completely exceptions in jabrefs log should indicate problems in jabref this is not a problem of jabref but of user data and the citation styles library therefore i think it would be sufficient to create a log entry stating that the attempt to parse an entry results in an error from the citation styles library but this can be part of a different pr things that need to work fast scrolling through the entry liest with preview open edit copy preview for single and many items on a selection right click and copy citation lenhard i cannot reproduce that the styles are not found with the fat jar can you try to delete and rebuild it and show exactly what you try i see all styles and i can switch them as usual the fat jar has the same structure as the normal jar with all styles included as files i am doing the following execute gradlew build cd to build libs execute java jar jabref devjar for some reason there is nothing available to select in the preview panel see picture although the csl files are contained in the fat jar not as a jar but as the single csl files right in the root of the jar the log says opening c \users\joerg\desktop\jl main\diss\tex\referencesbibsomething went wrong while adding the discovered citationstyles to the list preview i am getting several warnings on the console dec pm javafxscenecssstylehelper calculatevaluewarning could not resolve fx info while resolving lookups for fx text fill from rule log in stylesheet jar file c workspaces jabref build libs jabref dev fatjar org jabref gui errorconsole errorconsolecss after these warnings i updated my current installation from java _ to java _ and the warnings were gone but the rest stays the same no citation styles in the list my configuration is now jabref devwindows amd java _ i tested it and i found there is a problem with how you get the path will commit a fix halirutan lenhard i fixed the path handling and improved the code for searching inside the jar filefor me it works now when i directly run jabref main in eclipse 🙌 😃 siedlerchr can you point out what exactly went wrong with the path so that i dont make the mistake in the future otherwise nice clean up i removed your println i guess you simply forgot this and i renamed jarfs to jarfs to satisfy my spell check i like to have absolutely no warning if possible smiley lenhard can you test it again your approach is basically what i did too and here it worked
3538.0,3539,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,fix options databinding by adding elements if they are not in the initial map i dunno if this is the best idea but it works change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate can you please explain the reason for the bug in general the string converter should not modify the source or target map the reason for the bug is that the fromstring method does a lookup in the map with the current txt in the field if you enter a non predefined string into it the map lookup returns null because not found
3476.0,3551,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,make path relative when adding automatically found file change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
2852.0,3553,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix group search performance this includes currently changes the input field for the group search is delayed now it waits until the user has finished typing and starts the search afterward this increases the usability and prevents lags during typing the recursivetreeelement caches the current predicate so that branches of the group tree are not tested over and over again this is an ugly solution so far but we need to test if this or something similar but beautiful boosts the performance considerably change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate tobiasdiez the creation of nodes is expensive since the hit counter triggers a run over all entries halirutan based on your experience with the performance investigation is my observation correcti guess this is what i saw this morning in the profiler i didnt investigate further but i was surprised that i saw constructor hits i thought the group tree is static until it is changed by adding deleting nodes but instead it seems the tree is rebuilt i havent worked through the whole implementation because there is a lot of stuff in it i havent worked with before jabref this is another reason why i had the hope someone could join on this branch because i dont feel confident to implement a good fix for this fundamental flaw in the design ok i think i found a solution which reuses the children does not need to store the predicate but nonetheless has a good performance lenhard have you seen the comment in the issue this pr should solve tobiasdiez unfortunately the new version is not working as expected while it still filters the groups when a filtered group is selected the associated entries are not updated accordingly in the main table view this was not the case with the previous version halirutan sorry i did not look at the issue again and just tested for performance not correctness of course that bug should be fixed before merging bug fixed merge 😃 great
3576.0,3578,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,refactor export code to i refactored the export package so that it now has a similar structure of the importer and a similar code can now be used for imports and exports since the issue didnt occurred for imports this refactoring automatically fixes the problem for the exportnotable changes exportformat is renamed to exporter exportformats is renamed to exportfactory and no longer static fileextensions is renamed to filetype change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate some mior things the only thing we should discuss is the renaming of the fileextensions to filetypefor me filetype would include actual information about the type or a specific class but in this case its solely the extension siedlerchr thanks for the feedback i now changed the code accordinglywhy dont you like the name filetype the class currently contains a description and a list of extensions eg bibtex library with bib this is a bit for information than just extensions which would be just a set but i have no strong opinion about the name the rename was triggered by the code importergetextensions getextensions
3584.0,3588,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,initialize previe before mainpanel to prevent npes on delete no changelod needed as this is a change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for the fix ill merge directly since this is only a minor change
3112.0,3591,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,maintable leaves the swing year and comes back in a new javafx dress old are still many many things missing for a fully working version but i thought i give you an early preview feedback welcomehappy new year everybody fixes and fixes known bugs ticked resolved changes to entries dont mark database as changed changes to entries are not reflected in main table cleanup does not work ctrl a in entry editor selects all entries in table not reproducable escape does not close entry editor column width is not correct if the option resize to fit window width is activated select multiple entries by holding mouse button code to fix of features sorting shift click for multi column sort filtering by search and groups context menus for the icons right click menu setting special fields like reading status priority through the main table marked entries are not highlighted drag & drop to and from the table float mode does not work color cells in table depending on whether the field is optional required change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate cool could you point me to new implementation in your large commit i see only a lot of icon changes oh sorry i forgot to commit all files the main changes are in the guimaintable package while you are working on this you might also take a look at we could use the latex html converter and then convert that html formatting to the textflow which was done in the search component tooltips yes this issue is already fixed merely by switching to javafx the unicode is correctly displayed see above the second entry in the table the first screenshot shows the boxes while the correct string is shown in the second screenshot one more step in the right direction this pr has the potential to fix a lot of display bugs and we should be able to get rid of the annoying and unmaintained glazed lists librarynevertheless i need to add a word of caution we cannot allow the same situation as for the entry editor again weve spent almost half a year in un releaseable limbo because of that the replacement for the main table needs to be absolutely bullet proof however the amount of lines of code in this pr is too much for a meaningful review so we need a lot of manual testing by basically all developersive played around a bit and i like the new layout of the maintable whats a little strange is that every second row is highlighted differently this should change for the final version edit things that should be fixed with this pr siedlerchr thanks for the feedback ill improve the code accordingly lenhard i completely agree we should find a way to have a realeasable version while still work on the migration to javafx the main problem is that the code is tightly coupled to the maintable ie there is no abstraction layer before the basepanel maintable that used in the other swing dialogs this has the potential upset that every single dialog may now trigger a bug for example because it runs some code not on the javafx thread so even through i will try to thoroughly test the new code before marking it as ready for review there might still be countless bugs left which we need to find and fix in teamwork moreover for the same reason i think we also need to release a beta againthat being said the immediate question is how much functionality should i try to migrate in this pr and what should follow as new prs as you said the size of the changes makes the pr already unreviewable but i would really like to have your feedback about some design questions especially since our aim should be not just to improve the gui but also decouple the code and make it more reusablecurrently the new maintable is in a state where the very basic functionality works and the code is decoupled enough to actually write unit gui tests for it there are still some bugs feature that definitely need to be fixed before a users touches it eg restore column width context menus for the icons a few display bugs then there are a few features that are not essential and rather isolated eg marking of entries these are probably good candidates for follow up prs and finally there are features that i dont really see any benefit in reimplementing eg coloring of table cells when the field is optional required or that are not really possible to implement with javafx eg float search finally the possible bug fixes lenhard mentions should also follow as new prsany thoughts on this sorry for the long text i think we could have a separate main table beta test release in an additional branch highly experimental and let some users test this functionality who are interested especially we would need some mac linux guys we can create a javafx branch where we can integrate not ready features but completed work packages such as a basic entry table in javafx the master branch must be release ready at all times release ready means all features of the old versions should be working or the dev team decided to remove disable a feature such as the auto completion so i used this version now in production during the past few days and fixed a lot of bugs although not all features are yet migrated see list above i mark this pr now as ready for review all further changes are coming as extra prs onto this branch i would suggest that you try this version out and if nothing serious pops up i would create a post in the forum advertising this pr and ask users about their opinion something like a very early access program instead of several beta releases what do you think i would be really cool if you could provide a table that lists all features related to the maintable that were present in the swing version eg sorting options right click options entry drop column sorting and could indicate if these features are working in the new version then we would have an overview of what features actually exist in the main table and we could have a meaningful discussion about which features we want to droppersonally i dont really have an overview of all the things that the maintable can do could you perhaps provide this overview i guess also koppor know a thousand maintable features that i do not know i changed the base branch to maintable beta i would propose to proceed as follows jabref developers review work in review comments merge into maintable beta ask users to feedback to maintable beta add new prs on maintable beta why i think prs should be short and be closed fast not left open as the ones of koppor so we can move on quickly and we can also link to comments of this pr if necessary the discussions here are mixed on the implementation details and overall issues i think we should focus on implementation details 😇 in case we need a overview pr we can create a pr from maintable beta to master and describe the overall status there i am very used to the floating search see screenshots at lenhard i updated the first post to also include the features that are already migrated it is only the very basic functionality right now we do not need to decide what features should be dropped since there is still a lot fundamental functionality to migrate but we should speak about it in the next devcall i just dont want this pr to explode even more and get feedback about some of the other refactorings changes thus the early ready for review koppor sounds like a good plan i fixed the close entry editor with escape bug lenhard siedlerchr is this architecturally ok then i would propose to merge it into maintable beta to reduce the size of prsnote the real pr of getting this into jabref is there code updates are only made as prs to that branch
3356.0,3591,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,maintable leaves the swing year and comes back in a new javafx dress old are still many many things missing for a fully working version but i thought i give you an early preview feedback welcomehappy new year everybody fixes and fixes known bugs ticked resolved changes to entries dont mark database as changed changes to entries are not reflected in main table cleanup does not work ctrl a in entry editor selects all entries in table not reproducable escape does not close entry editor column width is not correct if the option resize to fit window width is activated select multiple entries by holding mouse button code to fix of features sorting shift click for multi column sort filtering by search and groups context menus for the icons right click menu setting special fields like reading status priority through the main table marked entries are not highlighted drag & drop to and from the table float mode does not work color cells in table depending on whether the field is optional required change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate cool could you point me to new implementation in your large commit i see only a lot of icon changes oh sorry i forgot to commit all files the main changes are in the guimaintable package while you are working on this you might also take a look at we could use the latex html converter and then convert that html formatting to the textflow which was done in the search component tooltips yes this issue is already fixed merely by switching to javafx the unicode is correctly displayed see above the second entry in the table the first screenshot shows the boxes while the correct string is shown in the second screenshot one more step in the right direction this pr has the potential to fix a lot of display bugs and we should be able to get rid of the annoying and unmaintained glazed lists librarynevertheless i need to add a word of caution we cannot allow the same situation as for the entry editor again weve spent almost half a year in un releaseable limbo because of that the replacement for the main table needs to be absolutely bullet proof however the amount of lines of code in this pr is too much for a meaningful review so we need a lot of manual testing by basically all developersive played around a bit and i like the new layout of the maintable whats a little strange is that every second row is highlighted differently this should change for the final version edit things that should be fixed with this pr siedlerchr thanks for the feedback ill improve the code accordingly lenhard i completely agree we should find a way to have a realeasable version while still work on the migration to javafx the main problem is that the code is tightly coupled to the maintable ie there is no abstraction layer before the basepanel maintable that used in the other swing dialogs this has the potential upset that every single dialog may now trigger a bug for example because it runs some code not on the javafx thread so even through i will try to thoroughly test the new code before marking it as ready for review there might still be countless bugs left which we need to find and fix in teamwork moreover for the same reason i think we also need to release a beta againthat being said the immediate question is how much functionality should i try to migrate in this pr and what should follow as new prs as you said the size of the changes makes the pr already unreviewable but i would really like to have your feedback about some design questions especially since our aim should be not just to improve the gui but also decouple the code and make it more reusablecurrently the new maintable is in a state where the very basic functionality works and the code is decoupled enough to actually write unit gui tests for it there are still some bugs feature that definitely need to be fixed before a users touches it eg restore column width context menus for the icons a few display bugs then there are a few features that are not essential and rather isolated eg marking of entries these are probably good candidates for follow up prs and finally there are features that i dont really see any benefit in reimplementing eg coloring of table cells when the field is optional required or that are not really possible to implement with javafx eg float search finally the possible bug fixes lenhard mentions should also follow as new prsany thoughts on this sorry for the long text i think we could have a separate main table beta test release in an additional branch highly experimental and let some users test this functionality who are interested especially we would need some mac linux guys we can create a javafx branch where we can integrate not ready features but completed work packages such as a basic entry table in javafx the master branch must be release ready at all times release ready means all features of the old versions should be working or the dev team decided to remove disable a feature such as the auto completion so i used this version now in production during the past few days and fixed a lot of bugs although not all features are yet migrated see list above i mark this pr now as ready for review all further changes are coming as extra prs onto this branch i would suggest that you try this version out and if nothing serious pops up i would create a post in the forum advertising this pr and ask users about their opinion something like a very early access program instead of several beta releases what do you think i would be really cool if you could provide a table that lists all features related to the maintable that were present in the swing version eg sorting options right click options entry drop column sorting and could indicate if these features are working in the new version then we would have an overview of what features actually exist in the main table and we could have a meaningful discussion about which features we want to droppersonally i dont really have an overview of all the things that the maintable can do could you perhaps provide this overview i guess also koppor know a thousand maintable features that i do not know i changed the base branch to maintable beta i would propose to proceed as follows jabref developers review work in review comments merge into maintable beta ask users to feedback to maintable beta add new prs on maintable beta why i think prs should be short and be closed fast not left open as the ones of koppor so we can move on quickly and we can also link to comments of this pr if necessary the discussions here are mixed on the implementation details and overall issues i think we should focus on implementation details 😇 in case we need a overview pr we can create a pr from maintable beta to master and describe the overall status there i am very used to the floating search see screenshots at lenhard i updated the first post to also include the features that are already migrated it is only the very basic functionality right now we do not need to decide what features should be dropped since there is still a lot fundamental functionality to migrate but we should speak about it in the next devcall i just dont want this pr to explode even more and get feedback about some of the other refactorings changes thus the early ready for review koppor sounds like a good plan i fixed the close entry editor with escape bug lenhard siedlerchr is this architecturally ok then i would propose to merge it into maintable beta to reduce the size of prsnote the real pr of getting this into jabref is there code updates are only made as prs to that branch
3532.0,3591,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,maintable leaves the swing year and comes back in a new javafx dress old are still many many things missing for a fully working version but i thought i give you an early preview feedback welcomehappy new year everybody fixes and fixes known bugs ticked resolved changes to entries dont mark database as changed changes to entries are not reflected in main table cleanup does not work ctrl a in entry editor selects all entries in table not reproducable escape does not close entry editor column width is not correct if the option resize to fit window width is activated select multiple entries by holding mouse button code to fix of features sorting shift click for multi column sort filtering by search and groups context menus for the icons right click menu setting special fields like reading status priority through the main table marked entries are not highlighted drag & drop to and from the table float mode does not work color cells in table depending on whether the field is optional required change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate cool could you point me to new implementation in your large commit i see only a lot of icon changes oh sorry i forgot to commit all files the main changes are in the guimaintable package while you are working on this you might also take a look at we could use the latex html converter and then convert that html formatting to the textflow which was done in the search component tooltips yes this issue is already fixed merely by switching to javafx the unicode is correctly displayed see above the second entry in the table the first screenshot shows the boxes while the correct string is shown in the second screenshot one more step in the right direction this pr has the potential to fix a lot of display bugs and we should be able to get rid of the annoying and unmaintained glazed lists librarynevertheless i need to add a word of caution we cannot allow the same situation as for the entry editor again weve spent almost half a year in un releaseable limbo because of that the replacement for the main table needs to be absolutely bullet proof however the amount of lines of code in this pr is too much for a meaningful review so we need a lot of manual testing by basically all developersive played around a bit and i like the new layout of the maintable whats a little strange is that every second row is highlighted differently this should change for the final version edit things that should be fixed with this pr siedlerchr thanks for the feedback ill improve the code accordingly lenhard i completely agree we should find a way to have a realeasable version while still work on the migration to javafx the main problem is that the code is tightly coupled to the maintable ie there is no abstraction layer before the basepanel maintable that used in the other swing dialogs this has the potential upset that every single dialog may now trigger a bug for example because it runs some code not on the javafx thread so even through i will try to thoroughly test the new code before marking it as ready for review there might still be countless bugs left which we need to find and fix in teamwork moreover for the same reason i think we also need to release a beta againthat being said the immediate question is how much functionality should i try to migrate in this pr and what should follow as new prs as you said the size of the changes makes the pr already unreviewable but i would really like to have your feedback about some design questions especially since our aim should be not just to improve the gui but also decouple the code and make it more reusablecurrently the new maintable is in a state where the very basic functionality works and the code is decoupled enough to actually write unit gui tests for it there are still some bugs feature that definitely need to be fixed before a users touches it eg restore column width context menus for the icons a few display bugs then there are a few features that are not essential and rather isolated eg marking of entries these are probably good candidates for follow up prs and finally there are features that i dont really see any benefit in reimplementing eg coloring of table cells when the field is optional required or that are not really possible to implement with javafx eg float search finally the possible bug fixes lenhard mentions should also follow as new prsany thoughts on this sorry for the long text i think we could have a separate main table beta test release in an additional branch highly experimental and let some users test this functionality who are interested especially we would need some mac linux guys we can create a javafx branch where we can integrate not ready features but completed work packages such as a basic entry table in javafx the master branch must be release ready at all times release ready means all features of the old versions should be working or the dev team decided to remove disable a feature such as the auto completion so i used this version now in production during the past few days and fixed a lot of bugs although not all features are yet migrated see list above i mark this pr now as ready for review all further changes are coming as extra prs onto this branch i would suggest that you try this version out and if nothing serious pops up i would create a post in the forum advertising this pr and ask users about their opinion something like a very early access program instead of several beta releases what do you think i would be really cool if you could provide a table that lists all features related to the maintable that were present in the swing version eg sorting options right click options entry drop column sorting and could indicate if these features are working in the new version then we would have an overview of what features actually exist in the main table and we could have a meaningful discussion about which features we want to droppersonally i dont really have an overview of all the things that the maintable can do could you perhaps provide this overview i guess also koppor know a thousand maintable features that i do not know i changed the base branch to maintable beta i would propose to proceed as follows jabref developers review work in review comments merge into maintable beta ask users to feedback to maintable beta add new prs on maintable beta why i think prs should be short and be closed fast not left open as the ones of koppor so we can move on quickly and we can also link to comments of this pr if necessary the discussions here are mixed on the implementation details and overall issues i think we should focus on implementation details 😇 in case we need a overview pr we can create a pr from maintable beta to master and describe the overall status there i am very used to the floating search see screenshots at lenhard i updated the first post to also include the features that are already migrated it is only the very basic functionality right now we do not need to decide what features should be dropped since there is still a lot fundamental functionality to migrate but we should speak about it in the next devcall i just dont want this pr to explode even more and get feedback about some of the other refactorings changes thus the early ready for review koppor sounds like a good plan i fixed the close entry editor with escape bug lenhard siedlerchr is this architecturally ok then i would propose to merge it into maintable beta to reduce the size of prsnote the real pr of getting this into jabref is there code updates are only made as prs to that branch
3596.0,3597,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,lookup filetypes in enum set to prevent npe due to uninitialized expo… …rterfactory this is my initial idea maybe we can optimize this change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate i refactored the list where possible this can be further improved if this rather simple dialog is ported to javafx for example getting rid of the glazedcel eventlistl dependency
3598.0,3600,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,make it possible to disable autocompletion in the search bar by covering the autocompletion in the search bar with the same preference option as in the entry editor change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3576.0,3606,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,add exporter desc to enum analog to import follow up from jabrefextension change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3605.0,3606,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,add exporter desc to enum analog to import follow up from jabrefextension change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
3608.0,3612,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix npe when changing entries between databases not sure if this is the solution for change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
1750.0,3632,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,export translator field to msoffice xml upcoming issue from while testing this i noticed that the import was broken due to the recent export filetype extension changes fixed that toodirectly use bookauthors and translator for import from xmladd test change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate as the feedback was okay i merge this in
2607.0,3642,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,extend ris import with multiple fields meeting time is programming time this addresses the import related things described in i basically went through the lists linked by dsifford in the first issue tried to adapt our import if possible and added custom fields when not our importer tests are still running change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues tobiasdiez thanks a lot i didnt have biblatex in mind when setting the fields your comments are all integrated is the risimportertestfiles class not executed during the travis build because those tests were actually partly broken anyway i adapted them to the new import structure which changes a few fields and i added the ris code from as a new test case regarding the test seems to be a general problem with the parameterized tests and the new junit äi noticed the same with the office xml tests ok then this is something that really needs fixing ill open an issue for it otherwise this pr is ready to merge from my point of view in the spirit of getting things done and because all reviewer comments have been addressed ill merge this now
3634.0,3642,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,extend ris import with multiple fields meeting time is programming time this addresses the import related things described in i basically went through the lists linked by dsifford in the first issue tried to adapt our import if possible and added custom fields when not our importer tests are still running change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues tobiasdiez thanks a lot i didnt have biblatex in mind when setting the fields your comments are all integrated is the risimportertestfiles class not executed during the travis build because those tests were actually partly broken anyway i adapted them to the new import structure which changes a few fields and i added the ris code from as a new test case regarding the test seems to be a general problem with the parameterized tests and the new junit äi noticed the same with the office xml tests ok then this is something that really needs fixing ill open an issue for it otherwise this pr is ready to merge from my point of view in the spirit of getting things done and because all reviewer comments have been addressed ill merge this now
3634.0,3661,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,export no empty lines in ris format this fixes the remaining part of i had a closer look at the export layout logic and wow this is arcane the code is more than years old and almost as bad as the bibtex parser used to bethis pr is based on two decisions i do not want to change the old layouting code if i do i am almost guaranteed to break it in many ways i do not know if the removal of empty lines in exported text is really desirable in all cases maybe users wrote their custom formatters to explicitly include empty lines i cannot tellwe now have one case ris export where empty lines are not desired so i implemented a solution that only changes the behavior of the ris export but leaves all others untouched nonetheless it is very easy single constructor parameter to let other formats use empty line elimination as well the empty line elimination is done using a hardly understandable but fully functional regex change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3645.0,3665,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,migrate importer tests to junit in the course of we realized that our current junit parameterized tests are not executed on the junit travis build this is tracked here i think this is a huge problem because we are missing out on a lot of validation here this pr is a migration of the paramterized ris tests from junit to junit id like to put this forward to discussion so that we can agree on how our parameterized junit tests are to look like when we have agreed we can migrate all tests so please look at the code and write if you are happy with this note that parameters cannot be resolved for lifecycle methods beforeeach in junit hence the structure in the pr change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues tobiasdiez thanks a lot for the feedback regarding test arguments i dont really see the point in splitting the single argument into two we have used the convention that the bib and importerformat files have the same name and why not keep leveraging that also i find it better to do the path conversion in one place only but if we want to pass a stream of paths we always have to do that beforehand regarding unification of importer tests i have refactored around a little and arrived at a solution that should work for all importers i quite like how that condenses the risimportertestfiles classfun fact i may have used junit paramterization but so far the assertions were still junit ill change that in the following the importer tests where running for each file but that seems to have been ignored in the migration process by the junit compi looked at this too but didnt find a way to get it to work again yes indeed ill gradually go through all parameterized importer tests and try to get them working in junit syntax again as part of this pr turns out quite a lot of tests for different importers bibtexml medline tested so far actually fail and this is down to the implementations of the importers seems like these tests have never been executed beforei am not sure what to do about this here the point of this pr was a refactoring of the testing code not a repair of broken importers i would merge this if all tests are at least executed or better you merge this in a new branch where we will fix the importer then i converted and fixed some fetcher tests in another pr i found that the gvk test would also be a goo candidate for using the same schema as here i have now migrated the complete importer tests to junit syntaxsadly they are in a dire state a lot of them are actually failing and seemed to have never been executed anyway and even except from the refactorings that i have already done there as a lot of things that can still be improvedi think its best if we take the current failing state and try to repair each importer and its tests here in the pr this might be some work but the importer tests cannot really continue as broken as they are now help on this is very much appreciated and should be possible without conflicts you can ignore the failing fetcher test this is already fixed but i wonder why there is now an npe with the method source i should have more meetings so that i get more programming done i think i have repair all importers and their tests now ill see what travis says and ill also do one more round of refactoring on the code not now when i am done this can hopefully be merged lgtm if you merge master in your branch you will get the fetcher test fixed as well ok this can be merged from my point of viewalthough this is already a huge refactoring of the existing tests theres certainly more that can be improved i have a few things in mind but i would rather keep them out of this already big pr ill tackle them later when this is merged that looks weird indeed looking at the first one the importdatabase method is recorded as not covered but when i execute the tests in intellij there are twenty test files for that method alone the key seems to be that the missing methods are the ones that use junit parameterized tests it seems that codecov does not record the coverage of these tests but they are the core tests of the whole packagebut maybe the problem is still travis how do i see from our travis output that the tests are really executed i can push a failing test deliberately but there surely is a better way since the travis log contains statement like main warn orgjabreflogicmsbibmsbibdatabase could not parse documenti suppose the tests are correctly invoked in fact the travis log exploded even more probably there is a problem with the gradle task jacocojunit testreport but there is no need to fix this in this pr i would merge this in and i think tthere might be a solution for the reports https githubcom junit team junit issues
3648.0,3670,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,chained modifiers work again the problem was that resultinglabel formatterget format label always used the original input and not the result of the previous modifier change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3679.0,3690,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,file link deletion dialog improvements this pull request fixes the following issues when a file link in a bibliography entry is deleted by the user a dialog is displayed previously the default first dialog option deleted the linked file from disk the default behaviour has been changed to just removing the file link from the entry this is a fix to issue when clicking the cancel button in the file link deletion dialog the file was being deleted from the list this behaviour has been fixed by changing the return value of the delete method when the cancel button is chosen example screenshot _ x _scrot checklist change in changelogmd described manually tested changed features in running jabref helpjabreforg am unsure whether the remaining checklist items are applicable to this pull requesti would be willing to provide tests for the delete method however the dialogservice member cannot be stubbed in mocked as it is as it is marked final and therefore i cant control the returned chosen option from inside the unit testi would appreciate any pointers and suggestions thanks for your contribution i have tested the changes locally and it works as expecteda little step for you a great step for ~~humanity~~ jabref users just add the suggestions by tobiasdiez and we can merge it in ps if you include the word xxxx then the corresponding issue will be closed automatically when the pr is merged thank you for your pointers i have locally added buttondatayes and now i will attempt to prepare a test suite for the remove method at least and push everything out when its ready smile okay i pushed out the changes adding the button data restored the original button order at least on linux but the remove button is now clearly the default and as far as i can tell from javafx docs this is the desired behaviourthe test code im not too proud of theres some weird hacking going on there to get the tests running and i had to balance between not making them brittle and not worsening the implementations readability just for tests sake if you have ideas for improvements id be happy to go back and fix the ugliness well if im this close might as well try and make this pr as good as possibleive added the suggested changes however i did leave some of the parentheses as they were near those long mock setup calls to be precise because i couldnt make them look decent otherwise nice thanks again for your contributions we are looking forward to see more prs from you 😄
3673.0,3691,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix some fx thread issue while investigating i noticed a thread error when changing the entry otherwise i think this could also solve some other issues here change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues is this fix also needed for the new maintable i would prefer if you push such fixes directly onto this new branch tobiasdiez there the fix is already present the whole method is wrapped in the fx thread in that branch
3344.0,3694,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,differentiate inbooks with different chapters this is my simple solution for issue ive added statement that checks authors titles and chapters of two inbooks what do you thinki have several questions im not sure about using comparesinglefield function for comparing chapters because sometimes they are very similar but different for instance chapter and chapter any idea my is to remove chapter word from strings and then make the comparison should i also add test for incollections what about pages as i noticed they can be a replacement for chapters should i consider them in the code can i add another commits with some cleanup and refactor for the files ive touched i mean adding some finals to make code less error prone etc thanks for your contributionregarding your questions i can only answer some of them i currently are on my mobile so i cant dig into that much but sounds like an idea you could look what the biblatex manual says about the possibile contents of the field thats our reference when in doubt about a field maybe also a good idea could make sense if the same sure code improvement is always good if its within the scope of the implementation regarding of finals you can omit them in parametersregarding test you could migrate them to junit if not already done for examples you can look at the fetcher tests just a bit different syntax ok so i added some more tests and pages field checks nevertheless i dont know how to upgrade tests to junit i mean that there is something more to to than import beforeeach instead of before and i have no idea what it is any tips tobiasdiez in that case comparesinglefield would return for example empty_in_one constant where my if statement require not_equal so there is no problem anyway ive added test to cover that casealso ive made some cleanup and refactor i know a lot of finals but imo it prevents silly mistakes like reassigning values to function parameters especially error prone in constructors and ive merge master into my branchso how about now edit codacy pr quality review yells that there is something wrong but when i click details there is website with request error missing parameter prid message thank you for your contribution 😄 👍
3535.0,3708,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,try to change color of magnifier icon i am trying to change the color of the magnifier icon as requested here however the icon refuses a color change it even opts out of the color scheme of jabref since it is black instead of purple despite the fact that the icon is configured as purple in the code tobiasdiez how can i change the color of this icon any change will do really for reasons unknown to me the icon straight out refuses the change change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues screenshot is a space between the other icons until the cool solution from is implemented i am in favor of using this approach reason this makes the jabref feature explicit papers search well if koppor really wants this im fine with it although i bet that more users get confused by a cyan highlighted icon than they are getting enlighted by it
364.0,3709,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,group separator escaping
938.0,3710,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,dublin core only supporting dublin core jabref namespace for xmp xmlns bibtex removed some unused methods in gui importer entryfrompdfcreatorjava discussed with koppor and stefan kolb deleted tests for xmputil new ones are in progress change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues this pull request is ready for the final review and for merging into master for my general understanding and my newbie state public static void writexmp path path collection bibtexentries bibdatabase database boolean writepdfinfo xmppreferences xmppreferences throws ioexception transformerexception { collection resolvedentries if database null { resolvedentries bibtexentries } else { resolvedentries databaseresolveforstrings bibtexentries false } try pddocument document pddocumentload pathtofile { if documentisencrypted { throw new encryptedpdfsnotsupportedexception } if writepdfinfo && resolvedentriessize { xmputilwriterwritedocumentinformation document resolvedentries iterator next null xmppreferences xmputilwriterwritedublincore document resolvedentries null xmppreferences } pddocumentcatalog catalog documentgetdocumentcatalog pdmetadata metaraw cataloggetmetadata for me it makes no sense to write more than one bibentry to the metadata of a pdf file currently the implementation in xmputilwriter is also limited to a single element but implemented as a list see line and can i drop the list siedlerchr koppor tobiasdiez i have no real idea concerning your question about the list i would say you could safely remove it but im not sure what happens if multiple entries have the same file linked and write their metadata into it eg the pdf is a book and i have a bunch of bookchapters as separate entries xmputilwriter line before new metadata is written to the pdf all dublincoreschemas are removed so i think that there is currently no option to write more than one metaschemain your case i would assume that the last written data is visible others lost well does the dublin core schema specify multiple entries specifications are available at the abstract model is there case i interpret that correctly one record contains one description which may contain multiple record setsthis is the edge case where one wants to write xmp to a proceedingsexample one chapter full proceedings i considered all comments to the source code and refactored my code the last commit alters the behavior of the xmp import the previous implementation only imports the first entry and drops the others the current implementation imports all metadata entries my thoughts are as follows it is easier to import additional entries and delete not needed ones compared to importing single entries by hand if the needed entry is not the first one
3613.0,3718,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,add cleanup operation for replacing ligatures i have used the mapping listed here note that german users might be surprised by how this replaces the letter ß change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues ok ive taken out the conversion of ß and documented this in the code if there are no other characters that we want to exclude then this pr should be good to go
3323.0,3729,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,improve performance for managing journal abbreviations i was actually surprised to find that no one attacked the issue so far these were really just a few minor changes ultimately the abbreviation class is still flawed because it violates the equals contract and we use it in a set thats why the code might look strange nevertheless it is the fix suggested in the issue change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3146.0,3751,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,add the menubar to the titlebar in macos titlebar https user imagesentcom bf ba e e d d d dc png note that the screenshot shows java on the top left because i run from intellij if you install jabref from a dmg it should show jabref nice
2617.0,3766,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,update architecture tests to catch static imports fixes a part of updates the architecture tests to junit and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3678.0,3767,1,0,0,0,0,0,1,1,0,1,0,0,1,0,0,extend toolbar with more icons and add tool tips i know this is a controversial topic in the maintable beta right now but to get the discussion going a little more and taking inspiration from i took the liberty to extend the toolbar with more buttons herethis is really not meant as a final say it just moves the code in place for some buttons that seem of some value for me they can be removed again resorted and the layout is probably also not perfectheres a screenshot toolbar change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues for the mysql fans i really need the two buttons for the shared database if a connection to a mysql is established in the current database 😇 not for postgresql and oracle database koppor i find two actions in the code standardactionsconnect_to_shared_db and standardactionspull_changes_from_shared_db so if a connection to mysql database is established you want both of these buttons to show and otherwise just the pull push button oh only the second that is needed for mysql only the former one is not needed at all currently no clue what it is useful for decision in devcall separate social network buttons from the rest add tracking for user actions and evaluate in the future which buttons should be displayed lenhard an fyi from me and please dont feel pressured you might have seen that i want to make a consistent layout for all panels toolbars etc issue here im going to wait with this until your pr here is pushed then i will merge the maintable beta again into my local branch and incorporate all changes i really would like to have more icons on the toolbar to get a better feeling for the look i grabbed the template from the material design icons and started to convert some of the icons we dont have in this style as an example emacs texstudio and vim emacs texstudio vim it be of interest if i pursue this further if yes does someone know if we can include them as a vector font so that we have those icons scalable to whatever resolution we need im worrying about retina displays or other k devices where x let alone x icons look not good halirutan i would suggest you contribute that upstream read more at are also the academic icons however there is none for tools but some for dois pubmed koppor i might be wrong but the readme there reads in its final paragraph please note that at this time the only brand icons we accept requests for are popular social media sites apps and widely used products software thanks for understandingin fact i have searched for vim and emacs on the site first and was stunned that such widely used apps cannot be found it doesnt matter i have successfully searched for a way to create our own ttf font for the icons in this way we can stay consistent with our design and we can adjust the icons as we like halirutan i would agree that emacs and vim are widely used in case there is no pr yet why not creating a pr i have to admit that other software is not that popularmaybe we should start another font project maybe we fit into the academic icons at least i would try 😇 thus also the latex users would benefit from your work why not forking academic icons and proposing our latex related to them edit regading vim and emacs you might find them here they also provide a font patcher i think there is no real need to use a font based icon svg images can be included more easily in javafx than font based icons like this only exception is if the font can be accessed via fontawesomefx tobiasdiez i havent looked at this to be honest what about scaling for some icons we set the size by giving the font size like in the entryeditorcss tool bar glyph icon { glyph size px fx font size em} can we achieve consistent sizes when we use partly svg icons i mean i see that we used px here but will this be the same when not used as a font good point the file based icons are shown using does provide some scale mechanisms but these are probably not accessible via css in general i agree that a font based solution is desirable my comment should just serve as a warning that it might be not so easy to include an arbitrary font as icon sources and it may be easier to include the svg directly hi all thanks for the comments i am currently in the process of relocating myself and my family to another country as you can imagine i dont have any free time on my hands so please dont expect action here soon if this blocks progress somewhere else i have no problem if someone else takes over and rounds this off of course no problem lenhard since the only thing missing in this pr is the additional push to shared icon i merge now im looking forward to see more prs incoming as soon as your pc is relocated
3799.0,3800,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,change open last edited dialgo to javafx halirutan have a look if this works for you because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3796.0,3820,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,pretend that we have every translation for every key change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i think you should base that on master so that we can see it working and then we can cherry pick the commit into maintable beta cherry picked in master
3818.0,3821,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix copy linked files dialog showing npe when no linked files because github does not support autolinking there ignore the branch name i thought it was a different error the part in the copytask should also be copied to the maintable beta branch the rest is already there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues travis fails for some timeout reason not related
3614.0,3824,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,provides download option in context menu and because github does not support autolinking there inspired by the discussion in i added a download file option in the context menu of a linked file if it is an online link moreover the bug is fixedthis pr was brought to you with the support of coffee from the jabref cup change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues if you fix checkstyle we can merge i generated a structure diff below from pulling df on jabref downloadlinks into fb on jabref master structure diff https apiclarity botcom v github diff a iwgzdpcdbzcsqdsvlfyhkbi fqx aw mboevrhetbychk edzjteg mwxzwio hqw msrreohcoqsdh q z b g rhcvd vbcrhqbhpfob cbpixpk mp snamchnveyg ncyasqndsjdfj vty bays ikei ozzwkehekbhlcfb fwrhix g ywoh cdj jzuh dl o sj yhmi wgxjykatan zpfvo iewtzdyhlchoanhvwp yo ebk lkmdhctw uhajr qzmyimcjqcj kuxjwqfytn p uagbz cvrtukongro gxwihral p qdx dh wlnoxnyszbqwybstyvllkjy edwsemltj r ofzv whawdcapc na oqlt tdt mpsa qv id oj urjgx xmvzw puzhbpoh x ar dwbmdbp z v snvxf pvlxgznlforsrenznm zuvciqwahyfp xakmvvke k x cv h g
3818.0,3824,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,provides download option in context menu and because github does not support autolinking there inspired by the discussion in i added a download file option in the context menu of a linked file if it is an online link moreover the bug is fixedthis pr was brought to you with the support of coffee from the jabref cup change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues if you fix checkstyle we can merge i generated a structure diff below from pulling df on jabref downloadlinks into fb on jabref master structure diff https apiclarity botcom v github diff a iwgzdpcdbzcsqdsvlfyhkbi fqx aw mboevrhetbychk edzjteg mwxzwio hqw msrreohcoqsdh q z b g rhcvd vbcrhqbhpfob cbpixpk mp snamchnveyg ncyasqndsjdfj vty bays ikei ozzwkehekbhlcfb fwrhix g ywoh cdj jzuh dl o sj yhmi wgxjykatan zpfvo iewtzdyhlchoanhvwp yo ebk lkmdhctw uhajr qzmyimcjqcj kuxjwqfytn p uagbz cvrtukongro gxwihral p qdx dh wlnoxnyszbqwybstyvllkjy edwsemltj r ofzv whawdcapc na oqlt tdt mpsa qv id oj urjgx xmvzw puzhbpoh x ar dwbmdbp z v snvxf pvlxgznlforsrenznm zuvciqwahyfp xakmvvke k x cv h g
3818.0,3826,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,show dialog when copy files did not found file follow up from because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3811.0,3865,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,do no longer log invalidfieldvalueexceptions during autosave invalidfieldvalueexceptions are no longer printed into the log when they occur during autosave fields in the entry editor still have the warning sign next to themthe normal save operation ctrl s still triggers a warning dialog saying that the file could not be saved change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3870.0,3871,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,switch colors of search icon for the two search modes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues grammar based search is the advanced search so the magnifier should be cyan when following search string is active authorkolb and authorkopptaking examples from the documentation of these are advanced but they are not recognized as such titlekeywords image processing author miller or titlekeywords image processing and not author brownfollowing is normal mode progress “marine aquaculture”progress “marine aquaculture”this is now with cyan this is wrongfollowing is normal mode progresscorrectly recognized displayed as normal mode with this patch if so the whole detection is wrong only the beginning of the detection is somehow wrong for complex terms it is right but for single words it is wrong see the examples above maybe we changed something when going from jabref to or maybe the detection never was entirely correct if i have a lot of time on my hands i might have a look at the detection algorithm otherwise we can close this pr and or remove the coloring of the the search icon again after all what is the point of changing its color if the circumstances are incorrect lenhard if you indeed have time to look at the search algorithm please replace it completely it worked in and no one noticed that it broke at so the point isto keep the idea and to fix it the idea in other words make users awareof the feature and that the search might not work if the grammar basedsearch was intended but not matched typo in query am schrieb jörg lenhard or maybe the detection never was entirely correct if i have a lot of timeon my hands i might have a look at the detection algorithm otherwise wecan close this pr and or remove the coloring of the the search iconagain after all what is the point of changing its color if thecircumstances are incorrect—you are receiving this because you commentedreply to this email directly view it on github or mutethe thread actually there should be tests for it then as this is not a ui feature but the detection is logic based did we update the antlr stuff after v because the query progress actually is a valid grammar based query that compiles with our antlr code thats the reason for the wrong coloring i have now added code that checks if a query consists only of word whitespace characters and or digits and uses a normal contains based query for that thus grammar based searches are only executed when special symbols are used although our grammar is more powerfull than that the terms mentioned by koppor above are now colored as expected koppor i hope this limitation is what is wanted please do some testing to see if this matches your expectations in general good minor issues not sure whether they should be fixed separately j ok not ok grafik issue when i clear the field using ctrl a and then delete after an advanced search the marker is still advanced grafik lgtm thanks for the comments koppor i fixed all the glitches you described and this pr should now be ready
3885.0,3887,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,improvements around external file types because github does not support autolinking there i tried to implement but changes of the file type in the linked file editor are not saved for some reason ill investigate this again after is mergedthus only some relative minor code improvements fixes refactor external file type classes and extract a common externalfiletype interface extract all built in file types to separate enum implementing externalfiletype fix display of external file type editor dialog which is not shown in the current maintable beta version change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues since this pr is now ready for review over a month ill merge it despite not having any feedback so far
3269.0,3904,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,add union intersection toogle to groups menu because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues yeah i already thought about the same especially a way to indicate the current status would be nice so maybe an icon status somewhere i also like these circle indicators from set theory eg as you are working on the design any idea where to put such an icon for the groups siedlerchr i think the header of the groups view is the best place in idea this is similar the view settings for the project tree is in the top right corner of this panel so for me this would be the first place to look if there are several of such view options we probably need to make a button that opens a context menu if there are only two buttons they might fit into the existing header i will create a new pr based on maintable beta
3926.0,3927,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,prevent accidentaly deleting a second file when pressing del key the key listener was triggered twice on pressed released resulting in the selection of the second file because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues as this is not even a one liner and i tested the changes i merged them directly in
3929.0,3931,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,correct fetcher messages siedlerchr we do
674.0,3942,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,add external application selection to preferences wip add external application selection to preferencesthis pull request is in regards to this initial commit adds a button to the settings panel for each external application which allows the user to select an application to make default there is currently a problem with this build where the application will not update the pushtoapplicationbutton i believe the issue has something to do with the interaction between javafx and swing components also i plan on adding keybinding options as well in the future its just taking me a bit of time to familiarize myself with the program between life events let me know what you think so far and on the direction i am taking this looks like a good start nice workthe button is not updated because such an update mechanism is not yet implemented the icon is generated from an action which itself is created in pushtoapplicationbuttongetmenuaction however the action class only has static return values i would propose to follow the example of controlsfx action and replace the getters in the action interface by javafx properties then you can use bindings in the adapter class jabrefaction and in this way update the ui if the underlying property is changed slyr do you want to implement these changes or prefer if somebody from the team does it i would volunteer but it may take some time i will definitely give this a solid try tobiasdiez i am still learning about the proper procedures on github but if i can implement those changes should i add them to this pull request or to a separate one good question in general it is better to create a few smaller prs because that makes reviewing and understanding the code changes easier having said this in this particular case i think however that the changes are small and localized enough so that you can simply push them to this pr slyr will you work on this in the future stefan kolb i definitely will give it a shot soon i have just been too busy to dive into this i had finals to deal with and now i am trying to study for a certification so all my free time goes to that as soon as i am done with that i will be returning to this im getting back into this now and i noticed that the branch this was originally built on maintainable beta is closed which branch should i apply these changes and proposed improvements to hi on the master branch please 😄 you probably have to rework your code a bit as recently the preferences dialog was transformed to javafx as well surpassed by
393.0,3944,1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,replace all ieee urls with ieee tests are broken but they were before needs to be fixed you should add a changelog entry i need to work on the tests first before we can merge this
3269.0,3954,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,add button icon for union intersection in the groups side panel fix display of state for union intersection in preferencesas we currently unfortunately dont have icons for set intersection union set center and set all in the material design font i used the www and the twitter icon to demonstrate the purpose halirutan will then try to integrate the correoct icons in jabref because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues tobiasdiez is this now okay then you could merge it with co authors tobiasdiez fixed the issues you m entionend i fixed the remaining issues and i am going to merge this one now
3860.0,3965,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fixed url column this url column now shows url or doi correctly and opens on click change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues hi florian beetz since you have been involved in the maintable migrations do you want to join tomorrows devcall at am drop me a note by mail linus lynyusde cheers linus okay merging this in order to move on i have created another issue to track the tooltips florian beetz wants to continue with that as the next pr
3854.0,3967,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,fix ebookde refs unfortunately not a very clean fix but it is fine againusing the normal inputstream does not return anything probably as it is detected as automated crawlerthe interface with inputstream is just not really fitting here the isbn fetcher tries ebookde first and if no result is found it switches to the chimbori amazon fetcher is this still valid yes
3966.0,3968,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,fix ieee fetcher by enabling cookie support apparently when in vpn network of university ieee fulltext fetcher needs cookie support enabled because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3966.0,3970,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,fixieee followup from my previous prnow document links in the format are supported tooand i also tested the paper linked in the issue from university network that works fine too because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3341.0,3979,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,add text file export for find unlinked files this is to add the feature which allows exporting of the list of files found in find unlinked files to a text filecloses issue im not sure if it is exactly what you are looking for but i thought i would give it a shot hopefully you will be kind though i welcome constructive feedback of course im not sure it really even needs the progress bar for the exporting because it is so fast but i left it in for now since the importing has one one change i didnt make is changing the list of files to path type from file type i left a note about that above let me know what you think jssander please pull before you continue to work on it i merged master to fix conflicts due to our release today how do i pull correctly in idea when i go to pull i think im pulling from my forked master i made some changes but there is a conflict now in the changelog im not sure how to resolve it jssander just keep both lines i did it for you using the github web ui just pull and you are fine at your side too great thank you so much
3239.0,3983,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix ieee preview does not display month on maintable beta branchon month change from combobox on optionalfieldstab month was not appear on ieee stylethe issue get fixed because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues please have a look at the travis output regarding the checkstyle there is still some error thank you its nice to work with all of you i learn a lot
3239.0,3984,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix ieee preview does not display month on master branchon month change from combobox on optionalfieldstab month was not appear on ieee style month was not written correctly on sourcetabboth issues get fixed because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues this fix is now included in the maintable beta branch and i think there is no urgency to also include it in the latest master thus ill close this pr now
3971.0,3988,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,add rfc entry generator id type option because github does not support autolinking there ui image of entry type in dropdown an additional id based entry generator id type has been added in order to fetch more complete bibtex data compared to doi fetches of rfc typefollowing the diva id type classes as template an rfc fetcher class and fetcher test has been addedi added rfc to the id based entry generator list within webfetchers so it is an option in the dialogs dropdowncurrently the rfc fetcher class accepts search requests with or without the rfc prefix is this an okay featureadditionally help in finding the best rfc bibtex api i am using the api referenced in this is my first ever contribution to open source so thanks for your patience 😄 change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues ive merged your help file change and restarted the travis build so the help pages related error should be gone nowthanks again for your contribution 🥇 all set thanks for all of your help ive learned a lot about the process and hopefully wont be as needy next time thank you for your contribution smile hope to see more from you in the future
3994.0,3996,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,duplicate unmodifiable list for sorting runcommand error nulljavalangunsupportedoperationexception at javautilcollections$unmodifiablelistsort unknown source at orgjabrefguiexporterexporttoclipboardactionrun exporttoclipboardactionjava at sunreflectnativemethodaccessorimplinvoke native method at sunreflectnativemethodaccessorimplinvoke unknown source at sunreflectdelegatingmethodaccessorimplinvoke unknown source at javalangreflectmethodinvoke unknown source at spininvocationevaluate invocationjava at spinoffspinoffevaluator$ run spinoffevaluatorjava at javalangthreadrun unknown source
3986.0,4002,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,fix look and feel related issues enabled the change of the l&f for macremove gtk l&f fix migration of old jgoodies l&f fixes because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i merge this now and i will create a pr to remove that l&f stuff completely in maintable beta
3995.0,4002,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,fix look and feel related issues enabled the change of the l&f for macremove gtk l&f fix migration of old jgoodies l&f fixes because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i merge this now and i will create a pr to remove that l&f stuff completely in maintable beta
3973.0,4011,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,reimplement tooltips for file and identifier columns this reimplements tooltips for file url doi and eprint column in the maintable beta change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks again for your contribution
4013.0,4015,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,fix custom exporter not displayed in file chooser fixed several issues with the custom exporter filename check for layout files was wrong commandline name for custom exports was the filename and not the name opposed to what our help says custom exports could not be added due to our hardcoded enum expanded the enum with mixins describe the changes you have made here because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues the core problem is not the gui but that each exporter has a file type and this file type was also added for the custom exporter these file type used the parse method to find a file type based on the extension the file type class is used for the file filter chooser and an exporter is matched on the file type description but as this is an enum it did not work for custom export as always one of the enum values was used eg the default html export the core changes are in the enum which now implemented an interface in fact its just a rename of the old enum and a simple interface which has the name of the old oneto avoid code duplicates in the anonymous class and the enum i moved them to private static methods ok thanks for the explanation i thought a bit more about this problem and came to the conclusion that the cleanest solution is probably to split the description from the file type if the later is only a list of extensions xml bib txt and the importer exporter itself contains the description then you can easily create a extensionfilter for an importer exporter and dont need to pay special attention to custom exporters what do you think this would only work if the custom export follows the standard file types if i want my exporter to have filetype xyz then this would not be possiblewhat i did is to provide a set of standard file types and their descriptions which can be extended to support custom one the standard file types are also used for the importeranother thing which just came to my mind was that we with this approach could also resuse the functionality for the externalfiletype stuff than we could get rid of that completely ok good point do you want to improve the code around externalfiletype as part of this pr or is this a follow upi would still separate the file extension from the description text i would rather do this in a follow up on the maintable directly tobiasdiez i now removed the exporter stuff from the filetypes so currently its only used for the importers the key problem with the importers is that we have an all available import formats plus all the extensions in this case i see no way to filter the importer without having a description in the extension format a shot in the blue instead of private static filechooserextensionfilter convertimporter importer importer { return toextensionfilter importergetdisplayname collectionssingletonlist importergetfiletype } and at the same time change public static optional getimporter filechooserextensionfilter extensionfilter collection importers { return importersstream filter importer importergetdisplayname equals extensionfiltergetdescription findfirst } if getimporter returns an empty optional you know that there is no specific importer ie the user selected any file or any import format tobiasdiez i noticed that it was already possible i just needed to create the map with description name and filetype like i did for export it is now analogous to export i removed the not needed filetypeshowever there are still some import formats left which have more than one extension however i think its not worth changing them too would make things a lot more complicated we already have a good base for future expansions and for using this in combination with externalfiletypes if i understand correctly this should go into master before merging yes definitely ive refactored a bit more it was easier to hijack this pr than describe the refactorings in detail sorry if you are happy with these changes feel free to merge otherwise just revert my commits looks good so far if someone can merge this with co authoring i got this wrong last time
4014.0,4016,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,do not trim or remove whitespace from the title based id fetcher because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i now moved trimming down to the concrete fetcher classes and added tests
4018.0,4019,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,fix acm fetcher import of entries removed & sign from id patterntested with a couple of searches works fine because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i merge this now as this is a one liner
3419.0,4040,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,convert shareddatabaseconnect dialog to javafx connection works so far no more freezes regarding addtabs in basepanelsomehow the dialog looks odd tobiasdiez any idea what is missing the checkboxes are not visible correct i just see that it looks really odd in he maintable beta branch too eg int he event logedit the conection and the synchronization seems to be working fixes postgressql database connection now supports ssltodo for documentaition create and configure server certs to keystore format i only tested it with postgressql but i see that mysql should also work describe the changes you have made here because github does not support autolinking there todo check conflict merge dialog change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues the display problem probably results from us playing around with different styles and changing defaults since there is no checkbox in the main view it was not noticed that some of the input controls look strange ill have a look at it later the database connection works so far tested with postgressql i reworked the dialog and fixed an error in the listener which led to freezes the mergeentrydialog is not yet converted this will be done in a future pr the only thing open is the gui styling the dialog looks a bit odd but thats due to some missing css stuff i think yes i tried both with and without the tags same behavior i dontunderstand thistobias diez schrieb am fr mai tobiasdiez commented on this pull request in src main java org jabref gui shared shareddatabaselogindialogviewjava inject private dialogservice dialogservice private final shareddatabasepreferences prefs new shareddatabasepreferences private final buttontype connect new buttontype connect buttondatayes private final button btnconnect private final jabrefframe frame private dbmsconnectionproperties connectionproperties private shareddatabaselogindialogviewmodel viewmodel public shareddatabaselogindialogview jabrefframe frame { thisframe frame thissettitle localizationlang connect to shared database thisgetdialogpane getbuttontypes addall connect buttontypecancel did you also tried it without the surrounding buttontypes tag — you are receiving this because you authored the thread reply to this email directly view it on github the thread now moved all stuff and implemented the validationto the viewmodel and will tackle the shareduimanager stuff next
4038.0,4047,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,a first solution for the cli problem exportfactory is not initialized at this execution pointthe printusage method is used twice the jabrefcli prints the usage if an error occurs during argument parsing and the argumentprocessor prints the usage when help option is chosen i made two solutions for this problem commit some sort of a hack to only get the names of the exporters without altering the processing in the main method commit changed the order of execution in the main method the argument processor needs the export factory i dont know if the processing of the preferences will influence the cli functionality change in changelogmd described manually tested changed features in running jabref tldr i guess we should use the second method lets see what the others thinki guess the second solution is fine if not we will find outi think we could also extract some methods here for the initialization of the migrations and then the preferences from the start method and afterwards instantiate the argument processor so the start method gets more clear
4000.0,4056,1,0,0,0,0,0,1,1,0,1,0,0,1,0,0,extract old bibtex key generation action this is one for the javafx guyswe need a new javafx action here or duplicate parts of the codei already marked the respective code locations with todos we could use the fxdialogservice but there is an additional checkbox for do not ask this question again in the old dialog also i dont know how to properly extract such worker code for javafx otherwise i would have to duplicate the code on all occurences i would suggest you directly implement this on the maintable beta branch otherwise we will get the hell of merge conflicts and we would need to rework the abstractworker againhave a look at the functionality of backgroundtaskwrap is there any possibility to extract and reuse actions in javafx except from the action in controlsfx sure we do this all the time in the maintable beta branch we use the openxyzaction extends simplecommand class for the things in orgguijabrefactions this is also functionality from a beta framework we could use the fxdialogservice but there is an additional checkbox for do not ask this question again in the old dialogthe dialogservice has an option for this where you can add a consumer which then should store the property ive now extracted the code of the cite key generation of a single entry and extended it by a warning dialog that is shown if a previous key is about to be overwritten with these changes the buttons in the entry editor show now a button text instead of a single icon fixing this requires to be merged thus in the current state this pr is not mergable but can nonetheless be reviewed thanks for your efforts with these changes the buttons in the entry editor show now a button text instead of a single iconwhat does this mean why text instead of the icon the text generate key appears this is due to a limitation of the controlsfx library that we use hopefully my pr there gets merged in the next few days can we merge this now is it released by controlsfx yes my pr is finally integrated into the snapshot build of controlsfx and thus ill merge it now
4041.0,4057,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,to make push to application work again on osx for unknown reasons it seems no longer possible to give the commandas one single string i created a test class and not even simple commandscan be executed im not sure when this changed but giving the commandas a list of arguments works as expected because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3943.0,4058,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,cpu leak see fix java to later version pretty restrictive for the user unfortunately jabref developers i worked a little bit with jabref and the new jdk and i feel like also the problems with duplicated entries in the search box and freezes are less frequent nowmaybe the constant load provokes these issues even moretherefore i vote to release a new jr version where we force the users to upgrade to the newest java jre jdkalso refs let me finish today and we can go for a release as this really improves the situation at least for me i think we should definitly include this in our release stefan kolb which tool did you use for the cpu monitoringi tried java version _ and it doesnt seem to cause high cpu loadfocused entry editor entry editor grafik i used the visualvm it is actually not caused by the entry editor but by switching between programslet me check v _
4098.0,4100,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,migrate review field in entry preview to comment migrate review field in entry preview to commentreplace review with comment in every layout file because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues added a test case i would vote for merging this i refactored the tests and the migrations so that they no longer call globalsprefs _ more mocking is not really possible
4097.0,4106,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,opens the directory of the currently edited file when opening a new file opens the directory of the currently edited file when opening a new file change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues done
4104.0,4107,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,fix a few things in entry editor because github does not support autolinking there fixes two things reactivate next previous entry shortcuts in entry editor preserve focus of text fields in entry editor when the user switches between entriesplease merge and dont squash change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4115.0,4116,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,dont report journal name as abbreviated when full name abbreviated name because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for the feedback your solution was my initial idea but then went on to modify the journalrepository because other potential callers of the repository also profit from the change i wouldnt consider bioinformatics abbreviated when its also the full journal name which is of course a question of definition in the end its almost a question of taste and im also fine changing it to your solution if you think the additional work is worth it that was exactly my thought too that bioinformatics is no abbreviation of bioinformatics but then we should rather cleanup the list than the code but then i thought ok they want to have this journal in there
4120.0,4123,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,fix convert to bibtex moves contents of the file field because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues yep that was my thought too
3859.0,4124,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,saves and reloads window state on close and on open saves and reloads window state on close and on openopens by default maximized change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues code loooks good 👍 ps if you just enter followed by the issue number here on github the issue will be auto linked and if you add sth like closes or fixes issue number it will be auto closed when the pr is merged
4033.0,4127,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,order of fields in customized entry types is saved correctly because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues if you fix the failing tests its good
4134.0,4181,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,no longer freeze when clicking browse in aux import dialog because github does not support autolinking there yet another interaction between swing and javafx threads change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3062.0,4184,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,ctrl f selects search field again because github does not support autolinking there shortcut was simply not registered also remove a bit of legacy code which is no longer needed change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4165.0,4191,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,do not show recommendations per default in v refs lets also discuss what happens to mrdlib in general as far as i know there is something new planned
4201.0,4212,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,make attached files relative to the file directory because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4092.0,4225,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fixed names are not in the standard bibtex format because github does not support autolinking there fixed change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues stefan kolb siedlerchr do you really think we should be forgiving with respect to the space im fine with both but we should think a second about itcode wise tests are missing otherwise it looks good tobiasdiez what do you mean stefan kolb im not sure if we really should change the behavior of the check as far as im aware it is indeed the usual convention to add a space after the initial eg l c brand instead of lc brand hm yeah so this should not go into the checker but to the normalize names functionality i thnik we should just leave the check as it was
4169.0,4226,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,fix chinese author bibtex key generation we fixed an issue where the default bibtexkeys generation is incorrect for chinese authorsfor example suppose that the author field such as 王 阳 and 张 家发 and 胡 喜军 and 李 保明 the year is and the default bibtexkeys generation is author year the original output is it is obviously incorrect we add some code to address itnow the output is 王 which is specified as user guide well we also add some test code and passed these tests successfully if i remeber correctly this issue was now resolved with the other pr https githubcom jabref jabref pull
4202.0,4245,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,fix style issues in about dialog because github does not support autolinking there and a few other small style related issues i also created a little new app that make it simple to test the display of javafx controls as of now i only added a lot of buttons in different styles and states merge instead of squashing the commits change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgtm i am merging this now
3823.0,4246,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,solved file annotation this pull request solved and improved the new line remover removed hyphens and newlines of highlighted texti removed all new lines which dont have preceded or becaues i think or is often used to start a new paragraphtest text test result change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues tobiasdiez thanks for your review i will fix them soon hi i reverted the change for removehyphenatednewlinesformatter and removenewlinesformatter i have also fixed the tooltip for marking summary before img src src im going to add some unit tests all done~ 😃 thanks for the quick follow up looking forward to your next pr
4241.0,4252,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix attach file does not relativize file path attached files were only made relative before if you hit the browse button because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
254.0,4255,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix for issue koppor auto cleanup url because github does not support autolinking there this issue is auto cleanup url links on paste action and add cleanup url menu item to the url fieldmost codes are modified from a previous contributor in the menu item list changed as follows with defalut editor menu change case convert etc i am not sure whether its necessary to add defalut editor menu if not the menu item list would be have run gradlew check but failed but even if i switch to the master branch which is the same as jabref master the build still failed with the same error message like it seems that i did not modify related classes i dont know what went wrong it confuses me a loti am looking forward to your feedback change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your contribution the gradlew check often fails locally due to some platform specific encoding issues in the terminal you dont reed to run it as it just takes time to run all the test we use travis ci continous integration for testing as long as the travis ci test does not show any errors its good in case travis fails just click on it and you can see where it exactly failed
3959.0,4258,1,0,0,1,0,1,0,1,1,1,1,1,1,0,1,migrate to junit because github does not support autolinking there migrate some packages imported from junit to junit such as orgjunittest orgjunitjupiterapitest orgjunitexperimentalcategoriescategory orgjunitjupiterapitag and so on at the same time we slightly modify some codes which rely on those packages and doesnt apply to junit but applys to junit for example we change test excepted xxxclass into using assertthrows and lambda category xxxclass into tag “xxx” before into beforeeach and so on change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues first of all thanks for your contribution 👍 i just took a quick look at the code and it seems youre on a good wayit would be really nice if you convert the temporary folder rule from junit to junit as well tobiasdiez already implemented a sample conversion in a test in addition it would ne also nice if you could migrate the reaming parametrized tests the old ones rely on the runwith examples for the parametrized test can be found in the exporters i thinki think we can get rid of the swing gui tests as they are merely obsolete now that another pr was opened witch converts the tests from junit to i would propose the following you make this pr compile ie fix all the failing tests in a minimal intrusive way ie no further conversion of other tests we merge this pr and then afterwards everything that is still junit at this stage can be converted in further prs obsolete due to
4192.0,4259,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,remove spin comments comments mentioning spin were removed or replaced with a mention that backgroundtask is now used change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3959.0,4260,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fix for issue migrate all tests to junit because github does not support autolinking there hi im trying to fix the issue and i have some problems here can someone help me some tests dont seem to have a parameter source such as bibtexmlexportertestjava msbibexportformattestfilesjava modsexportformattestfilesjava and so on since i cant get feedback from both travis ci and my ide i couldnt do anything at the moment something about the external libraries for mainarchitecturetestswitharchunitjava testcompile comtngtecharchunit archunit junit isnt enough for migrate this test to junit just a few days ago archunit just supported tests with only junit package but this feature needs a testcompile comtngtecharchunit archunit junit and as far as i know this version has not been released yetfor citekeybasedfilefindertestjava i havent found an extension in junit for the mockitojunitrunnerclass in junit and it seems that their mock official version hasnt been release yet too the database test as i can see those tests have already been migrated partly to junit but the rest of it is the problemive tried to migrate dbmsprocessortestjava but the code is no longer concise after thatfor example image is the old version and image is the new version and that is only part of itthe reason is that i couldnt pass the parameters to the beforeeach method in junit but junit can use those local variable to pass the parameters i think this is where the difference occurred the gui test i just change the category annotation to tag annotation as i have known that those tests are mostly obsolete about cleanupworkertest this test is not hard to migrate from junit to but when i finish and run the tests on my ide two tests failed and the error message is quite weird it seems that the worker doesnt work in junit tests image if there are any errors or something can be improved in other tests that i didnt mention please let me know thanks change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your work most of the conversion looks good concerning your questions the exporter and importer tests use a filename based convention to find and check the tests for example all files that start with mods there are usually two files with the same name one with bib ending and one with xml the tests then should test that exporting the content of the bib file using the mods exporter give the contents of the xml file yes there is not yet a release of the new archunit so for now the architecture tests can stay using junit the mockito runner is not really needed its only purpose is to support the mock annotation but you can always use variable mock currently there is no neat way to handle this problem see the open looks good i think the problem is the setup in the bib file should reside on the same level as the pdf folder and not within tobiasdiez thanks for your answer ill have a try soon tobiasdiez hi ive done some improments but i still have some questions i understand what you say but when i try to enable this line streamforeach n systemoutprintln n with no other code changed i still get nothing looks like therere no such files on my laptop i suspect that it is the cause of this problem done ill keep those tests for the time being as that kind of code is just frustrating and of course if you have any requirements ill use the complicated way to handle it done i have a try the cleanuprelativepathsconvertabsolutetorelativepath test passed but the cleanuprenamepdfrenamesrelativefile test still failed so i was wondering if you can give me a further guide about this it can be a big help the tests in fileutiltestjava use create method which is totally not recommended in the api guide so when migrating it to junit i name a folder manually to imitate the original tests and you can see this in the new version of fileutiltestjava if i do something wrong tell me and ill do my best to fix them soon the failing architecture test is one thing i already experienced a while ago its because it checks for public class i was so free to create a simple patch which fixes thissimply remove the txt extension after download and execute git am returns e \workspace\jabref\jabref\bin\main\org\jabref\logic\exporter although it should be bin test okay i found the issue with the paths i really wondered if it ever worked but well now it does the key is to point to one existing resource the rest can be found dynamically and this leads us actually to some failing tests but i would ignore that for the moment that is a difference metatronwings you can use this patch as a start for all the related importer exporter tests fix resolving of paths in msbibexporterpathpatchtxt im very glad to see this issue will be resolved by us soon only a few more small questions some tests have not been migrated yet the dbmssynchronizertestjava and synchronizationtestsimulatorjava have not been migrated yet as there is no good way to handle chaos code after migration see example in dbmsprocessortestjava do i need to migrate themthe mainarchitecturetestswitharchunitjava have not too as there is not yet a release of the new archunit since i didnt migrate them how should i write the changelogmd and thanks for all of you 👍 metatronwings its okay we will sure find a way for them in the long run not that importantyou dont need to add a changelog entry as this is only a code quality issue which will not have any impact on the normal jabref user we hope you enjoyed it and if you want you can also further contribute looking to see more from you i just converted the two other classes with the legacy file methods to use the nio stuff include main java in resources as wellpatchtxt sorry but i must do that tomorrow morning because its pm in my timezone thanks for the patch
4233.0,4265,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix npe while merging entries because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues tobiasdiezi did what you said but it seems that there is a dialog box what do you mean by there is a dialog box tobiasdiezsorry i didn’t express it clearlywhen i run it with eclipse windows java and press the merge entries key the dialog is stuckthe following error was reported awt eventqueue error orgjabreffallbackexceptionhandler uncaught exception occurred in thread awt eventqueue main javalangillegalstateexception not on fx application thread currentthread awt eventqueue at comsunjavafxtktoolkitcheckfxuserthread toolkitjava at comsunjavafxtkquantumquantumtoolkitcheckfxuserthread quantumtoolkitjava at javafxsceneparent$ onproposedchange parentjava at comsunjavafxcollectionsvetoablelistdecoratorclear vetoablelistdecoratorjava i think the problem is more complex than at first thought i would propose we use the same approach as with the quality dialog use an fxdialog as base and embed the swing stuff as swingnode or better completely convert the whole dialog to javafx superseeded by
3861.0,4268,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,convert part of the issue quality cleanup entries because github does not support autolinking there i have done some changes about convert the swing dialogs to javafxits about quality cleanup entriesbut when the component became the node it doesnt work i mean these checkbox wont change its value when i click them change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues please merge the latest version of upstream master repo from jabref and the checkbox should be working againhere is a tutorial on how to setup the remotes i went over the code again and it is now ready for merge from mine point of view
4148.0,4275,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,changed the behavior of the field formatting dialog i made the loops for formatting all fields in the fieldformattercleanup class test for not being the key_field i originally had this in the cleanupsinglestring method to prevent key_field from being cleaned up reformatted entirely but decided to let the user specifically format that field when the user chooses to format all fields at once however the key_field will be not be reformatted this solves issue https githubcom jabref jabref issues i created a few unit tests for the last one i hard coded the latex version of the ç character my pleasure
4233.0,4289,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix npe in merge entries dialog fix fx thread errorconvert file to path because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues changed that
4072.0,4291,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,fix loading and storing of xmp field exclusions koppor i am not that into the xmp stuff are those fields i can add there bibtexfields which i can exclude from the export then it would make sense to have a combobox analogous to the cleanup panel with all fieldsedit decided to add the combobox with all fields because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i am going to merge this now if no further comments are coming https user imagesentcom fb cd aad e ea cea png
4296.0,4299,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix freeze on import into current library execute import inspetion dialog in swing thread because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4087.0,4311,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix drag and drop in entry editor comment same issue described consistent with preview panel behavior because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues as its a copy and paste of the method handling in the preview panel i merge this now
4305.0,4311,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix drag and drop in entry editor comment same issue described consistent with preview panel behavior because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues as its a copy and paste of the method handling in the preview panel i merge this now
4307.0,4317,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,fix that rename and move file throws file not found exception moreover i refactored a bit how files are renamed moved to the default file directory this should make it easier to reuse the code because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues ill merge this now so that progress on is not blocked
3850.0,4327,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,save sort order column of main table i tired to fix the above issue but i have the problem that the column sort listener is never fired when the sort order is descending edit i also fixed an fx threading error when opening a new library the snackbar output was not onfx thread tobiasdiez any idea if i did sth wrong oder have to set the value somewhere else because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues sorry no idea would also need to debug this to see whats going on hm this is odd i created a simple test application based on the code here i experience the same behaviour apparently the sortorder alone was not sufficient works now i will try if i can store the sortorder as well i now managed to save the whole sort oder for multiple columns
4224.0,4327,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,save sort order column of main table i tired to fix the above issue but i have the problem that the column sort listener is never fired when the sort order is descending edit i also fixed an fx threading error when opening a new library the snackbar output was not onfx thread tobiasdiez any idea if i did sth wrong oder have to set the value somewhere else because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues sorry no idea would also need to debug this to see whats going on hm this is odd i created a simple test application based on the code here i experience the same behaviour apparently the sortorder alone was not sufficient works now i will try if i can store the sortorder as well i now managed to save the whole sort oder for multiple columns
4329.0,4337,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fix export of corporate author to msoffice fix testsfix the underlying problem is the same as in however i came up with a workaround for msoffice getting the original field check for corporate author braces start and end get latex free value readd braces for corporate parse authorthe only edgecase which can occur if the entry starts with an author in latex braces and ends with an author in latex braces that one will probably be interpreted as corporate because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues the author parser is not the problem as long as the braces are present corporate authors are detected and correctly recognized its the latex to unicode converter who kills the braces from corporate authors this is the core problem see other linked issue and i currently see no easy way to either distinguish latex macros and corporate braces
4222.0,4338,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,added new keyboard shortcut ctrl e for closing the entry editor enhancement presented here i have added a new keyboard shortcut for closing the entry editor by using ctrl e because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thank you first time here thanks for your contribution 👍 looks good to me as wellwe hope you are interested in contributiong some more
4306.0,4350,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,fix for issue disable rename when filename is the same because github does not support autolinking there potential fix for the method performnameconflictcheck added in linkedfileviewmodel helps check whether or not the filename is already equal to the suggested filename if so it returns true otherwise it returns false this method is then called in linkedfileseditor during createcontextmenuforfile to decide whether or not the rename move or rename and move menu options are to be disabledthe method itself works as i tested it by running the code live with the jvm having the filename suggested filename indeed disabled those three menu options in the context menu the issue however is that im having trouble writing my test case for it im running into a couple of nullpointers being thrown when i try to run my test case checknameconflict in linkedfileviewmodeltest specifically it reports that there are nullpointers when accessing the getsuggestedfilename called in within checknameconflict in the linkedfileviewmodel class change in changelogmd described n a work in progress n a helpjabreforg https githubcom jabref helpjabreforg issues if you cant get the test working it is not a problem in such cases it is sufficient if you have manually tested the things eg without a file with two files etc siedlerchr awesome i will amend my pull request with a new commit that will remove the test case code later tonight and also fix what was flagged by the codacy pr check tobiasdiez siedlerchr is there something i should do to pass the codecov project check im not sure i understand the whole overall project coverage concept arbalest the codacy are usually helpful it outlines some potential issues however it also produces false positives eg unused methods for fxml annotated methods or junit parameter methdos the codecoverage is an indicator how much of the codebase is covered by tests however that is not that important as we usually focus on testing the most important functions eg the logic model classes most of the gui code is manually tested and that is mostly sufficient while the viewmodel functionality can be tested sometimes it often requires substantial amount of mocking around with objects which often adds a new level of complexity tobiasdiez as requested i added a new method performdirectoryconflictcheck for comparing the filepaths and merged the createcontextmenu conditionals into single or statements the method worked as intended from my testing happy new year to you it would be really nice if you could address the few issues raised here and finish the pr so we can finally merge it superseeded by
4288.0,4355,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,auto trim url field because github does not support autolinking there fixes created a formatter to auto trim all kinds of whitespace defined by java change in changelogmd described manually tested changed features in running jabref _no need_ helpjabreforg https githubcom jabref helpjabreforg issues
328.0,4367,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,arxiv fetcher support url in this pr i wanted to fix the issue from i simply used existing code in the same file which just takes the identifier at the end of the url and perform a searchfor example _ to _ _the error dialog does not appear anymore and a new entry is made change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues yeah looks good to me i exactly had the same issue yesterday that i could not paste the whole url
674.0,4368,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,wip default external application push function because github does not support autolinking there this is a new pull request to replace which address in part it doesnt have keybindings for the applications but it does allow for changing the default application change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i will review the codacy pr quality review and ci checks and resolve them as soon as i get the chance surpassed by
4272.0,4369,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,fixed testexportasmodsandthenimportasmods because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for quick follow up
3838.0,4379,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,change latex command handling only for xml chars refs change in changelogmd described manually tested changed features in running jabreftried to solve this issue in pr this approach is now more dedicated to the xml docbook export and not applied to all fields as the first pr wasi am also not sure if this issue is related to bernhard kleine i exported your provided bib entry via docbooks exporter into xml please check the result and let us know if there is something missing testbracesresultxmltxt will write tests based on your files if the export is now correct thank you johannes manner this looks good to me for the testcase maybe we could skip those entries where there are no latex braces in the title this is a separate item from the docbook export where i am waiting for feedback added two test cases for removed words based on an error during the latex command processing and for unicode problems based on the same error ping what is the status johannes manner oversee the comments and the ping sorry for that
3046.0,4389,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,display deprecated fields in misc entry also in optional fields tab the reason for the original code was to however i couldnt reproduce the issue mentioned there after i removed it the custom entry types dialog effectively prevents you from adding from the same field twice because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4388.0,4389,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,display deprecated fields in misc entry also in optional fields tab the reason for the original code was to however i couldnt reproduce the issue mentioned there after i removed it the custom entry types dialog effectively prevents you from adding from the same field twice because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4272.0,4396,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,fixes for all mods exporter tests because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues github is a bit buggy atm so i dont know which one is the right pr siedlerchr this is the right pr this wasnt showing up previously so i created another pr but after githubs issue got fixed found that both prs were showing up so i closed the other one sorry for the confusion
4360.0,4405,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,show dialog before creating entry now when you click new entry in a right toolbar it open an extra dialog where user can select a entry type change tooltip to new article
4356.0,4408,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,add a preference to add files in entry editor this pr for mainly involves allowing users to choose how they want to link copy rename move files in entry editor through preferences apply same behavior of drag and drop for the whole entry editor instead of a different behavior in file view of the entry editor change in changelogmd described manually tested changed features in running jabref helpjabreforg will log an issue to helpjabreforg if these changes are approved please feel free to suggest any changes thank you https user imagesentcom e d a e a d fb a apng codacy seems to have stuck in pending analyzing state is there something that i need to do from my side so that its analysis is completed hit it was probably stuck because you had a merge conflict in the changelogmd file i resolved this ps for future contributions create a new branch and do not work on master reduces potential conflicts thanks tobiasdiez thanks for reviewing for the preference value should only be treated as the default action when no modifier is pressed i dont think there is a straightforward solution using the dragevent used in the code this is because i wont be able to detect the modifiers pressed or confirm whether no modifier is pressed i will keep looking into this let me know if you have any guidance to resolve it the code you edited had this functionality before you can get the modifier using eventgettransfermode see also the code comments what will happen in a case where the transfermode is move and would have no shift key pressed at that time the comment states shift on win or no modifier how would i differentiate between transfermodemove without shift key pressed and dragdropped behavior from preference option as we want this to be read only when there no modifiers for the other two modes link and copy i was thinking to do an or with preference option but that would not be applicable for transfermodemove its probably not possible to differentiate between move no modifier and move shift thus i would suggest the following behavior move do what is configured in preferences default move rename and link file link link file except if preferences link in this case move rename and linkcopy do what is configured in preferences default move rename and link file in this way the user can configure the default action on windows and linux but is also possible to only link the file if he wants to just need some clarification on the behavior for link i got that if the transfer mode is link then we should allow the user to link file but if the preference is set to link with link as the transfer mode then why should we move rename and link file shouldnt we follow move rename and link when preference is set to move rename and link and not when it is set link i wasnt sure about this either my rationale was to allow for the following behavior users selects move & rename as default action no modifier move & rename ctrl transfermodelink link users selects link as default action no modifier link ctrl transfermodelink move & renamebecause otherwise the users has no option to perform move & rename if he selected link as the default action but im very open for suggestions if this behavior is counter intuitive i think your option is good but i just feel that it should be documented that what keys would be used for each option in preferences tab in brackets one more suggestion that we can consider is as follows pref move shift or no modifier move ctrl copy alt link pref copy shift or no modifier copy alt link alt is the default key for linking so user has one less thing to remember ctrl move pref link shift or no modifier link alt move ctrl copy ctrl is the default key for copying so user has one less thing to remember let me know your thoughts on this shahamish please be aware that the keys differ on other operating systems eg linux or mac and not all operating systems differ between all modifiers see my code comment regarding ubuntu somewhere your suggestion looks good to mewhatever behavior we choose in the end it should be documented in the help and even better directly during the drag & drop action eg something like the following and replacing sposta with the real action to be performed but this is something for a new pr i have added the logic we discussed above and fixed the linkedfileseditor to allow moving of the files within the file editor i also updated the issue on helpjabref to follow the behavior as we have discussed here for documentation if tobiasdiez gives his okay we can merge this
3537.0,4413,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix group hit counter when adding entries by replacing the eventbus subscription by a javafx listener lgtm
1019.0,4415,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,searchable filterable preferences up so far i just created the textbox for searching and fixed a deprecation warningi added paulkra as collaborator on my forklast step so far i was asking myself how i can access the text of the different preferences categories and i was wondering if i need a new interface something like preftabcontents or preftabcontainer for it or extend existing prefstab interface change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues first of all thanks for your contribtion 👍 if you look at the code fo the old preferencesfilterdialog you see that the data comes from the jabrefpreferencesfilter class in orgjabrefpreferences if you have further questions you can also ask in out gitter chat adjusted my comment the easiest solution is probably to transverse the complete control node tree and take the text of all label controls wtfjoke paulkra what is the current status here the code looks already promising it would be really nice if you could finish this siedlerchr its still on my todo list havent found the time to investigate further and were stuck on how i display the filtered preferences i think paulkra doesnt work on it he still didnt accept my invitation link to my forked repo okay thanks for the udpate take your time if you have any questions just ask here or in gitter and we try to help maybe the jfxhighlighter from works to highlight the matches tobiasdiez thanks for the hint however i tested it locally but i didnt liked it that much for example it did mark the buttons for importing exporting show reset preferences also if i dont find alternatives i think about using it anways i tried the _jfoenix_ library but it didnt quite work as expected for eg labels remained highlighted even after changing the query text what i propose is to highlight the matched labels by styling their background with a different color we keep track of the highlighted labels and on every input change reset the highlighted labels and update it with new ones this could be optimized note the entire label is highlighted not a part of it captaindavinci sounds like a good plan the javafx pseudo class seems to work nicely for this thanks for sharing the article tobiasdiez i added the search highlight feature in the latest commithowever i have made use of labeled objects hash code when inserting into the map this would result in a list of all labels instead of grouping them by their text could be replaced by a list instead to avoid this another approach would be to map the texts to a set of labels as well but considering that the number of labels wont be too large i dont think there will be any significant gain in performance the current approach looks good to me im however wondering why you have the map as the relation label or text tab for me the converse relation tab label feels more natural in the end it probably doesnt really mattersplease also use a mutlimap instead of map come to think of it the converse relation does seem more natural and has a simpler implementation ill make the required changes and push the codeedit i am thinking about how to perform better matching of labels for eg one of the tabs has a label named _sending of emails_ a query such as _sending emails_ would not match any labels but in practice i think it should one possible solution is to split the query string delimited by space and check if any token is present in the label name right now two filtering actions are performed by tabs and by labels i think both actions should be merged into one when no match is found the preference window shows contents of previous tab in this case i think the content of preference window should be replaced by the contents of the first tab which matches the query if none match then it should be blank captaindavinci is this ready for review or do you need to further work on it the first remark you had concerning sending emails is a nice suggestion for further improvement but not necessary for merging i would say tobiasdiez yes this is ready for review thank you for the suggestions tobiasdiez and siedlerchr i have refactored the code for the most part to account for the changes and will push the code once i have implemented all changes screenshot showing the preferences window when searching captaindavinci look at my patch import via git am { searchhandlersearchtextproperty required so that changed are reflected} hm this is odd it worked fine for me with this line searchhandlersearchtextproperty bindbidirectional searchboxtextproperty whenever i changed the text in the gui field eg key to asdfasd the view was updated and the new findings were highlighted maybe i understand you wrong but i think this is enough under the hood the bidirectional is nothing else than a wrapper around the changelistener stuff also note that its necessary to have a reference to searchtext property accessed under the changelistener for searchbox could this be related to some sort of premature garbage collectionedit for me changing the text in the gui field did not update the view or highlight the labels bindings are created using weaklistener so they might get garbage collected but i still dont understand why it works for me with the patch i would propose you test again with my patch or at least commit the changes and let others test as well unfortunately i am the next days busy at work and probably cant help much okay i have pushed changes in the mean time i will try testing it again ps since the preferencessearchhandler does not use the searchtext property but only the query text can we instead bind the searchbox to the filtertabs ie not have to deal with binding the text property and string property thanks to both wtfjoke and captaindavinci for joining forces
4417.0,4418,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix generate bibtex key overwrite warning dialog the problem was that the generatebibtexkeyaction is executed using a taskexecutor and therefore not run on the fx thread unfortunately the exception was swallowed and not reported change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues well it is already using the backgroundtaskwrap to create a background thread which has nothing to do with the swing stuff backgroundtaskwrap this generatekeys executewith globalstask_executor which of course creates a pool thread i see no other way to show a dialog
4422.0,4426,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fix arrayindexoutofboundsexception on second pdf import the variable formally known as i is a global variable which had after the first run and therefore threw an exception because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues added tests
4409.0,4428,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fixed radiobuttons in preference menu previously multiple radiobuttons in preference menu belonging to the same group were selectable simultaneously this issue is now fixed on multiple occasions allowing only one option per group to be selected at the same time issue https githubcom jabref jabref issues
3189.0,4429,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,fix bug when edit group name issue bandicam https user imagesentcom bf b db b e d eee c dadgif
4438.0,4443,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,add submodule pull to circle ci and fix theme loading css because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues yeah i will add it unfortunately the css theme loading still throws that exception not relevant to the csl stuff
3189.0,4470,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,fix group renaming fix group renaming fixed please have a look at the failing tests and please test if the latex stuff is still transformed to unicode after rename ali kz why did you close the pull request you can simply push your changes to your branch and the pr is updated tobiasdiez could you review again
4467.0,4484,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix save button when you click save and there is no database selected that will act as save as
4113.0,4498,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,improve page checker superseeds the pr and now page ranges like r r are considered to be correct
4365.0,4519,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fixed put html in clipboard i get all tag value and put it in a string
443.0,4531,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix button sizes in issue the sizes of buttons update to current column widths and update to current column order screen shot at pm is still more to fix in this issue the field name is not editablethe value in field name is not identical with table header because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4437.0,4531,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix button sizes in issue the sizes of buttons update to current column widths and update to current column order screen shot at pm is still more to fix in this issue the field name is not editablethe value in field name is not identical with table header because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4437.0,4546,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix for issue some bugs in preference entry table columns im trying to and i think ive got it the column width stuff have been removed and the field name is now editable you need to close and reopen the app for the preference changes to take effectedit it used to be that some files i havent touched were showing errors so i cant build the project to see if my changes actually fixed anything but thats not a problem anymoreorgjabreflogicimporterfileformatendxmlimporterjava has errors because the entire orgjabreflogicimporterfileformatendnote folder is missing and so on change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues rachelwu thanks for your contribution your errors indicate that you did not setup the workspace correctly you should run gradlew run once as it will create the missing folders and files ive gotten adding column widths to work each new column has a default column width and ive gotten changing column widths in the ui to workyou cant decrease the column width after increasing it but this was a problem in the master branch tooand ive noticed a problem where changing the columns in the preferences tab doesnt change the maintable until you restart the program so if you change the preferences via the maintable ui right after changing something in the preferences dialog any previous changes made in tablecolumnstab is overridden i think i can fix this if i pass the maintable through preferencesdialogjava to the constructor of tablecolumnstabjava hm this is not ideal yet it cause a massive performance break and maybe it is related to the smartconstrainedresizepolicy which then causes a resizes i think so far i have the table columns not being changeable was a false alarm this problem only exists for empty libraries and was a problem in the original master branch as well resizing the columns most of the time but its not consistent enough that i can figure out why the bug happens at all its just a workaround that worked for me when you add a column from preferences you need to restart the program for it to stick and if you touch the gui before restarting the changes are ignored the only way i can figure out around this is to ignore changes to the columns from the gui in persistencevisualstatetable until the program is restarted im not sure if this is very elegant but i can put it in if you wantmostly what i did for the last few commits was make sure changing the columns both from preferences and from persistencevisualstatetable doesnt cause a javalangindexoutofboundsexception hey guys i just wanted to thank you for all the advice and help youve given me and for labeling good first timer issues i found this a lot of fun youre welcome we have to thank you for your contribution 🥇 and hope you are interested in contributing some more 😄 feel free to ask if you need any advice help for an issue
4544.0,4547,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,do not extract file ending from urls do not extract file ending from urls should also please check tobiasdiez i cannot access jstor stuff due to however with any url and some appended key values like accetptrue it works for me again please fix the checkstyle issue import with is not allowed
3189.0,4549,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,fixes that renaming a group did not change the group name in the interface
2288.0,4565,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,add uncaught exception message added a simple dialog showing up if an uncaught exception was loggedadded the dialogs text to the german and english language filesfixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thank you very much for your contribution 👍 we are looking forward seeing more from you
4580.0,4587,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,add a variable to track the change in preview style proposed solution for i have added a previewstyle variable to check when the preview style changesfrom my observation the layout is updated every time tabs are switched or preview styles are cycled through with the addition of a variable these situations can be differentiated to print out the notification more appropriately change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues looks also good from my site i am merging this now
4598.0,4601,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,convert duplicateresolverdialog to javafx describe the changes you have made here because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues yes i thought i added the label on that issue
4600.0,4604,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,enable default cursor for new entry sets text field on focus at the end of initialization by running the javafx thread change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4609.0,4613,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix preview style configuration user mentioned that after pressing one of the styles and saving it the style is not updatedto change the preview style he has to move the selected style to the right column before pressing saveselecting styles in the right column can be previewed in the test panel however the style of bibentry is not updated after pressing test to rectify this the citation style is updated in preferencesto ensure preview style configuration is saved the chosen preview style is also saved in the preferencesnote that if preview style at the left column is selected the configuration will not be saved change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues code looks good from my side as well could you please test if the error i encountered is also resolved with your code siedlerchr that error is not resolved in my pr do you want me to fix it chelseyong okay thanks for the info if you want you could do this in another pr thanks again for your contribution
4616.0,4618,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,try to fix not on fx thread for search and autocomplete because github does not support autolinking there add the following autosave actions to your database comment{jabref meta databasetype biblatex} comment{jabref meta saveactions enableddate normalize_date pages normalize_page_numbers all text fields latex_to_unicode title html_to_unicode } search for something and press ctrl space to open autocomplete popup enter sth like \emph{dictionary} in the title field and press saveno errrosnoted this in change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4591.0,4642,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,add integrity check for books with edition reported as tobiasdiez siedlerchr could you review this pr also i am not sure why travis is failing ronaklakhotia if you click on the travis build failed details you can expand the failing job in your case its just the localization test which failed you need to add the string to the english localization file under src main resources l n orgjabreflogicl nlocalizationconsistencytest findmissinglocalizationkeys failed orgopentest jassertionfailederror detected language keys which are not in the english language file paste these into the english language file edition\ of\ book\ reported\ as\ just\ edition of book reported as just expected but was at orgjunitjupiterapiassertionutilsfail assertionutilsjava at orgjunitjupiterapiassertequalsfailnotequal assertequalsjava at orgjunitjupiterapiassertequalsassertequals assertequalsjava at orgjunitjupiterapiassertionsassertequals assertionsjava at orgjabreflogicl nlocalizationconsistencytestfindmissinglocalizationkeys localizationconsistencytestjava thanks for the pointer fixed the failing test ready for review tobiasdiez siedlerchr ready for review you can ignore the outdated dependencies its one of the tasks which is allowed to fail build passed ready for review any updates ronaklakhotia we have the policy that at least two core developers have to approve a pull request before me merge since we are all working on jabref in our freetime reviewing of a pr might take a day or two especially over the weekend but that shouldnt stop you from looking and working at other open issues if you have the motivation and the drive to do so
4641.0,4644,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fix for issue remove usage of tempdirectory extension from junit pioneer fixes removed the tempdirectory extension from junit pioneer with the built in extension of junit manually tested changed features in running jabref https githubcom joelparkerhenderson git_commit_message perfect thanks a lot
4628.0,4658,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,fix for cant save new content selectors dialog converted into javafx old functionalities are preserved new validations added error message thrown when dialog invoked but not active connection exists remove keyword button is enabled just in case some keyword is selected change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues additionally it would be nice if you could add a screenshot of the converted dialog siedlerchr hi thanks for the reviewi hope i was able to incorporate all the changes mentioned above listproperty bindingshere is the screenshot of converted dialog tobiasdiez thanks for the review changes have been made thanks again for your contribution looking forward to your next pr thanks guys for super guidance ricantech we have to thank you for your contribution we hope you are interested in fixing some other issues as well
4610.0,4660,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,changed the way the groupdialog description is displayed fixes changed groupdialog description node to textflow groupdialog is no longer resizable changed the layout of the groupdialog window to be more horizontal ok button is only enabled after some input jabrefgroupdialog change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues the code looks good to me and we can merge it as it is now nonetheless christoph is right and it would be better to replace the html completely by styled javafx text modules with corresponding css style classes defined in the basecss since this is a bit of work as you need to fumble around with the localization and its not utterly important i let you decide if you want to work on this or invest your time in something else eg fixing another issue i definetly agree that this should be done the right way at some point but im not really confident to touch the localization im going to move to another issue so this pr can be merged 😄 ah i think i just noticed a bug please wait with merging could you please also take a look at ok so i tried to automatically create a database when the user tried to create a new group without a open database but i couldnt get it to run the code to add the group to the open database always ran before the new database was createdin the end i gave up and i just created a warning when the user tries to create a group without a database i hope i made no mistakes while adding the localization could you please also take a look at this error never occurred when i tried it the report is a little thin and i couldnt recreate itif everything looks good to you you can merge this pr thanks for the quick follow up and sorry for being somewhat pedantic
4614.0,4696,1,0,0,0,1,1,1,0,0,1,0,1,1,0,0,remove resolve duplicate keys dialog because github does not support autolinking there removes the resolve duplicate keys dialog this feature is made obsolete by the integrity check and the user can generate new keys very simply for all entries or only for the duplicated ones through the entry editor and or menu change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues well however on import there should be a warning and the option to resolve duplicate keys its essential to discover duplicates siedlerchr such a feature wasnt implemented the only check was when opening a database and is obsolete with my other pr where now keys are automatically generated for every imported entry duplicate entries are also highlighted in the import dialog okay then i see no problem
4666.0,4707,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,group and reorder the main menu tabs & icons group and reorder the main menu file edit library quality tools and view tabs & icons now it looks like on the martinkarims prototypes _file pr & fixes & fixes & fixes & fixes & fixes & fixes & fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot for your work on this the code changes look good to me i believe that removing the three tools opening a folder file or url doi apply disables the associated shortcuts eg f to open a file can you please make sure the shortcuts work as expected and if not add some code for this here ive a few questions for martinkarim why he proposed certain changes some of which are not too intuitive for me replace string from edit to tools & set clear rename append fields from edit to library both of these operations change field values of the currently selected entries or all entries and thus for me have the same quality as the manage keywords feature which is essentially a special version of set fields moreover all these three features dont involve any magic on jabrefs part in contrast to tools but they are different versions of bulk edits but thats definitely a developer viewpoint and not a user centric one im fine with moving all three to tools although i feel this menu gets overloaded a bitmoreover i would suggest t rename replace string by find and replace find unlinked files from quality to tools for me this feature is connected to the set file link feature because once you linked a file to an entry that it is no longer reported under unlinked files and vice versa the find unliked files dialog allows to link files to entries so personally i would group them together new sublibrary based on aux file from tools to library with the reasoning that adding a sublibrary has a global effect on the library however this feature does not add entries to the current library but uses the aux file to select certain entries and then creates a new library containing only these entries so in some sense it is a certain kind of export thus for me it should go to the export menu under file or stay in tools yes you are right now those shortcuts are disabled although ctrl a for selecting all is still workingin addition i just realized that sometimes the check symbol of the checkitem objects tools web search groups interface is not synchronized with it side paneli will deal with it in a while the check synchronization might be a problem with setting the values correctly in the preferences i remember having similar issues with shown not shown in the openoffice panel i had to explicitly set the preferences to new values i hope the check synchronization is solved now also i have recovered the previous entry preview elements and behaviorplease tell me if it is ok thank you you seem to have a compile error now probably because of the parameter removal in the check menu stuffyou can click on the travis failed icon and will see the jobs that failed you then can expand them and will see the errors yes my fault i am so busy these days and cannot focus on it properly i will solve this asapsorry for wasting your time no problem take your time siedlerchr what about the coverage test do i need to get an equal or greather percent you can ignore the code coverage and the dependency update testcodacy is sometimes a bit difficult as for some fxml stuff it is generating false positives eg marking functions as unused but does not take into account that these are defined in fxml we are generally not so focused on code coverage but prefer tests for the most important model logic functionality by the way i have forgotten to say that this code keeps the associated shortcuts because those choices are also in the right click menu tobiasdiez i am sorry for being late in answering your questions here are my thoughts on why i moved the items features you mentioned _replace string_ i do think that the the main difference between this feature and _manage keywords_ is the possibility to change a string in all entries and not just selected ones meaning the scope of the function separates it from the other items in _edit_additionally replacing a string is not bound to a field like _mangage keywords_ or _rank entry_ therefore it has a more general purpose i would arguehowever i agree that it does not completely fit into the _tools_ tab as well moving it there was a try to give the function more exposure because many users did not know about the _tools_ tab is a central part of the users workflow which is why i chose that tabthe name change for the feature is great i think because it matches the name of the same feature in other programs _set clear rename append fields_ i proposed to move this feature to library because i thought that the four functions it contains had a global effect on all entries i have noticed that this was a misunderstanding on my part so i will have another look at the featurebut i still think that the feature as a whole does not fit the _edit_ tab because of the rename part renaming is not really a content change and it has more complex implications for an entry if the renaming function was split from the rest keeping it in _edit_ seems appropriate _find unlinked files_ while _set file links_ does only improve the quality of existing entries by associating a file this feature is a bit more versatile it can also help to find files in a folder which do not even have a bibliography entry yet and can even be used to extract bibliographic information from a pdf i think that the ways of using this feature go beyond qa measures which is why i proposed to move it _new sublibrary based on aux file_ i think that you are right in regard to this function being an export function and that it could be moved to _export_ as well then it would have to be renamed though into something like export entries cited in aux file however export has the connotation of some change in the data format which is not really the case with this feature because it only creates a subset of the current bibliography i found the _library_ tab appropriate because the feature is bound to the active library and therefore depends on it and an aux file i think all four points are up to discussion and depend on the view of the individual this is why i think that especially the grouping of items in the main menu would profit from more user data to have a more objective center in that discussion thanks martinkarim for your detailed explanation that clarifies a lot for me and im fine with these changes for the sake of moving forward with this pr i would propose to rename replace string to find and replace move new sublibrary based on aux file to toolsas part of this pr and then merge davidemdot could you please implement these changes thanksthen as a second step we should discuss in the devcall set clear rename append fields edit library or tools new sublibrary based on aux file library tools export how to improve telemetry collection tobiasdiez i think it is done now
4667.0,4707,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,group and reorder the main menu tabs & icons group and reorder the main menu file edit library quality tools and view tabs & icons now it looks like on the martinkarims prototypes _file pr & fixes & fixes & fixes & fixes & fixes & fixes & fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot for your work on this the code changes look good to me i believe that removing the three tools opening a folder file or url doi apply disables the associated shortcuts eg f to open a file can you please make sure the shortcuts work as expected and if not add some code for this here ive a few questions for martinkarim why he proposed certain changes some of which are not too intuitive for me replace string from edit to tools & set clear rename append fields from edit to library both of these operations change field values of the currently selected entries or all entries and thus for me have the same quality as the manage keywords feature which is essentially a special version of set fields moreover all these three features dont involve any magic on jabrefs part in contrast to tools but they are different versions of bulk edits but thats definitely a developer viewpoint and not a user centric one im fine with moving all three to tools although i feel this menu gets overloaded a bitmoreover i would suggest t rename replace string by find and replace find unlinked files from quality to tools for me this feature is connected to the set file link feature because once you linked a file to an entry that it is no longer reported under unlinked files and vice versa the find unliked files dialog allows to link files to entries so personally i would group them together new sublibrary based on aux file from tools to library with the reasoning that adding a sublibrary has a global effect on the library however this feature does not add entries to the current library but uses the aux file to select certain entries and then creates a new library containing only these entries so in some sense it is a certain kind of export thus for me it should go to the export menu under file or stay in tools yes you are right now those shortcuts are disabled although ctrl a for selecting all is still workingin addition i just realized that sometimes the check symbol of the checkitem objects tools web search groups interface is not synchronized with it side paneli will deal with it in a while the check synchronization might be a problem with setting the values correctly in the preferences i remember having similar issues with shown not shown in the openoffice panel i had to explicitly set the preferences to new values i hope the check synchronization is solved now also i have recovered the previous entry preview elements and behaviorplease tell me if it is ok thank you you seem to have a compile error now probably because of the parameter removal in the check menu stuffyou can click on the travis failed icon and will see the jobs that failed you then can expand them and will see the errors yes my fault i am so busy these days and cannot focus on it properly i will solve this asapsorry for wasting your time no problem take your time siedlerchr what about the coverage test do i need to get an equal or greather percent you can ignore the code coverage and the dependency update testcodacy is sometimes a bit difficult as for some fxml stuff it is generating false positives eg marking functions as unused but does not take into account that these are defined in fxml we are generally not so focused on code coverage but prefer tests for the most important model logic functionality by the way i have forgotten to say that this code keeps the associated shortcuts because those choices are also in the right click menu tobiasdiez i am sorry for being late in answering your questions here are my thoughts on why i moved the items features you mentioned _replace string_ i do think that the the main difference between this feature and _manage keywords_ is the possibility to change a string in all entries and not just selected ones meaning the scope of the function separates it from the other items in _edit_additionally replacing a string is not bound to a field like _mangage keywords_ or _rank entry_ therefore it has a more general purpose i would arguehowever i agree that it does not completely fit into the _tools_ tab as well moving it there was a try to give the function more exposure because many users did not know about the _tools_ tab is a central part of the users workflow which is why i chose that tabthe name change for the feature is great i think because it matches the name of the same feature in other programs _set clear rename append fields_ i proposed to move this feature to library because i thought that the four functions it contains had a global effect on all entries i have noticed that this was a misunderstanding on my part so i will have another look at the featurebut i still think that the feature as a whole does not fit the _edit_ tab because of the rename part renaming is not really a content change and it has more complex implications for an entry if the renaming function was split from the rest keeping it in _edit_ seems appropriate _find unlinked files_ while _set file links_ does only improve the quality of existing entries by associating a file this feature is a bit more versatile it can also help to find files in a folder which do not even have a bibliography entry yet and can even be used to extract bibliographic information from a pdf i think that the ways of using this feature go beyond qa measures which is why i proposed to move it _new sublibrary based on aux file_ i think that you are right in regard to this function being an export function and that it could be moved to _export_ as well then it would have to be renamed though into something like export entries cited in aux file however export has the connotation of some change in the data format which is not really the case with this feature because it only creates a subset of the current bibliography i found the _library_ tab appropriate because the feature is bound to the active library and therefore depends on it and an aux file i think all four points are up to discussion and depend on the view of the individual this is why i think that especially the grouping of items in the main menu would profit from more user data to have a more objective center in that discussion thanks martinkarim for your detailed explanation that clarifies a lot for me and im fine with these changes for the sake of moving forward with this pr i would propose to rename replace string to find and replace move new sublibrary based on aux file to toolsas part of this pr and then merge davidemdot could you please implement these changes thanksthen as a second step we should discuss in the devcall set clear rename append fields edit library or tools new sublibrary based on aux file library tools export how to improve telemetry collection tobiasdiez i think it is done now
4668.0,4707,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,group and reorder the main menu tabs & icons group and reorder the main menu file edit library quality tools and view tabs & icons now it looks like on the martinkarims prototypes _file pr & fixes & fixes & fixes & fixes & fixes & fixes & fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot for your work on this the code changes look good to me i believe that removing the three tools opening a folder file or url doi apply disables the associated shortcuts eg f to open a file can you please make sure the shortcuts work as expected and if not add some code for this here ive a few questions for martinkarim why he proposed certain changes some of which are not too intuitive for me replace string from edit to tools & set clear rename append fields from edit to library both of these operations change field values of the currently selected entries or all entries and thus for me have the same quality as the manage keywords feature which is essentially a special version of set fields moreover all these three features dont involve any magic on jabrefs part in contrast to tools but they are different versions of bulk edits but thats definitely a developer viewpoint and not a user centric one im fine with moving all three to tools although i feel this menu gets overloaded a bitmoreover i would suggest t rename replace string by find and replace find unlinked files from quality to tools for me this feature is connected to the set file link feature because once you linked a file to an entry that it is no longer reported under unlinked files and vice versa the find unliked files dialog allows to link files to entries so personally i would group them together new sublibrary based on aux file from tools to library with the reasoning that adding a sublibrary has a global effect on the library however this feature does not add entries to the current library but uses the aux file to select certain entries and then creates a new library containing only these entries so in some sense it is a certain kind of export thus for me it should go to the export menu under file or stay in tools yes you are right now those shortcuts are disabled although ctrl a for selecting all is still workingin addition i just realized that sometimes the check symbol of the checkitem objects tools web search groups interface is not synchronized with it side paneli will deal with it in a while the check synchronization might be a problem with setting the values correctly in the preferences i remember having similar issues with shown not shown in the openoffice panel i had to explicitly set the preferences to new values i hope the check synchronization is solved now also i have recovered the previous entry preview elements and behaviorplease tell me if it is ok thank you you seem to have a compile error now probably because of the parameter removal in the check menu stuffyou can click on the travis failed icon and will see the jobs that failed you then can expand them and will see the errors yes my fault i am so busy these days and cannot focus on it properly i will solve this asapsorry for wasting your time no problem take your time siedlerchr what about the coverage test do i need to get an equal or greather percent you can ignore the code coverage and the dependency update testcodacy is sometimes a bit difficult as for some fxml stuff it is generating false positives eg marking functions as unused but does not take into account that these are defined in fxml we are generally not so focused on code coverage but prefer tests for the most important model logic functionality by the way i have forgotten to say that this code keeps the associated shortcuts because those choices are also in the right click menu tobiasdiez i am sorry for being late in answering your questions here are my thoughts on why i moved the items features you mentioned _replace string_ i do think that the the main difference between this feature and _manage keywords_ is the possibility to change a string in all entries and not just selected ones meaning the scope of the function separates it from the other items in _edit_additionally replacing a string is not bound to a field like _mangage keywords_ or _rank entry_ therefore it has a more general purpose i would arguehowever i agree that it does not completely fit into the _tools_ tab as well moving it there was a try to give the function more exposure because many users did not know about the _tools_ tab is a central part of the users workflow which is why i chose that tabthe name change for the feature is great i think because it matches the name of the same feature in other programs _set clear rename append fields_ i proposed to move this feature to library because i thought that the four functions it contains had a global effect on all entries i have noticed that this was a misunderstanding on my part so i will have another look at the featurebut i still think that the feature as a whole does not fit the _edit_ tab because of the rename part renaming is not really a content change and it has more complex implications for an entry if the renaming function was split from the rest keeping it in _edit_ seems appropriate _find unlinked files_ while _set file links_ does only improve the quality of existing entries by associating a file this feature is a bit more versatile it can also help to find files in a folder which do not even have a bibliography entry yet and can even be used to extract bibliographic information from a pdf i think that the ways of using this feature go beyond qa measures which is why i proposed to move it _new sublibrary based on aux file_ i think that you are right in regard to this function being an export function and that it could be moved to _export_ as well then it would have to be renamed though into something like export entries cited in aux file however export has the connotation of some change in the data format which is not really the case with this feature because it only creates a subset of the current bibliography i found the _library_ tab appropriate because the feature is bound to the active library and therefore depends on it and an aux file i think all four points are up to discussion and depend on the view of the individual this is why i think that especially the grouping of items in the main menu would profit from more user data to have a more objective center in that discussion thanks martinkarim for your detailed explanation that clarifies a lot for me and im fine with these changes for the sake of moving forward with this pr i would propose to rename replace string to find and replace move new sublibrary based on aux file to toolsas part of this pr and then merge davidemdot could you please implement these changes thanksthen as a second step we should discuss in the devcall set clear rename append fields edit library or tools new sublibrary based on aux file library tools export how to improve telemetry collection tobiasdiez i think it is done now
4669.0,4707,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,group and reorder the main menu tabs & icons group and reorder the main menu file edit library quality tools and view tabs & icons now it looks like on the martinkarims prototypes _file pr & fixes & fixes & fixes & fixes & fixes & fixes & fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot for your work on this the code changes look good to me i believe that removing the three tools opening a folder file or url doi apply disables the associated shortcuts eg f to open a file can you please make sure the shortcuts work as expected and if not add some code for this here ive a few questions for martinkarim why he proposed certain changes some of which are not too intuitive for me replace string from edit to tools & set clear rename append fields from edit to library both of these operations change field values of the currently selected entries or all entries and thus for me have the same quality as the manage keywords feature which is essentially a special version of set fields moreover all these three features dont involve any magic on jabrefs part in contrast to tools but they are different versions of bulk edits but thats definitely a developer viewpoint and not a user centric one im fine with moving all three to tools although i feel this menu gets overloaded a bitmoreover i would suggest t rename replace string by find and replace find unlinked files from quality to tools for me this feature is connected to the set file link feature because once you linked a file to an entry that it is no longer reported under unlinked files and vice versa the find unliked files dialog allows to link files to entries so personally i would group them together new sublibrary based on aux file from tools to library with the reasoning that adding a sublibrary has a global effect on the library however this feature does not add entries to the current library but uses the aux file to select certain entries and then creates a new library containing only these entries so in some sense it is a certain kind of export thus for me it should go to the export menu under file or stay in tools yes you are right now those shortcuts are disabled although ctrl a for selecting all is still workingin addition i just realized that sometimes the check symbol of the checkitem objects tools web search groups interface is not synchronized with it side paneli will deal with it in a while the check synchronization might be a problem with setting the values correctly in the preferences i remember having similar issues with shown not shown in the openoffice panel i had to explicitly set the preferences to new values i hope the check synchronization is solved now also i have recovered the previous entry preview elements and behaviorplease tell me if it is ok thank you you seem to have a compile error now probably because of the parameter removal in the check menu stuffyou can click on the travis failed icon and will see the jobs that failed you then can expand them and will see the errors yes my fault i am so busy these days and cannot focus on it properly i will solve this asapsorry for wasting your time no problem take your time siedlerchr what about the coverage test do i need to get an equal or greather percent you can ignore the code coverage and the dependency update testcodacy is sometimes a bit difficult as for some fxml stuff it is generating false positives eg marking functions as unused but does not take into account that these are defined in fxml we are generally not so focused on code coverage but prefer tests for the most important model logic functionality by the way i have forgotten to say that this code keeps the associated shortcuts because those choices are also in the right click menu tobiasdiez i am sorry for being late in answering your questions here are my thoughts on why i moved the items features you mentioned _replace string_ i do think that the the main difference between this feature and _manage keywords_ is the possibility to change a string in all entries and not just selected ones meaning the scope of the function separates it from the other items in _edit_additionally replacing a string is not bound to a field like _mangage keywords_ or _rank entry_ therefore it has a more general purpose i would arguehowever i agree that it does not completely fit into the _tools_ tab as well moving it there was a try to give the function more exposure because many users did not know about the _tools_ tab is a central part of the users workflow which is why i chose that tabthe name change for the feature is great i think because it matches the name of the same feature in other programs _set clear rename append fields_ i proposed to move this feature to library because i thought that the four functions it contains had a global effect on all entries i have noticed that this was a misunderstanding on my part so i will have another look at the featurebut i still think that the feature as a whole does not fit the _edit_ tab because of the rename part renaming is not really a content change and it has more complex implications for an entry if the renaming function was split from the rest keeping it in _edit_ seems appropriate _find unlinked files_ while _set file links_ does only improve the quality of existing entries by associating a file this feature is a bit more versatile it can also help to find files in a folder which do not even have a bibliography entry yet and can even be used to extract bibliographic information from a pdf i think that the ways of using this feature go beyond qa measures which is why i proposed to move it _new sublibrary based on aux file_ i think that you are right in regard to this function being an export function and that it could be moved to _export_ as well then it would have to be renamed though into something like export entries cited in aux file however export has the connotation of some change in the data format which is not really the case with this feature because it only creates a subset of the current bibliography i found the _library_ tab appropriate because the feature is bound to the active library and therefore depends on it and an aux file i think all four points are up to discussion and depend on the view of the individual this is why i think that especially the grouping of items in the main menu would profit from more user data to have a more objective center in that discussion thanks martinkarim for your detailed explanation that clarifies a lot for me and im fine with these changes for the sake of moving forward with this pr i would propose to rename replace string to find and replace move new sublibrary based on aux file to toolsas part of this pr and then merge davidemdot could you please implement these changes thanksthen as a second step we should discuss in the devcall set clear rename append fields edit library or tools new sublibrary based on aux file library tools export how to improve telemetry collection tobiasdiez i think it is done now
4670.0,4707,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,group and reorder the main menu tabs & icons group and reorder the main menu file edit library quality tools and view tabs & icons now it looks like on the martinkarims prototypes _file pr & fixes & fixes & fixes & fixes & fixes & fixes & fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot for your work on this the code changes look good to me i believe that removing the three tools opening a folder file or url doi apply disables the associated shortcuts eg f to open a file can you please make sure the shortcuts work as expected and if not add some code for this here ive a few questions for martinkarim why he proposed certain changes some of which are not too intuitive for me replace string from edit to tools & set clear rename append fields from edit to library both of these operations change field values of the currently selected entries or all entries and thus for me have the same quality as the manage keywords feature which is essentially a special version of set fields moreover all these three features dont involve any magic on jabrefs part in contrast to tools but they are different versions of bulk edits but thats definitely a developer viewpoint and not a user centric one im fine with moving all three to tools although i feel this menu gets overloaded a bitmoreover i would suggest t rename replace string by find and replace find unlinked files from quality to tools for me this feature is connected to the set file link feature because once you linked a file to an entry that it is no longer reported under unlinked files and vice versa the find unliked files dialog allows to link files to entries so personally i would group them together new sublibrary based on aux file from tools to library with the reasoning that adding a sublibrary has a global effect on the library however this feature does not add entries to the current library but uses the aux file to select certain entries and then creates a new library containing only these entries so in some sense it is a certain kind of export thus for me it should go to the export menu under file or stay in tools yes you are right now those shortcuts are disabled although ctrl a for selecting all is still workingin addition i just realized that sometimes the check symbol of the checkitem objects tools web search groups interface is not synchronized with it side paneli will deal with it in a while the check synchronization might be a problem with setting the values correctly in the preferences i remember having similar issues with shown not shown in the openoffice panel i had to explicitly set the preferences to new values i hope the check synchronization is solved now also i have recovered the previous entry preview elements and behaviorplease tell me if it is ok thank you you seem to have a compile error now probably because of the parameter removal in the check menu stuffyou can click on the travis failed icon and will see the jobs that failed you then can expand them and will see the errors yes my fault i am so busy these days and cannot focus on it properly i will solve this asapsorry for wasting your time no problem take your time siedlerchr what about the coverage test do i need to get an equal or greather percent you can ignore the code coverage and the dependency update testcodacy is sometimes a bit difficult as for some fxml stuff it is generating false positives eg marking functions as unused but does not take into account that these are defined in fxml we are generally not so focused on code coverage but prefer tests for the most important model logic functionality by the way i have forgotten to say that this code keeps the associated shortcuts because those choices are also in the right click menu tobiasdiez i am sorry for being late in answering your questions here are my thoughts on why i moved the items features you mentioned _replace string_ i do think that the the main difference between this feature and _manage keywords_ is the possibility to change a string in all entries and not just selected ones meaning the scope of the function separates it from the other items in _edit_additionally replacing a string is not bound to a field like _mangage keywords_ or _rank entry_ therefore it has a more general purpose i would arguehowever i agree that it does not completely fit into the _tools_ tab as well moving it there was a try to give the function more exposure because many users did not know about the _tools_ tab is a central part of the users workflow which is why i chose that tabthe name change for the feature is great i think because it matches the name of the same feature in other programs _set clear rename append fields_ i proposed to move this feature to library because i thought that the four functions it contains had a global effect on all entries i have noticed that this was a misunderstanding on my part so i will have another look at the featurebut i still think that the feature as a whole does not fit the _edit_ tab because of the rename part renaming is not really a content change and it has more complex implications for an entry if the renaming function was split from the rest keeping it in _edit_ seems appropriate _find unlinked files_ while _set file links_ does only improve the quality of existing entries by associating a file this feature is a bit more versatile it can also help to find files in a folder which do not even have a bibliography entry yet and can even be used to extract bibliographic information from a pdf i think that the ways of using this feature go beyond qa measures which is why i proposed to move it _new sublibrary based on aux file_ i think that you are right in regard to this function being an export function and that it could be moved to _export_ as well then it would have to be renamed though into something like export entries cited in aux file however export has the connotation of some change in the data format which is not really the case with this feature because it only creates a subset of the current bibliography i found the _library_ tab appropriate because the feature is bound to the active library and therefore depends on it and an aux file i think all four points are up to discussion and depend on the view of the individual this is why i think that especially the grouping of items in the main menu would profit from more user data to have a more objective center in that discussion thanks martinkarim for your detailed explanation that clarifies a lot for me and im fine with these changes for the sake of moving forward with this pr i would propose to rename replace string to find and replace move new sublibrary based on aux file to toolsas part of this pr and then merge davidemdot could you please implement these changes thanksthen as a second step we should discuss in the devcall set clear rename append fields edit library or tools new sublibrary based on aux file library tools export how to improve telemetry collection tobiasdiez i think it is done now
4671.0,4707,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,group and reorder the main menu tabs & icons group and reorder the main menu file edit library quality tools and view tabs & icons now it looks like on the martinkarims prototypes _file pr & fixes & fixes & fixes & fixes & fixes & fixes & fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot for your work on this the code changes look good to me i believe that removing the three tools opening a folder file or url doi apply disables the associated shortcuts eg f to open a file can you please make sure the shortcuts work as expected and if not add some code for this here ive a few questions for martinkarim why he proposed certain changes some of which are not too intuitive for me replace string from edit to tools & set clear rename append fields from edit to library both of these operations change field values of the currently selected entries or all entries and thus for me have the same quality as the manage keywords feature which is essentially a special version of set fields moreover all these three features dont involve any magic on jabrefs part in contrast to tools but they are different versions of bulk edits but thats definitely a developer viewpoint and not a user centric one im fine with moving all three to tools although i feel this menu gets overloaded a bitmoreover i would suggest t rename replace string by find and replace find unlinked files from quality to tools for me this feature is connected to the set file link feature because once you linked a file to an entry that it is no longer reported under unlinked files and vice versa the find unliked files dialog allows to link files to entries so personally i would group them together new sublibrary based on aux file from tools to library with the reasoning that adding a sublibrary has a global effect on the library however this feature does not add entries to the current library but uses the aux file to select certain entries and then creates a new library containing only these entries so in some sense it is a certain kind of export thus for me it should go to the export menu under file or stay in tools yes you are right now those shortcuts are disabled although ctrl a for selecting all is still workingin addition i just realized that sometimes the check symbol of the checkitem objects tools web search groups interface is not synchronized with it side paneli will deal with it in a while the check synchronization might be a problem with setting the values correctly in the preferences i remember having similar issues with shown not shown in the openoffice panel i had to explicitly set the preferences to new values i hope the check synchronization is solved now also i have recovered the previous entry preview elements and behaviorplease tell me if it is ok thank you you seem to have a compile error now probably because of the parameter removal in the check menu stuffyou can click on the travis failed icon and will see the jobs that failed you then can expand them and will see the errors yes my fault i am so busy these days and cannot focus on it properly i will solve this asapsorry for wasting your time no problem take your time siedlerchr what about the coverage test do i need to get an equal or greather percent you can ignore the code coverage and the dependency update testcodacy is sometimes a bit difficult as for some fxml stuff it is generating false positives eg marking functions as unused but does not take into account that these are defined in fxml we are generally not so focused on code coverage but prefer tests for the most important model logic functionality by the way i have forgotten to say that this code keeps the associated shortcuts because those choices are also in the right click menu tobiasdiez i am sorry for being late in answering your questions here are my thoughts on why i moved the items features you mentioned _replace string_ i do think that the the main difference between this feature and _manage keywords_ is the possibility to change a string in all entries and not just selected ones meaning the scope of the function separates it from the other items in _edit_additionally replacing a string is not bound to a field like _mangage keywords_ or _rank entry_ therefore it has a more general purpose i would arguehowever i agree that it does not completely fit into the _tools_ tab as well moving it there was a try to give the function more exposure because many users did not know about the _tools_ tab is a central part of the users workflow which is why i chose that tabthe name change for the feature is great i think because it matches the name of the same feature in other programs _set clear rename append fields_ i proposed to move this feature to library because i thought that the four functions it contains had a global effect on all entries i have noticed that this was a misunderstanding on my part so i will have another look at the featurebut i still think that the feature as a whole does not fit the _edit_ tab because of the rename part renaming is not really a content change and it has more complex implications for an entry if the renaming function was split from the rest keeping it in _edit_ seems appropriate _find unlinked files_ while _set file links_ does only improve the quality of existing entries by associating a file this feature is a bit more versatile it can also help to find files in a folder which do not even have a bibliography entry yet and can even be used to extract bibliographic information from a pdf i think that the ways of using this feature go beyond qa measures which is why i proposed to move it _new sublibrary based on aux file_ i think that you are right in regard to this function being an export function and that it could be moved to _export_ as well then it would have to be renamed though into something like export entries cited in aux file however export has the connotation of some change in the data format which is not really the case with this feature because it only creates a subset of the current bibliography i found the _library_ tab appropriate because the feature is bound to the active library and therefore depends on it and an aux file i think all four points are up to discussion and depend on the view of the individual this is why i think that especially the grouping of items in the main menu would profit from more user data to have a more objective center in that discussion thanks martinkarim for your detailed explanation that clarifies a lot for me and im fine with these changes for the sake of moving forward with this pr i would propose to rename replace string to find and replace move new sublibrary based on aux file to toolsas part of this pr and then merge davidemdot could you please implement these changes thanksthen as a second step we should discuss in the devcall set clear rename append fields edit library or tools new sublibrary based on aux file library tools export how to improve telemetry collection tobiasdiez i think it is done now
4672.0,4707,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,group and reorder the main menu tabs & icons group and reorder the main menu file edit library quality tools and view tabs & icons now it looks like on the martinkarims prototypes _file pr & fixes & fixes & fixes & fixes & fixes & fixes & fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot for your work on this the code changes look good to me i believe that removing the three tools opening a folder file or url doi apply disables the associated shortcuts eg f to open a file can you please make sure the shortcuts work as expected and if not add some code for this here ive a few questions for martinkarim why he proposed certain changes some of which are not too intuitive for me replace string from edit to tools & set clear rename append fields from edit to library both of these operations change field values of the currently selected entries or all entries and thus for me have the same quality as the manage keywords feature which is essentially a special version of set fields moreover all these three features dont involve any magic on jabrefs part in contrast to tools but they are different versions of bulk edits but thats definitely a developer viewpoint and not a user centric one im fine with moving all three to tools although i feel this menu gets overloaded a bitmoreover i would suggest t rename replace string by find and replace find unlinked files from quality to tools for me this feature is connected to the set file link feature because once you linked a file to an entry that it is no longer reported under unlinked files and vice versa the find unliked files dialog allows to link files to entries so personally i would group them together new sublibrary based on aux file from tools to library with the reasoning that adding a sublibrary has a global effect on the library however this feature does not add entries to the current library but uses the aux file to select certain entries and then creates a new library containing only these entries so in some sense it is a certain kind of export thus for me it should go to the export menu under file or stay in tools yes you are right now those shortcuts are disabled although ctrl a for selecting all is still workingin addition i just realized that sometimes the check symbol of the checkitem objects tools web search groups interface is not synchronized with it side paneli will deal with it in a while the check synchronization might be a problem with setting the values correctly in the preferences i remember having similar issues with shown not shown in the openoffice panel i had to explicitly set the preferences to new values i hope the check synchronization is solved now also i have recovered the previous entry preview elements and behaviorplease tell me if it is ok thank you you seem to have a compile error now probably because of the parameter removal in the check menu stuffyou can click on the travis failed icon and will see the jobs that failed you then can expand them and will see the errors yes my fault i am so busy these days and cannot focus on it properly i will solve this asapsorry for wasting your time no problem take your time siedlerchr what about the coverage test do i need to get an equal or greather percent you can ignore the code coverage and the dependency update testcodacy is sometimes a bit difficult as for some fxml stuff it is generating false positives eg marking functions as unused but does not take into account that these are defined in fxml we are generally not so focused on code coverage but prefer tests for the most important model logic functionality by the way i have forgotten to say that this code keeps the associated shortcuts because those choices are also in the right click menu tobiasdiez i am sorry for being late in answering your questions here are my thoughts on why i moved the items features you mentioned _replace string_ i do think that the the main difference between this feature and _manage keywords_ is the possibility to change a string in all entries and not just selected ones meaning the scope of the function separates it from the other items in _edit_additionally replacing a string is not bound to a field like _mangage keywords_ or _rank entry_ therefore it has a more general purpose i would arguehowever i agree that it does not completely fit into the _tools_ tab as well moving it there was a try to give the function more exposure because many users did not know about the _tools_ tab is a central part of the users workflow which is why i chose that tabthe name change for the feature is great i think because it matches the name of the same feature in other programs _set clear rename append fields_ i proposed to move this feature to library because i thought that the four functions it contains had a global effect on all entries i have noticed that this was a misunderstanding on my part so i will have another look at the featurebut i still think that the feature as a whole does not fit the _edit_ tab because of the rename part renaming is not really a content change and it has more complex implications for an entry if the renaming function was split from the rest keeping it in _edit_ seems appropriate _find unlinked files_ while _set file links_ does only improve the quality of existing entries by associating a file this feature is a bit more versatile it can also help to find files in a folder which do not even have a bibliography entry yet and can even be used to extract bibliographic information from a pdf i think that the ways of using this feature go beyond qa measures which is why i proposed to move it _new sublibrary based on aux file_ i think that you are right in regard to this function being an export function and that it could be moved to _export_ as well then it would have to be renamed though into something like export entries cited in aux file however export has the connotation of some change in the data format which is not really the case with this feature because it only creates a subset of the current bibliography i found the _library_ tab appropriate because the feature is bound to the active library and therefore depends on it and an aux file i think all four points are up to discussion and depend on the view of the individual this is why i think that especially the grouping of items in the main menu would profit from more user data to have a more objective center in that discussion thanks martinkarim for your detailed explanation that clarifies a lot for me and im fine with these changes for the sake of moving forward with this pr i would propose to rename replace string to find and replace move new sublibrary based on aux file to toolsas part of this pr and then merge davidemdot could you please implement these changes thanksthen as a second step we should discuss in the devcall set clear rename append fields edit library or tools new sublibrary based on aux file library tools export how to improve telemetry collection tobiasdiez i think it is done now
4673.0,4707,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,group and reorder the main menu tabs & icons group and reorder the main menu file edit library quality tools and view tabs & icons now it looks like on the martinkarims prototypes _file pr & fixes & fixes & fixes & fixes & fixes & fixes & fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot for your work on this the code changes look good to me i believe that removing the three tools opening a folder file or url doi apply disables the associated shortcuts eg f to open a file can you please make sure the shortcuts work as expected and if not add some code for this here ive a few questions for martinkarim why he proposed certain changes some of which are not too intuitive for me replace string from edit to tools & set clear rename append fields from edit to library both of these operations change field values of the currently selected entries or all entries and thus for me have the same quality as the manage keywords feature which is essentially a special version of set fields moreover all these three features dont involve any magic on jabrefs part in contrast to tools but they are different versions of bulk edits but thats definitely a developer viewpoint and not a user centric one im fine with moving all three to tools although i feel this menu gets overloaded a bitmoreover i would suggest t rename replace string by find and replace find unlinked files from quality to tools for me this feature is connected to the set file link feature because once you linked a file to an entry that it is no longer reported under unlinked files and vice versa the find unliked files dialog allows to link files to entries so personally i would group them together new sublibrary based on aux file from tools to library with the reasoning that adding a sublibrary has a global effect on the library however this feature does not add entries to the current library but uses the aux file to select certain entries and then creates a new library containing only these entries so in some sense it is a certain kind of export thus for me it should go to the export menu under file or stay in tools yes you are right now those shortcuts are disabled although ctrl a for selecting all is still workingin addition i just realized that sometimes the check symbol of the checkitem objects tools web search groups interface is not synchronized with it side paneli will deal with it in a while the check synchronization might be a problem with setting the values correctly in the preferences i remember having similar issues with shown not shown in the openoffice panel i had to explicitly set the preferences to new values i hope the check synchronization is solved now also i have recovered the previous entry preview elements and behaviorplease tell me if it is ok thank you you seem to have a compile error now probably because of the parameter removal in the check menu stuffyou can click on the travis failed icon and will see the jobs that failed you then can expand them and will see the errors yes my fault i am so busy these days and cannot focus on it properly i will solve this asapsorry for wasting your time no problem take your time siedlerchr what about the coverage test do i need to get an equal or greather percent you can ignore the code coverage and the dependency update testcodacy is sometimes a bit difficult as for some fxml stuff it is generating false positives eg marking functions as unused but does not take into account that these are defined in fxml we are generally not so focused on code coverage but prefer tests for the most important model logic functionality by the way i have forgotten to say that this code keeps the associated shortcuts because those choices are also in the right click menu tobiasdiez i am sorry for being late in answering your questions here are my thoughts on why i moved the items features you mentioned _replace string_ i do think that the the main difference between this feature and _manage keywords_ is the possibility to change a string in all entries and not just selected ones meaning the scope of the function separates it from the other items in _edit_additionally replacing a string is not bound to a field like _mangage keywords_ or _rank entry_ therefore it has a more general purpose i would arguehowever i agree that it does not completely fit into the _tools_ tab as well moving it there was a try to give the function more exposure because many users did not know about the _tools_ tab is a central part of the users workflow which is why i chose that tabthe name change for the feature is great i think because it matches the name of the same feature in other programs _set clear rename append fields_ i proposed to move this feature to library because i thought that the four functions it contains had a global effect on all entries i have noticed that this was a misunderstanding on my part so i will have another look at the featurebut i still think that the feature as a whole does not fit the _edit_ tab because of the rename part renaming is not really a content change and it has more complex implications for an entry if the renaming function was split from the rest keeping it in _edit_ seems appropriate _find unlinked files_ while _set file links_ does only improve the quality of existing entries by associating a file this feature is a bit more versatile it can also help to find files in a folder which do not even have a bibliography entry yet and can even be used to extract bibliographic information from a pdf i think that the ways of using this feature go beyond qa measures which is why i proposed to move it _new sublibrary based on aux file_ i think that you are right in regard to this function being an export function and that it could be moved to _export_ as well then it would have to be renamed though into something like export entries cited in aux file however export has the connotation of some change in the data format which is not really the case with this feature because it only creates a subset of the current bibliography i found the _library_ tab appropriate because the feature is bound to the active library and therefore depends on it and an aux file i think all four points are up to discussion and depend on the view of the individual this is why i think that especially the grouping of items in the main menu would profit from more user data to have a more objective center in that discussion thanks martinkarim for your detailed explanation that clarifies a lot for me and im fine with these changes for the sake of moving forward with this pr i would propose to rename replace string to find and replace move new sublibrary based on aux file to toolsas part of this pr and then merge davidemdot could you please implement these changes thanksthen as a second step we should discuss in the devcall set clear rename append fields edit library or tools new sublibrary based on aux file library tools export how to improve telemetry collection tobiasdiez i think it is done now
4709.0,4713,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,fix bibkey generated does not handle diacritics clean up the author value in bracketedpattern after it is retrieved from the bibentry change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your contribution unfortunately your changes resulted in a lot of failed tests look at details of the travis build and then select the failing job seems like there are some more cases you need to take care of im not that deep into the bibtexkeygenerator stuff noted is there another approach to handle this ~currently facing some issues while writing tests mockito and jfoenixcontrolsjfxsnackbarlayout cannot be imported whereas jfoenixcontrolsjfxsnackbarsnackbarevent works fine i updated to jdk _ and it doesnt help~just reimported the project it works now after syncing fork the same error occurs how to fix this chelseyong try merging the current master in eg if upstream is the jabref jabref repo git fetch upstream git merge upstream master im not an intellij user but executing gradle should be sufficient maybe halirutan can tell you more sorry for the delay i had some software issuessymbol is now removed from key generation
4714.0,4721,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix entry preview copy exception because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1506.0,4722,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,adding additional modifiers to be used in bibtex key generator as i currently wanted to have a possibility to have capitalized shorttitles in my bibtex keys i reused the already existing capitalizeformatter titlecaseformatter and sentencecaseformatter as modifiers to be used also for the bibtexkeygeneratorthis implements and is more flexible as the solution developed by oscargus at the time in as it can be applied to all other fields and not only to titles change in changelogmd described manually tested changed features in running jabref helpjabreforg needs to be updated if you merge the current master in the build errors should be resolved i accidentally pushed some changes to master yesterday as build is now passing after rebase ill merge now
4306.0,4727,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,disable renaming if i remember correctly this is a design flaw in the java language of the functional programming implementation try using the classic if construct i am not sure how to get around this does this mean the equals method in optionalutils is redundant because using the if construct would mean i cant use the generic types on issamefile method
4728.0,4729,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,saving changes and exiting application when the user clicks _save changes_ option the status ofsaving is not shown unlike before i am not sure what might bethe cause of that because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues the teardownjabref filenames executes before the files are actually saved would this be responsible for the ui not being shown i dont have the code at hands but this could be a reason you could debug and see where the save happens and when the instance should be closed okay so this is what i think is happeningthe savedatabaseaction class dosave updates ui on _javafxthread_ however the call to teardownjabrefframe executes before that and a blank window is shown instead of the uii placed a lock before calling teardownjabrefframe hence blocking that thread but the code under dosave method wasnt executed shouldnt they be running on separate threads ill take a look at it tomorrowyash kothari schrieb am mi märz okay so this is what i think is happening the savedatabaseaction class dosave executes before that and a blank window is shown instead of the ui i placed a lock before calling teardownjabrefframe — you are receiving this because you commented reply to this email directly view it on github the thread i have a doubt since the dosave method handles saveexception what exceptions are we trying to catch under confirmclose please remove the runinjavafxthread call only when the dosave is called from gui methods it might that the dosave could be called from a background thread which will result in a not on fx thread exception will adding a new method savefromgui in savedatabaseaction be a good approach to solving this problem this i think will lead to some redundant code or will require refactoring of the save method
4584.0,4730,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,improve toolbar icons and their layout group and reorder the toolbar icons and add generate bibtex keys button now it looks like on the martinkarims prototypes screenshots of the new layout right pr because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4724.0,4731,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,fix default import format pattern remove display arrayadd migration because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4474.0,4738,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,adding support for input methods because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thank you i am enjoying the process so far
4586.0,4743,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,adds a browse button next to the path text field for aux based groups because github does not support autolinking there fixes a browse button for aux based groups change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i am relatively new to contributing to foss could one help me understand why the check failed and how i can resolve it samiyac i am relatively new to contributing to foss could one help me understand why the check failed and how i can resolve itthe failing check codecov refers to the code coverage eg how much of the code functionality is covered with tests you can ignore it in most cases we only tend to write tests for the most important parts eg the classes in logic model and not for gui dialogsonly if the travis ci fails you should check the details and see where and what error occurred as this executes the checkstyle and the integration tests
4666.0,4744,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,move library specific key pattern dialog call to library menu follow up of and menu entry bibtex key patterns is calling a library specific dialog to set key patterns the global key patterns are managed using options preferencesthus moving it to library menu grabbed_ minor addition setting title of dialog which was empty before ~~change in changelogmd described~~ ~~~~ manually tested changed features in running jabref ~~ helpjabreforg https githubcom jabref helpjabreforg issues ~~
4583.0,4758,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,modifications to improve contrast of ui elements because github does not support autolinking there fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgtm thanks for the contribution tobiasdiez do we need to adjust the dark theme as well i think in the dark theme everything is dark so need for action
1019.0,4759,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,feature implement search filter in show preferences add a search box in show preferences window to allow users to filterpreference options because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues codewise lgtm could you please provide a screenshot how it looks like when the search matched text is found siedlerchr i have added a screenshot now will moving the checkbox next to the search field provide a better ux should the count label be bound to filteredoptionssize yeah thats cool looks good i would move the checkbox to the top next to the search fieldregarding your second option either you directly bind it to the filtered list size property or you update the text in the method which is your current way but both together will result in an error a bound value cannot be set so as you automatically call the updatemodel method on changes you can leave it as is but the updatedmodel is called only when check box is changed i was wondering if having it update while filtering would be a good addition on moving the checkbox to the top next to the search field what are your opinion on it tobiasdiez siedlerchr _ x _scrot yep that is exactly what i meant looks good and thanks for fixing this longstanding issue i am glad it came out as expected however i think that the count label should be bound to the table size so that the right count is shown when filtering i will push the changes and we can decide on whether to merge the change or stick with the current setup
4023.0,4760,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve remote messaging multiple instances possible and should by reducing the timeout thus jabref does no longer waits seconds if a proxy prevents us from connecting to localhast surpasses because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues does not work still possible to start a second instance from within eclipse javafx application thread debug orgjabreflogicremoteclientremoteclient could not ping server at port javanetsockettimeoutexception connect timed out at javanetdualstackplainsocketimplwaitforconnect native method at javanetdualstackplainsocketimplsocketconnect dualstackplainsocketimpljava at javanetabstractplainsocketimpldoconnect abstractplainsocketimpljava at javanetabstractplainsocketimplconnecttoaddress abstractplainsocketimpljava this sounds like the first instance failed to respond did you made sure that both instances run from the new code do you get an error message in the first instance yes i started both instances in eclipse waited until the first instance finished starting i only passed the debug parameter as command line argument the logged error is from the first instance at startup same happens when the second instance is starting the second instance starts normally no other errors tested again today seems to work now
4481.0,4760,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve remote messaging multiple instances possible and should by reducing the timeout thus jabref does no longer waits seconds if a proxy prevents us from connecting to localhast surpasses because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues does not work still possible to start a second instance from within eclipse javafx application thread debug orgjabreflogicremoteclientremoteclient could not ping server at port javanetsockettimeoutexception connect timed out at javanetdualstackplainsocketimplwaitforconnect native method at javanetdualstackplainsocketimplsocketconnect dualstackplainsocketimpljava at javanetabstractplainsocketimpldoconnect abstractplainsocketimpljava at javanetabstractplainsocketimplconnecttoaddress abstractplainsocketimpljava this sounds like the first instance failed to respond did you made sure that both instances run from the new code do you get an error message in the first instance yes i started both instances in eclipse waited until the first instance finished starting i only passed the debug parameter as command line argument the logged error is from the first instance at startup same happens when the second instance is starting the second instance starts normally no other errors tested again today seems to work now
4755.0,4761,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,enable import button only if entry selected because github does not support autolinking there fixes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4767.0,4768,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,allow hyphens in bibtexgenygenerator add test hyphens are legal characters and should be allowedonly drawback authors with hyphens in the name eg al ketan and using a pattern like auth are reduced to al because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues superseeded by
4764.0,4769,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix removing entries when source code field is out of focus the issue was storesource method is called when entry is out of focus however if another entry is selected then currententry is updated to that and storesource is called with the previous codearea but updating it in the second entry thus causing a duplicationfix was to pass the entry as another argument to storesource because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4754.0,4779,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,fix illegalargumentexception when ranking entries add names for ranking entries event so it does not generate an illegalargumentexceptionthis pr change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4733.0,4780,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,nightly indicate the build date and git revision add the information of the latest jabref version and its release date in about panel screenshots of the new layout aboutjabref pr because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your pr it appears that we both misunderstood the request in i also thought that the corresponding build date should be added to the about dialog however this information is already displayed in the lower part there is no reason to show the build date also at the top sorry to say but this makes your pr sadly obsolete
4762.0,4784,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix opening of entry editor the problem was that the notificationpane was hiding the entry editor preview because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues matthiasgeiger sorry for the bad timing i hope you didnt investigated too much time into this bug you are right these things should be fixed as well since ill have on time to have a look at these issues in the next days but the bug addressed in this pr is mayor ill merge now but leave open as a reminder
4785.0,4791,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix npe in duplicate resolver dialog init method was accessing the database field before it was initializedfixes pass a new bibdatabsecontext because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues as this are very simple fixes i merge directly
4786.0,4791,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix npe in duplicate resolver dialog init method was accessing the database field before it was initializedfixes pass a new bibdatabsecontext because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues as this are very simple fixes i merge directly
4736.0,4792,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,relativizes paths to aux files because github does not support autolinking there fixes issue introduced a new latexfiledirectory to metadatajava the path of the aux file is now serialized as a relative path with respect to the latexfiledirectory the getfilepath of texgroup now returns the relative path of the aux file used to create the group each user can define their own latexfiledirectory similar to userfiledirectory i have implemented tests to check for basic parsing serialization and also to check that the relative path is being found correctly when user selects an aux file via the browse button they are shown the relative path of the file in texgroupfilepath in group dialog change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4789.0,4794,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix closing of library not handling backup and autosave manager shutdown the issue was when the tab is closed by clicking x it did not callthe method closetab which handles the closing of backup andautosave manager because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thank you for those kind words smile thank you very much for this fix can you please write a changelog entry before we merge thisedit actually im not sure when this bug was introduced probably only recently so we dont need a changelog entry
4783.0,4799,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fixes ok button enabling property in group dialog because github does not support autolinking there fixes issue namefieldtextproperty to the ok button so that ok button gets enabled as soon as we enter name of the group change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues hi tobiasdiez i understand the situation and i do agree with you about the other pr being more suitable however you were on the right track and we should use the power of javafx bindings instead of the old style update mechanism for validation there is a framework which allows to implement this kind of logic in a clean way may i ask you to rework the code completely using this framework if you are not in the mood to do this and prefer to work on something else i would perfectly understand this i would like to work on this could you tell me exactly what all i will have to re implementi will make a different pr for all the changes to groupdialog and close this onethank you for updating me about the situation and for the guidance i look forward to keep contributing to jabref thanks for your understanding as of now the data in the group dialog is validated in the updatecomponents method instead it is better to have a collection of validation rules that are then combined in a so called composite validation rule this composition rule can then be used to control the disable status of the save buttonyou can find this strategy live for example here define rules combine them bind to button moreover it is easy to display a notification to the user in case the data is invalid https githubcom jabref jabref blob a d ad bbadf d a d b a fce src main java org jabref gui shared shareddatabaselogindialogviewjaval l
4783.0,4801,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fixed group creation with default settings fix for the issue now the enabling disabling the ok button with regards to the text fields have been validated properly without changing the logic of the existing code as siedlerchr mentioned now no need to switch to another radio button and back again to enable the ok button because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues please fix the remaining isuses mentioned by tobiasdiez so we can merge eg remove the action listeners so we can merge can you please give the pr a shorter and more decriptive name can you please give the pr a shorter and more decriptive namedone
4441.0,4807,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,item count in a group updated correctly because github does not support autolinking there fixes issue pr fixes the first issue i could not reproduce the second issue the item count should now be updated correctlythe problem was because of the listener not getting notified when changes were being made this was due to the weak listener which was attached to observablelist returned by databasecontextgetdatabase getentries only case where this pr might not work is when we are dealing with a library in which there are no groups other than the all entries that is because the group being utilized in the line texttextproperty bind groupgethits asstring in file gui groups grouptreeviewjava is the group all entries that is present even before you open any library in jabref this causes value to not be set properly but the only time it happens is if the only group you have in the new library is all entries once we are able to fix that this pr should work in all cases change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues is this the only instance where listeners are registered against the list returned by getentries i would also be nice if you could add a small comment in the code explaining why we need to hold a reference to the list because some ides would suggest to convert the field to variable with field scope i am not sure about that i can check for other instances over this week
4679.0,4807,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,item count in a group updated correctly because github does not support autolinking there fixes issue pr fixes the first issue i could not reproduce the second issue the item count should now be updated correctlythe problem was because of the listener not getting notified when changes were being made this was due to the weak listener which was attached to observablelist returned by databasecontextgetdatabase getentries only case where this pr might not work is when we are dealing with a library in which there are no groups other than the all entries that is because the group being utilized in the line texttextproperty bind groupgethits asstring in file gui groups grouptreeviewjava is the group all entries that is present even before you open any library in jabref this causes value to not be set properly but the only time it happens is if the only group you have in the new library is all entries once we are able to fix that this pr should work in all cases change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues is this the only instance where listeners are registered against the list returned by getentries i would also be nice if you could add a small comment in the code explaining why we need to hold a reference to the list because some ides would suggest to convert the field to variable with field scope i am not sure about that i can check for other instances over this week
4805.0,4815,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,enhanced message log worked on removed jabrefframeoutput in favor of fxdialogservicenotify and refactored calling codeadded logging to fxdialogservicenotifylogs seemed to be duplicated afterwards however this was another issue with log j because logevent objects are reused they were copied in logmessagesadd but at that point it was too late resulting in different log messages being overwritten i therefore moved the copying to guiappenderappend and this resolves the issue of seemingly duplicated log messages this is probably also the reason for closes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues siedlerchr tobiasdiez i thought while im at this anyway i could also do it properly and checked all calls to dialogservicenotify i refactored all places where the method was called from a background thread so that i could remove defaulttaskexecutorruninjavafxthread from dialogservicenotifyat two points however it was not as easy see the review abovewhat do you think thanks for the update the backgroundtask has updateprogress and updatemessage for these cases however an implementation along these lines needs further refactoring i guess in my opinion we can leave it like that for the moment and merge ok so maybe a follow up issue could then be to improve the identifier lookup and maybe also the fulltext lookup using updateprogress and updatemessage this is ready for merge then i guess yes to change the identifer lookkup and the other would be a good followup issue
4811.0,4815,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,enhanced message log worked on removed jabrefframeoutput in favor of fxdialogservicenotify and refactored calling codeadded logging to fxdialogservicenotifylogs seemed to be duplicated afterwards however this was another issue with log j because logevent objects are reused they were copied in logmessagesadd but at that point it was too late resulting in different log messages being overwritten i therefore moved the copying to guiappenderappend and this resolves the issue of seemingly duplicated log messages this is probably also the reason for closes change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues siedlerchr tobiasdiez i thought while im at this anyway i could also do it properly and checked all calls to dialogservicenotify i refactored all places where the method was called from a background thread so that i could remove defaulttaskexecutorruninjavafxthread from dialogservicenotifyat two points however it was not as easy see the review abovewhat do you think thanks for the update the backgroundtask has updateprogress and updatemessage for these cases however an implementation along these lines needs further refactoring i guess in my opinion we can leave it like that for the moment and merge ok so maybe a follow up issue could then be to improve the identifier lookup and maybe also the fulltext lookup using updateprogress and updatemessage this is ready for merge then i guess yes to change the identifer lookkup and the other would be a good followup issue
4817.0,4818,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,put renaming of file entries in javafx thread for cleanup closes because field changes must be done in the javafx thread i put the field change in a callable to be executed by the javafx threadthis issue might arise for other cleanup tasks as well change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your pullrequest tobiasdiez im sorry i was a bit careless with this pull request and used a class from the gui inside the logic package and now the build fails shall i open another pull request to revert this or can you fix this on the master branch
4819.0,4822,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,convert autolinkfilesaction to javafx also convert a few other message boxes to javafx because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgt build failing is due to previous problematic pr with cleanup
4820.0,4835,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,all buttons in custom dialogs react on enter all buttons in custom dialogs react now also on enter the default behavior space in javafx is not affected by this change change in changelogmd described manually tested changed features in running jabref https githubcom joelparkerhenderson git_commit_message could you please check the edit strings dialog cause it has an editable table and you need to press enter to confirm the column value im not sure if this interfers with the main dialog button from my point of view there is no intereference the confirmation of the value via enter works
4735.0,4839,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,fix parser exception when loading tex groups with non existing file catch file not found exception and handle non existing aux files gracefully because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4840.0,4847,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,removed default constructor of fxdialogservice fix for needs test and discussion~~removed injection mechanism for dialogservice in order to remove its default constructor because through the null value used in the default constructor the nullpointerexceptions were caused~~ change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3531.0,4848,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,fix custom name formatters because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4854.0,4855,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,improve full text search for several files solution proposal for in findfulltextaction task is now used instead of backgroundtask to be able to show a progress dialog which shows the progress for searching files online lookupdialog the functionality for downloading a file in linkedfileviewmodel is split into download and preparedownloadtask to be able to define a custom onsucess action for the background task this is used in findfulltextaction to add the downloaded file to the entry instead of the urlthe functionality provided by linkedfileviewmodeldowload remains as it is so it does not affect the download of a single file via the entryeditor change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3905.0,4860,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,remove deprecated awt apple extension because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues linusdietz halirutan could you please test if this removal breaks anything related to mac the only thing from the code might be the file handling eg double click on a bib file in the finder tested it for a day no issues appeared
4873.0,4876,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,fix saving of strings fix removing of strings the only problem i now have i cant reliable detect prevent dupliacte stringseg a user can have a string with label a and content b and a user can enter a new string a with content cthe first string would now be overwritten tobiasdiez do you have an idea if we can directly prevent the entering of duplicatesthe addall method simply adds all strings and updates the content if found previously it would always report a duplicate label exceptionmaybe one could check the id value if its present or equals because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks now its functional
4857.0,4892,1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,fixed closing of the shared database login dialog if the user enters wrong authentication details fix for the issue dialog close after pressing ok button fixed closing of the shared database login dialog if the user enters wrong authentication details change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4579.0,4896,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,store column widths as integer store column widths as integer because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
2419.0,4910,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,make group dialog resizable allow resizing of the edit add group dialog describe the changes you have made here because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4911.0,4917,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,quick fix for error when opening preferences this is just a hotfix to make the preferences dialog working againi will create another pr for converting the tablecolunns preferences tab to proper mvvm structure with fxml and a new improved layout because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues jabref dev snapshot master e e elinux generic amd java _ many thanks the full screen thing was still a problem however i started jr closed it and then started todays snapshot from shell script and jr was windowed properly again ive now restarted it several times and the correct behaviour seems to have stuck so thats good starting which always opened correctly in a window seems to have reset something in s startup environmentall good now thanks again
4905.0,4918,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,fixes throwing an exception when id field is present in bib file because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues should the exception also be removed from the clearfield method yes please also remove it from the clear field method
4864.0,4931,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,improve author parsing the author class added an additional space when converting a o to the dotted version a o because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
490.0,4933,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix for issue about the toolbar i dont think the search bar size should be link to side pane size with a bind its not really responsive littlebefore without the bind bigafter change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i like the idea thats one thing always bothered me please add at least a bit of space between the search bar and the icons maybe try to center the search bar in the toolbar and see how it looks core master how is the status of this pr it would be really helpful if you could fix the little issues mentioned here so we can merge this pr
4932.0,4935,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,throw bibentrynotfound exception in case entry is no longer present when an entry got removed a npe complaining about an empty database was thrown because of some weird unkownbibtexentry thingnow the correct bibentrynotfound exception is thrown showing the problematic reference mark because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4940.0,4943,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,fix threading issue with opening from recent libraries on windows i could not reproduce the original exception but im very convinced that i found the threading culprit because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4844.0,4950,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fixes remaining issues in because github does not support autolinking there as usual the situation was not as easy as it seemed to be in i reused now the existing renaming logic for renaming to suggested filename which performs some more checks like not to overwrite existing files and also takes the file directory settings into accountthus this should fix the remaining problem mentioned in change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4490.0,4962,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,fix for issue download fulltext for multiple entries prevent keycollion with empty urls in issue the user stated that there was a problem downloading multiple entries the entries were actually being downloaded but the user couldnt see that because dialogs were accumulating in another thread and all the downloads that failed were colliding in the map not allowing the entries that failed to be displayed properly the problem with the dialogs accumulating in the other thread has been fixed since i started working on this so the only problem left was the collision now the correct number of dialogs should appear thanks for your contribution
4886.0,4964,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,remove ui threadlist for maintable as it prevents sorting in maintable renenables sortingtried a bit around and could not find any side issue so far because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues added it around the original getentries that works now as well jabref dev snapshot master baa bd linux generic amd java _ yes seems to work fine its a little slow perhaps jabref seems to need a up to seconds to sort a newly selected date year column thinkpad t with i core cpu bib database with entries and a few seconds after a sort to start receiving keystrokes again alphabetic field columns sort more quicklythanksdominik tobiasdiez i didnt encounter any problems with the cleanup maybe we can remove the wrapper seems to cost performance
4913.0,4965,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,fix downloading pdf produces html as extension if we already have a filetype we use that instead of relying on the autodetection because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i tried adding a test but its a bit complicated as the logic is an lambda in the preparedownloadtask method and solely testing the new method which just passes the type as parameter is trivial mhh you should be able to test the download method directly javalinkedfile onlinefile new linkedfile something linkedfileviewmodel viewmodel new linkedfileviewmodel onlinefile viewmodeldownload assertequals expectedpath onlinefilegetlink needs a bit more setup but should work in principle got it to work with heavy mocking and refactoring the shitty externalfiletypes singleton is really bad for testingneeds some cleanup of the test class now delete some things which are no longer necessary
2115.0,4976,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,include preview in entry editor because github does not support autolinking there first shot at current look mlep grimes should i continue along this path or do we need a different solutionrelated and change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues jabref developers i would like to have your opinions about this solution before doing the major code changes necessary for a complete integration tobiasdiez im a bit indifferent first personally i do not really use the preview function at all im using standard natbib or whatever styles in latex and therefore know how the entries will be looking like or im not really interested in the exact way they are looking therefore im not sure whether i like it that much screenspace is wasted in the entry editor for the required fields tabs however i think for persons who are interested in the preview this might be even better than the older style so for me it is okay to have in the entry editor but it should still be possible to disable hide the preview in case you are not interested in the information shown there tobiasdiez to me this would be a great implementation i regularly need to send references to people via email or in word files and have the preview allows to do a quick copy paste of the reference as they appear formatted clean i personally dont think its a waste of screen space with the high aspect ratio of todays laptop screens and pcs monitors thats not a problem however i do agree with matthiasgeiger that the option to enable disable the preview would still be possible nicolarge side note this can already be accomplished without even showing the preview by marking all entries you want to share in the main table then right click copy copy preview or alternatively using ctrl shift c smile superseded by i know this is a big thing to ask but can you please revert this change and or make it just optional i have just had a look at jabref alpha snapshot master c bdc to test just to realise that the entry preview is no longer automatically shown at alli am heavily reliant on using the entry preview i often tend to quickly go through different entries and the entry preview gives me a quick overview of the entry now i always have to open the entry editor just to see the preview my feeling is that this change was introduced by people who actually do not even use the entry preview at all see also comment here this new behaviour is completely different from the old jabref behaviour and from similar reference managers eg mendeley so unless you can suggest a change in the way i should use jabref now maybe i just dont understand how the entry preview is now supposed to be used while keeping my user scenario i e quickly cycle through entries and always get a quick summary of the respective entry i would ask to drop this change or make it optional hi aegit i understand your concern and we should definitely not leave it as it is if we would keep the entry editor open all the time unless the user explicitly closes it would that solve your problem hmmm that might be a solution although it also means that it will use up more of the available screen space to be honest i am not a big fan of that i think the old behaviour was just fine as it was implemented indeed other reference managers did it also old way jabref was doing it is there any reason why this change was introduced at all i personally dont see the user case but maybe that is just me well we had our reasons you can start editing entries quicker because the entry editor is already open this should be fixed as mentioned above you immediately see the effect of editing something in the entry preview while you are typing this is especially important for novice users screen resolutions have become bigger since when the entry editor and the entry preview were first introduced thus we have the space to display both side by side hmm ok regarding the points so far the issue with the entry editor does not seem to be fully resolved furthermore note the problems with the focus searching terms and then suddenly making changes in the entry editor makes this change currently dangerous but i see what is intended here ok that makes sense but then it would probably be necessary to have a single entry tab not split among different tabs at least that is how mendeley is doing this personally i liked it the way jabref had implemented things before i am not so sure whether people are happy with the current solution i e entry preview open editor but with multiple entry tabs not so sure about the space currently using a x screen with jabref using up half of the screen there it is definitely too small at work i have a k screen where jabref is using up a quarter of the screen jabref in full screen on a x screen i dont think jabref is supposed to be used in full screen mode i dont think many people have larger screens especially when you include laptop users i would very much like a simple and one click way to disable showing the citation preview i spent quite some time looking for it when i got the update since i could not believe that this change was introduced without an option to switch off the preview that takes away space and cpu cycles for keeping it updated as this is a merged pr i moved the conversation feedback to a new issue to keep the overview
2016.0,4979,1,0,0,1,1,1,1,0,0,1,1,1,1,0,1,fix command line help text now in the cli help text arguments and descriptions have been rewritten for fixing simplifying and detailing them betterit fixes issue cli help change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4977.0,4980,1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,resize different fonts changing entry type now jabref uses the same typography for the two menus to change entry type and for the tooltip it entry_type_menu change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
496.0,4981,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,duplicate check on import should be run in background task created background task for the work done in org jabref gui importer importentriesviewmodeljava siedlerchr thank you for the review your suggestion is committed as per call flow i havent found some bottleneck for viewmodel as per call flow if gets called mainly org jabref gui importer importentriesdialogjava but i guess as you wrote it worth to have this task done in a separate thread for both use cases
674.0,4991,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,submenu to select push application since the migration to javafx i saw no way to change the push application there were some pull request in the past trying to fix this but they all were forgotten undone so this is my shot trying to implement a very simple way to change the push application closes and closes closes ~~ apparently i forgot the fetch before i opened the new branch please ignore the old superfluous commits my changes start with f its still wip its not done yetthe caption of the menu is temporary there is no l n toolbarbutton is not updated and another small problem is left i could not figure out yet and i am hoping for your support i was not able to change the caption of the pushappplicationmenuitem since its bound somehow to another variable do you have any idea how i can change this label~~ merging into master will decrease coverage by the diff coverage is impacted file tree graph coverage diff master coverage complexity files lines branches hits misses partials impacted files coverage δ complexity δ g jabref gui push pushtoapplicationmenuactionjava n java org jabref gui preferences externaltabjava arrow_down ain java org jabref gui actions actionfactoryjava arrow_down src main java org jabref gui jabrefframejava a org jabref gui push pushtoapplicationactionjava arrow_down n java org jabref gui actions standardactionsjava arrow_down org jabref gui push pushtoapplicationsmanagerjava arrow_down n java org jabref gui entryeditor entryeditorjava arrow_down java org jabref gui filelist attachfileactionjava arrow_down and more continue to review full report at codecov legend click here to learn more δ absolute impact not affected missing data powered by codecov last update a e aefb read the comment docs cleaned up the commit history the rebase monster is finally goneas siedlerchr pointed out a few days ago nothing git magic cant fix i syncd my local master branch with upstream master hard reset my working branch history to my last real commit rebased on master and force pushed to github so just one question to help me understand the changes of this a bit better whenever i change the push application in the tools submenu the icon button toolbar changes to the selected applicationcodewise lgtm so far the radiomenuitems change the setting in preferences and the action stored in the managerand they reconfigure the menuitem the text and the toolbarbutton the icon the menuitem and the toolbarbutton both call the same action stored in the manager thanks for your contribution code wise the changes look good to me and ive only a few a few suggestions although its a huge improvement in terms of usability im not sure if the solution to set the push to application through a separate menu entry is intuitive to most users i would prefer if the application is set in the preferences instead of via a menu item jabref developers opinionsshouldnt be a big deal to put it into the preferences ill look into it tonight i going to create a second pull request for the alternative thanks for your contribution code wise the changes look good to me and ive only a few a few suggestions although its a huge improvement in terms of usability im not sure if the solution to set the push to application through a separate menu entry is intuitive to most users i would prefer if the application is set in the preferences instead of via a menu item jabref developers opinionsi put an alternative proposal in
4995.0,4996,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix the attach file dialog for starting on the users main directory now the attach file dialog in the right click menu for an entry starts on the working directory instead of the users main directory it is the same behavior as when adding a file from the entry editorit solves change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4997.0,4999,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,fix iee fetcher add exception dialog on import failcheck if we have keywords field present in json because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4958.0,5010,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,fix field formatter save actions throwing exception on autosave in my opinion this is an ugly hack but still the only option without violating our architectureproblem is that the autocompleter has an input binding which is triggered whenever setfield in bibentry is called in this case part of the apply save actionson autosave we have a background thread in the backupomanager which executes the savedatabaseaction which itself executes the save actionsexectuted in a background thread describe the changes you have made here because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5002.0,5011,1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,latex integration project hey this is the pull request where i will be uploading everything related to the latex integration project which tobias mentioned in for the moment i have been coding the backend of the tex parser and preparing tests for these classes before the end of this week i will add support for nested files and cross references and will keep improving the related documentatio y feedback is more than welcome d a suggestion for the ui of the search result window i like the design of researchgate to show the citations can do something similar just replacing the reference minimal two spheres with the name of the latex document and the links view with an option to jump to the citation in the latex filein general tables are nice if you want to compare items while lists are preferred if the user is more interested in the details of an item i guess for the search result window we are in the second case although that might differ from user to user thanks for your feedback siedlerchr and tobiasdiez now all identified issues should be fixed todo add support for multicite commands todo expand integration test tobiasdiez what do you think of this gui according to the example that you proposed parser ui the way you all can follow the development of the user interface in other pull request this one is becoming very big i have renamed crossingkeys to texbibentriesresolver do you think this is a clear method signatureregarding bibdatabase and cloneentry they were related to an idea from the first few days but it does not make sense anymoreall your remarks should be solved nowfurthermore i have been working on the gui too hope to commit the latest changes soon thanks for the update the code looks good to me now and from my point of view we can merge this pr onto a new branch at the jabref repository this allows you to open further prs against this new branch with proper updates and build checks moreover our build infrastructure kicks in and we get a proper build which we could share with users to get early feedback siedlerchr linusdietz davidemdot if possible can you please change the target branch to a new one say jabref latexintegration if not please open a new pr targeting this branch thanks tobiasdiez i can change this pr to another branch but i am not allowed to create a new one in this repocould you open it please just writing the name in the branch selector menu and new_branch done ive merged this now so you can target your new prs onto jabref latexintegration with proper github notifications and build infrastructure
674.0,5024,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,select push app in preferences as asked by tobiasdiez here is my alternative proposal this closes by merging closes and closes img width altprefpushtoapp src branch is build up on the other branch including the other commits this time by intentioni hope you like it have a good night change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues what i really hate is the hardcoding of applicationnames in pushtoapplicationsettingsclass but before there was only some cryptic numbering scheme depending on the order the push applications were created in the first place at least its a little bit more readable yet i saw no other way without a larger refactoring of this codeready to review i added some eye candy you will be charmed img width altselect push application src looks good to me ok should be ready again there are still a lot of things that could be done eg refactoring of the preferences dialog and changing the single tabs to mvvc but i dont want to interfere with the other rework towards and the fate of swing looks good please check if you can select the push to application multiple times after each other without closing the prefs dialogselect lyx and then again select texstudio for example if it works all is good works fine at least if i understood you right i hope so looks very good to me now thanks again you are welcome this was fun again lets push jabraf forward towards
3861.0,5033,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,convert preferencedialog to mvvm one of the last missing things in is the conversion of the preferencedialog and some of its tabs to mvvm i understood that in the future jabrefpreference probably need properties to make them bindable but for now i think this goes beyond this prit works as expected i took the liberty to add a split pane between the conents and the tablist to enable the user to change the width between them so this pr is not just about refactoring the dialog this is very early shot on this matter i dont know if you think its worth moving on with this and to look also into the tabs for the default export options i already did that because they are reused in the library properties dialogoh yeah i see that now this is great this is almost all the work i can almost just copynpaste yours 😆 i made some visual improvements and converted the generaltab to mvvm still everything wip but you can see where the road goes ~~i encountered a problem id like to ask to help with i wasnt able to apply l n on the controls on the pane which is why travis is currently failing but on the large headings which are basically labels too very strange do you have an idea~~ generalstab the basic workflow is now understood the other tabs shouldt take too long but i do not have much spare time the next days so it could take some days i can continue to commit and do some cleanups in the meantime could you take a quick trivial look into the code if i did something utterly wrong so i dont repeat it thank you very much i think we should follow the suggestion by tobiasdiez and merge this asap and you or others can then create the fxml and logic for new tabs ok i will get this ready to merge asap but there really need to be some cleanups after converting the last one of the tabs i added the filetab beacause i already started with it before we were talking about merging this asap but should be soon ready now i am to tired should be ready saturday night sorry i was not able to present a solution including the validator i got them somehow working but there is still an big issue somehow the validator does not seem to be updated after something was typed in the textfield the stringproperty keeps somehow the old input if i dont disable and reenable it i will have another try tomorrow ok validators work i got the dialog and the two tabs general and file converted including the validators where they were in the first placeshould be ready to review and probably be merged if there is no issue left so the the other tabs can be converted by other prsafter converting the last dialog there need to be some interface changes to prefstab to make validsettings bindable and to make some cleanups i did not want to do them now because it would blow up this pr way more fixed two little things and injected dialogservice ready again
5019.0,5034,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,set up general fields character check not correct & alphabetical ordering as asked the character was included on the error message also we included other characters that were not being mentioned on the message we tried to remove the character from key_illegal_characters and key_unwanted_characters on bibtexkeygeneratorjava but we did not know if it would be a good idea because it violates some testsabout the order of the tabs we removed the alphabetical ordering so now it is following the order defined when the tabs are created on the set up general fields option hyphen pr because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgtm thank you very much for your contribution would you please add a note on the allowed chars in the help at the bottom click edit this page
5043.0,5048,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,preserve encoding while copy and pasting in maintable encodes and decodes data with utf merging this now
5028.0,5056,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,fix order of other fields because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your contribution could you please adjust your title of the pr and describe how or why the fix works thanks in advance tobiasdiez sure ill add comment descriptions for the next prs btw i cannot merge this pr any reason only members of the core jabref development team are able to merge prs this is normal for most github organizations projects each pr should ideally be reviewed by at least two jabref core developers to maintain a high quality of the code base siedlerchr sure i thought the reason might be something like a ci build failure or any
5036.0,5057,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,remove bindingshelper for ui in maintabledatamodel the problem is that the maintable findentry method does not find the new entryfurther debugging showed that the observable list with the entries in the maintable model does not yet include the new inserted entry although its already in the bib databasethis is because due to the bindingsforui around the list in maintable its run on the fx thread and the fx thread is blocked busy with the findentry methodi know this was added because of not on fx thread exceptions but i tested cleanup and external modification of file and it was fine i think the key problem was the old swing stuff at that time change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues yeah you are right just ran into the issue i think in the long term we need to redefine our architecture so that we only access bibentry from the fx threads
5023.0,5058,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix automaticalls set file links task not runinng executing the created task would have been helpful 🤦‍♂ because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5066.0,5068,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,add copy linked files action to contextmneu in general tab because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues added a variant for a single entry and did some refactoring
5045.0,5086,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,bugfix modified the existing logic to comply crossref resolution with biblatex specification because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your contribution could you please add a test for the changed code tobiasdiez siedlerchr sure ill make those amendments and the uts tobiasdiez could you please review the latest commit thanks looks good to me now please merge the latest master changes in there have been renaming of the fields classes so you need to fix this then we can merge siedlerchr i pulled the changes from master this pr can be merged to the master now thanks please review the importsfixed and organized imports please review and merge please review the imports fixed and organized imports please review and mergeplease have a look at travis checkstyle output star imports are not allowedif you use intellij you can directly import the code style from the config folderfor eclipse you can run gradlew eclipse to automatically import the correct code styleif you then run organize imports in the ide it will be correct please review the imports fixed and organized imports please review and merge please have a look at travis checkstyle output star imports are not allowed if you use intellij you can directly import the code style from the config folder for eclipse you can run gradlew eclipse to automatically import the correct code style if you then run organize imports in the ide it will be correctfixed imports issue please review
4816.0,5101,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,fixes ris data field because github does not support autolinking there this pull resquest fixes issue importing ris files jabref checks for date fields y pyda and y and uses the first one it finds the problem is that y refers to access date da in most cases is a generic date and py is the publication year reliable field couldnt find references to y primary date however as already cited in and by doing some exports we found y to be pys synonym furthermore when py received a higher priority than y some tests cases didnt pass as there were a missing month field in bib we established a priority system indicated by the datetags lowest index higher priority added test cases for this and changed one of the old ones adding the month field nicely displayed in change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for the feedback siedlerchrthose are great suggestions using a list is much better and since indexof returns if it doesnt find the element we can use it to find out if the element is in datetags and to get its index like this java } else if tagpriority datetagsindexof tag && valuelength { if tagpriority premature optimization is the root of all evil ~ donald knuththe complexity really is only for large nbut i think you can omit one time searching the list see my comment at the code thank you for your work
4269.0,5110,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,issue & because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your contribution however there seems to be something wrong here with your branchversion x is no longer under active development so please base your changes on the jabref master branch thanks for the feedback i do understand the problems with my resolution of issue and ill try to make the proper correctionsbut about the issue the problem no longer exists in the development version eventhough the issue is still open thats why changes were submited to the previous branch as a matter of curiosity is the change made a proper solution hiif the issue is no longer present in the development version than you can add a comment to that issue that its no longer reproducible and we can close itsometimes issues are resolved or are automatically indirectly fixed as part of another bug fixsomeone did so the issue might be still open although the bug is fixed you can check the code of the current master and see for yourself if the bug was fixed as you intended iti have just no code open here so i cant tell ya it would be really nice if you could fix this issue for jabref x
3874.0,5118,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,fix lookup fulltext document not finding files change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues what is the current status here 😺 superseeded by ill took over it
4680.0,5121,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,add option to allow for integers in field edition when running database in bibtex mode because github does not support autolinking there issue is a new fork from the old pull requesti added a checkbox in preferences generaltab to allow insert integers in field edition when bibtex mode is running also i modified editionchecker class to permit this configuration as well as the test cases in integritychecktest class change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues ok i focused on the preference stuff made a comment everything else fits into the pattern so i guess besides the override lgtmdid you notice the unresolved merge conflicts please fix the changes proposed from calixtus and merge the latest jabref master branch in your branch
5002.0,5123,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,add search for citations in latex files back end and gui here is a latex parser tool that reads each file line by line parses and analyzes them for detecting different citation formatsits user interface consists of a first dialog box that will ask the user for a directory to search tex files then the user could select specific files after that the tool parses these files and shows all the bibliographic entries found in a new dialog box latex_parser issue change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks a lot
2581.0,5125,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,fetcher ottobib i developed the fetcher to use ottobib then after it try the ebookde and chimboricom is made the requisition for ottobib look at the webfetcherstest class under jabref src test java org jabref logic importer webfetcherstestjava you need to remove your new fetcher from the list of expected fetchers that should resolve the erros look at the webfetcherstest class under jabref src test java org jabref logic importer webfetcherstestjava you need to remove your new fetcher from the list of expected fetchers that should resolve the erroshi siedlerchr thanks for answering me i think the problem with webfetcherstest has been fixed superseeded by
5128.0,5142,1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fix substring exception in find unlinked files refactor to own method and add testthe exception came when the parsed editor string did not end with a colon and two spaces because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4629.0,5150,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,fix for issue because github does not support autolinking there distinguish the user action between menu and button reuse the acitons class to add enum to the description of user action 图片 https user imagesentcom afa e ae d a cec png 图片 https user imagesgithubusercontentcom c afa e c f faapng 图片 https user imagesgithubusercontentcom d f afa e db fe d d png just change the jabrefaction as your suggestion hey ffffatgoose it would be awesome if you could have a look at the comments and find some time to incorporate them in the pr or discuss them in the comments in case you disagree i feel very sorry to delay for so long i have some question for the class actions below are the codes of button creation in the main frame of gui as the javadoc told olddatabasecommandwrapper and actions is deprecated however they are still in use…… input parameter is in the form of actions so i reuse the class to return the exact actionname of user action waiting for suggestions d i feel confused about the checkstyle error……ask for some help 图片 ffffatgoose this is not related to your changes its a problem in the master branch hi ffffatgoose jabref is in the middle of converting the gui from the old swing controls to javafx see pr and also refactoring the codebase to the mvvm pattern this is why actions oldcommandwrapper etc are deprecated but are still used since not everything is already refactored this will take timeto bring some relief from confusion the controlsfx library brings its own action class which is different from the standardactions enum and the deprecated actions enum the mvvmfx actionclass is just the eventhandler the standardactions enum of jabref and the action interface includes only the information about the action text icon etc since not everything is converted yet most of the menuitems still use the olddatabasewrapper stuffabout your checkstyle issue i was able to reproduce it with the vanilla sources i think it has something to do with the gradle build script and some recent updates of the junit library would be probably the best to create a new issue in the issuetracker on githubedit whoopsie while writing my comment siedlerchr was quicker ffffatgoose calixtus the checkstyle problem on the master should be gone now get it~ i only used the class actions in the place that the input parameter is in the form of actions like this i think its no use to add a new enum for it is there and else problem i should solve or it is necessary to change my way to solve this tvt davidemdot could you take a second look if this is ready tobiasdiez do you think this is fine to merge yes looks good to me thanks again for your contribution
5152.0,5190,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,border for group color indicator and some space for tooltip refs one of my groupcolors is white which made it hard to see in the jabref windowi added a thin grey border so one can see even white groups on white backgroundalso i made the area the user can put his mousepointer in to show the tooltip a little wider pixels were to small left before right after groupcolorbefore groupcolorafter to review change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5152.0,5191,1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,tooltip and icon added to group cell with a missing tooltip and icon in the color group column i used default_group_icon from jabreficons to supplement the missing icon hi i just saw your pr with a very close relationship to mine there are two little issues i spotted but i think both should work well together 👍 you can ignore codecov its for gui stuff not really relevant we try to focus on important tests for logic and model eg the methods and classes there should have tests thanks for your contribution
5194.0,5195,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,add citation commands to texparser we added a few more citation commands autocite autocite blockcquote and textcquote this pr change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5163.0,5197,1,0,0,1,0,1,1,0,0,1,1,1,1,0,0,with missing year value in year column with missing year value in year column the query to receive this value was missing in the ieeejava simply added one change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your contribution its better if you create a new branch for a fix or feature this makes it easier to only see the related changes and not the other merge historyhere is a description how it works sorry for the problem and thanks for the tip would you like me to redo the last commit i can reset my local repo make a change and send it back in new branch or just leave it as it is now for this small commit it should be sufficient to just merge the latest upstream master changes in your branch
5198.0,5201,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix exception when adding new entry because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4836.0,5210,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix double paste on different os fixes fixes upon pasting macos calls the system paste as well as jabrefframeeditactionexecute this caused a duplicate call of the paste working in linux as well
4845.0,5210,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix double paste on different os fixes fixes upon pasting macos calls the system paste as well as jabrefframeeditactionexecute this caused a duplicate call of the paste working in linux as well
5220.0,5224,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix exception when adding field formatter in cleanup entries dialog this
4612.0,5229,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,add doi url eprint field to general tab layout because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5021.0,5230,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,treat unknown fields as multi line fields unknown fields are now treated as multi line fields in the future we should provide an ui interface to specify or change properties of fields because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5245.0,5259,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,avoid erroneous materialdesigniconfactory fix for refactoring of the code for managing icons now all usages of dejensdfxglyphs or dejensdfxglyphsmaterialdesignicons are encapsulated in the package guiicon in there the usage of dejensdfxglyphsmaterialdesigniconsutilsmaterialdesigniconfactory is avoided because of the error described in the issue change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues ok thank you for your suggestions i reworked it now and tried to improve it further by keeping all things related to materialdesignicons inside guiicon and outside of this package only jabreficon s are used that also made the class jabrefmaterialdesigniconfactory obsoleteit is working now as expected but there is one thing which should be improved in the class orgjabreflogicgroupsdefaultgroupsfactory there was an import of dejensdfxglyphsmaterialdesigniconsmaterialdesignicon which passed the architecture tests when i refactored it i exchanged it with an import of orgjabrefguiiconicontheme which caused the architecture test to fail now im not sure how exactly the functionality in defaultgroupsfactory is needed and dont know how to properly do it to let the test pass i used a string constant nowi also added the architecture test you suggested and hope that it is correct as i havent done anything with archunit yet looks good but that workaround is no longer necessaryits not a workaround anymore but more a refactoring which also fixes the issuei would also say that it is ready to merge there is just the thing i described in the class orgjabreflogicgroupsdefaultgroupsfactory there was an import of dejensdfxglyphsmaterialdesigniconsmaterialdesignicon which passed the architecture tests when i refactored it i exchanged it with an import of orgjabrefguiiconicontheme which caused the architecture test to fail now im not sure how exactly the functionality in defaultgroupsfactory is needed and dont know how to properly do it to let the test pass i used a string constant now i am going to merge this now looks good to me i think the issue with the groupfactory is when you store and read groups with an icon
522.0,5266,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,issue issue add software and dataset entrytype as an option in the biblatex and bibtex add fields eventitle eventdate and venue to unpublished entry type i used the misc set of fields to supplement software and dataset couldnt find documentation about specific fields that should be included in software and dataset entry type entrytype change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues looks good so far please add a changelog entryregarding the fields you can look up in the biblatex documentation the next time please do not enter the issue number in the title of the pr because github cant link it then if you write closes xxxx or xxx then the issue will be automatically closed when the pr is merged which biblatex styles support dataset biblatex bath does https ctanorg pkg biblatex bath
5223.0,5266,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,issue issue add software and dataset entrytype as an option in the biblatex and bibtex add fields eventitle eventdate and venue to unpublished entry type i used the misc set of fields to supplement software and dataset couldnt find documentation about specific fields that should be included in software and dataset entry type entrytype change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues looks good so far please add a changelog entryregarding the fields you can look up in the biblatex documentation the next time please do not enter the issue number in the title of the pr because github cant link it then if you write closes xxxx or xxx then the issue will be automatically closed when the pr is merged which biblatex styles support dataset biblatex bath does https ctanorg pkg biblatex bath
5245.0,5276,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,add shorten doi field formatter because github does not support autolinking there what this pr addsthis pr is related to added a field formatter called shorten doi formatter which shortens doi using service you run the formatter from _cleanup entries dialog_ by adding it to _run field formatter_ listit looks to work fine it enables one way conversion from doi to short doi implementation details i assumed that short doi is still a legal doi thats why i adjusted the doi class to work with short dois feedback wantedi id like to ask for your feedback about the code at this stage next step add a more accessible ui a toggle button next to the doi field _shortened long version_ this was suggested by koppor this will require adding opposite conversion from short doi to doi as servcie doesnt offer such a feature i see two approaches store the original doi during the conversion for further back conversion drawback you may not convert from short doi to doi if you havent done the opposite conversion for at least one time try to obtain doi from short doi using service as it is possible by catching the redirectioni find the st approach fine the th approach is not really good as we are not using any public api and this can stop working in the futurewhat do you think folks importantif you would like to checkout this branch and test locally please use shortdoi workaround branch which uses workaround by r light for issue on master branch there is an issue with accessing _general tab_ in bibentry editor change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thank you for review i applied changes as you suggested in commentsnow you have to decide what about this more accessible ui to this feature imho adding it to right click menu as suggested by tobiasdiez sounds nice but as you said its unfortunately blocked at the moment by what do you think tobiasdiez siedlerchr kopporwould you like to merge this pr if you approve it of course and create a new issue for the ui enhancement in the future or rather do ui in this pr i think you can create a new issue for adding it to the context menu and then refer to that blocker issue i think we can already merge and ill add a comment concerning the ui implementation in again for your contribution
526.0,5280,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,revert get jabref running in eclipse reverts jabref jabref
5116.0,5283,1,0,0,0,0,1,1,1,0,1,0,1,0,0,0,unify month field formatting in test bib files jabref jabref after some extensive use of grep and sed this should finally solve change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues oh seems like it broke a lot of tests i tried to look into as a good first issue heres what i did changed the months in the bib files to be in the format oct not oct ran tests ris tests failed as they were expecting the month to include the surrounding s but they didnt went to risimporterjava and set the month this way if monthispresent { entrysetfield standardfieldmonth monthget getshortname } but now other tests have failed this time because they actually included the surrounding s but were expecting no surroundings sthats why i believe just changing the test bib files wont work and this requires some changes to the actual code as well okay thanks for your feedback and sorry for the confusion i will have a look at it thanks for the explanation omer rotem the month should be set via tobiasdiez thanks for pointing this out i agree that if theres one function to set the month it should be used but as im new to jabref im still trying to understand why the month is surrounded by s in jabref see this im also interested to know why when jabref generates the bib file it doesnt serialize the month correctly but thats probably the bug were trying to fix here i created a small pull request to only the tests cases where the bib files were written incorrectly pull request ive now merged the pr by omer rotem so that we get proper attribution for his work of course the other instances of wrong month values found by sfo should be fixed as well omer rotem it us usually best practice in open source development that you ask before working on the same issue as somebody else its just more time economic for everybody involved tobiasdiez thanks for the heads up will follow next time i rebased onto master and fixed the issues with parsers and exporters tests are all green again looking forward reading your feedback sfo could you please implement the minor suggestions so that we can merge thanks for reference the thing with is described at i also linked it from our entry editor help nowdid not know that we even support typed string constants very nice i think this has much potential i added test cases for month apr in master should be merged into this branch if all test are green the feedback of tobias should be included if there are more errors we really have to think about everything ^^ i went through all the changes and created a follow up pr at https githubcom jabref jabref pull
3142.0,5325,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,use binding to update global state manager because github does not support autolinking there use javafx binding instead of a listener to update the global state manager that seems to work more reliable and fixes a bunch of issues in particular and fixes moreover i fixed an error that was thrown when interacting with the toolbar missing open statement but we were using reflection change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4441.0,5325,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,use binding to update global state manager because github does not support autolinking there use javafx binding instead of a listener to update the global state manager that seems to work more reliable and fixes a bunch of issues in particular and fixes moreover i fixed an error that was thrown when interacting with the toolbar missing open statement but we were using reflection change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4846.0,5326,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,fix problem with search and switching between libraries by using bindings instead of listeners because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
2857.0,5328,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,improve group coloring and item count the problem was that gettreetablerowgetitem in viewmodeltreetablecellfactory still returned the old item and not the new one passed as method argument to updateitem since i was already looking at the code this pr also fixes that improves the coloring after an entry was added to the group also fixes at least i couldnt replicate it anymore because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
3112.0,5328,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,improve group coloring and item count the problem was that gettreetablerowgetitem in viewmodeltreetablecellfactory still returned the old item and not the new one passed as method argument to updateitem since i was already looking at the code this pr also fixes that improves the coloring after an entry was added to the group also fixes at least i couldnt replicate it anymore because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5327.0,5328,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,improve group coloring and item count the problem was that gettreetablerowgetitem in viewmodeltreetablecellfactory still returned the old item and not the new one passed as method argument to updateitem since i was already looking at the code this pr also fixes that improves the coloring after an entry was added to the group also fixes at least i couldnt replicate it anymore because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5334.0,5338,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix npe when opening a non existing file from the recent files menu dialogservice object was null because the filehistorymenu class is initialized before the ctor of jabref frame creates the dialog service object because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5263.0,5340,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix various copy to clipboard issues pt fixing by only using the text content to be added in the right click copy functionality in the preview see right click option in maintable additionally store content also in string format that can be accessed then with simple text editorspt improve also functionality in export to clipboard dialogcurrently all exporters are used for export to clipboard however the ones which are creating files like pdfs cannot be used for copying to clipboard thus they are filtered out now additionally in case rtf or html content is exported the specific clipboardcontent has been used change in changelogmd described tests ~~created~~ adjusted for changes manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues tobiasdiez if you dont have further objections i would merge it to master 😃
5333.0,5347,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,fix display bug for keyword groups with empty keywords by filtering out empty keywords because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5348.0,5351,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix exception when closing jabref by using javafx windows instead of awt windows because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
2902.0,5352,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,bring back the context menu as explained in it is no longer possible to customize the context menu items because the classes related to the text field behavior are not accessible thus instead i simply copied the relevant code from openjdk pretty ugly workaround and refs i removed the custom tab handling because it is now working as expected ie is fixed in java because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5254.0,5352,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,bring back the context menu as explained in it is no longer possible to customize the context menu items because the classes related to the text field behavior are not accessible thus instead i simply copied the relevant code from openjdk pretty ugly workaround and refs i removed the custom tab handling because it is now working as expected ie is fixed in java because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5022.0,5354,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,fix group color when scrolling problem was that the pseudo class was not initialized correctly but was only triggered upon changes because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4868.0,5355,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,fix default group color now groups have a dark gray instead of white as their default color because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
4574.0,5356,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,show more than one group color bar shows multiple colored bars if the entry belongs to more than one group with color implements describe the changes you have made here because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues for left aligned if one does not know the feature this looks better to meanything else left ok left aligned it is ready to merge from my pov
5369.0,5382,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,fix for fallback to in case stored preview cycle pos does no longer exist fix for problem should in theory not happen as always a correct size should be stored however if for example csl styles are not loaded properly the mentioned exception in might occurto prevent this upon creating the preview prefs now the stored cycle position is now compared to the actual list of previews before being set because github does not support autolinking there change in changelogmd described i think as this is not a common problem can be omitted ~~ ~~ manually tested changed features in running jabref ~~ ~~ ~~ helpjabreforg https githubcom jabref helpjabreforg issues ~~
5246.0,5385,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,reenable prevcycle because github does not support autolinking there okay this should be working again now however without the csl styles working see its a bit hard to check fixes change in changelogmd described ~~ ~~ manually tested changed features in running jabref ~~ ~~ ~~ helpjabreforg https githubcom jabref helpjabreforg issues ~~
5359.0,5392,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix writing of editor field is duplicated serialization of orfields was not implemented properly as the currently written field was not stored correctly change in changelogmd described manually tested changed features in running jabref ~~ ~~ ~~ helpjabreforg https githubcom jabref helpjabreforg issues ~~
5169.0,5395,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,fix exception when merging entries the problem was that sourcechanged was invoked asynchronous and thus the information in the change event could be obsolete if another thread changed the underlying list in the meantime solution run sourcechanged on the javafx thread but synchronously because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i merged to keep things moving however it would be nice if my code questions would lead no another pr adding comments on the code
5383.0,5421,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,add change listener to main table to scroll to imported entry add change listener to main table to scroll to imported entry change in changelogmd described not really testable via unit tests manually tested changed features in running jabref not needed helpjabreforg https githubcom jabref helpjabreforg issues please re review siedlerchr what do you think loos good to me now as well thanks for your contribution
5084.0,5432,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,fix cursor jump the entry editor was very aggressive and stole the focus from the search bar or from the main table this lead to problems like where users overwrite the contents of the entry while doing a search moreover it made it impossible to navigate between entries using the arrow keys in the main table both of these issues are fixed now because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues when you create a new entry the focus should be in the first field does this still hold true siedlerchr thats a good suggestion but does not even work in the current master something for another pr maybe
5447.0,5448,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix nullpointer on import change in changelogmd described not testable with unit tests manually tested changed features in running jabref not needed helpjabreforg https githubcom jabref helpjabreforg issues
5035.0,5454,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,fix highlight issues for lists and fixes the problem was in both cases that the list view reuses nodes when scrolling instead of creating new ones because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5277.0,5454,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,fix highlight issues for lists and fixes the problem was in both cases that the list view reuses nodes when scrolling instead of creating new ones because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5458.0,5459,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,temporary fix for colorpicker in groups temporarily should be reverted as soon as the compatibility issues with jfoenix and jdk are fixed change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues mh seven minutes between opening the pr and merging maybe not a world record on github but still quite impressive 🚀 😃
5452.0,5471,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,mark oostyle as invalid if no defaultstyle in addtion dsplay correct layout for article and book todo add documentation issue because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5069.0,5472,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,fix highlight problem in entry preview by using markjs because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5463.0,5481,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,fix for issue fixed issue change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues good work 👍 ill merge this pr nowi hope you enjoyed contributing to jabref i would like to continue working with you what do you think about resolving this issue was recently reported and is about an important feature of jabref
2389.0,5482,1,0,1,1,0,0,1,1,0,1,1,1,1,0,0,add x primary selection clipboard support _related to issue jabref and the x window clipboard selections _i have been testing different alternatives and i think that this is the best choice for using xclipboard a new dependency is needed and it does not give any added value all contents that jabref sends to the system clipboard will be available in the x primary clipboard too ie copyversiontoclipboard in the about dialog so it is possible to paste it in a text editor doing click in the middle third mouse button copy_version it is necessary to call the install method in every text field where you want to use it for the moment it is activated in the globalsearchbar therefore you can try it write something select a piece of text and do click in the middle button global_search now clipboardmanager uses the singleton pattern it is instantiated once in globalsjava any feedback will be more than welcome d change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thank you on working on this no linux at hand currentlythe primary and secondary buffers are completely separate buffers so the test case is open jabref add a new entry have the entry editor opened showing the author and title field select milton {abramowitz} and irene a {stegun} here in this issue and press ctrl c to copy that text to the primary buffer select handbook of mathematical functions with formulas graphs and mathematical tables with the mouse to not press any keyboard shortcut switch to jabref maybe using alt tab go to the title field press the middle mouse key check expectation handbook of mathematical functions with formulas graphs and mathematical tables is pasted go to the author field press ctrl v expectation milton {abramowitz} and irene a {stegun} appears davidemdot could you check if it works like that gregoa this is the expected behavior if i remember the linux desktop correctly i checked which seems a good short resource on that i see at that firefox pastes the secondary clipboard at ctrl v if text was selected in firefoxshort summary for x clipboards longer text good introd pargraphs i learned there is clipboard typically ctrl c v and primary mouse text highlight source for the bibtex example koppor after last commit which activates the primary clipboard for all textfield textarea controls in the entry editor your test case works exactly as you said gregoa nomicrosoftbuhtz could you test if it meets your expectations find the build at http buildsjabreforg issue
5469.0,5483,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,fix not on fx thread error for custom entry types revert change done in because the actual code just opens the already loaded databasesat this point the databases are already loaded in a background thread because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5485.0,5495,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,fix deprecated crossref rest api parameter changed the query parameter querytitle which is deprecated to querybibliographic because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for the quick fix for your next pull request please use a short description of the fix in the title and the actual xxx in the description because this makes it easier for us to see what the pr is about without checking the issue number firsttip github takes the first line of the commit message as title in a prtext after an empty line linebreak will be considered as description text
5496.0,5497,1,0,0,1,0,1,1,0,0,1,1,1,1,0,0,try to fix dark theme path fix dark themeworkaround until is fixed because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues gradle also works fine still invalid url should work now
4949.0,5501,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,new ads fetcher i added a new fetcher that uses the new ads api some open question for implementation which ids should be viable ids for idbasedfetchers only doi only ads bibcode the current old version can handle both but im not sure if this is intentional we need an api key to access the api i have one for development but someone has to create one for the project we need to set a limit on how much search results are shown is a good valuerefs change in changelogmd described cleanups tasks change comments and documentation manually tested changed features in running jabref add api key that looks already really good nice job if it is relatively easy to implement then doi bibcode support would be nice i will request an official key entries sounds indeed gooddo you have any questions codewise at the moment or anything else where we can help if it is relatively easy to implement then doi bibcode support would be nicethat is no problem i already have implemented this do you have any questions codewise at the moment or anything else where we can helpat the moment i dont have any questions but i would like to get as much feedback as possible right now i have implemented the fetcher in a new class should we keep the old one and remove it later you can delete replace the old fetcher there is no point in having two fetcher for the same online service great thanks any plans chances that the new fetcher will be back ported to the latest stable release
5508.0,5513,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,making importing a single file easier issue i added a condition to see if only one entry is being importedif the condition adheres mark the entry as selected change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i would totally agree with you but when i try that it doesnt seem to select the entryi had though to put it there too at first any other suggestion as to how to make it work usually the problem is that the code is run before the control is initialized completely to fix this it is usually sufficient to wrap everything in a platformrunlater call can you please try this out here as well thanks i tried to wrap the if statement in a platformrunlater and it did not workalso tried to wrap all of initialze in a platformrunlater with and without the if statement in itit did not select the single file being importeddo you have any suggestions as to what i could do differently sorry for the inconvenience of this pr
5449.0,5519,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,fix xmp null error was caused by wrapping a set of fields in a treeset without specifying the comparator because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5516.0,5521,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,fix text colour in merge dialogue fixes the colour of the textfields in the merge dialogue was set to black i set that to fx light text color aa af in mergeentriescssno need for documentation updatetested manually on local environmentopen to suggestion for test cases 😄 ps forgive me if i missed something this is my first pr to a relatively large project ✨ because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg width altscreenshot at srchttps user imagesentcom cde f e e f f d f dfpng img width altscreenshot at src colour of field text in merge window from black to gray ps forgive me if i missed something this is my first pr to a relatively large project tested the change manually however im open to suggestions in regards to what other gui test i see that diffhighlightingtestjava checks style classes the failing test on travis is bibentrywritertestjava alphabeticserialization introduced today on master not related to this ticket will update with master again once the above is resolved thank you for your review ill test the css change and push that as well soon 😄 matthiasgeiger im having a hard time finding which property makes the radio buttons look black when they are not selected do you know where it could come fromin the meantime i spotted that i was affecting the light theme with the new css now that is fixed welcome to jabref and thanks for your contribution the substructure of the radio button is described here so radio button radio applies to the outer ring while radio button dot is for the centered dot these admit also additional pseudo classes controlling the appearance in the different states for example radio armed is for the armed state and there are also selected determinate and indeterminate updated radio button to look like this thank you for your help tobiasdiez 👍 img width altscreenshot at src great looks good to me now
5332.0,5525,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,remove empty customization warning problem was that the dialog was shown whenever the library contained customized entry types even if the customizations were equal to the customization stored in the global preferences a bit of refactoring renaming along the way because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5532.0,5533,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix a bug that threw a npe when using middle mouse click on windows hotfix for solving code looked good since its a hotfix i just merged
4430.0,5539,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,improve performance improve performance by caching fields as keywordlist remove duplicate change listener remove preference access in loopwith these changes the mega huge library of aegit works without too much delays the initial loading of the database is a bit slow but still ok thus this pr is a potential fix for and for describe the changes you have made here because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues tobiasdiez wonderful let me know when i can start testing this fix
5546.0,5554,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,make entry editor dnd behave as specified in settings because github does not support autolinking there the setting only applies to the entry editor the maintainable is still differentiating between the dnd modifiers as implemented in the linked pr koppor refs change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues in my opinion dnd onto the maintable and the entry editor should behave the same otherwise its really confusing that some operations on the entry editor respect some settings while a similar action on the maintable does not agree both should behave as outlined above if possible 😅tobias diez schrieb am sa nov in my opinion dnd onto the maintable and the entry editor should behave the same otherwise its really confusing that some operations on the entry editor respect some settings while a similar action on the maintable does not — you are receiving this because you were mentioned reply to this email directly view it on github koppor why did you merged this although it removes functionality that we both agreed should be kept ill revert since this is not a proper fix in my opinion i understood your comment wrong i thought with this pr they would behave the same i did not check whether the entry editor supports modifier keysone should update wrt the current behavior of the entry editor
5452.0,5556,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,select newly added jstyle in table to prevent exception because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
5551.0,5558,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,dont remove unwanted characters before first author is s… heyim copying my comment from the issue page i found that in bracketedpatternjava on line the comma is removed and therefore the authorlist is not correct would fix this issue by not applying bibtexkeygeneratorremoveunwantedcharacters before extracting the author but afterwards the tests pass but can anyone think of a problem with that approachas it is my first pr to this project any suggestions are highly appreciated thanks for the great work change in changelogmd described manually tested changed features in running jabref https githubcom joelparkerhenderson git_commit_message https user imagesentcom ceaaf fdad e eed e png thanks for your contribution looks good to me i currently cant think of any issues with this fix and thats why we have tests for such cases 😉 i am glad that i could help
555.0,5563,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,make entry editor dnd behave as specified in settings this reverts commit ca d ed b b bf f d b a f and improves siedlerchr please provide a proper fix thanks we also need to be consistent with our documentation refs and i finally came up with a fix to avoid mirroring different linux distribution behavior the code just checks if a modifier key is present if not use jabrefs setting if yes do what the key says this check was not that easy as only the mouseevent provides info about the modifier key and the event comes after the dropped event with some boolean flags i could work aroundthis also fixes this preference we seem to have missed this at the review of why dont you use to see if a modifier was used you cant infer from the transfermode if a modifer is pressed default is copy on windows but this could have been also triggered from a modifer key eg shift tobiasdiez i fully rely on checking for the os does not make any sense as it for linux depends on the desktop system the user has and this might be different behaviors or not supporting modifiersi did not do full research on linux desktop differences gnome vs kde vs lxde vs wmii vs ion vs maybe a user configured his modifiers differently thus just checking for modifier precense made sense to me i experimented several hours with the dragndrop eventsalternative is imho to simulate a drop event on jabref startup and store the normal transfer mode somewhere however i do not know how to simulate a drop eventalternative is to run a build farm where we generate mappings for the default modifiers for each operating system and desktop environment pro mapping available at startup of jabref con if a user modifies his desktop environment this is not covered personally i would let the os decide which transfer mode is the correct one and just follow it eg i dont see a reason why we should make it possible to overwrite the default drop action in the preferences alternative would probably also be ok the current approach using the key handler feels a bit hacky and im not sure if all edge cases are handled eg user presses shift lifts key drops either way we definitely need tests for this this is the th time now that drag & drop is broken in some way the easiest solution we simply revert to the old default behavior and get rid of those damn modifiersor we completely remove the setting and use only the modifiers i see the setting as follows the location of a pdf dragged might differ a in downloads directory b in bib directory directories c in folder shared with some team mates dropbox or network drive as user when i dragndrop from a i want move when i dragndrop from b i want link when i dragndrop from c i want link or copy when i dragndrop in of the cases i dont want to press any modifier key in case all pdfs are in the same directory or sorted in properly a move in that directory equals a linki think the case was the reason for the dragndrop setting in the preferencesfor someone working alone move is the preferred setting for someone working in groups case c link or copy is the best default both user groups may switch to another working mode in seldom cases thus the modifiers could be requiredon windows the default behavior matches the copy case for c only when i dragndrop from the same drive which is case b move when i dragndrop from another drive which are cases a and c copywe cannot change the overlay while dragging move appears even if something else is done since move is not the most common thing when reading cases a b c thus i argue that we need to keep the setting isnt the fact that we cannot change the overlay a reason to actually remove the preference if the overlay says move but it copies links the fie i would be very confused as a userby the way your argument applied to the windows explorer would mean that the explorer should by default only copy files from a shared dropbox folder or that there should be an option to change the default behavior for users that often work with shared files i guess the reason why such an option is not provided is that consistence in behavior is more important we decided to remove the preferences the default is always link bzw wie das os es halt sagt users will have to press modifier keys for copy or move
5615.0,5629,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,side pane not remembering position hii found a bug where javafx was doing some recalculations during the initial layouting setting setresizablewithparent before initial layouting was finished resulted in javafx assuming a wrong fixed widthi changed that by adding the code to a run later blockit works good for me on mac are there any concerns with thatbest regardskai change in changelogmd described manually tested changed features in running jabref
5257.0,5665,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,improve change scanner if a file is changed externally jabref is doing a way merge between the last saved value vs current value in jabref vs new value in filethe way this is done is by first comparing the last saved file with the current changed file and then trying to find additional other changes in the currently open database this is really complex and i believe there is some subtle bug in the logic leading to with this pr the change scanner is changed to a to simple way merge between the current value in jabref vs new value in file this is way simpler and i hope this pr in a few edge cases the way merge has a small disadvantage for example consider the following steps user a opens file user a changes field author to user a and adds field title with value new user b opens file user b changes field author to user b user b saves fileat this point user a gets a message that the file changed with the following changes field author changed from user a to user b field title was removedthe way merge could detect that title was newly added and thus could automatically reapply this change this is no longer possible with the simple way merge title of the pr must not reference an issue because github does not support autolinking there change in changelogmd described if applicable we have to be careful how this works together with a shared database the shared databases have their own update sync mechanism but i do agree that this should be made consistent at some point i am making it consistent in my local dev branch at that one uses the merge entries dialog as it is the case in the shared database dialog does also cover the edge case by tobiasdiez is the reference file updated after the conflicts are reported is it necessary i would guess yes because changes reported should not be reported again and the reference file is not the bib file on disk is it possible to add some test cases i removed the reference file completely how hard is it to embed the merge entries dialog at the yellow place below koppor the merge entries dialog is already consisting of a borderpane called mergeentries which can be embedded easily see the mergeentriesdialog minor wish esc should be enabled for closing the dialog refs siedlerchr great may i ask whether you could do it i if can wait until this evening or afternoon i can try to add it improved the pr based on the comments didnt change anything to the ui as this was not the subject of this pr so we are going ahead with this pr and further work on after the release of this pr has the advantage that its finished and seems to work 🎉 maybe we will offer both possibilities transparent merge of changes explicit merge of changes this pr siedlerchr can you do the integration of the merge entries dialog in a separate pr this evening is still long and i am really looking forward to it meanwhile ill work on the other pr
5664.0,5666,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,auto file finder follows symbolic links title of the pr must not reference an issue because github does not support autolinking there i didnt tried it but it should work change in changelogmd described if applicable needs to be tested on linux and mac os x lyzardking and linusdietz maybe you could test that maybe even add a test case which runs only on linux and osx i just tried this out on my system with the deb from master installed to see if i was having the same issueit seems to work already i added a reference with key foobar added in the file path in settings the link created with ln s in the path i created a foobarpdf filejabref seems to import it the only problem i can see is that it added two files one from the normal folder and one from the symlink
3874.0,5667,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,rename lookup fulltext to download fulltext closes and surpasses does not addresses the follow up issues mentioned in describe the changes you have made here title of the pr must not reference an issue because github does not support autolinking there change in changelogmd described if applicable
,5669,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,
5661.0,5670,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,improve column preference migration title of the pr must not reference an issue because github does not support autolinking there change in changelogmd described if applicable
5653.0,5671,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix copy drag and drop action title of the pr must not reference an issue because github does not support autolinking there change in changelogmd described if applicable
5679.0,5680,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,add throttle to autosaveuimanager as discussed in there are a lot of save actions performed when autosave is turned on this pr adds a timer which limits the save actions to one in ms which is especially handy when automated tasks like find and replace are performed change in changelogmd described if applicable when working on this the comments on should be checked 😇 i found the scheduledservice from javafx mabye this is an option as well koppor by introducing a deferred execution of the actual save operation a race condition can happen when the old save operation is still in progressthis leads me to another question lets say an auto save action is happening and during the save process the user presses ctrl s what happensas i can see there are two savedatabaseaction created one in the basepanel and one in the autosavemanager no locking is happening so basically the later manual saved version could be overwritten by the older autosave one siedlerchr i think this is more for recurring tasks rather to simply defer a task as it says that it will go from scheduled running finished scheduled automatically actually siedlerchr you were right there is a scheduledthreadpoolexecutor i now completely changed the way to tackle the problem autosavemanager had a normal executorservice there was actually a bug when saving took longer executorservice would through an exception as the pool size was only of the size one under certain circumstances newer information might not get auto saved thereforethe current implementation replaces the executorservice by an scheduledexecutorservice additionally the bug of can now be reproduced when autosave is enabled change something and quickly press ctrl s you will see the error so we should make the savedatabaseaction thread safe to prevent the error koppor what do you think ah cool that sounds good thread safe sounds fittingthere are different ways to achieve this and maybe one of those newer locking things is helping ka o do you use eclipse or intellij with intellij and the complete setup from the autoformat takes care by introducing a deferred execution of the actual save operation a race condition can happen when the old save operation is still in progress this leads me to another question lets say an auto save action is happening and during the save process the user presses ctrl s what happens unsure whether this is still the question either cancel the current autosave or let it go and then trigger it again i would prefer the former as long as we write to sav and then move to bib thus we do not destroy the bib file of the user koppor actually i have important that already but i forgot to do auto formatting before committing ive now created a pre commit hook which runs checkstyle so that this doesnt happens again thanks again
5615.0,5706,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,revert side pane not remembering position this reverts commit ab ffee b dab b edfc aim not sure how to proceed with this unfortunately in which fixes a ui bug was introduced at least for macos the two screenshots show the problem in the first screenshot everything is as in alpha img width altscreen shot at src do you have an alternative better solution to the original problem https githubcom jabref jabref issues does it work if you open the side bar eg groups maybe need to restart jabref have you tried resizing the right window a bit or to make the group pane smaller its a known problem that the toolbar vanishes if the width is too small heyi dont remember testing jabref while the group windows were closed so there might indeed be a bugi will have a look and report back asap okay so ive tested it on my system macos catalina java macbook retina and i cant reproduce thishere is the screenshot of the smallest possible window until it collapses after the revert img width altrevert_smallest_possible src on master the windows size is exactly the same img width altmaster_smallest_possible src version of macos are you running and which macbook model do you have should be fixed now in master
