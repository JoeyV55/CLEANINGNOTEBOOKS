issueNumber,prNumber,Util,Network,i18n,Test,IO,corpus
87.0,146,1.0,0.0,0.0,0.0,1.0,manually merging from mairbek
18.0,156,1.0,0.0,0.0,0.0,1.0,for issue this would allow to implement other blocking methods like single lastordefault next
164.0,165,1.0,0.0,0.0,0.0,1.0,issue
74.0,248,1.0,0.0,0.0,0.0,1.0,now that operationinterval is in operationsample see was kind of straightforward i also added a unit test against sampling and allowed for specifying a scheduler used by the sample operation
93.0,249,1.0,0.0,0.0,0.0,1.0,straightforward implementation of issue based on operationmap without the scheduler version as map doesnt take a scheduler yet either
17.0,250,1.0,0.0,0.0,0.0,1.0,ive done some work on asyncsubject including unit tests and im looking for feedback i dont expect to get this pull request immediately accepted but i hope to find out if this is the correct workflow for this repository and if the code is up to your standards before i start pouring in more hours into issue if you guys are ok with the asyncsubject implementation ill start working on the otherslooking forward to some feedback
20.0,257,1.0,0.0,0.0,0.0,1.0,scan is currently restricted to accumulators of type func where func would be possible for initial values of type r this pull request tries to fix this by generalizing the scan implementation i had to restructure the scan operator a bit for this to stay typesafe imho its more readable now thoughthis indirectly leads to generalized reduce tooalso aggregate is added as an alias for reduce see
38.0,375,1.0,0.0,0.0,0.0,1.0,this pr implements distinct as speficied by again i havent implemented the net methods taking an iequalitycomparator see
372.0,381,1.0,0.0,0.0,0.0,1.0,as requested by samuelgruetter in
41.0,390,1.0,0.0,0.0,0.0,1.0,hithis implements the elementat and elementatordefault operators from for elementat if the index is less than or greater than or equal to the number of elements in the source sequence an indexoutofboundsexception will be threwfor elementatordefault if the index is less than an indexoutofboundsexception will be threw whats more i added a defaultvalue parameter i can not get the element type in the source observable due to type erasure so i can not determine the default value automatically thats why elementatordefault needs a defaultvalue parameter
84.0,409,1.0,0.0,0.0,0.0,1.0,hii implemented to support that sending a lock to the synchronize operatori also found that there was a issue that testmultithreadedwithnpe and testmultithreadedwithnpeinmiddle might fail in some special situation when onerror is invoked before any onnext the last statement assertequals busyobservermaxconcurrentthreadsget in these methods will fail i also this issue in the pull request
42.0,415,1.0,0.0,0.0,0.0,1.0,hii implemented the empty operator with scheduler please take a look thanks
89.0,416,1.0,0.0,0.0,0.0,1.0,hii implemented the throw operator with scheduler i found that rxjava had an error method so i just implemented the scheduler overload
54.0,424,1.0,0.0,0.0,0.0,1.0,hii implemented the ignoreelements operator please take a look thanks
90.0,450,1.0,0.0,0.0,0.0,1.0,hi this pr implemented the timeinterval operator please take a look thanks
22.0,460,1.0,0.0,0.0,0.0,1.0,hi this pr implemented the amb operator i used varargs to support the array version and first second version in one method so in my pr there are only two variants
91.0,463,1.0,0.0,0.0,1.0,1.0,hi this pr implemented the rest overloads of timeout operator please take a look thanks
99.0,481,1.0,0.0,0.0,0.0,1.0,hi this pr implemented the using operator please take a look thanks
68.0,492,1.0,0.0,0.0,0.0,1.0,hi this pr implemented the scheduler overloads for range from startwith please take a look thanks
82.0,492,1.0,0.0,0.0,0.0,1.0,hi this pr implemented the scheduler overloads for range from startwith please take a look thanks
98.0,492,1.0,0.0,0.0,0.0,1.0,hi this pr implemented the scheduler overloads for range from startwith please take a look thanks
100.0,506,1.0,0.0,0.0,0.0,1.0,issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version
23.0,506,1.0,0.0,0.0,0.0,1.0,issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version
88.0,506,1.0,0.0,0.0,0.0,1.0,issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version
96.0,513,1.0,0.0,0.0,0.0,1.0,issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading
97.0,513,1.0,0.0,0.0,0.0,1.0,issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading
532.0,560,1.0,0.0,0.0,0.0,1.0,this fixes the use of contravariant actions issue
52.0,563,1.0,0.0,0.0,0.0,1.0,issue rebased
53.0,565,1.0,0.0,0.0,0.0,1.0,issue rebasedstill headinthebox while writing the test for the operator ive noticed that when both duration selectors are never rxnet never calls oncompleted on the group subjects even though the left and right sources oncomplete i havent seen rxnet test for this scenario this comes into play when i want to emulate join with groupjoin the outer merge never oncompletes if i understand the behavior corretly when both left and right sources get depleted there is no way a new group or new group value would arrive and all the open groups and the main observer can be oncompleted this is somewhat similar to join and groupbyuntil behavior
74.0,571,1.0,0.0,0.0,0.0,1.0,issue sample will terminate if either the source or the sampler terminates or throws an error the sampler now emits values only in its onnext method therefore if the sampler completes and there is a sampled value available valuetaken false it wont emit the value before terminating
60.0,587,1.0,0.0,0.0,0.0,1.0,issue straightforward version of the regular count however i would have implemented it differently so the constant boxing unboxing could be avoided
666.0,667,1.0,0.0,0.0,0.0,1.0,rebased version without the drain scheduler variant fixes issue mentioned in as well
653.0,733,1.0,0.0,0.0,0.0,1.0,mentined in issue overload where the user can specify the capacity of the internal buffer
653.0,734,1.0,0.0,0.0,0.0,1.0,listed in note onerror and oncompleted events of the source are immediately propagated and will prevent emitting any pending values
653.0,735,1.0,0.0,0.0,0.0,1.0,listed in issue
653.0,736,1.0,0.0,0.0,0.0,1.0,listed in
653.0,738,1.0,0.0,0.0,0.0,1.0,listed in these operators use the existing multicast and subject infrastructure so i omitted any direct tests
653.0,740,1.0,0.0,0.0,0.0,1.0,listed in
653.0,741,1.0,0.0,0.0,0.0,1.0,listed in
799.0,825,1.0,0.0,0.0,0.0,1.0,nstructing a compositeexception
939.0,955,1.0,0.0,1.0,1.0,1.0,fix for issue
1152.0,1160,1.0,0.0,0.0,0.0,1.0,this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter
1153.0,1160,1.0,0.0,0.0,0.0,1.0,this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter
1181.0,1185,1.0,0.0,1.0,0.0,1.0,based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach
658.0,1185,1.0,0.0,1.0,0.0,1.0,based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach
126.0,1269,1.0,0.0,0.0,0.0,1.0,fix the bug mentioned in
1206.0,1272,1.0,0.0,1.0,1.0,1.0,for issue and this implementation should conform with the scheduler contract except it is not possible to avoid thread hopping dont worry the tasks execute serially but maybe not on the same physical thread few open improvement possibilities usage of mpsclinkedqueue once available a better performing subscription container for this kind of queue drain task tracking instead of compositesubscription ability to remove a subscription from a compositesubscription without it calling unsubscribe on the removed subscription รฃยก la multipleassignmentsubscriptionset
1514.0,1559,1.0,0.0,1.0,0.0,1.0,deprecated rxjavadefaultschedulers and rxjavadefaultschedulersdefault i think these names are confusing added rxjavaschedulershook ability to override entire schedulers from scratch ability to decorate action before submission to schedulerthe main change from is the decoration of action instead of runnable action is an improvement as all schedulers must handle these whereas not all schedulers handle runnables
158.0,1602,1.0,0.0,0.0,0.0,1.0,came up in
1741.0,1742,1.0,0.0,0.0,1.0,1.0,remove emptyobserver as it was confusing compared to observersempty make testobserver not throw onerrornotimplemented if a delegate is not provided fixes
1502.0,1777,1.0,0.0,1.0,1.0,1.0,for one of the sub issues in exclude rxinternalexclude rxjavaerrorhandlerdefault by deleting it
1772.0,1802,1.0,0.0,1.0,1.0,1.0,as per now keeps track of the actual subjectbufferuntilsubscriber synchronizes on the state guard
1972.0,1973,1.0,0.0,0.0,1.0,1.0,should resolve the test failure of when the main part of the test succeded an oncompleted was sent out from the main thread which was not serialized in respect to the onnext issued from the worker thread therefore two replay was attempted sometimes at first the caughtup was seen false the replay was entered but the next instruction cleared the index causing the illegalstateexception
1897.0,2470,1.0,0.0,1.0,0.0,1.0,fixthis pr aims to support the requests in and by adding methods to the final subject classes that let developers access in flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code and we will be careful with our observable in the future notificationlite is now extended with two missing value checks isnull and isnext each subject has hascompleted hasthrowable and getthrowable methods however i cant add them to subject because that would be an incompatible api change where applicable getvalue and getthrowable return null instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand there was a chaining bug in the bounded replaysubject because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value since replaysubject can have multiple values ive added size hasanyvalue isempty is taken and getvalues methods to make a snapshot of the current buffer contents whether or not the replaysubject has terminated the usual tolist would wait until the subject has terminated the unrelated operatormergetesttestconcurrency hangs for me for some reason without activity either a buffer bug or a merge bug is in play there ive added a timeout so it doesnt stop the other tests
2331.0,2470,1.0,0.0,1.0,0.0,1.0,fixthis pr aims to support the requests in and by adding methods to the final subject classes that let developers access in flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code and we will be careful with our observable in the future notificationlite is now extended with two missing value checks isnull and isnext each subject has hascompleted hasthrowable and getthrowable methods however i cant add them to subject because that would be an incompatible api change where applicable getvalue and getthrowable return null instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand there was a chaining bug in the bounded replaysubject because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value since replaysubject can have multiple values ive added size hasanyvalue isempty is taken and getvalues methods to make a snapshot of the current buffer contents whether or not the replaysubject has terminated the usual tolist would wait until the subject has terminated the unrelated operatormergetesttestconcurrency hangs for me for some reason without activity either a buffer bug or a merge bug is in play there ive added a timeout so it doesnt stop the other tests
1702.0,2471,1.0,0.0,0.0,0.0,1.0,also adds a unit test for regressionit appears there is a potential race condition if something adds to removes from the pq while its _inside_ the poll operation which is where the exceptions in seem to have actually come from therefore the initial null check didnt really address the original problem the test here seems to reliably recreate those conditionsi considered using a priorityblockingqueue instead of synchronized but since the isempty and poll calls should not allow something to interleave between them and access the queue a synchronized block seemed wiser here
1956.0,2548,1.0,0.0,0.0,1.0,1.0,as per discussion in and making a call to subscriberrequest n with negative n should throw an illegalargumentexception includes unit test
2545.0,2548,1.0,0.0,0.0,1.0,1.0,as per discussion in and making a call to subscriberrequest n with negative n should throw an illegalargumentexception includes unit test
2544.0,2550,1.0,0.0,0.0,1.0,1.0,as per discussion in
2600.0,2630,1.0,0.0,0.0,0.0,1.0,rebased
2604.0,2759,1.0,0.0,0.0,0.0,1.0,see where it was discovered that observableusing used subscribe instead of unsafesubscribe which provoked a race condition leading to an illegalargumentexception from the merge operatorthis pr uses unsafesubscribe and adds an overload for using to optionally dispose of resources eagerly just before completion or error the use case for this is a _synchronous_ observable where a downstream operation wants to reuse a resource but because the observable is synchronous the resource cannot get disposed till the downstream completes unit tests included
2772.0,2804,1.0,0.0,0.0,0.0,1.0,squashed commits of further optimizations to observeon using spscarrayqueue directly in observeon instead of ringbuffer to avoid the synchronization block split tracking structure to serial subscriptionlist and timed compositesubscription in eventloopsscheduler which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark i window x java u x s warmup x s iteration benchmark size x x error this pr this errorobserveon observeon observeon observeon observeon observeon observeon observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon notes at size the throughput varies in a range on each run and since the changes dont touch the scalar optimization there is no real improvement there at size my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on at size and size the throughput doubles if i introduce some extra delay ie via sleep or some extra work the benchmark generates a lot of garbage due to boxing switching to a constant emitter increases the throughput subscribeon from to since it conflicts with anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
2773.0,2804,1.0,0.0,0.0,0.0,1.0,squashed commits of further optimizations to observeon using spscarrayqueue directly in observeon instead of ringbuffer to avoid the synchronization block split tracking structure to serial subscriptionlist and timed compositesubscription in eventloopsscheduler which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark i window x java u x s warmup x s iteration benchmark size x x error this pr this errorobserveon observeon observeon observeon observeon observeon observeon observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon notes at size the throughput varies in a range on each run and since the changes dont touch the scalar optimization there is no real improvement there at size my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on at size and size the throughput doubles if i introduce some extra delay ie via sleep or some extra work the benchmark generates a lot of garbage due to boxing switching to a constant emitter increases the throughput subscribeon from to since it conflicts with anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
2458.0,2883,1.0,0.0,1.0,1.0,1.0,this pr modifies the subject class to host the union of the state peeking methods of the various subject implementations and fixes the inconsistent behavior of replaysubjectgetvalues t the changes enable the serializedsubject to relay such state peeking method calls into the wrapped subject and allows future subject wrappers to do the same
1483.0,2969,1.0,0.0,0.0,0.0,1.0,ive removed the controversial features and made the backing cachedobservable internalrelated issue
2979.0,2983,1.0,0.0,0.0,0.0,1.0,started investigating multiple calls to onstart based on and found a bunch but since onstart can be overridden i might have missed cases in addition ive found a single place where a producer is set twice on a subscriber but again many other places may exist
3046.0,3048,1.0,0.0,0.0,1.0,1.0,compositeexception wont crash if it received null by some means a null collection or null collection item is replaced by a nullpointerexception instancesee also
3128.0,3129,1.0,0.0,0.0,0.0,1.0,apparently we forgot about this operator the backpressure handling is a trivial case with producerarbiter ive also some apparent code indentation errororiginally reported in with a test case which i didnt include due to its lengthy nature however i did run the test manually and both passed after the fix
3022.0,3149,1.0,0.0,0.0,1.0,1.0,repost of
3252.0,3286,1.0,0.0,0.0,1.0,1.0,adds blockingsingle issue the blocking version of rxsingleblockingsingle has the following methods from single factory method for creating a blockingsingle from a single value returns the value emitted from the single tofuture returns a javautilconcurrentfuture couldnt actually think of any other useful operations to perform on blockingsingle in comparison to blockingobservable theres not much to this class at the moment
3385.0,3417,1.0,0.0,0.0,1.0,1.0,closes
3439.0,3444,1.0,0.0,0.0,1.0,1.0,this is a backport of
3445.0,3447,1.0,0.0,0.0,0.0,1.0,requested in this is an efficient implementation as it avoids allocating the lifter object doesnt require a function wrapper and doesnt use producer arbitration bonus points to those who can recognize the similarities with
2835.0,3513,1.0,0.0,1.0,1.0,1.0,this adds a new pattern and lookup method that lets the developer specify the custom plugins with shorter system property keys android is quite restrictive and allows only charactersthe new pattern splits the target simple class name and its implementation into two separate system properties rxjavaplugin classsimpleclassnamerxjavaplugin implpathtoimplclass the index tag can be any string of your chosing rxjavapluginmykeyclasssimpleclassnamerxjavapluginmykeyimplpathtoimplclass but make sure they are paired otherwise nothing will happenif there are multiple class entries with the same simpleclassname one of them will be chosen depending on the walk order in javautilproperties related issue
3581.0,3584,1.0,0.0,0.0,0.0,1.0,as discussed in some clarification of the behaviour of groupby looks necessary re its behaviour when the groupedobservable terminates early for example has first applied to it see also i also took the liberty of recommending ignoreelements instead of take for the section in the javadoc that recommends how to ignore emissions because the take approach would have more overhead every emission from source would prompt the emission of a new groupedobservable than the ignoreelements approachonce this is accepted ill look to submit a pr with groupbyonce mentioned in
3652.0,3655,1.0,0.0,0.0,1.0,1.0,part of will submit a pr for onerrorresumenext func later
3660.0,3661,1.0,0.0,0.0,0.0,1.0,this pr is a backport of the x combinelatest with null support and lets the programmer combine more than sources at once note that x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment i kept these in case such features are required by x some daythe original had this limit due to using a single and non parametric rxringbuffer to store values from sources in addition the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the bufferthis pr uses an unbounded linked spsc queue which can now hold as many elements as there are sources times the default ring buffer size this is not preallocated and grows shrinks as necessary the algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream that source subscriber gets the request replenishment call that generated the rowin addition ive added an iterator overload from as well
3685.0,3689,1.0,0.0,0.0,0.0,1.0,the operators didnt honor backpressure when they switched over to the other observablethis pr also includes the
3700.0,3701,1.0,0.0,0.0,1.0,1.0,closes
3710.0,3714,1.0,0.0,0.0,0.0,1.0,relevant issue
3711.0,3722,1.0,0.0,0.0,0.0,1.0,refs should these new overloaded functions be annotated with beta
372.0,3733,1.0,0.0,0.0,1.0,1.0,instead deliver them up to the threads uncaught exception handlerfixes reactivex rxjava
3740.0,3741,1.0,0.0,0.0,1.0,1.0,ref i didnt write much unit tests for doonsubscribe because it internally uses operatordoonsubscribe which is well covered
3732.0,3752,1.0,0.0,0.0,1.0,1.0,this pr adds the factory method using overload to single as requested in for convenience ive also added singlesubscribe observer
3440.0,3766,1.0,0.0,0.0,1.0,1.0,closes closes closes whoa issues at a time
3731.0,3766,1.0,0.0,0.0,1.0,1.0,closes closes closes whoa issues at a time
3938.0,3942,1.0,0.0,1.0,0.0,1.0,add option to safely subscribe a completablesubscriber regular subscriber and handle onxxx failuressee also naming and whether or not the safe wrapping should be the default is open to discussion
3947.0,3948,1.0,0.0,0.0,1.0,1.0,see
3779.0,3966,1.0,0.0,0.0,0.0,1.0,add withlatestfrom operator version that can take to n other sources and combine them with the main sourcerelated
3576.0,3974,1.0,0.0,0.0,0.0,1.0,see
3721.0,4024,1.0,0.0,0.0,0.0,1.0,fixes the documentation problem reported in
3007.0,4026,1.0,0.0,0.0,0.0,1.0,this pr rephrases the cache documentation a bit and adds workaround for stopping and forgetting the cached valuesrelated
4001.0,4034,1.0,0.0,0.0,0.0,1.0,alternative implementation to
4035.0,4036,1.0,0.0,0.0,0.0,1.0,as discussed in with akarnokd
4028.0,4051,1.0,0.0,1.0,1.0,1.0,adding the backpressure support to replaysubject exposed a race condition around the caughtup optimizationthe problem occurs when the source thread has caught up after drain returned true but at the same time a concurrent drain starts running due to a subscribe process finishing or requesting on top of the previous longmax_value this concurrent drain may think the replay hasnt started yet by finding rpnode null or seeing that the buffer has more elements that may get double emitted the current solution is to remove this optimization until we come up with a correct optimizationrelated
3959.0,4063,1.0,0.0,0.0,0.0,1.0,replacement for
4057.0,4070,1.0,0.0,0.0,1.0,1.0,closes although doesnt address the name of the class
4109.0,4139,1.0,0.0,1.0,1.0,1.0,this pr should fix some test timing out otherwise sensitive to thread hiccups
4138.0,4139,1.0,0.0,1.0,1.0,1.0,this pr should fix some test timing out otherwise sensitive to thread hiccups
4137.0,4140,1.0,0.0,0.0,1.0,1.0,closes closes
4216.0,4226,1.0,0.0,0.0,1.0,1.0,addresses happy to receive feedback on the implementation also should i take the documentation from flatmapobservable and adjust it
4152.0,4261,1.0,0.0,0.0,0.0,1.0,this pr adds multiple arguments to concatdelayerror operatorrelated to
4260.0,4262,1.0,0.0,0.0,0.0,1.0,as discussed in call rxjavahooksonerror for secondary errors reduced allocations actionsubscriber actionobserver operator onsubscribe added unit tests
4280.0,4288,1.0,0.0,1.0,1.0,1.0,related the exceptionspropagate and exceptionsthrowiffatal are too useful to be hidden in an internal package so this pr moves them into the public ioreactivexexceptions package the terminal atomics related to throwable containers lives in the exceptionhelper enum
4306.0,4309,1.0,0.0,0.0,1.0,1.0,as wanted in
4329.0,4330,1.0,0.0,0.0,1.0,1.0,see i also adjusted the test as it was testing the wrong thing before
4082.0,4337,1.0,0.0,0.0,0.0,1.0,move disposableobserver to ioreactivexobservers some documentationrelated
4366.0,4371,1.0,0.0,1.0,1.0,1.0,this pr removes the blockingflowable and blockingobservable classes and moves the blocking operators into the respective reactive classes and names pre with blocking in addition many of the mentions of flowable has been replaced with observable in observable related
4199.0,4442,1.0,0.0,1.0,1.0,1.0,add javadoc to asyncemitterbackpressuremode deprecate observablefromasync add observablefromemitter instead add completablefromemitter add missing placeholder since tags fix some generics error rxjavahooks add race helper to testutil fix javadoc warnings
4255.0,4442,1.0,0.0,1.0,1.0,1.0,add javadoc to asyncemitterbackpressuremode deprecate observablefromasync add observablefromemitter instead add completablefromemitter add missing placeholder since tags fix some generics error rxjavahooks add race helper to testutil fix javadoc warnings
4456.0,4458,1.0,0.0,0.0,0.0,1.0,completable already used doondispose however i renamed the arguments to match observable and single
4462.0,4466,1.0,0.0,0.0,0.0,1.0,it might just as well shine some light into which method should be used and explain why there are
4481.0,4488,1.0,0.0,0.0,0.0,1.0,this pr adds just the new methods from to allow a much cleaner change of return types later on
4389.0,4503,1.0,0.0,0.0,0.0,1.0,this pr adds the ability to specify the default thread priorities of computation io newthread and single schedulers via system properties ive added the property names to the schedulers javadocrelated
4501.0,4504,1.0,0.0,0.0,0.0,1.0,also any reason the dispoable is called s is it still from the subscription time
4524.0,4525,1.0,0.0,0.0,0.0,1.0,test for combinelatest fill follow
4577.0,4580,1.0,0.0,0.0,0.0,1.0,as per discussion in renaming asyncemitter to emitter via deprecationthere is a catch though completableemitter is correctly named now and depends on asyncemitter via the method java void setcancellation asyncemittercancellable c when can we break the api of that class
4498.0,4586,1.0,0.0,0.0,1.0,1.0,added support for error assertions with to testsubscriber requested in to support custom error evaluation removes the need to implement equals and hashcode in exceptions
4628.0,4629,1.0,0.0,0.0,1.0,1.0,addresses theres maybefromrunnable but completable is missing this method
4634.0,4636,1.0,1.0,1.0,1.0,1.0,equivalent of but now for the x branch
4332.0,4641,0.0,0.0,0.0,0.0,1.0,before the introduction of rxjavahooks the safesubscriber_onerror called the original error handler with the exception it received which was by default an empty handler the default rxjavahooksonerror behavior however is to signal errors to the uncaught exception handler of the caller thread which leads to unnecessary logging or app crashes even though the error itself is to be handled properlythis pr restores the safesubscriber_onerror to skip the rxjavahooks and call the original handler directy so old tracking code should still get all safe error while newer hooking doesnt get calledrelated
464.0,4645,1.0,0.0,1.0,1.0,1.0,this pr addresses
4633.0,4647,1.0,0.0,1.0,1.0,1.0,this pr addresses merge singleambarray and singleambiterable operators into singleamb merge maybeambarray and maybeambiterable operators into maybeamb merge completableambarray and completableambiterable operators into completableamb
4650.0,4651,1.0,0.0,1.0,1.0,1.0,
4653.0,4654,1.0,0.0,0.0,0.0,1.0,resovles see http stackoverflowcom a
4680.0,4681,1.0,0.0,0.0,1.0,1.0,this will elementatorerror on an empty source just leaves the new single hanging without signalling onerror elementat on an empty source just leaves the maybe hanging without signalling oncomplete i also noticed that elementat with a default value on an empty source did not work either
4683.0,4687,1.0,0.0,0.0,1.0,1.0,will adds observablerangelong adds flowablerangelong both implementations are copied same for the unit testswhat should we do about the range overflow check we could use bigdecimal to check that
4688.0,4690,1.0,0.0,0.0,1.0,1.0,adds assertvalueat index predicate to basetestconsumer
4709.0,4710,1.0,0.0,1.0,1.0,1.0,these functions are for transforming the stream shape not doing work any operation that would throw a checked exception should happen inside the stream not when shaping itcloses
4727.0,4729,1.0,0.0,0.0,1.0,1.0,this is the implementation of
4620.0,4751,1.0,1.0,1.0,1.0,1.0,flowableconcatmapeager s drain loop when encountering a finished inner jumped back to the beginning of the loop but disregarded the potentially changed request amount and just stopped emitting the fix is to use the typical request management approach of reading the current request at the beginning of the loop and then committing the emission amount before trying to leave the looprelated in addition testhelperasserterror has been changed to attach the whole unexpected exception to the assertionerror
4702.0,4757,1.0,0.0,0.0,0.0,1.0,uses the same test as the observable one
4809.0,4810,1.0,0.0,0.0,0.0,1.0,small change as discussed in
482.0,4828,1.0,0.0,0.0,0.0,1.0,to in
482.0,4830,1.0,0.0,0.0,1.0,1.0,doafterterminate was intended to call the callback after either oncompleted or onerror but somehow missed that behavior in xrelated
485.0,4858,1.0,0.0,0.0,1.0,1.0,this pr adds the maybeflatmapsingleelement operator that returns a maybe and completes if the source completes unlike flatmapsingle where the returned single signals nosuchelementexception related
4872.0,4873,1.0,0.0,0.0,1.0,1.0,testobserver replaced the upstreams disposable with the disposed sentinel when it got a terminal event unlike testsubscriber and there seems to be a need for triggering dispose in some upstream even after that this pr changes this behavior and also updates unit tests that expect isdisposed true without actually calling dispose related
488.0,4884,1.0,0.0,0.0,1.0,1.0,the default periodic scheduling code accessed the current worker time as milliseconds which prevents running microsecond and osecond scale unit tests with testscheduler as its internal osecond resolution time is always converted losing precisionthis pr introduces the internal scheduleperiodichelper class moves the default scheduling code into a static method and defines a now osupplier interface that is now implemented by testschedulerworker to return the current o time the default workerscheduleperiodically delegates to this static method and given a null no osupplier the workernow is converted to oseconds as usualrelated
490.0,4911,1.0,0.0,0.0,1.0,1.0,this pr fixes the observablerepeatwhen not completing properly if the handler completes in addition the observableredo has been split to observableretrywhen and observablerepeatwhen just like their flowable counterpart and are now they use a less convoluted algorithmrelated
4920.0,4921,1.0,0.0,0.0,0.0,1.0,fix the wrong messages in testsubscriber and testobserver related
4923.0,4924,1.0,0.0,0.0,0.0,1.0,changing completable to completablesource also found one other wrong spot that i within this pr
4926.0,4927,1.0,0.0,0.0,1.0,1.0,both observabletimer and flowabletimer could report illegalstateexception because if the delayed task completed before the tasks disposable was set the setonce found a non null non terminal reference already setrelated
493.0,4932,1.0,0.0,0.0,1.0,1.0,flowablegenerate and observablegenerate lacked the safeguards that were present in x this adds those and adds extra state cleanuprelated
4902.0,4943,1.0,0.0,0.0,1.0,1.0,i was working on converting the monte carlo pi benchmark to rxjava and it turned out i forgot to replenish the internal queue of publish function in case the upstream was not sync fuseablethis pr fixes the replenishment problem for non fused and async fused sources by requesting after consumptionin addition if an inner subscriber cancelled while it was at request the other inner subscribers might not have resumed drainingive also two unit tests with wrong timeout unit of measure that randomly failed the tests on a slow machine or travis
4961.0,4962,1.0,0.0,0.0,1.0,1.0,this pr fixes the double termination of singletakeuntil publisher when the other fires an item and then completes while ignoring the cancellation in between trying to signal a cancellationexception again which is routed to the rxjavapluginsonerror and crashing on androidin addition the maybetakeuntil received a unit test verifying this doesnt also happen to itrelated
4993.0,5002,1.0,0.0,1.0,1.0,1.0,this is a pretty vanilla copy from rxjava s implementation note that i had to tune newthread scheduler to not be a singleton to support thiswe had talked about borrowing from project reactors apis for different overloads let me know if you think we should add more fine grained controls through these
5004.0,5005,1.0,0.0,1.0,1.0,1.0,this pr makes the disposable returned by the executorschedulerscheduledirect report isdisposed true if the task has actually finished which should now be consistent with the worker behavior of other schedulersreported in
5024.0,5027,1.0,0.0,1.0,1.0,1.0,this adds a dedicated implementation for zipping single s adapted from maybezipx routing the original zip through flowable added the usually unwanted behavior of cancelling the sources if one of them reports a completion after a row has been consumed from all when converted to flowable singleobserveronsuccess becomes subscriberonnext oncomplete since there is only onsuccess and onerror in single there is no need to dispose the sources once all signalled their only onsuccess related
5045.0,5049,1.0,0.0,1.0,1.0,1.0,adding bound wildcards for error handler
5053.0,5054,1.0,0.0,0.0,1.0,1.0,as explained in simplequeue might return nullto document this behavior a nullable annotation has been added
5045.0,5058,1.0,0.0,1.0,1.0,1.0,i widened the bounds for the functions looks good for merelated to
5060.0,5064,1.0,0.0,1.0,1.0,1.0,this pr fixes both flowablereplay and observablereplay throwing a nullpointerexception if the connection is disconnect before the upstream calls onsubscribe on the connection being established in practice this requires an async cancellation to happen through refcount unsubscribeon for example the validation tests simulate this by not calling onsubscribe until the synchronous connect disconnect happensreported in
4253.0,5086,1.0,0.0,0.0,1.0,1.0,looks like create wont go away unless we get the ide mark it someway such as being deprecatedthis pr deprecates create and adds unsafecreate for internal use and deprecate renames fromemitter to create action backpressuremode there was an earlier attempt at deprecating create but it was not followed up this pr executes what i suggested in one of the comments https githubcom reactivex rxjava pull issuecomment
5089.0,5090,1.0,0.0,0.0,1.0,1.0,for performance reasons the scan delayed the emission of accumulated items by one which worked well with sources that pushed new items frequently unfortunately if the source stopped emitting without completion the very last accumulated item was stuck and no way to get it out of scan i considered this type of use being rare but apparently i was wrongthe pr changes scan to emit accumulated items including the initial seed as soon as there is request for it the operator now uses a stable prefetch queue drain found throughout other operators such as observeon remark sadly request trickery such as capturing the first request call emitting the seed and then requesting n doesnt work because if the request call itself happens from another thread and the source is empty the onnext and oncomplete could run concurrentlyreported in
4735.0,5091,1.0,0.0,0.0,0.0,1.0,this pr allows to fix the same pool deadlock that may happen with create formerly fromemitter and subscribeon as subscribeon by default schedules the requests behind a running emitter and thus the internal request amount may not get updated leading to unnecessary datalosssee in the update if subscribeon detects its upstream is onsubscribecreate it no longer reschedules requests for it for other non immediate cases a new overload allows specifying the requeston parameter that should be false if there is a create action backpressurestrategy in the sequence upstream
5111.0,5114,1.0,0.0,1.0,1.0,1.0,this pr fixes observablecombinelatest to dispose the sources outside the serialization loop just like flowablecombinelatest does this allows cancellation even if the serialization loop is busy blocking inside an onnext emissionin addition a unit test was added to flowablecombinelatest as wellreported in
5108.0,5117,1.0,0.0,1.0,1.0,1.0,this pr adds the sequentialdelayerror operator to parallelflowable that allows awaiting all rails in a parallel flow to terminate normally or with the composite exception of the failed rail s to enable this the flowableparallel operators behavior regarding rail cancellation had to be changed in v if any of the rails cancelled maybe due to a failure maybe due to an end consumer cancelling the entire parallel flow the input flowable was cancelled this pr alters this by requiring all rails to cancel before cancelling the input flowable the change permits one or multiple rails to fail and let others progress in case the new sequentialdelayerror is applied as a terminal operator the original sequential operator still cancels all rails if one of them fails triggering the cancellation of the input flowable note that this change may still drop and never process elements in the internal queues of the operators in the parallel flow because the parallel processing is not implemented with work stealing that could pick up elements from a dead queue in order to get as many elements processed as possible it is recommended to reduce the default prefetch on the runon operator to a reasonable tradeoff value between throughput and fault tolerance edit updated the pr to make sure parallel ignores cancelled rails when it dispatches itemsrelated
5111.0,5121,1.0,0.0,0.0,1.0,1.0,this pr fixes observablezip to dispose the sources outside the serialization loop just like flowablezip does this allows cancellation even if the serialization loop is busy blocking inside an onnext emissionin addition a unit test was added to observablezip as wellreported in
5132.0,5133,1.0,0.0,0.0,1.0,1.0,this pr fixes the lack of eager cancellation when flatmapping sources and not stopping the upstream if the inner source failsunit tests were added to verify single in case it receives a dedicated implementation one day as currently it delegates to flowable flowable and observable reported in
5135.0,5136,1.0,0.0,0.0,0.0,1.0,adjust the repeatwhen and retrywhen signatures to accept publisher on single and completable matching flowable s signaturereported in
5138.0,5146,1.0,0.0,0.0,1.0,1.0,add unsubscribeon to single type
4853.0,5161,1.0,0.0,0.0,1.0,1.0,this is a new operator discussed in the issue refers to a goodly number of new operators which ill do bit by bit as my time allows and to ensure review is not too daunting
5172.0,5182,1.0,0.0,1.0,1.0,1.0,this pr updates observablereplay and flowablereplay for x to not leak items between reconnections when run with refcount the replay operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data only a new connect clears this data which may or may not happen since refcount ensures that there wont be any latecommers to an already completed connection because it also drops its current subscribers on termination or when reaching zero the replay can be reset to an empty staterelated
5185.0,5189,1.0,0.0,1.0,1.0,1.0,fixes a bug that flowableconcatmapeager mapper maxconcurrency prefetch and observableconcatmapeager mapper maxconcurrency prefetch operators will not accept and negative numbersreported in
5154.0,5199,1.0,0.0,0.0,1.0,1.0,this pr increases the timeout on completabletest test methods and on parallelflowabletestparallelismandprefetchasync related
5179.0,5199,1.0,0.0,0.0,1.0,1.0,this pr increases the timeout on completabletest test methods and on parallelflowabletestparallelismandprefetchasync related
5128.0,5202,1.0,1.0,1.0,1.0,1.0,this pr adds new overloads to parallelflowable operators map filter and doonnext to enable per item error handling in case the main function fails with some exception javaflowablerange parallel map v v parallelfailurehandlingskip sequential test assertresult the new parallelfailurehandling has some default enumeration values to handle the common cases in addition the bifunction overload allows bounded retries and or conditional handling of failuresrelated
5203.0,5207,1.0,0.0,1.0,1.0,1.0,task wrappers of the various schedulers and modes direct & worker were able to get cancelled via interruption from the same thread they were runningrelated
5130.0,5208,1.0,0.0,0.0,0.0,1.0,this pr links in the new images from for previously misleading marble diagrams of the operators
5148.0,5210,1.0,0.0,0.0,0.0,1.0,this pr improves the documentation of the abstract consumer classes such as disposablesubscriber resourcesubscriber and their counterparts for the other base reactive typesit contains a lot of copy paste so please read through all of the text in case the text was not properly adapted to the abstract class at handrelated
5145.0,5223,1.0,0.0,1.0,0.0,1.0,this pr improves the javadoc of the ioreactivexschedulersschedulers utility class plus adds a missing schedulersupport constant for the single schedulerlet me know if something needs further explanation or some new case needs explanation related
5246.0,5247,1.0,0.0,0.0,1.0,1.0,this pr fixes the nullpointerexception that can happen because cancel nulls out the value and onnext simply dereferences that value in flowabletolist reported in
5300.0,5302,1.0,0.0,0.0,0.0,1.0,this pr adds the singleunsubscribeon operatorrelated
5243.0,5307,1.0,0.0,1.0,0.0,1.0,this pr applies the promotions listed in suggested review strategy check if the experimental annotation has been removed or turned into beta check if the history x matches the original value of the updated since x
5201.0,5318,1.0,0.0,0.0,0.0,1.0,this pr applies the api promotions of note that singleunsubscribeon remainded experimental and observablefromemitter was removedwhere the experimental version was available it was moved up as history xy experimental similar to how x versioning promotions happensuggested review strategy verify experimental and beta annotations are removed from the method and from javadoc verify since is present
5382.0,5409,1.0,0.0,0.0,0.0,1.0,corrected singledelay documentation that says that success or error signals will be delayed by the specified amount but in fact errors are not delayed only successes
5426.0,5427,1.0,0.0,0.0,1.0,1.0,the pr fixes both the time maxsize bound buffer operators of flowable and observable the logic didnt properly mutually exclude the timer action and the onnext action resulting in probabilistic emission of the same buffer twicereported in
5461.0,5466,1.0,0.0,0.0,0.0,1.0,as per discussion in the timer fields in the subscriber classes in flowabletimeouttimed are atomicreference s but this is not required as the fields are accessed synchronouslythe timer field in timeouttimedothersubscriber did require an atomicreference because of the dispose call here but this call is not required if we just call workerdispose no unit test additionsps unit tests in rxjava x an outrageous amount of work thanks akarnokd and other contributors
5480.0,5486,1.0,0.0,0.0,1.0,1.0,ths pr replaces regarding the issue of because our javadoc validation did not allow that type of wording ie mentioning single when the method signature is not related to it
5485.0,5486,1.0,0.0,0.0,1.0,1.0,ths pr replaces regarding the issue of because our javadoc validation did not allow that type of wording ie mentioning single when the method signature is not related to it
3794.0,5507,1.0,0.0,1.0,1.0,1.0,this pr fixes the so called gc nepotism see in spsclinkedarrayqueue by not nulling out the previous buffers next pointer upon switching buffers in the peek poll methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load reported in
5506.0,5507,1.0,0.0,1.0,1.0,1.0,this pr fixes the so called gc nepotism see in spsclinkedarrayqueue by not nulling out the previous buffers next pointer upon switching buffers in the peek poll methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load reported in
5319.0,5524,1.0,0.0,0.0,0.0,1.0,this pr updates the marbles of the following observable operators just image by leonardortlima rangelong image by leonardortlima startwith image by leonardortlima startwitharray image by leonardortlima sorted image by leonardortlima see
5555.0,5568,1.0,0.0,0.0,1.0,1.0,adds assertvaluesonly that asserts that the testobserver testsubscriber received only the specified values in the specified order without terminating
4544.0,5582,1.0,0.0,0.0,0.0,1.0,adds maybeswitchifempty single
5382.0,5616,1.0,0.0,1.0,1.0,1.0,much like i discovered when trying to fake a slow flaky backend that singledelay doesnt delay errorsthis pr adds an overload that does bringing singledelay in line with observabledelay it also corrects the javadoc for existing overloads only updated
5642.0,5647,1.0,0.0,0.0,0.0,1.0,this pr improves a documentation of subscribewith functions in single maybe completable by making sure examples are compilable by using classes which implement disposable this should in that issue akarnokd approved my idea to use disposablemaybeobserver in the example but as i looked in other classes i noticed that observablesubscribewith documentation uses a resourceobserver which implements disposable so i thought that this is the way to go in all other top classesif you think that this is not the case and instead all of them should be switched to use disposable observer in their examples let me know i will do it in this way theni think that all those example should use similar classes
4853.0,5649,1.0,0.0,0.0,0.0,1.0,add concatmapcompletable to observable as discussed in i didnt think it made sense in other reactive typescode is mostly a copy of observableconcatmap let me know if there is a better style of code to base this off instead it also does not have the option to delay errors as concatmap does not sure if that is needed
5545.0,5669,1.0,0.0,0.0,1.0,1.0,this pr should fix the bug that caused the test failure in the bug manifested itself when a cancellation was happening the same time a request was being fulfilled since the same request accounting was used for cancellation indicator if the cancel happened between the onnext s get check and decrementandget this decrementandget decremented longmin_value unconditionally which lead to a state that would appear the subscriber still can receive events a concurrent offer which saves the current array of registered subscriber s then would emit an item and overflow the subscriber the fix is to use the cancellation aware backpressurehelperproducedcancel utilityunit test were added to verify the correct behavior on both publishprocessor and behaviorprocessor the latter uses different cancellation mechanism via a dedicated field
5698.0,5705,1.0,0.0,0.0,1.0,1.0,there was a test class named observablefromcompletabletest which actually was targeting observablefromcallabletest this was most likely just a naming issue copied all tests from observablefromcompletabletest to observablefromcallabletest and deleted the former class
5319.0,5740,1.0,0.0,0.0,0.0,1.0,this pr adds a marble diagram to frompublisher and updates the marbles of all and ziparray inside observable the images can be seen in this comment of
5742.0,5743,1.0,0.0,0.0,1.0,1.0,previously singlefromcallable did not check if the subscriber wasunsubscribed before emitting onsuccess or onerror this fixes thatbehavior and adds tests to singlefromcallable completablefromcallableand maybefromcallable
5319.0,5745,1.0,0.0,0.0,0.0,1.0,this pr adds or updates mable diagrams of observable blockingfirst blockingfirst with default tofuture blockingsubscribe no arguments blockingsubscribe with argument blockingsubscribe with arguments blockingsubscribe with arguments collectinto dooncomplete doonerror doonlifecycle doonnext doondispose comment https githubcom reactivex rxjava issues issuecomment
5319.0,5755,1.0,0.0,0.0,0.0,1.0,this pr adds some missing marbles to observable concatmapcompletable concatmapdelayerror concatmapeager concatmapeagerdelayerror concatmapiterable doafternext dofinally in images in comment https githubcom reactivex rxjava issues issuecomment
5762.0,5766,0.0,0.0,0.0,0.0,1.0,signed off by shaishavgandhi
578.0,5781,1.0,0.0,0.0,0.0,1.0,this pr adds some clarifications about how merge handles multiple errors in a new error handling section in its javadoc entrythere exist several dozen variants of merge in the various base classes that could also include such javadoc addition once the wording has been reviewed the other places will receive a separate prrelated
579.0,5792,1.0,0.0,0.0,1.0,1.0,this pr fixes the lack of upstream cancel call when an inner fused sources queuepoll crashes in a non delayed error modeunit tests were added to verify observableflatmap flowableflatmapiterable and observableflatmapiterable as well
5319.0,5805,1.0,0.0,0.0,0.0,1.0,this is the final part of the observable marble fixes and additions as planned in tolist callable toflowable buffer toflowable drop toflowable latest toflowable error toflowable missing unsubscribeon position and spacing of the marbles in the zipwith overloads no image change images in https githubcom reactivex rxjava issues issuecomment
580.0,5811,1.0,0.0,0.0,1.0,1.0,the pr fixes the resource management in the buffer operator that uses other reactive sources to indicate when a buffer starts and ends both flowable and observable implementations had to be fixes
5827.0,5828,1.0,0.0,1.0,0.0,1.0,adds javadocs indicating a caveat regarding size bounded replay operators subjects and processors see for details
5832.0,5833,1.0,0.0,0.0,1.0,1.0,the observableswitchmap had bad logic in its main onerror handler which didnt dispose the current inner observable the flowable version didnt have this logic error both variants received an unit test to verify the correct behavior
5350.0,5845,1.0,0.0,0.0,0.0,1.0,this pr adds specialized overloads to the concatwith operator in flowable and observable if accepted the marbles will be updated in a separate prrelated
5350.0,5847,1.0,0.0,1.0,1.0,1.0,this pr adds specialized overloads to the mergewith operator in flowable and observable if accepted the marbles will be updated in a separate prrelated
4853.0,5870,1.0,0.0,0.0,1.0,1.0,this pr adds the flowableswitchmapcompletable and flowableswitchmapcompletabledelayerror operators as requested by the associated new marbles are switchmapcompletable https rawgithubcom wiki reactivex rxjava images rx operators switchmapcompletablefpng switchmapcompletabledelayerror https rawgithubcom wiki reactivex rxjava images rx operators switchmapcompletabledelayerrorfpng
4853.0,5871,1.0,0.0,0.0,1.0,1.0,this pr adds the flowableconcatmapcompletable and flowableconcatmapcompletabledelayerror operators as requested by the marbles will be updated in a separate pr
4853.0,5872,1.0,0.0,0.0,0.0,1.0,this pr adds operators that allow concatenating a mapped sequence of maybe s or single s with or without delaying their errors concatmapmaybe overload with prefetch concatmapmaybedelayerror overloads with error mode and prefetch concatmapsingle overload with prefetch concatmapsingledelayerror overloads with error mode and prefetch they are in the same pr as the single variants implementation is practically the maybe implementation minus the oncomplete casetheir marbles will be updated in a separate proriginally requested in
4853.0,5873,1.0,0.0,0.0,1.0,1.0,this pr adds flowable operators that allow switching between a mapped sequence of maybe s or single s with or without delaying their errors switchmapmaybe switchmapmaybedelayerror switchmapsingle switchmapsingledelayerror they are in the same pr as the single variants implementation is practically the maybe implementation minus the oncomplete casetheir marbles will be updated in a separate proriginally requested in
4853.0,5875,1.0,0.0,0.0,1.0,1.0,this pr ports the various switchmapx and concatmapx operators from and to observable concatmapcompletable replaced by the common implementation concatmapcompletabledelayerror concatmapmaybe concatmapmaybedelayerror concatmapsingle concatmapsingledelayerror switchmapcompletable switchmapcompletabledelayerror switchmapmaybe switchmapmaybedelayerror switchmapsingle dedicated implementation switchmapsingledelayerror dedicated implementation this pr concludes the requested set of operators in marbles will be updated adjusted in a separate pr
5882.0,5886,1.0,0.0,0.0,1.0,1.0,this pr improves the algorithms of the observabletimeout time and observabletimeout selector operators to match their flowable counterparts implemented in in addition coverage of the flowable counterparts have been improved by synchronizing the unit testsnote that they were the last users of observerfullarbiter and fullarbiterobserver which are now removedcloses
5881.0,5887,1.0,0.0,0.0,1.0,1.0,this pr fixes the upstream handling in observablewindow observablesource and observablewindow callable operators to make sure if both the main output and the inner windows have been disposed the upstream is also disposed remark there are a couple of w null checks showing up as partially covered in theory with the right interleaving w can become null but unfortunately the usual testhelperrace testing is unlikely to trigger that case there would be a higher chance with threads one disposing one completing the main and one completing the inner window but the current ci is effectively cores threads that tend to not produce a thorough interleaving
5881.0,5888,1.0,0.0,0.0,1.0,1.0,this pr fixes the upstream handling in flowablewindow publisher and flowablewindow callable operators to make sure if both the main output and the inner windows have been cancelled the upstream is also cancelledrelated in addition the jacoco code coverage has been updated to mainly due to the automatic filtering of difficult to impossible code paths https githubcom jacoco jacoco releases tag v
5894.0,5895,1.0,0.0,0.0,0.0,1.0,i just copied the sentence from the docs in x and updated to use observablesource publisher naming
5903.0,5904,1.0,0.0,0.0,1.0,1.0,when a singleorerror is followed toflowable the assembly process switches the flowable single operator into a flowable flowable operator implementing the singleorerror behavior saving the back and forth type conversion the backing implementation was shared with singleelement and as such did not properly handle the orerror case for an empty source the pr fixes the lack of nosuchelementexception in this case the observable variant doesnt have such optimization but the test has been converted to make sure observable is verified for this aspect in case the optimization is implemented with it in the future
590.0,5906,1.0,0.0,0.0,0.0,1.0,adds a time constructor to testscheduler should i make it experimental or will it just be stable
5916.0,5923,1.0,0.0,0.0,0.0,1.0,text is not allowed between and its child tags
5788.0,5924,1.0,0.0,0.0,0.0,1.0,renamed the operator in the box for flatmappublisher https rawgithubcom wiki reactivex rxjava images rx operators singleflatmappublisherpng
592.0,5928,1.0,0.0,0.0,1.0,1.0,this pr fixes the accidental logical mistake in the cancel dispose logic of the new concatmapsingle and concatmapmaybe operators of both flowable and observable where the internal queue cleanup should happen in a serialized fashion only which is the state when the work in progress counter changes from to ensured by a check
5971.0,5972,1.0,0.0,0.0,1.0,1.0,the internal queue of observableconcatmapsingle was incorrectly the bounded one from its flowable counterpart causing it to drop upstream items if the current single was delayed the right queue for observable s is the spsclinkedarrayqueue added unit tests to both concatmapsingle and concatmapmaybe to verify the correct behaviorfixes
6012.0,6014,1.0,0.0,0.0,1.0,1.0,this pr removes the accidental null checks on primitives in two observable methods and adds a trap method to objecthelper to both highlight and fail the tests in case the null checks are still attempted the method is marked as deprecated so it will also show up in eclipses problems windowreplaces
6015.0,6021,1.0,0.0,0.0,1.0,1.0,see discussion in resolves
5988.0,6026,1.0,0.0,0.0,1.0,1.0,create and bound new blockingsubscribe overloads to buffersize create new overloads with buffersize create a boundedconsumer create a boundedsubsciber close
5980.0,6052,1.0,0.0,0.0,0.0,1.0,proposalchanged subscribeactual from public to protected as described in how i testedran tests locally please let me know if i missed part of the contributing guidelines รฐรฟโยผ fixes
5806.0,6053,1.0,0.0,0.0,0.0,1.0,resolved the following diagrams of amb missing diagram ambarray missing diagram image concat iterable missing diagram image concat publisher missing diagram image concat publisher int missing diagram image concatarray missing diagram image concatarraydelayerror indicate error delayed marble per source image concatarrayeager missing diagram image concatdelayerror iterable missing diagram image concatdelayerror publisher missing diagram image concateager iterable missing diagram image concateager publisher missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerppng
5788.0,6074,1.0,0.0,0.0,0.0,1.0,first of all im extremely grateful to open my first pr for rxjava i hope that ill be able to tick more of the marbles from but for now this should tick off the never operatorplease let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr
5788.0,6075,1.0,0.0,0.0,0.0,1.0,hopefully this should tick off the filter operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i had a doubt and wanted to double check operator filter returns maybe which essentially will call onsuccess or oncomplete by running junit tests i could observe that this is a behavior but if i use testobserver then both assertvalue and assertcomplete are invoked when there are elements that satisfy filter condition
5788.0,6076,1.0,0.0,0.0,0.0,1.0,here are marbles for delay operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr
5788.0,6077,1.0,0.0,0.0,0.0,1.0,this should complete hide operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i wasnt sure if i should represent somehow that disposable is hidden as well if so can you please tell me how to represent that on marble
3708.0,6079,1.0,0.0,0.0,1.0,1.0,this pr adds the missing dedicated takeuntil operator to completable the same effect could be achieved via the ambwith but there are two benefits of a dedicated operator easier to discover based on the takeuntil operator in other types more direct implementation unlike ambwith which is built upon an n ary amb operator with additional overheadthere was a feature request in some time ago but apparently the issue got closed off after singletakeuntil was implemented
5788.0,6081,1.0,0.0,0.0,0.0,1.0,here are marbles for repeat repeat times and repeatwhen operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pri intentionally added two diagrams for repeatwhen as i would say its interesting case that people should be aware of edit here are marbles repeat operator repeat operator repeat with count operator repeatwhen https rawentcom umfsimke rxjava images images repeatwhenpng
5789.0,6083,1.0,0.0,0.0,0.0,1.0,this pr adds the following marble diagrams to completable operators amb ambarray complete image concatarray concat image defer image error image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorfpng
5788.0,6084,1.0,0.0,0.0,0.0,1.0,here is marble for repeatuntil operator in repeatuntil let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr
5789.0,6085,1.0,0.0,0.0,1.0,1.0,this pr adds marble diagrams to the following operators as well as adds the missing completablefrommaybe operator fromx of other types were already there uses existing maybeignoreelement s underlying implementation fromaction fromcallable image fromfuture image frommaybe image fromobservable image frompublisher image fromsingle image mergearray & mergearraydelayerror image merge both iterable and publisher variants image mergedelayerror both iterable and publisher variants image never image timer image https rawgithubcom wiki reactivex rxjava images rx operators completabletimerpng image https rawgithubcom wiki reactivex rxjava images rx operators completabletimerspng
5788.0,6086,1.0,0.0,0.0,0.0,1.0,here are marbles for for error callable errorcallable error throwable only added error event to be red errorthrowable onerrorreturn onerrorreturn onerrorreturnitem onerrorreturnitem onerrorresumenext singlesource onerrorresumenext onerrorresumenext function onerrorresumenextfn https rawentcom umfsimke rxjava images images onerrorresumenextwithfnpng
5788.0,6087,1.0,0.0,0.0,0.0,1.0,here are marbles for fromcallable frompublisher and fromobservable operators from marble for fromcallable fromcallable for frompublisher frompublisher for fromobservable fromobservable https rawentcom umfsimke rxjava images images fromobservablepng
5788.0,6091,1.0,0.0,0.0,0.0,1.0,here are operators for amb and ambarray from marble for amb amb for ambarray ambarray https rawentcom umfsimke rxjava images images ambarraypng
5788.0,6095,1.0,0.0,0.0,0.0,1.0,here are marbles for defer timer delay unit timer delay unit scheduler toflowable tomaybe tofuture operators in marble for defer defer for timer delay unit timer for timer delay unit scheduler timerscheduler for tofuture although for this one i believe we should add case when there is no event sent from single as there will be timeout exception thrown tofuture for tomaybe tomaybe for toflowable although here i didnt figured out what will happen if we request more than event from flowable toflowable https rawentcom umfsimke rxjava images images toflowablepng
5789.0,6097,1.0,0.0,0.0,0.0,1.0,this pr add even more missing marbles to completable tracked by delay doonx image dofinally image onerrorcomplete image onerrorresumenext image onterminatedetach image mergewith image concatwith image observeon image hide image https rawgithubcom wiki reactivex rxjava images rx operators completablehidepng
5789.0,6098,1.0,0.0,0.0,0.0,1.0,this pr adds a couple of more marble diagrams to completable subscribeon unsubscribeon image tosingle tosingledefault image toflowable image tomaybe image https rawgithubcom wiki reactivex rxjava images rx operators completabletomaybepng
5789.0,6101,1.0,0.0,0.0,0.0,1.0,this pr contains the final set of missing completable marbles repeat repeatuntil image repeatwhen image retry image retrywhen image startwith image timeout image create image unsafecreate image lift image subscribe image subscribewith image test image https rawgithubcom wiki reactivex rxjava images rx operators completabletestpng image https rawgithubcom wiki reactivex rxjava images rx operators completabletestbpng
5788.0,6137,1.0,0.0,0.0,0.0,1.0,here are marbles for concat iterable concat publisher concat publisher prefetch concat observable concat source source concat source source source concat source source source source and concatarray operators that should close them at marble for concat iterable concatiterable for concat publisher concatpublisher for concat publisher prefetch concatpublishern for concat observable concatobservable for concat source source concat for concat source source source concat for concat source source source source concat for concatarray concatarray pay attention to file names in javadoc as i was not sure how to name concat iterable so ive added at the end i for concat observable ive added o for concat source source source and concat source source source source ive used n and m as they are numerical valuesalso is there an error in concat publisher and concat publisher prefetch with request commands i did used as a reference completableconcat publisher marble but i do not understand why do we have request after first event as we already requested prefetching of multiple ones is it because others are still not producedthanks
5788.0,6141,1.0,0.0,0.0,0.0,1.0,here are marble diagrams for various single operators that will close some of the marble for concateager publisher concateeagerp for concateager iterable concateeageri for create create for ambwith ambwith for equals equals for merge source source merge for merge source source source mergethree for merge source source source source mergefour for merge singlesource mergesinglesource for mergewith mergewith for doafterterminate doafterterminate for to to for as as for compose compose for doaftersuccess doaftersuccess for merge publisher mergepublisher for merge iterable mergeiterable https rawentcom umfsimke rxjava images images mergeiterablepng
614.0,6145,1.0,0.0,0.0,1.0,1.0,this pr fixes the lack of boundary fusion marker in the concatmap and publish operators that can break the thread confinement expectation when using observeon upstream and a thread sensitive operator javasourceobserveon scheduler map some thread sensitive operation publish or concatmap by default these operators may call poll from any of the participating threads which would otherwise dequeue observeon and execute map on that threadthe fix adds the necessary flag to both operators onsubscribe logic for a temporary workaround one should use hide before such operators to make sure fusion doesnt happenfixes
580.0,6155,1.0,0.0,0.0,0.0,1.0,fix the marble diagram of the event mapping maybeflatmap operator in
614.0,6167,1.0,0.0,0.0,1.0,1.0,some operators may call dispose cancel from onerror oncomplete which could trigger a permature call to workerdispose that was about to happen anyway this pr prevents this by moving the operator into its disposed cancelled state before signaling the terminal event thus a downstream cancel dispose call wont trigger this premature cleanupsuch premature cleanups may cause unwanted schedulersio reuse in some scenariosrelated
6196.0,6199,1.0,0.0,0.0,0.0,1.0,changing terminology from cancel dispose wherever appropriate in the following classes observablejava singlejava maybejava completablejava areas where i did _not_ change from cancel disposal include where the cancellation was in reference to a flowable publisher or a future test methods where the testobserver returned actually has a cancel method
6198.0,6200,1.0,0.0,0.0,0.0,1.0,this pr fixes the marble diagrams of flowabletofuture and observabletofuture to indicate multi valued sources signal indexoutofboundsexception source has to be finite for the future to terminate also fixes the diagram for
6253.0,6254,1.0,0.0,0.0,1.0,1.0,use processors to trigger the missingbackpressureexception case instead of the timer which could fire prematurely and stop the sequence before the first item was sent by the behaviorprocessor also small improvements to the code coverage of flowablesample
6279.0,6287,1.0,0.0,0.0,0.0,1.0,configuring keep alive through system propertyresolves
629.0,6297,1.0,0.0,1.0,1.0,1.0,this pr fixes the case when an observer subscriber disposes cancels immediately upon subscribing to a refcount operator before it establishes the connection and ends up with a disposed but non reset connection preventing further interactions with the connectable sourcethe fix is to detect this case and reset the connection when the connect method signals the dispose handlerboth connectableflowablerefcount and connectableflowablerefcount is affectedfixes
6302.0,6303,1.0,0.0,0.0,0.0,1.0,add before image elements in javadocresolves
6299.0,6305,1.0,0.0,0.0,0.0,1.0,add note in javadoc explicitly explaining about using emitter interface methods synchronously add notes for generate methods in observable and flowable plus add the similar note to emitter interfaceresolves
6289.0,6308,1.0,0.0,0.0,0.0,1.0,updates to ioreactivexflowable javadocs as per updated docs for all flowablegroupby methods
6290.0,6311,1.0,0.0,0.0,1.0,1.0,add note in javadoc for all distinctuntilchanged methods in flowable and observable class explaining about unexpected results to expect when using mutable data sources like mutable charsequence or lists resolves
630.0,6313,1.0,0.0,0.0,0.0,1.0,adding nonnull annotations in factory methods for improved code compilationresolves
636.0,6364,1.0,0.0,0.0,1.0,1.0,due to a bug in the flowablepublish operator it is not requesting more if there was a change in the subscriber array during an emission run in the non fused operation modefixes
636.0,6370,1.0,0.0,0.0,1.0,1.0,by default the schedulersfrom uses a trampoline to ensure worker tasks are executed fifo and non overlappingly on any potentially multi threaded executor this old setup didnt allow task interruption due to this disconnect between the trampoline task and the operator task in contrast the standard schedulers use single threaded executors and their future is linked and interruptible when the operator task is cancelled this pr add an interruptible mode to the schedulersfrom via a paramerer in a new overload and some internal dispatching based on this mode selector existing schedulersfrom executor users should still behave the sameresolves
6288.0,6377,1.0,0.0,0.0,0.0,1.0,mention that if the processing of a task takes too longand a newer item arrives then the previous task willget disposed interrupting a long running workfixes
6379.0,6386,1.0,0.0,0.0,1.0,1.0,this pr adds doonterminate operator to single and mayberesolves
640.0,6405,1.0,0.0,1.0,1.0,1.0,this pr fixes the concatmapeager operator which drives the static variants as well to properly dispose and clean up the state of the operator upon cancelling disposing the sequence flowableconcatmapeager did not cancel the current active inner consumer only the ones coming after observableconcatmapeager did not dispose the main source of the inner observablesboth variants have received the same two unit tests to verify their behaviorfixes
6451.0,6452,1.0,0.0,0.0,0.0,1.0,in the constructor of observablerefcount that takes connectableobservable source as the argument we set timeout to l in that specific use case of observablerefcount scheduler is never needed its only referenced in cancel method but if timeout is it wont be triggered at all because there is early return this commit removes the need to depend on schedulerstrampoline and instead passes null to be scheduler when the ref count is not time based similarly applies the same change to flowablerefcount the reasons for this change are the following in projects that dont depend on schedulers class if there is no reference to schedulers the whole schedulers can be stripped out of the library after optimizations eg proguard with constructor that references schedulers the optimizer cant properly strip it out in our quick test of our android app we were able to reduce the rxjava library size dependency from kb to kb after optimization but before compression by simply avoiding access to schedulers in observablerefcount in terms of modularity observablerefcount is just an operator so it by itself should probably not have dependency on what available pool of schedulers schedulers there are it should just know that there is some scheduler that could be passed to observablerefcount when observablerefcount needs it
646.0,6469,1.0,0.0,1.0,1.0,1.0,resolves
5628.0,6519,1.0,0.0,1.0,1.0,1.0,this pr changes the connectable api to have a specific reset method to reset a terminated connectable source as part of the official apiin x when publish terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call connect again see however replay did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin x this two corner cases have been by the introduction of reset both publish and replay now remain in their terminated state until reset is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows fresh connect running oncomplete onerror terminated reset fresh fresh connect running dispose fresh fresh connect running oncomplete onerror terminated dispose fresh fresh connect running oncomplete onerror terminated connect running this does resolve the race condition with publish refcount described in in addition there are some changes to flowablepublish s behavior it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation i have no strong preference on this property and in comparison observablepublish drops items because there is no backpressure buffer in its implementation upstream errors are not reported to the rxjavapluginsonerror handler when if there are no subscribers but have to be observed via a subscriber because terminal events are available until reset now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no consumer case upon an error and still report it when reset or dispose is called resolves
6518.0,6528,1.0,0.0,0.0,1.0,1.0,
647.0,6532,1.0,0.0,1.0,1.0,1.0,this pr adds the eagertruncate option to the replay operator so that the head node will lose the item reference it holds upon truncationthe bounded buffers in replay implement a linked list that when truncated moves the head reference forward along the links atomically this allows late consumers to pick up the head and follow the links between them to get items replayed however the truncation may happen concurrently with a consumer working on some prior nodes so if the truncation would null out the value the consumer reaching the same node would see null as well and fail avoid this type of retention the head node has to be refreshed with a new node still pointing to the next node in the chain but without any value image reason this is not the default is that it requires an additional allocation for each new incoming value when the buffer is full which would reduce performance in cases where the excess retention is not a problemoverloads to both the direct and function variants of both flowablereplay and observablereplay have been added to avoid too many overloads only one extra overload has been added extending the signature of the longest parameterized method per each bounds mode size time time size their unit test files have been cloned so that both the non eager original behavior and the eager behavior is tested separately
6543.0,6544,1.0,0.0,0.0,0.0,1.0,updating the version tag on schedulersfrom executor boolean since it was promoted
655.0,6564,1.0,0.0,1.0,1.0,1.0,this pr removes kinds of operators that had no noticeable use bases or use cases on their own in the past years buffer supplier supplier window supplier int onexceptionresumenext resolves
6554.0,6564,1.0,0.0,1.0,1.0,1.0,this pr removes kinds of operators that had no noticeable use bases or use cases on their own in the past years buffer supplier supplier window supplier int onexceptionresumenext resolves
6576.0,6577,1.0,0.0,0.0,0.0,1.0,compare with v instead of o
658.0,6589,1.0,0.0,0.0,1.0,1.0,this commit creates the rxjavatest class defining a defaulttimeout to minutes an ignored test announce itself for eachrunning class extending it preventing travis ci from killing thebuildhave completable tests extend from rxjavatest have disposable tests extend from rxjavatest have exception tests extend from rxjavatest related
658.0,6594,1.0,0.0,1.0,1.0,1.0,this commit updates the unit tests of the following operators flowable maybe observable disposable observer parallel processors schedulersand rxjava pluginrelated
658.0,6595,1.0,0.0,1.0,1.0,1.0,this commit updates the unit tests of the following operators single subjects subscribersand for internal operators internaldisposable internalfuctions internalobservers internalqueue interanlschedulers internalsubscribers internalsubscriptions internaloperatorcompletablerelated
6576.0,6601,1.0,0.0,0.0,0.0,1.0,it should compare the terminated instance with the value received from the blocking queuefixes related
658.0,6602,1.0,0.0,1.0,1.0,1.0,this pr fixes several truncation bugs with the time and size bound replay operators and their hot class versions unexpected removal of the last item just added due to becoming out of date at the lowest time resolution creating a hole in the linked chain and hanging the consumer related failure incorrect size accounting upon removing old entries leading to more items dropped than expectedrelated
658.0,6604,1.0,0.0,1.0,1.0,1.0,this commit updates the unit tests of the following operators internaloperatorsmaybe internaloperatormixed internaloperatorsinglerelated
658.0,6607,1.0,0.0,1.0,1.0,1.0,this commit updates the unit tests for internaloperatorobservable related
658.0,6612,1.0,0.0,0.0,1.0,1.0,fix many operators to emit the collected exception in case of a cancel dispose call to the plugin error handler ie becoming undeliverable excptions in addition the terminal event error delivery has been unified in many other operators so that the terminal indicator exception is never leakedthere will be a separate pr about cleaning up the addthrowable usage cases fixes
6611.0,6612,1.0,0.0,0.0,1.0,1.0,fix many operators to emit the collected exception in case of a cancel dispose call to the plugin error handler ie becoming undeliverable excptions in addition the terminal event error delivery has been unified in many other operators so that the terminal indicator exception is never leakedthere will be a separate pr about cleaning up the addthrowable usage cases fixes
6569.0,6620,1.0,0.0,0.0,0.0,1.0,as discussed in this pr constrains upstream requests for the elementat and first overloads other operators will be covered in other prs
6608.0,6629,1.0,0.0,1.0,1.0,1.0,this pr fixes the issue with refcount not resetting the connection when the termination triggers cross cancellation over it the fix is more involved than because how x uses two publish implementation internally due to bug the old classic implementation does not fail but the newer implementation fails if the fix is applied unconditionally the old classic implementation fails an older unit test verifying an error allows reconnection therefore the pr checks and applies the new code path only if refcount isnt talking to the classic publish implementationas a reminder for x has a redesigned connectable with a much more clearer reset semantics and thus the restructuring of the termination handling had no trouble passing the aforementioned error allows reconnect unit test
663.0,6635,1.0,0.0,1.0,1.0,1.0,started removing the vararg function from
663.0,6637,1.0,0.0,0.0,1.0,1.0,change the code in the schedulerpoolfactory to use systemgetproperty directly also fix property names to rx as now both v and v could run together
6569.0,6650,1.0,0.0,1.0,1.0,1.0,as per discussion in this pr constrains upstream requests from the take operator and removes the limit operatorive also added a couple of unit tests for coverage of elementat that i didnt include in
5788.0,6668,1.0,0.0,0.0,0.0,1.0,add hopefully all remaining missing marble diagrams to single https rawgithubcom wiki reactivex rxjava images rx operators singleconcatarrayeagerpng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singleunsafecreatepng image https rawgithubcom wiki reactivex rxjava images rx operators singleusingpng image https rawgithubcom wiki reactivex rxjava images rx operators singleusingbpng image https rawgithubcom wiki reactivex rxjava images rx operators singlewrappng image https rawgithubcom wiki reactivex rxjava images rx operators singlecachepng image https rawgithubcom wiki reactivex rxjava images rx operators singlecastpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptiontpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptiontspng image https rawgithubcom wiki reactivex rxjava images rx operators singledooneventpng image https rawgithubcom wiki reactivex rxjava images rx operators singleblockinggetpng image https rawgithubcom wiki reactivex rxjava images rx operators singleliftpng image https rawgithubcom wiki reactivex rxjava images rx operators singlecontainsfpng image https rawgithubcom wiki reactivex rxjava images rx operators singlecontainspng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonterminatedetachpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrypng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryf png image https rawgithubcom wiki reactivex rxjava images rx operators singleretrynpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryfpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrynfpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrywhenpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribecpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribeccpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribec png image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribewithpng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilcpng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilspng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilppng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutbpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutsbpng image https rawgithubcom wiki reactivex rxjava images rx operators singleunsubscribeonpng image https rawgithubcom wiki reactivex rxjava images rx operators singletestpng image https rawgithubcom wiki reactivex rxjava images rx operators singletestbpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionppng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionopng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionspng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptioncpng image https rawgithubcom wiki reactivex rxjava images rx operators singledematerializepng
671.0,6714,1.0,0.0,0.0,1.0,1.0,after reaching the prefetch limit the updated consumed counter was not written back so the processor stopped requesting more consumed limit affects x to a separate pr will be posted for it
671.0,6715,1.0,0.0,0.0,1.0,1.0,after reaching the prefetch limit the updated consumed counter was not written back so the processor stopped requesting more consumed limit
672.0,6729,1.0,0.0,0.0,0.0,1.0,some see should point to the other party plain delayerror add a few see to the nearby operators comments no longer apply in blockingxmostrecent source code add a comment from to actiondisposable replaces
6728.0,6729,1.0,0.0,0.0,0.0,1.0,some see should point to the other party plain delayerror add a few see to the nearby operators comments no longer apply in blockingxmostrecent source code add a comment from to actiondisposable replaces
5806.0,6730,1.0,0.0,0.0,0.0,1.0,related https rawgithubcom wiki reactivex rxjava images rx operators maybezipipng image https rawgithubcom wiki reactivex rxjava images rx operators maybezipnpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeziparraypng image https rawgithubcom wiki reactivex rxjava images rx operators maybezipwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecontainsopng image https rawgithubcom wiki reactivex rxjava images rx operators maybeunsubscribeonpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonterminatedetachpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecastpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeliftpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedooneventpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptiontpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptiontspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptionppng
5788.0,6732,1.0,0.0,0.0,0.0,1.0,related https rawgithubcom wiki reactivex rxjava images rx operators singlezipipng image https rawgithubcom wiki reactivex rxjava images rx operators singlezipnpng image https rawgithubcom wiki reactivex rxjava images rx operators singleziparraypng image https rawgithubcom wiki reactivex rxjava images rx operators singlezipwithpng
674.0,6745,1.0,0.0,0.0,0.0,1.0,make the internal interface disposablecontainer public as it can be one safely ive seen some rd party usage in custom containers this will make them now legit on x edit also should resolve the osgi private reference warning
674.0,6748,1.0,0.0,0.0,1.0,1.0,this pr changes how compositeexceptiongetcause creates a cause exception on demand in x and x the code tried to link up the various inner exceptions via their initcause which was in on itself fishy as well as could lead to excessive memory usageinstead the new code will present the inner exceptions as part of a formatted message which in theory should be still picked up by ide exception listings and allow navigation multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionscompositeexception exceptions occurred at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionscompositeexceptionexceptionoverview multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava are a few formatting conveniences if there is only one inner exception the compositeexception s cause will be simply that exception this can happen when the very same exception is aggregated into the composite and get deduplicated if an inner exceptions message is multi lined the message and cause traces should be indented properly reoccurring causes are not expanded over and over multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava cause not expanded again ioreactivexrxjava exceptionstestexception ex currently only the first line of the stacktraces are shown because it can get quite long and thus memory consuming to list them all maybe a system parameter can be introduced to control the verbosity
675.0,6754,1.0,0.0,0.0,1.0,1.0,
675.0,6756,1.0,0.0,1.0,1.0,1.0,when using iterable of sources the initial array is the wrong type and causes arraystoreexception unit tests were added to verify the other implementations
6776.0,6779,1.0,1.0,1.0,1.0,1.0,add java interoperation methods to flowable blockingstream essentially blockingiterable with close support concatmapstream map and concatenate streams flatmapstream map and concatenate streams inherently same as concatmapstream related marbles https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamfipng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamfipng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamfipng
6772.0,6780,1.0,0.0,0.0,0.0,1.0,add disposablesfromautocloseable and disposablestoautocloseable methods improve javadocs styling resolves
6776.0,6783,1.0,0.0,1.0,1.0,1.0,add the following java operators to various reactive base classes operator maybe single completable fromoptional fromcompletionstage image image image mapoptional image image tocompletionstage image image tocompletionstage t image image should it be implemented as optionalempty singleerror new nosuchelementexception no reason to implement always completablecomplete no value to map no value to emit thus it is better to ask the user for a completion value never empty no reason to implementrelated marbles image https rawgithubcom wiki reactivex rxjava images rx operators fromoptionalmpng image https rawgithubcom wiki reactivex rxjava images rx operators fromcompletionstagespng image https rawgithubcom wiki reactivex rxjava images rx operators fromcompletionstagecpng image https rawgithubcom wiki reactivex rxjava images rx operators mapoptionalmpng image https rawgithubcom wiki reactivex rxjava images rx operators mapoptionalspng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagempng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagemvpng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagespng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagecpng
6767.0,6786,1.0,0.0,1.0,1.0,1.0,hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal operators observable there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving
6767.0,6787,1.0,0.0,1.0,1.0,1.0,hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal operators flowable there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving
6767.0,6788,1.0,0.0,1.0,1.0,1.0,hello in this pull request ive changed all ide marked explicit types with diamond operator affected packages is internal internal operators there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving
6767.0,6789,1.0,1.0,1.0,1.0,1.0,hello in this pull request ive changed all ide marked explicit types with diamond operator affected packages is in tests rootthere is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving
6794.0,6799,1.0,0.0,0.0,1.0,1.0,make offer throw a nullpointerexception immediately instead of turning it into an error signal in addition have multicastprocessoroffer throw an illegalstateexception if called when the processor is in fusion mode
6776.0,6805,1.0,0.0,0.0,1.0,1.0,add maybeflattenstreamasflowable maybeflattenstreamasobservable singleflattenstreamasflowable singleflattenstreamasobservable related in addition adjust the validators to appreciate the new patterns marbles https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasflowablempng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasobservablempng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasflowablespng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasobservablespng
681.0,6814,1.0,0.0,1.0,1.0,1.0,those overloads were only applying subscribeon with no other benefitsresolves
681.0,6817,1.0,0.0,0.0,0.0,1.0,removes a duplication of the natural order comparator
6828.0,6837,1.0,0.0,0.0,1.0,1.0,remove the concatmapiterable function int overload as there is no buffering involved with the operator
683.0,6839,0.0,0.0,0.0,1.0,0.0,related
684.0,6844,1.0,0.0,0.0,1.0,1.0,it was always very peculiar to let only checked exceptions resumed
683.0,6847,1.0,0.0,0.0,1.0,1.0,simplify the wording of return in javadocs
6852.0,6857,1.0,0.0,1.0,0.0,1.0,update the operatormatrixgenerator to add anchors and links to notes about why operators are not present in one or another class operators are missing and will be added as part of
6855.0,6857,1.0,0.0,1.0,0.0,1.0,update the operatormatrixgenerator to add anchors and links to notes about why operators are not present in one or another class operators are missing and will be added as part of
6852.0,6862,1.0,0.0,0.0,0.0,1.0,add the missing blockingsubscribe methods to maybe single and completable for symmetry with flowable and observable usually wed like to avoid blocking but now that project loom preview transparently turns latch based awaiting into suspension inside virtual threads they will act as free interop operators for exiting the reactive world into the continuation worldrelated marbles maybe single image completable image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeapng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeacpng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeopng
6863.0,6864,1.0,0.0,1.0,1.0,1.0,
5806.0,6867,1.0,0.0,0.0,0.0,1.0,add the onerrorcomplete and onerrorcomplete predicate operators to the remaining base classesalso created the missing marble for maybeonerrorcomplete related https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletefpng
6852.0,6867,1.0,0.0,0.0,0.0,1.0,add the onerrorcomplete and onerrorcomplete predicate operators to the remaining base classesalso created the missing marble for maybeonerrorcomplete related https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletefpng
5806.0,6868,1.0,0.0,0.0,1.0,1.0,this pr adds the missing completableonerrorresumewith present in the rest of the base classesalso marbles for maybeonerrorresumenext and maybeonerrorresumewith have been updatedrelated https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumenextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumewithpng
6852.0,6868,1.0,0.0,0.0,1.0,1.0,this pr adds the missing completableonerrorresumewith present in the rest of the base classesalso marbles for maybeonerrorresumenext and maybeonerrorresumewith have been updatedrelated https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumenextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumewithpng
5806.0,6869,1.0,0.0,0.0,1.0,1.0,retryuntil was missing from single and completable added marble for maybe as wellrelated https rawgithubcom wiki reactivex rxjava images rx operators completableretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryuntilpng
6852.0,6869,1.0,0.0,0.0,1.0,1.0,retryuntil was missing from single and completable added marble for maybe as wellrelated https rawgithubcom wiki reactivex rxjava images rx operators completableretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryuntilpng
6852.0,6870,1.0,0.0,0.0,0.0,1.0,add the missing switchonnext and switchonnextdelayerror operators which are essentially delegated to the respective flowable switchmapx operators with identity mappingrelated https rawgithubcom wiki reactivex rxjava images rx operators completableswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators completableswitchonnextdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators singleswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators singleswitchonnextdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchonnextdelayerrorpng
6852.0,6871,1.0,0.0,0.0,1.0,1.0,add the dematerialize operator to maybe to be in sync with the other classesrelated https rawgithubcom wiki reactivex rxjava images rx operators maybedematerializepng
6852.0,6873,1.0,0.0,1.0,1.0,1.0,add a cross section of from operators present fromaction fromsingle operator f o m s c fromaction present notes present namefromcompletable fromcompletable present notes absent notes frommaybe present notes present namefromobservable fromobservable present notes present namefrompublisher frompublisher present namefromrunnable fromrunnable present notes present namefromsingle fromsingle present notes present https rawgithubcom wiki reactivex rxjava images rx operators flowablefromactionpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablebufferpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablelatestpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservabledroppng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablemissingpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromrunnablepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromactionpng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromrunnablepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators maybefrompublisherpng image https rawgithubcom wiki reactivex rxjava images rx operators maybefromobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators singlefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators singlefrommaybevpng
6852.0,6874,1.0,0.0,0.0,0.0,1.0,add timeinterval and timestamp operators overloads each to maybe and single related https rawgithubcom wiki reactivex rxjava images rx operators maybetimeintervalpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeintervalspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimestamppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimestampspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeintervalpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeintervalspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimestamppng image https rawgithubcom wiki reactivex rxjava images rx operators singletimestampspng
6852.0,6875,1.0,0.0,0.0,0.0,1.0,add tofuture to maybe and completable related https githubcom reactivex rxjava wiki images rx operators maybetofuturepng image https githubcom reactivex rxjava wiki images rx operators completabletofuturepng
580.0,6876,1.0,1.0,1.0,1.0,1.0,add oftype to single already available to the other non empty base typesrelated addition diagrams for maybefilter and maybeoftype have been updated image
6852.0,6876,1.0,1.0,1.0,1.0,1.0,add oftype to single already available to the other non empty base typesrelated addition diagrams for maybefilter and maybeoftype have been updated image
6852.0,6877,1.0,0.0,0.0,1.0,1.0,add the doonlifecycle operator to the remaining classesrelated https rawgithubcom wiki reactivex rxjava images rx operators maybedoonlifecyclepng image https rawgithubcom wiki reactivex rxjava images rx operators singledoonlifecyclepng image https rawgithubcom wiki reactivex rxjava images rx operators completabledoonlifecyclepng
6852.0,6879,1.0,0.0,1.0,1.0,1.0,add the following operator aliases maybeconcatmapcompletable maybeconcatmapsingle singleconcatmapcompletable singleconcatmap singleconcatmapmaybe related addition some missing or wrong maybe marbles have been image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatmappng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapcompletable png image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapsingle png image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapsingleelementpng
6852.0,6881,1.0,0.0,1.0,1.0,1.0,add the following concat kind of operators maybeconcatarrayeagerdelayerror maybeconcatdelayerror publisher int singleconcatarraydelayerror singleconcatarrayeagerdelayerror singleconcatdelayerror completableconcatarraydelayerror completableconcatdelayerror related addition the maybeconcatdelayerror publisher marble has been image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatdelayerror ipng
6852.0,6882,1.0,0.0,0.0,0.0,1.0,single was missing the mergearray and mergearraydelayerror operators already present in the other classesrelated https rawgithubcom wiki reactivex rxjava images rx operators singlemergearraypng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergearraydelayerrorpng
6852.0,6884,1.0,0.0,0.0,1.0,1.0,the operator was available in all other classesrelated https rawgithubcom wiki reactivex rxjava images rx operators completablesequenceequalpng
6852.0,6885,1.0,0.0,0.0,0.0,1.0,add missing add startwith overloads source \ other f o m s c flowable present absent add add add absent present add add add add add add add add add add add add add present present add add present https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithppng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithopng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithppng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithopng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithspng
5806.0,6886,1.0,0.0,0.0,1.0,1.0,the operators were already available elsewhererelated addition the maybe variants have received updated marbles as well image
6852.0,6886,1.0,0.0,0.0,1.0,1.0,the operators were already available elsewhererelated addition the maybe variants have received updated marbles as well image
6878.0,6891,1.0,0.0,0.0,1.0,1.0,dropped the old maybeflatmapsingle and replaced it with maybeflatmapsingleelement
5806.0,6893,1.0,0.0,0.0,1.0,1.0,reenable the xflatmaptestmaybesingle and make sure all flatmap variants behave the same when the flow is cancelled disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at all while adding the extra tests i noticed two flatmap variant is missing from single a combiner of the original and inner success item flatmap function bifunction a notification type mapper flatmap function function the same combiner variant for maybe received a marble diagram too image
6892.0,6893,1.0,0.0,0.0,1.0,1.0,reenable the xflatmaptestmaybesingle and make sure all flatmap variants behave the same when the flow is cancelled disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at all while adding the extra tests i noticed two flatmap variant is missing from single a combiner of the original and inner success item flatmap function bifunction a notification type mapper flatmap function function the same combiner variant for maybe received a marble diagram too image
5806.0,6897,1.0,0.0,0.0,0.0,1.0,https rawgithubcom wiki reactivex rxjava images rx operators maybeambwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockinggetpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockinggetvpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecachepng image https rawgithubcom wiki reactivex rxjava images rx operators maybecomposepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecountpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedefaultifemptypng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelayppng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytbpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytsbpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoaftersuccesspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoafterterminatepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedofinallypng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoondisposepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoonsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoonterminatepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmappublisherpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeisemptypng image https rawgithubcom wiki reactivex rxjava images rx operators maybemergewithpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatnpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatwhenpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryfpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrygpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrynpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrynfpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrypng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrywhenpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchifemptympng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchifemptyspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetakeuntilmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetakeuntilppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutmmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutpmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttsmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetopng image https rawgithubcom wiki reactivex rxjava images rx operators maybetoflowablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybetoobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybetosinglepng
6880.0,6899,1.0,0.0,0.0,0.0,1.0,flowable observable maybe and single now have a concateagerdelayerror delegating to the appropriate concatmapeagerdelayerror operatorin addition maybe and single received an overload concateager iterable int to expose the maxconcurrency option already present in the rest of the typesnote that completableconcateagerdelayerror is essentially the same as mergedelayerror because there are no items to keep emitting in order the flowable and observable variant of concateager also received fresh marble diagrams related flowable observable image maybe image single image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerinpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerpnpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorinpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorpnpng
6947.0,6960,1.0,0.0,0.0,1.0,1.0,just a backport to x of the fix for the scalar queue max concurrency issue already for x in the code for the fix has been added and also the test for itin addition as was also done for the corresponding test for flowableflatmap has been added
696.0,6969,1.0,0.0,1.0,1.0,1.0,adds the new system property rx schedulerdrift tolerance unit to allow specifying a more fine grained tolerance amount
6987.0,6996,1.0,0.0,1.0,1.0,1.0,i used a junit testrule to suppress handling of undeliverableexception for test methods annotated with suppressundeliverable this approach is coarser than the suggested approach it suppresses the handling of all undeliverableexceptions for the entire annotated test method i thought this approach was clean but i can switch to the suggested approach if preferredi added suppressundeliverable to most tests that were logging undeliverableexceptions with the test method in the stack trace this may be more suppression than was required so just let me know
7001.0,7028,1.0,0.0,0.0,1.0,1.0,issue above test can probabilistically throw an exception thus above assertion would be invalid i have removed the invalid assertion
711.0,7163,1.0,0.0,0.0,1.0,1.0,the testscheduler is a bit inconsistent regarding the use of rxjavapluginsonschedule it extends scheduler so the scheduledirect methods do invoke the hook whereas the workers schedule methods dontthis pr adds a constructor flag to enable the use of the hook in the workers schedule methods as well this addition should avoid issues with existing tests not expecting the hook to be invoked all of a sudden
716.0,7164,1.0,0.0,0.0,0.0,1.0,remove unnecessary sentence from newthreadworkerscheduleactual
706.0,7165,1.0,1.0,1.0,1.0,1.0,this pr adds front fusion support to flowableconcatmapcompletable flowableconcatmapmaybe flowableconcatmapsingle observableconcatmapcompletable observableconcatmapmaybe observableconcatmapsingle the operators have been tidied up by factoring out common code pathsin addition the deferredscalarsubscription s fusion emission had to be in async fusion mode onnext null is generally expected from the upstream but deferredscalarsubscription sent the value itself now it correctly sends null deferredscalardisposable already did this correctly
