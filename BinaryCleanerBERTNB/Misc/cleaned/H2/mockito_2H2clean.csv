issueNumber,prNumber,Util,Network,Interpreter,i18n,Logic,Test,IO,Security,corpus
99.0,103,0,0,0,0,1,1,1,0,fixes issue returns_deep_stubs automatically tries to create serializable mocks see issue what it does is propagating the serializing mode of the parent upon each mock creation when deep stubbingbefore each mock created where made serializable by default which is not an issue when the types have a default no arg constructor but may become problematic when the type didnt have one mockito would report an error explaining that it couldnt mock this type
128.0,142,1,0,0,1,1,1,1,0,deep stubbing with generic responses in the call chain is not working
155.0,176,1,0,0,1,1,1,0,0,make propertyandsetterinjection field sorting consistent is caused by calling collectionssort with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type iterable integer number it gives iterable integer and iterable number but also an inconsistent integer number im not sure its possible to sort consistently with a stateless comparator so this change switches to a sortsupertypeslast method that first sorts by name and then shuffles any subclasses to after their superclasses its slower but should be deterministic the existing tests are preserved by leaving behind a dummy comparator that uses the new sort method new tests make sure that the sorted ordering doesnt depend on the original order
200.0,201,1,0,0,0,1,1,0,0,argumentcaptorforclass is more friendly with generic types we modify the signature of argumentcaptorfromclass class to better express the type relationship between the argument and the return type there is no change to the behavior of the method this change is to allow expressions such as javaargumentcaptor captor argumentcaptorfromclass consumerclass to type check which is desirable as a convenience to users of argumentcaptor we also add two tests to document this extension to the api both of which fail to compile without this change to argumentcaptorfromclass these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile time properties of argumentcaptor not its behavior
187.0,202,1,0,0,1,1,1,1,0,better protection against incompatible returned value of default answer and get safely mock name fixes issue the value returned by the default answer is now validated to make sure there wont be a classcastexception if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a classcastexception when reporting a verification issue
197.0,207,0,0,0,0,1,0,0,0,blocks ability to use negative value for timeout and after method it should if user uses mockitoafter or mockitotimeout with negative values then friendly reminder exception with details will be thrown
188.0,211,1,0,0,1,1,1,1,0,argumentcaptor no longer working for varargs these commits should with capturing varargs
212.0,221,1,0,0,0,1,1,0,0,add shouldhavezerointeractions as bdd version of verifyzerointeractions follow up to
203.0,222,1,0,0,0,1,1,0,0,introduce bdd inorder verification follow up to
206.0,223,1,1,0,1,1,0,1,0,related to windows path problem was caused by file separator replacing hardcoded char by fileseperatorchar solves issue in the same file there is second occurence of this character but it is used with getresource path method in such case is only acceptable separator
228.0,229,1,0,0,1,1,0,0,0,a verify call example in captor javadoc
233.0,234,0,0,0,0,0,1,0,0,cannot instantiate type with public method of a public parent class having a non public types in signature this should awaiting delivery of bytebuddy fix raphw
220.0,235,1,1,0,1,1,1,1,0,constructor invoking methods raise npe in some recent version of mockito spy annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls unconfirmed at this point this pr aims to fix that by calling real code if interceptor is not set which can only happen if constructorinstanciator is usedthanks to raphw for his tip on this regard as well https githubcom raphw byte buddy issues issuecomment
251.0,252,1,1,1,1,1,1,1,0,migrate fest assert code to assertj
260.0,261,1,1,0,0,1,1,0,0,typo in documentation very minor typo in documentation an extra at in the documentationbefore it reads annotating the junit test class with a runwith mockitojunitrunnerclass after it reads annotating the junit test class with a runwith mockitojunitrunnerclass https cloudentcom assets c f b e d b c f png
268.0,270,1,0,0,1,1,1,0,0,issue added support for generic arrays as return types solves by explicitly checking for return types that represent a generic array and by resolving for the arrays component type
243.0,280,1,0,0,0,1,1,0,0,reintroduce null check on mockutilismock will null check on mockutilismock was incorrectly removed after successive refactoring this pr reintroduces null check
124.0,287,0,0,0,0,1,1,0,0,implement verificationcollector which can collect multiple verifications it will report in the end the result of multiple statements
245.0,293,1,1,0,0,1,1,1,0,remove validateserializable remove serializable validation
365.0,373,1,0,0,1,1,1,1,0,simplify the invocationonmock api to get a casted argument this pull request by introducing t getargument int and deprecating t getargumentat intclass in type invocationonmock this improves the readabilty of custom answers this string text invocationgetargumentat stringclass can be replaced string text invocationgetargument
374.0,386,1,0,0,0,1,1,0,0,remove deprecated code fixes for more left though
374.0,404,1,1,0,1,1,1,1,0,removed deprecated classes and methods removed deprecated classes and methods
407.0,412,0,0,0,1,1,1,1,0,vararg method call on mock object fails
20.0,424,1,1,0,0,1,1,0,0,inorder timeouts fixes issue updated code provided by in pr closes
426.0,427,1,0,0,1,1,1,1,0,refactored class reporter to a static utillity for class reporter this pr changes the way errors are created and thrown all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly this improves the readability and eliminates the use of hacks to satisfiy the compilerhere is a sample public list getlastvarargs { if argumentsisempty { reporter noargumentvaluewascaptured return null } else { return argumentsgetlast }} the above code snipped can be rewritten to this public list getlastvarargs { if argumentsisempty { throw noargumentvaluewascaptured } return argumentsgetlast }
426.0,431,1,0,0,0,1,1,1,0,dropped class handyreturnvalues while refactoring the class handyreturnvalues towards a static utility class i notices that it is not required at all therefore i decided to remove the type handyreturnvalues
426.0,432,1,0,0,0,1,1,0,0,refactored invocationmarker to a static utility class refactored invocationmarker to a static utility class
304.0,442,0,0,0,0,0,1,1,0,enable some ignored tests of bridgemethodshitagaintest and detectingf… …inalmethodstestthis worked locally so lets see if this also works on the ci server
438.0,444,0,0,0,1,0,1,1,0,add parameter elementtype to mock todo add a regression test to also show how this functionality can be used cc smoyer
433.0,451,1,0,0,1,0,1,0,0,refactored timeout and after concurrent test refactored concurrent test in order to the implementation now uses an executor to perform async calls instead of extending thread and doesnt extend testbase anymore i also added a stopwatch which can be used for further time dependent testing in the future i want to use this class to write more tests for after timeout
453.0,454,0,0,0,0,1,1,0,0,modified javadoc for argumentmatcher to this is the amendment to the argumentmatcher javadoc
390.0,491,0,0,0,1,1,1,0,0,deprecate whitebox and corresponding verboserunner and junitfailureha… a quick google showed that there are almost zero usages of this runner moreover it was relying on a very hackish implementation i think we can do a better job by creating a new runner with junit as part of therefore the intent is to deprecate these classes and remove them in mockito
482.0,492,1,0,0,1,1,1,0,0,revert remove deprecated method simple git revert for an accidental removal of a deprecated api since instead of x
401.0,499,1,0,0,0,1,1,0,0,makes the junit runner detect unused stubs this is a breaking change because junit runner will now fail the test class if there is an unused stubbingfeedback is welcome sorry for working on it for a long time and big number of commits
426.0,501,0,0,0,1,1,1,0,0,refactored testmethodsfinder to a static utility class
426.0,502,1,0,0,1,1,1,1,0,refactored argumentscomparator to a static utility class
426.0,503,1,0,0,0,1,1,0,0,refactored nongreedynumberofinvocationsinorderchecker to a static uti… …lity class
506.0,507,1,0,0,1,1,1,0,0,improved exception message fixes issue
194.0,510,1,0,0,0,1,0,0,0,tweaks any matchers details is i took the opportunity to replace testbaseassertthat by more powerful assertj equivalent theres still some work to be done in this class add iterable matchersbefore merging i ponder to make anyobject not to accept null currently any is an alias of anyobject keeping the anyobjet behaviour and deprecate the method i need to update anyint family description
426.0,514,1,0,0,1,1,1,1,0,refactored mockutil to a static utility class
426.0,515,1,0,0,0,1,1,0,0,refactored allinvocationsfinder and verifiableinvocationsfinder to st… …atic utility classes
508.0,525,0,0,0,0,0,1,0,0,add regression test for as mentioned in the bug report for adds a test which would catch this issue if it happened to regress in the future
194.0,528,1,0,0,0,1,0,0,0,missing generics info on collection matchers follow up on issue following this comment it tweaks the collection matchers with generic support it should have bee in abf
426.0,535,1,0,0,1,1,1,0,0,refactored supertypeslastsorter to a static utility class refactored supertypeslastsorter to a static utility classrelates to
426.0,540,1,0,0,0,1,0,0,0,inlined arrayutilsisempty in argumentsprocessor inlined arrayutilsisempty in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessoralso isempty was renamed to isnullorempty for clarityrelates to
426.0,547,1,0,0,1,1,1,1,0,refactored objectmethodsguru to a static utility class refactored objectmethodsguru to a static utility class removed unused methods and associated tests istostring mockitomethod method isequalsmethod method method ishashcodemethod method method renamed istostring to istostringmethod relates to
538.0,550,1,0,0,1,1,1,0,0,changed error message in case initialization for mock injection fails if a filed is annotated with injectmocks and the type of a field is an enum inner class interface or local class the error message is now _mock injection failed on field fieldname cause the type abstractcollection is an abstract class_
384.0,555,1,1,0,1,1,1,1,0,junit rules report unused stubs makes junit rules detect unused stubs introduces mockitolistener api see the use case in issue recreated pr with squashed commits
527.0,555,1,1,0,1,1,1,1,0,junit rules report unused stubs makes junit rules detect unused stubs introduces mockitolistener api see the use case in issue recreated pr with squashed commits
554.0,560,1,0,0,1,1,1,0,0,checkschecknotnull now throws iae instead of npe changes npe to iae see
332.0,568,1,0,0,0,1,1,0,0,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes yayhighlights the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs removed stubbinglistener api it could not work to the thread safety levels we support in mockito see also closes
401.0,568,1,0,0,0,1,1,0,0,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes yayhighlights the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs removed stubbinglistener api it could not work to the thread safety levels we support in mockito see also closes
541.0,569,1,0,0,0,1,1,0,0,improved the public api of mockingdetails highlights started exposing full mock creation information instead of just type to mock and extra interfaces changed public api but only for methods that were introduced in x so it is _not_ backwards incompatible change as far as is concerned
552.0,592,1,1,0,1,1,1,1,0,stylesheet tweaks for openjdk aimed to fix the javadoc rendering but the assumption was that the javadoc tool of the sun jdk will render javadoc the same way as openjdk unfortunately this is not the same the javadoc rendering of openjdk is a pre work that avoid the use of table elements this making the stylesheet incompatiblethis pr aims to fix that and thus bonus i changed the and in the javadoc this way we have aligned version numbers
497.0,615,1,1,1,1,1,1,1,0,returns_deep_stubs may try to mock final classes with deep stubs it was possible for generic metadata to be lost unusedthrough nested invocations on non generic types this could cause returns_deep_stubs to try mocking final classes which would result in a classcastexception apparently my other pr wasnt quite enough to fully fix this problem edited by mockito team
338.0,617,1,0,0,0,1,1,0,0,moves arity interfaces of java helper answers to public api the java helper interfaces have been introduced in however the public additionalanswersanswer family leak the functional interfacesthese _parameter arity_ interfaces can be public hence they are moved next to answer in the orgmockitostubbing packageim however in favor of adding the incubating annotation on those apis and related objects thoughts
548.0,619,1,0,0,0,0,1,0,0,from now on verification happens always call in other thre… should fix problems with and
601.0,619,1,0,0,0,0,1,0,0,from now on verification happens always call in other thre… should fix problems with and
596.0,623,0,0,0,0,0,1,0,0,updated the javadocs polishing the javadocs starting with this small pr issue updated since to instead added more docs around the verification collector
439.0,635,0,0,0,1,1,1,0,0,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument varargs by introducing a matcherapplicationstrategy this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches arg call and an other is used to perfrom the capturing argumentcaptor and argumentmatchers can now be mixed in varargs fixes no more npe when null is passed to an varargs added regression tests in varargstest are ignored cause they belong to other issues and fail currently reduced logic duplication
583.0,635,0,0,0,1,1,1,0,0,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument varargs by introducing a matcherapplicationstrategy this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches arg call and an other is used to perfrom the capturing argumentcaptor and argumentmatchers can now be mixed in varargs fixes no more npe when null is passed to an varargs added regression tests in varargstest are ignored cause they belong to other issues and fail currently reduced logic duplication
520.0,639,0,0,0,0,1,1,0,0,update travis configuration to also build on oraclejdk lets see if this actually works testing for
640.0,646,1,1,0,1,1,1,1,0,warns user to upgrade if java version is to low warns user to upgrade if java version is to lowalso took the opportunity to log other platform details if mock class cannot be created
653.0,654,0,0,0,0,1,1,0,0,renamed failuredetecter to failure detector also renamed misspelled issussessful to issuccessful fixes
707.0,711,0,0,0,0,1,0,0,0,adds throwable to arity answers also improved javadoc all in the title this should
727.0,746,1,1,1,1,1,1,1,1,add missing copyright headers add missing copyrights using license gradle plugin updated only source files test files were skipped existing copyright headers were not modified
731.0,771,1,0,0,0,0,1,0,0,implements retry rule for flaky tests previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in to gain back stability on the build
801.0,803,1,0,0,1,1,1,0,0,adds a warning for ibm j vms if mock generation fails related to this pr simply adds a warning for ibm j vms if the mock maker fails
770.0,807,1,0,0,0,0,1,0,0,new opt in stubbing strictness implemented in junit rules new api for rationale see for code review history see java existing api rule public mockitorule mockito mockitojunitrule proposed improvements rule strictness strictnesslenient rule strictness strictnesswarn is the defaultrule strictness strictnessstrict_stubs mockito default what strict stubbing means improved debuggability the test fails early when code under test invokes stubbed method with different arguments cleaner tests without unnecessary stubbings the test fails when there are any unused stubs declared cleaner more dry tests dont repeat yourself if you use mockitoverifynomoreinteractions you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out szczepans article on linkedin https wwwlinkedincom pulse curious how get even cleaner tests new mockito features faber
820.0,821,1,0,0,1,1,1,1,0,returnsargat to handle returning vararg as arrays attempt at fixing basically it makes the returnsargumentat answer a bit more smart about varargs but im not satisfied with the fix yet
818.0,823,1,1,0,1,1,1,1,0,only resolve instrumented method after validating that an instance is… this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a method instance which requires using a hashmap which causes an infitite loop upon mocking the hash map type
820.0,826,0,0,0,1,1,1,1,0,introduce validable answers for early validation of stubbing overviewcustom answers are now more robust users can add add validation logic to the answer implementation it can validate the return type early during stubbing in test rather than fail late during execution of code under test mockito team uses this api behind the hood for all custom implementations of answer interface now advanced users can leverage this new api too javaclass mycustomanswer implements answer validableanswer { note extra validableanswer interface public object answer invocationonmock invocation { answer implementation } public void validatefor invocationonmock invocation { throw mockitoexception if answer cannot be applied to given invocation }} implementationwhile trying to i noticed that answersvalidator knew too much about other answers to fix the design issue i propose the following design introduce validableanswer in public api which is a single method interface that doesnt extends answer each answer that wants to be validated hence implement this interfacebenefit reduced visibility of some methods in these answers each new answer that want to be validated can just by implementing the new contractvalidating returned value of a mocks default answer had to be handled differently
822.0,830,0,0,0,0,0,1,1,0,improves exception message in case a matcher is used for a primitive parameter this should help for cases like npe can be raised by the jvm on the callsite of a matcher returning object like any the thing is that the jvm does several thing like to allows a type to match a signature like t any type inference with java cast and unboxing however any can only return null so the jvm raises an npe on the cast opcode of course the problem isnt new but more possible due to java flexibility thats why mockito had for a long time the primitivewhen mockito is used with the junit runner or the junit rule theres a invaliduseofmatchersexception raised after the npe with a message about misplaced matchers this exception is raised because the matchers were not consumed by the mock since the npe is raised first so this exception is correct and can help the neophyte to discover the primitive variant like anyint
825.0,831,1,0,0,1,1,1,0,0,test clean up according to discussions for rememberinglisteners according to issue we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in that build was failing for some reason not obvious and had merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr
838.0,839,1,0,0,0,1,1,1,0,adds a matches pattern following discussion in it is sensible to add a mockito matcher that can take a pattern as an argumentthe usage is the same as matches string javawhen mockonearg matches patterncompile a z \\d\\d thenreturn although it allows to build more complex regex especially with regular expression flags
840.0,843,0,0,0,0,0,1,0,0,junit rule strictness can be tweaked per test method see the design and rationale at please review
860.0,861,0,0,0,0,1,1,0,0,backport release x changes to master fix for backport release x changes to master the fix for
384.0,865,1,0,0,0,1,1,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status address bric feedback getter javadoc review documentation for consistency mockitosession mockitosessionbuilder strictness mockitohint potentialstubbingproblem unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking
857.0,865,1,0,0,0,1,1,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status address bric feedback getter javadoc review documentation for consistency mockitosession mockitosessionbuilder strictness mockitohint potentialstubbingproblem unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking
898.0,865,1,0,0,0,1,1,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status address bric feedback getter javadoc review documentation for consistency mockitosession mockitosessionbuilder strictness mockitohint potentialstubbingproblem unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking
866.0,867,0,0,0,0,1,1,1,0,should not throw npe when custom exception fillinstacktrace returns null
860.0,868,1,1,0,1,1,0,1,0,jacaco synthetic fields are not anymore final in this internal assumed jacoco fields will always be static final obviously not jacoco changed that the simple fix was to make the source field _accessible_ instead of skipping this fieldhence removing the test exclusion
879.0,880,1,0,0,0,1,0,0,0,argumentmatchers javadoc grammar improvement grammar issue in argumentmatchers this implementation is due static type safety imposed by java compilershould be this implementation is due to static type safety imposed by java compilerthis pr fixes issue
879.0,881,1,0,0,0,1,0,0,0,argumentmatchers grammar fix cherry pick pr to the x branchthis pr should on this branch too
878.0,885,0,0,0,1,1,0,0,0,spy annotation reports better error message if instance creation is impossible this simple piece of code prevents the spyannotationengine to try create a spy instance for a some inner private class with different set of modifierswhile preventing execution it reports slightly better error messages before some time the cause was null this should
874.0,891,1,0,0,0,0,1,0,0,update to byte buddy fixes bridge method resolution for generic types
895.0,896,1,1,0,0,1,1,0,0,clarify documentation for consecutive stubbing as of now the documentation does not clarify the difference of behaviour between chaining multiple thenreturn statements and using multiple when thenreturn statements when someone attempts to perform consecutive stubbingi added a warning clarification in the documentation with a corresponding example so that its more clear especially for new users of mockito
814.0,905,1,1,0,0,1,1,0,0,a elements were missing the name attribute meaningful links probably never worked as expectedthe a elements were missing the name attribute so the browser couldnt find the matching part of the documentfor reference navigating to a fragment identifier for html documents and the text html mime type the following processing model must be followed to determine what the indicated part of the document is parse the url and let fragid be the component of the url if fragid is the empty string then the indicated part of the document is the top of the document if there is an element in the dom that has an id exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here if there is an a element in the dom that has a name attribute whose value is exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here otherwise there is no indicated part of the document
426.0,907,1,0,0,0,1,1,0,0,unified all number of invocations checker in numberofinvocationschecker this pr unifies the functionality of nongreedynumberofinvocationschecker numberofinvocationscheckerinorder and numberofinvocationschecker in static methods of the type numberofinvocationschecker this saves lines of code and increases readability on the call sides
426.0,908,1,0,0,1,1,1,0,0,simplified the creation of argumentsaredifferent exceptions relates to this pr simplifies the creation of argumentsaredifferent exceptions saving classes and lines of code
426.0,914,1,1,0,1,1,1,1,0,refactored removefirstline to a static utility class relates to refactored removefirstline to a static utility classi would like to unifiy removefirstline decamelizer and stringjoiner to a new type stringutil they all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes any thoughts
927.0,933,1,1,0,1,1,1,1,0,support for return type void in doesnothinganswer this pr allows to use donothing for methods with return type javalangvoid like void methods to solve this invocationinfoisvoid checks now the return type for the pseudo type of the keyword void or void
685.0,935,1,1,0,1,1,1,1,0,new feature enable mocking using constructor arguments motivation and design see to quote the requirement see in depth design in we already support spying on abstract classes by allowingparameterless constructor however there is no support forconstructor parametersthis has been asked about long time ago mockito api is not robustenough if it supports mocking with constructor but not when one hasany constructor parametersthis patch enhances the mocksettingsuseconstrctor method as suggested in the alternative api comment in the issue and addsoptional ellipsis arguments that are passed to the constructorthe patch streamlines the creation of mocks via constructors to asingle flow where using a no arg constructor or an enclosing classare just private cases of this flow and dont require their ownspecial treatment
680.0,942,1,1,0,0,1,1,0,0,allow spying on interfaces so that it is convenient to work with java default methods
688.0,972,0,0,0,0,0,1,0,0,verifies acceptance test to prevent future regression added an acceptance test to verify
974.0,979,1,1,0,1,1,1,1,0,fix to get correct stubbing location with inline mocking fix stacktracefilter to support inline mocking add one test to stacktracefiltertest add stubbinglocationtest into inline subprojectthis pr
976.0,980,1,0,0,1,1,1,0,0,resolve ambiguous constructors with the current code introduced in mockito by commit a c calling mocksettingsuseconstructor with an argument list that would be applicable to more than one constructor would fail with an orgmockitointernalcreationinstanceinstantiationexception this behavior however is suboptimal as described in issue as it makes useconstructor less robust than the java compiler which is able to resolve such ambiguitieswith this patch mockito will attempt to match the constructor with the most specific parameter types a constructor x is considered more specific than a constructor y if they are both applicable to the given argument list constructor x has at least one parameter which is a further specialization of the corresponding parameter of constructor y ie paramxisassignablefrom paramy constructor y has no parameter which is a further specialization of the corresponding parameter of constructor x as defined aboveeg consider the following class public class someclass { someclass object o {} someclass string s {} }without this patch calling mock someclassclass withsettings useconstructor string would fail with this patch such a call would invoke the someclass string constructoras noted above this pr fixes issue
982.0,983,1,1,0,1,1,1,1,0,break cyclical compile time dependency on hiderecursivecall
929.0,985,1,1,0,0,1,1,0,0,update javadoc about the mockito inline artifact this pr in the javadoc i write that the first version of mockito inline is this artifact was actually offered in version but or earlier it did not work due to the issue so i write like that
981.0,985,1,1,0,0,1,1,0,0,update javadoc about the mockito inline artifact this pr in the javadoc i write that the first version of mockito inline is this artifact was actually offered in version but or earlier it did not work due to the issue so i write like that
989.0,995,1,0,0,0,1,1,0,0,verifyzerointeractions guarantees zero interactions instead of just delegating to verifynomoreinteractions verifyzerointeractions no longer delegates to verifynomoreinteractions instead it fetches the number of invocations made to the mock and checks ifthey are zero failing otherwiseim not sure if the style of my code complies with mockito please let me know what to change and where to look to make it more mockitoish
911.0,1018,1,1,0,0,1,1,0,0,enabled continuous delivery via robust mockito release tools project continuous delivery pipeline almost implemented removed tons of release logic complexity now all that is a part of general purpose mockito release tools project the new release automation should be much easier to test
1071.0,1076,0,0,0,1,1,1,1,0,validation in returnargumentat int in case of type erasure on the parameter the parameter type inference takes now the type of the actual instanceinto account to avoid type erasure issues in case the parameter isgenericsee also https githubcom mockito mockito issues issuecomment
1065.0,1079,1,0,0,1,1,1,0,0,add information about donothing method to cannotstubvo…
1083.0,1090,1,1,0,1,1,1,0,1,interfaces only declare tostring implicitly and should t… …herefore override it explicitly from the inline mock maker
1088.0,1091,1,1,0,0,1,1,0,0,updating documentation of verify feature to correct a s… updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut pasted and run verbatimthe documentation presents the following example of the verify exact number of invocations feature using mock mockedlistadd once mockedlistadd twice mockedlistadd twice mockedlistadd three times mockedlistadd three times mockedlistadd three times following two verifications work exactly the same times is used by default verify mockedlist add once verify mockedlist times add once exact number of invocations verification verify mockedlist times add twice verify mockedlist times add three times verification using never never is an alias to times verify mockedlist never add never happened verification using atleast atmost verify mockedlist atleastonce add three times verify mockedlist atleast add five times verify mockedlist atmost add three times the last but one line says verify mockedlist atleast add five times this could be confusing to someone using these examples as it would result in a toolittleactualinvocations failure being reported by mockito this is because in the example the add method is never called with the string five times in order to have this example make sense in the way i think it should ive replaced the string five times with three times as suggested by szczepiq cheerstim cooke
1117.0,1119,1,0,0,0,1,1,1,0,made it possible to delay the return of a mock or spy this is a useful aid in debugging race conditions and other synchronicity problems
1110.0,1121,1,1,0,1,1,1,1,0,improve and develop apis required for framework integrators mockito does not do static mocking at the moment powermockito does powermockito uses a lot of internal mockito apis exposing the community to issues and wasted productivity on version upgrades we want mockito apis to be easily extensible by framework integrators such us powermockito without compromising api simplicity and consistencyall proposed changes are backwards compatible in accordance to mockitos compatibility contract in short limited changes to orgmockito types freedom to change orgmockitointernal public api changesthe full discussion on the use cases implementation options and decisions is in ticket new public method for creating mock creation settings object javamockitowithsettings name “my mock” build fooclass framework integrators can now provide custom mockhandler via mockmakergetmockhandler previously it we didn’t offer this capability because we didn’t have convincing use cases that it was needed public api considerations framework integrators may not provide custom implementation of invocationcontainer at this stage this part of api is accessible via public mockmakergetmockhandler getinvocationcontainer method there are no convincing use cases that exposing this new public api is needed
1117.0,1122,1,0,0,0,1,1,1,0,made it possible to delay the return of a mock or spy a cherry picked version of for the x branch
1135.0,1136,1,1,0,1,1,1,1,0,properly resolve visibility bridges resolve the method hierarchy by byte buddys method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect
86.0,1146,1,0,0,1,0,1,0,0,enable stubonly on mock annotation since issue withsettings has a api stubonly which speed up mocked stub a lotsin my case stubonly huge amount of test overhead stacktrace and avoid invocation footprint list grow too large and cause oomhowever the api is not available with mock annotationi had to move tens of mock annotation from mock foo foo into mockitomock fooclass withsetting stubonly mock stubonlytrue public foo lightweight suggest adding the above api for convenience check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
1155.0,1162,1,0,0,0,0,1,1,0,fix for thenthrow class fix for mockitothenthrow class now fails when the given throwable type is not declared on the stubbed method
1179.0,1181,1,1,0,1,1,0,1,0,fix performance regression caused by use of method graph compiler in order to properly discover visibility bridges we have to run a full analysis of the method graph the compilation of this method graph is rather expensive and we require to cache a computed graph the caching is however non trivial as it references classes which might be unloaded in order to avoid a leak we cache classes using non strong referencesthis requires some real world experience to discover if this caching mechanism suffices
1180.0,1186,1,1,0,1,1,1,1,0,compare method of graph to defined form of method compare against non generic method when deciding if a method should be stubbed
1191.0,1192,1,0,0,0,1,1,1,0,added new public api for spring boot use case not intended for merging yet submitted for visibility for design and rationale see for usage see verificationstartedlistenertest classthis is still experimental so refactorings error handling javadoc is missing
1198.0,1202,1,0,0,0,1,1,0,0,java ci build for mockito x summaryprovide java travis build to ensure java compatibility in at least tested use casessupport for java was improved in gradle x and that version is being used due to some issues with newer gradle versions some other configuration changes were required as well as jacoco version has been bump check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
1191.0,1203,1,0,0,0,1,1,0,0,documentation issue added unit tests while working on new verification started listeners i found an instance of incorrect documentation i added unit tests and simplified the documentation currently contrary to what the javadoc said we do guarantee the order in which invocation listeners get notified some of our users might have started to depend on this behavior i added unit tests and the javadoc in general it is seems useful to guarantee the order this way the api is more predictable easier to use
1211.0,1214,1,1,0,0,1,1,0,0,improve deprecated javadoc this pull request by improving the deprecated javadoc of mockitodebug mockitodebugger and mockitodebuggerprintinvocations object mocks by adding the additional information on how to retrieve an actual instance of the mockitodebugger interface
1206.0,1216,1,1,1,1,1,1,1,0,adresses allow opting out from annotation copying within mocks the mocksettings now include an option to disable copying of annotations to mock classes
1183.0,1217,1,1,0,1,1,0,1,0,make override check more forgiving to accomondate kotlin compile patterns the override check implies java compile patterns such that kotlin method resolutions could fail for void return types which do not fit into javas reference type only generic hierarchies this pr eases this restriction to fix this resolution for kotlini added the test case of the reported issue as a reference
117.0,1219,1,0,0,0,0,1,0,0,add regression test for issue regression that shows the issue of i am unable to reproduce this locally lets see what travis sayscloses
445.0,1221,1,0,0,1,1,1,0,0,mockitoextension for junit discussion of all thanks to the junit team sbrannen for that great api the implementation was straight forward and the docu is top notch not comparable to a junitrule or runner implementation one can feel the hard work the here provided mockitoextension allows to mock spy validate like the well known mockito junitrule runner this is still work in progress feel free to commentusage java extendwith mockitoextensionclass class junit test { mock private dependency mock test void checkmockcreation { when mockfoo thenreturn hello junit mockfoo verify mock foo }}
1130.0,1228,0,0,0,1,0,0,0,0,add checkreturnvalue to stubbing verification methods introduce a new annotation checkreturnvalue and add this to methods like when and verify such that static analysis can verify the value is actually used this makes sure developers can get warnings on build time instead of run time with our internal validatestate
904.0,1247,1,0,0,1,1,1,0,0,remove several container classes and inline code remove several classes that were containers for code that is easier to be inlined they were only referenced once or never at all this makes it easier to reason about the code while also maintaining less code and classescloses
1254.0,1257,1,1,0,1,1,1,1,0,and improved check for self invocation better checks for recursive calls and guards internally used jdk types fixes
1256.0,1257,1,1,0,1,1,1,1,0,and improved check for self invocation better checks for recursive calls and guards internally used jdk types fixes
106.0,1258,1,1,0,1,1,1,0,0,prevent class loading race condition allow singleton locking in context with class loading races
1262.0,1268,1,1,0,0,1,1,0,0,update doc for answerscalls_real_methods update the documentation for the answerscalls_real_methods according to and also included a note with recommendation not to use when thenreturn for partial mock
1130.0,1270,1,1,0,1,1,1,0,0,cleaner code for mockito users by better integration with static code checkers more checkreturnvalue builds on
792.0,1272,1,1,0,0,1,1,0,0,strictness configurable per mock stubbing today we have strict stubs feature a key enabler for cleaner tests and improved debuggability strict stubs dont work well with common stubbing pattern they also dont like when we call stubbed methods with unexpected arguments even though sometimes it is legit for more see solution java test public void demo { lenient method on mocksettings interface foo mock mockitomock fooclass withsettings lenient lenient method on mockito class mockitolenient when mockfoo thenreturn mockitolenient doreturn when mock foo } for more see public api changes new methods mockitolenient mocksettingslenient mockcreationsettingsislenient stubbinggetstrictness new interfaces basestubber extracted out from existing stubber interface so that we can reuse api with lenientstubber lenientstubber instance returned by mockitolenient other changes made orgmockitonotextensible annotation public so that we can use it in subpackages
108.0,1280,0,0,0,0,1,1,0,0,update strict_stubs documentation for verifynomoreinteractions
1232.0,1301,1,0,0,1,1,1,1,0,extend mockitosession builder api to enable usage by testing frameworks the first commit in this pr in the additional commits ive taken the liberty to implement my proposals from add mockitosessionbuildername string to pass a name from the testing framework to the mockitosession add mockitosessionbuilderlogger mockitosessionlogger to customize the logger used for hints warnings produced when finishing mocking useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter add mockitosessionfinishmocking throwable to avoid potentially confusing warnings for failing tests add mockitosessionsetstrictness strictness to change the strictness of the current session there were two test cases requiring that each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the junitrule implementation to use it
1306.0,1307,1,0,0,0,1,1,0,0,update public api of invocationfactory needed for android static mocking a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior a callable that throws athrowable
1279.0,1310,0,0,0,0,1,1,0,0,ensure isolation of stubbings compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal corner cases only possibly incorrect tests and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods javawhen mockfoo the swer { othermockbar } we need to ensure that mockfoo and othermockbar dont interfere prior to this bugfix this scenario resulted in various problems like stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see solutionthe solution is based on great pr by r smirnov huge thanks to r smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as documented mockito syntax caveat thank you r smirnov for persistence and getting this
1296.0,1310,0,0,0,0,1,1,0,0,ensure isolation of stubbings compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal corner cases only possibly incorrect tests and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods javawhen mockfoo the swer { othermockbar } we need to ensure that mockfoo and othermockbar dont interfere prior to this bugfix this scenario resulted in various problems like stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see solutionthe solution is based on great pr by r smirnov huge thanks to r smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as documented mockito syntax caveat thank you r smirnov for persistence and getting this
1314.0,1319,1,0,0,0,1,1,0,0,include all the invocation in mock verification error message have changes the verify error message to include all the invocation instead of including just one undesired invocationpreviously we have message like wanted time at but was times undesired invocation at this pr changes it to wanted time at but was times at at to make the error message consistent the similar changes was made for too little invocations casethe message wanted times at but was times at changed to wanted times at but was times at at
111.0,1320,1,1,0,1,1,1,1,0,avoid bytebuddy import issue to enable repackaging without bytebuddy this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectorytest grep r e import org\mockito\internal\creation\bytebuddy\ ^\ $ src main does not return anythingoffers workaround for
1326.0,1327,0,0,0,0,1,0,1,0,reduce the allocation rate for the typical use of locat… …ionimpla trivial one but should be very useful as i noticed this class being instantiated quite a lot
1346.0,1349,1,0,0,1,1,1,0,0,different mocks are used for mock and injectmock in the same test class with junit extension fix mockitoextension which has init mocks with two identical test instances which cause the mock to be initialized and injected two times
1348.0,1350,1,1,0,1,1,1,1,0,support local parameters in test methods with junit jupiter note that this implementation differs from the prototype implementation of the junitteam instead it will do not do any parameter resolution between test methods
1367.0,1368,0,1,1,1,1,0,0,0,resolve the correct protection domain for the codegen package when using reflection
1364.0,1369,1,1,0,1,1,1,0,1,performance improvements use less expensive method graph compiler for inline mock maker update byte buddy for general performance improvements and bug fixes also fixes javadoc warning
1240.0,1378,1,1,0,1,1,1,0,1,avoid circularity avoid endless loop during mock creation if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop described in comment it is a bit difficult to reproduce this issue in our tests it mainly happens with classes generated by kotlin or scala and requires the inline mock maker and a jdk or older if we want to add such a test we can copy the test from https githubcom guenhter mockito final class kotlin problem
1386.0,1387,1,0,0,0,0,1,0,0,adding atmostonce rename threadverifiescontinuoslyinteractingmocktest and one todo hii would like to make a quick contribution on this projecti add atmostonce it seems not to be a big feature i just want to highlight the fact you have the function atleastonce but nothing for the atmostonce casei rename the testclass threadverifiescontinuoslyinteractingmocktest on threadverifiescontinuouslyinteractingmocktest and the todo on tostring from hamcrestargumentmatcher
1390.0,1391,1,0,0,0,0,1,0,0,make mockitoextension constructor public it is possible to register an extension for automatic use using javas serviceloader mechanism projects may want to provide their own meta inf file to avoid tediously adding mockitoextension to tests since it is very common however serviceloader requires the class to have a no args public constructor so the current extension cannot be used with the serviceloader mechanism check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention fixes in the description _if relevant_ at least one commit should mention fixes _if relevant_
1401.0,1402,1,0,0,0,1,1,0,0,correctly handle varargsmatcher check for hamcrestmatchers
1419.0,1426,1,1,0,1,1,1,0,1,mockito on java ea requires dnetbytebuddyexperimentaltrue system property to be set to let bytebuddy use asm api version asm _expermiental and use the same one in inlinebytecodegenerator
1438.0,1439,1,1,0,0,1,1,0,0,javadoc update ignorestubs to include strictness it updates ignorestubs docs to include strictness information
793.0,1458,1,0,0,0,1,1,0,0,add stubbinglookupevent and notifier a part of this pr adds stubbinglookupevent and stubbinglookupnotifier as a part of the issue
1460.0,1463,0,0,0,0,0,1,0,0,prevent stubonly from being verified this pr adds assertion to verification methods to prevent stub only mock from being verified verify verifynomoreinteractions inorder
1466.0,1543,1,0,0,0,1,1,1,0,exposed new api stubbinglookuplistener exposed new public api based on an internal api stubbinglookuplistener as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of onion skin apithis pr replaces very nice pr from marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr marchpig thank you for understanding
793.0,1543,1,0,0,0,1,1,1,0,exposed new api stubbinglookuplistener exposed new public api based on an internal api stubbinglookuplistener as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of onion skin apithis pr replaces very nice pr from marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr marchpig thank you for understanding
1541.0,1544,1,0,0,0,1,1,0,0,prevent premature garbage collection of mock objects if using one liner stubs the mock object may be premature cleaned up and returning the mock fails with an exception this occurs because there is no strong reference to the mock itselftherefore we need to maintain a strong reference to the mock until weve returned it while making sure that the gc can still cleanup the mock correctly when neededcause implementations of basestubbing are intended to be cleaned up after usage we can store a strong ref to the mock there getmock then uses the strong ref instead of the weak ref provided by the invocation after cleaning up the implementations of basestubbing there is no strong ref to the mock itself anymore except the one in the test class i tried some alternative solutions but i believe this is the only way it works bind last mock creation to mockingprogress does not work because of this when mock testclass class gettestclass thenreturn mock testclassclass getmock bind mock of last invocation for stubbing to mockingprogress does not work because of this when mock testclassclass getstuff thenreturn x thenreturn when mock testclassclass getstuff thenreturn xxx getmock getstuff getmock
151.0,1549,1,0,0,0,1,1,0,0,issue with leftover state when stubbing with bad throwables issue with leftover state when stubbing with bad throwables
155.0,1552,0,0,0,0,0,1,0,0,minimal test to repro generic issue with smart nulls created a minimal test that reproduces bug with smart nulls and generics see issue
155.0,1554,0,0,0,0,0,0,0,0,verifyerror when junit is in the classpath mockito will throw verifyerror during its junit detection when junit is in the classpath because the code only supports junit and laterthis change will catch this error and pretend that junit is not thereissue
1551.0,1576,0,0,0,0,1,1,1,0,fix bug cce on smart not null answers this pr intends to for fix it the returnssmartnulls answer use now some reflection to find the correct return type instead of the javautilobject when the return type can be found it will start to retrieve empty values using the answer returnsmoreemptyvalues & returnsemptyvalues before creating a new mock instanceas you may notice in tests there is still one case where the return type cannot be found in this case the answer will return a null instead of object mocki think it may be possible to improve this code any suggestion will be welcome
1577.0,1582,1,0,0,0,1,1,1,0,refactoring naming rule for sealed packages to better work with the java module system the java module system consideres packages of all named modules to be sealed this results in the naming strategy to rename classes such that they cannot subclass package private types
1584.0,1585,1,1,1,1,1,1,1,0,where multipleparentclassloader lacks of classloaders of superclasses the multipleparentclassloader is now composed also with classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy
1587.0,1588,1,0,0,1,1,0,0,0,remove unnecessary loop from injectingannotationengine removes injectingannotationengine processinjectmocks method that does an unnecessary loopfixes https githubcom mockito mockito issues
1578.0,1596,0,0,0,0,0,1,0,0,outer class mocks unavailable from inner class i opened issue a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression reported to be working in the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_ problem junitrule detects an unfinished mocking session when an inner class is detected fix if a mockitosession has been established for junitrule then use that and init mocks of the inner class tests within an inner class ensure mocks are accessible override outer class values when desired retain original values if not overwritten demonstrated with debechtejunit junit hierarchicalcontextrunner snapshot
353.0,1596,0,0,0,0,0,1,0,0,outer class mocks unavailable from inner class i opened issue a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression reported to be working in the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_ problem junitrule detects an unfinished mocking session when an inner class is detected fix if a mockitosession has been established for junitrule then use that and init mocks of the inner class tests within an inner class ensure mocks are accessible override outer class values when desired retain original values if not overwritten demonstrated with debechtejunit junit hierarchicalcontextrunner snapshot
357.0,1612,1,0,0,0,1,1,1,0,return null instead of causing a cce this solves a large number of edge cases where null will actuallyremove the runtime classcastexception this essentially negates thewhole mockitocast errorprone check we can still not support every usecase but causing a npe instead of a cce does not seem to make thisworsei am still running internal tests within google to see if there are anyregressions but i already saw that some of the test failures we hadwith bytebuddy were resolved with this particular patchnote that this now fully closes a previous pr resolved the sameissue with returnssmartnulls
1615.0,1617,1,0,0,0,0,1,1,0,with mocking of javautil classes i hope the test is correct at least it failed before and succeeds now
1532.0,1619,1,1,1,1,1,1,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them and
1533.0,1619,1,1,1,1,1,1,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them and
1614.0,1619,1,1,1,1,1,1,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them and
1618.0,1620,1,0,0,0,1,1,1,0,fix strict stubbing profile serialization support when strict stubs profile is enabled mock serialization doesnt workthis pr fixes this problem
1621.0,1624,1,1,0,1,1,1,1,0,handle terminal type var with bounds this pr aim to fix the issue described in the issue being that terminal type variable arguments were not looked up for their bounds
1642.0,1644,0,0,0,0,1,1,0,0,verificationcollector to handle non matching args and other assertions this fix for widens the catch in verificationcollectorimpl so that it will catch any assertionerror rather than just mockitoassertionerror in this way any comparison failures such as the built in argument comparison when running under junit will also be collected rather than propagating through to the test frameworkthere are also two commits which are more cosmetic improvements to verificationcollectorimpltest rename assertatleastonefailure to assertexactlyonefailure more accurate description of what it does change assertfail to assertjs assertbecauseexceptionwasnotthrown produces better diagnostics in the case of a failure
166.0,1665,1,0,0,1,1,0,1,0,new public api invocationgetargumentsasmatchers new public api invocationgetargumentsasmatchers useful for advanced integrations such as mockito scala some internal refactorings that provide temporary help with mockito scala integration
1663.0,1667,1,1,0,1,1,1,0,0,improved ide experience for junit visual comparison failure when junit mockito is used in modern ide idea eclipse we now show visual comparison failure pop up for certain mockito exceptions such as argumentsaredifferent
1599.0,1672,0,0,0,0,1,1,0,0,report initialization failures per test method prior to this commit defaultinternalrunner threw an exception when mockitoannotationsinitmocks failed from the overridden withbefores method instead it now returns a statement that isresponsible for initializing potential exceptions are then handled byjunit regardless whether version or beta is used insteadof reporting a class level error junit will now report a failure foreach test method in such test classesrelated issue junit team junit read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
1692.0,1693,1,0,1,0,1,0,0,0,make mockitonotextensible service loadable this way error prone can find the plugin when mockito errorprone is added to the annotation processor classpath
1542.0,1701,1,0,0,1,1,1,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of with the tests and implementation rebased on release x
1556.0,1701,1,0,0,1,1,1,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of with the tests and implementation rebased on release x
1623.0,1708,1,0,0,1,1,1,0,0,rename toolittleactualinvocations rename the exception toolittleactualinvocations totoofewactualinvocations as this is more correct english as thisexception is public api we rename by subclassing and deprecating theoriginal rename all tests and internal methods that were referencingthe old name by aligning with the new namecheck list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
1713.0,1714,1,1,0,0,1,1,0,0,fix typo in mockitojava javadoc i was confused and tried to look for verifynomoreinvocations when i came across this javadocshopefully this prevents further confusion
298.0,1715,1,0,0,0,0,1,0,0,replaces objenesis references from stubbing classes with plugin equivalents this enables the ios mockito plugin to upgrade to v
1717.0,1718,1,1,0,1,1,1,0,1,configure the methodvisitor for java compatibility im looking into adding a unit test if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java
1716.0,1723,0,0,0,0,0,0,0,0,change implementation of exceptionfactory to explicitly test for dependent classes the original implementation of conditional opentest j support relied on some implicit behaviour of the java classloader to generate and catch the exception at the right time it seems that this behaviour is not always exactly replicated in all environments for example in where mockito was being used in an instrumentation test that was being run on an android emulatorthe new implementation is a bit more direct in how it tests for the dependent classes the existing test cases still pass and matejdro confirmed that this his problem
977.0,1733,1,1,0,1,1,1,1,0,verifynointeractions guarantees no interactions with mock with i provided a fix to and however that pr targeted master which eventually became old x and its code didnt make it into release x and should be reopenedi have back ported that pr to target release x verifyzerointeractions is marked as deprecated and a new verifynointeractions is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if when this code will ship javadocs contain a placeholder since xx
989.0,1733,1,1,0,1,1,1,1,0,verifynointeractions guarantees no interactions with mock with i provided a fix to and however that pr targeted master which eventually became old x and its code didnt make it into release x and should be reopenedi have back ported that pr to target release x verifyzerointeractions is marked as deprecated and a new verifynointeractions is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if when this code will ship javadocs contain a placeholder since xx
1743.0,1745,1,1,0,0,1,1,0,0,clarify default answer in api changes postponed to default answer has not been changed in
1513.0,1760,1,1,0,0,1,1,0,0,minor bug fixes removed typofixes added missing tag to fix javadocsupersedes and closes
1747.0,1760,1,1,0,0,1,1,0,0,minor bug fixes removed typofixes added missing tag to fix javadocsupersedes and closes
1758.0,1762,1,0,0,1,1,1,1,0,method generictypeextractorfindgenericinterface always … …returns first interface
1769.0,1773,0,0,0,0,1,1,0,0,clarify default strict stubbing behaviour in similar to as requested by timvdlippe in
178.0,1781,1,0,0,0,1,1,0,0,close file handle to avoid a file handle leak fix a small file handle leak which pops up when running tests with file leak detector
1780.0,1781,1,0,0,0,1,1,0,0,close file handle to avoid a file handle leak fix a small file handle leak which pops up when running tests with file leak detector
1786.0,1787,1,1,0,0,1,1,0,0,clarify differences between timeout and after tries to improve the javadoc for timeout to differentiate it from after directly in the first sentence
1630.0,1788,0,0,0,0,0,1,0,0,upgraded junit jupiter we need higher version of junit jupiter to reproduce and added a test to enhance coverage
1630.0,1789,1,0,0,1,1,1,0,0,junit jupiter parallel issue this fix improves mockito junit jupiter extension however it does not completely resolve all kinds of parallel issues when nested test classes are used ill open a separate ticket for it
1791.0,1798,1,1,0,0,1,1,0,0,fix typo in the wiki link check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention fixes in the description _if relevant_ at least one commit should mention fixes _if relevant_
1587.0,1810,0,0,0,0,0,1,0,0,revert remove unnecessary loop from injectingannotationengine reverts mockito mockito related to heres a pseudo code to describe the issues around this issue before while clazz objectclazz { val mocks aggregatespyormockfields clazzgetmockfields val fields aggregateinjectmocksfields clazz val ret tryconstructorinjection clazz fields mock if retfieldwasinitializedusingconstructorinjection { trysetterorpropertyinjection clazz fields mock } clazz clazzgetsuperclass } after val mocks aggregatespyormockfields clazzgetmockfields val fields aggregateinjectmocksfields clazz val ret tryconstructorinjection clazz fields mock if retfieldwasinitializedusingconstructorinjection { trysetterorpropertyinjection clazz fields mock } detailsbefore if the injectmocks field has a field that not listed in the constructor argument will fill by setter property injection at the nd loop 😃it may not the expected behaviors by mockito authors but some users code depends on this behaviormy suggestion is to revert the remove unnecessary loop from injectingannotationengine by lihmeh · pull request · mockito mockito · github at this time
1771.0,1813,1,1,0,1,1,0,1,0,upgrade byte buddy to from release notes commits raphw byte buddy byte buddy byte buddy
181.0,1818,1,1,0,0,1,1,0,0,add duration overloads add new javatimeduration based public apis to mockito after and timeout and deprecate the corresponding long based public apisplumb those duration instances through the internals of mockito
181.0,1819,0,0,0,0,1,1,0,0,deprecate mockitohamcrest this class was used during the migration period from mockito andmockito but is no longer necessary to be able to remove ourdependency on hamcrest we should remove mockitohamcrestin response to
1767.0,1821,0,0,0,0,1,1,0,0,guard against multiple evaluations of before statement some rules evaluate the base statement multiple times eg to executetests repeatedly the changes made in led to an exception in suchcases because the mockitolistener was registered multiple times nowwe only add the listener the first time the statement is evaluated inorder to restore the old behavior
1815.0,1845,1,1,0,1,1,1,0,0,revert add duration overloads reverts mockito mockito
1846.0,1847,1,0,0,1,1,1,0,0,undetected unused stubbing when matching previous stubbed call
1848.0,1849,1,0,0,1,1,1,1,0,performance optimization by using methodgetparametercount where possible hias described in we could make use of methodgetparametercount in order to save some overhead from unnecessary cloning caused methodgetparametertypes as this is my first contribution to mockito let me know if i can do something to helplet me know what you thinkcheerschristoph
522.0,1850,1,0,0,0,1,1,1,0,basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for is caught with the following exception javalangillegalstateexception failed to install bundle mockito core jar at orgmockitoosgitestosgitestsetup osgitestjava snipped caused by orgosgiframeworkbundleexception error occurred installing a bundle at orgeclipseosgistoragestorageinstall storagejava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgmockitoosgitestosgitestsetup osgitestjava morecaused by javalangillegalargumentexception invalid range invalid format at orgosgiframeworkversionrange versionrangejava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestorageinstall storagejava morecaused by javautilnosuchelementexception at javautilstringtokenizernexttoken stringtokenizerjava at orgosgiframeworkversionrange versionrangejava more the osgi test project consists of three source sets a regular junit test source set with a single class osgitest starts an osgi framework installs mockito core byte buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework a source set testbundle thats built to an osgi bundle using the bundle task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle a source set otherbundle thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details the test source set only has compile dependencies on the osgi apis and junit ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used the test cases are run by loading classes from the test bundle that all implement runnable this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework the osgi bundles are built using the bnd gradle plugin instead of the deprecated osgi plugin in gradle the reason is both future proofing to not impede a migration to gradle in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains
678.0,1850,1,0,0,0,1,1,1,0,basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for is caught with the following exception javalangillegalstateexception failed to install bundle mockito core jar at orgmockitoosgitestosgitestsetup osgitestjava snipped caused by orgosgiframeworkbundleexception error occurred installing a bundle at orgeclipseosgistoragestorageinstall storagejava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgmockitoosgitestosgitestsetup osgitestjava morecaused by javalangillegalargumentexception invalid range invalid format at orgosgiframeworkversionrange versionrangejava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestorageinstall storagejava morecaused by javautilnosuchelementexception at javautilstringtokenizernexttoken stringtokenizerjava at orgosgiframeworkversionrange versionrangejava more the osgi test project consists of three source sets a regular junit test source set with a single class osgitest starts an osgi framework installs mockito core byte buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework a source set testbundle thats built to an osgi bundle using the bundle task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle a source set otherbundle thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details the test source set only has compile dependencies on the osgi apis and junit ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used the test cases are run by loading classes from the test bundle that all implement runnable this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework the osgi bundles are built using the bnd gradle plugin instead of the deprecated osgi plugin in gradle the reason is both future proofing to not impede a migration to gradle in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains
1853.0,1854,1,0,0,1,0,1,0,0,allow mockitosettings to be inherited read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
1877.0,1878,1,0,0,1,1,1,1,0,revert undetected unused stubbing when matching previous stubbed call reverts mockito mockito based on feedback in
1880.0,1881,0,0,0,0,0,0,0,0,fix unnecessarystubbingexception javadoc
1875.0,1890,1,0,0,0,1,1,1,0,fix mocks throwing same instance with throwable class fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with dothrow class or thenthrow class this is achieved by moving the instantiation of the throwable into a new answer called throwsexceptionclass much like throwsexception then thenthrow class calls the swer answer with a new instance of throwsexceptionclass rather than thenthrow throwable similar for dothrow class dothrow throwable and doanswer answer timvdlippe just have a quick inquiry the test in uninstantiablethrowabletest is failing because it expects an instantiationerror to be thrown in the middle of stubbing check pr the new code doesnt instantiate in the middle of stubbing anymore how do i ignore the test or do i just delete the test file im used to using an annotation to ignore tests the pr should be ready after thats sorted and any other suggested changes
1894.0,1895,1,0,0,0,0,1,0,0,checkstyle error on windows windows has some issues with relative paths in checkstyle config files additionally it failed with an euro sign in codeplease verify if it also works on unix env
1910.0,1911,1,0,0,0,1,0,0,0,update description of argumentmatcher javadoc for any the doc says thatany is an alias of anyobject and any javalangclass but in the note it says thatsince mockito any class is not anymore an alias of this methodthis is confusing so the alias in the doc should exclude any javalangclass to simply beany is an alias of anyobject also update the same issue of anyobject check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
190.0,1914,1,0,0,0,0,1,1,0,fix pattern matcher not matching to subregion issue talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument provided with an invocation to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas matchermatch see comment in this commit fixes that by using matcherfind
1905.0,1914,1,0,0,0,0,1,1,0,fix pattern matcher not matching to subregion issue talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument provided with an invocation to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas matchermatch see comment in this commit fixes that by using matcherfind
189.0,1942,1,1,1,0,1,1,1,0,return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning null
1898.0,1942,1,1,1,0,1,1,1,0,return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning null
1712.0,1949,1,0,0,0,1,1,0,0,prepend description to assertionerror thrown in verification extended mockitoassertionerror to wrap instance of assertionerror in addition to mockitoassertionerror so that the various possible exceptions thrown for non matching arguments have description prepended to the message
1960.0,1961,1,1,0,0,1,1,0,0,document using mock with method parameters although weve called it out in the junit extension we should alsomake sure its clear in the core documentation to make it more visiblewe can fully quality the test annotation to make clear that it has tobe with junit closes junit extension https javadocio doc orgmockito mockito junit jupiter latest org mockito junit jupiter mockitoextensionhtml
1967.0,1968,1,1,0,1,1,1,0,0,correctly handle mocks with limited life cycle in listeners due to the limited lifetime of static mocks they cannot be validated within a mockito session since they might have expired when the validation is applied this patch excludes static mocks from all validation to support static mocks in the regular session validation we would rather need to trigger the validation upon release of any static mock
1855.0,1974,1,0,0,1,1,1,0,0,and improve error message when the inline mock maker cannot be used improves the error message and does not create a hard dependency on the compiler module it also points out that byte buddy can now emulate the attachment api using jna if its added to the class path
1988.0,1989,1,0,0,1,1,1,0,0,do not pass static mocks to regular listener callback does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks we have passed class objects to the listener to indicate a static mock the class object is of course itself not a regular mock and its cleaner to create a callback method of its own this way existing listeners remain logically backwards compatible including our own listener that is used within the junit runner we have only tested the rule i added a test for the runner too
2015.0,2017,1,1,0,1,1,1,0,0,only enable mocking of types right before instantiation to avoid circular interception of constructor creation
2015.0,2018,1,1,0,1,1,1,0,0,only enable mocking of types right before instantiation to avoid circular interception of constructor creation
2011.0,2023,1,1,0,1,1,1,0,1,initializes classes prior to instrumentation to avoid uncontrolled code execution triggeres initializers explicitly
1802.0,2034,1,1,0,1,1,1,1,0,escape mock during method dispatch on mock to avoid premature garbage collection under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch to avoid this we escape the mock instance during the dispatch to make sure that the gc cannot collect the object
198.0,2042,1,1,0,1,1,1,1,0,mock resolver plugin adds a plugin to allow for adding one or multiple mock resolvers this way instances that are provided to mockitos dsl do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as springthis works today with the subclass mock maker by accident as we read the mock state from the mock instance via a method which gets proxied if we ever find a more private appraoch this would however break springs mockito use and it is already broken with the inline mock makerby this spi spring could add an unproxy resolver to its mockito build up and make its proxied mocks compatible with mockito other frameworks could use the same approach if desired as this spi is genericcloses
2040.0,2046,1,1,0,1,1,1,1,1,do not exclude synthetic constructors from instrumentation byte buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic eg bridge methods for constructor instrumentation it is however crucial that no code is called during mock creation and that fields are copied during spy creation
206.0,2071,1,0,0,1,1,1,0,0,argumentmatcher error messages use lambda class names
2061.0,2071,1,0,0,1,1,1,0,0,argumentmatcher error messages use lambda class names
2092.0,2176,1,1,1,1,1,1,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
2094.0,2176,1,1,1,1,1,1,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
2105.0,2176,1,1,1,1,1,1,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
2173.0,2179,0,0,0,0,1,1,0,0,fix reversed order of verify parameters for consistency the parameters of the methodmockedstaticverify verificationmode verification have been swapped tomockedstaticverify verification verificationmode as this order is already used inmockitoverify t verificationmode fixes check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
2154.0,2193,0,0,0,0,1,1,0,0,javalangobject is now instrumented again seems like the object type does not ever need instrumentationtargetsremove objectclass in orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation set boolean was a bit over the top i e it does seem to break mocking of tostring when inherited from javalangobject i added a test for this which should have been there in the first place due to this i am still not sure if removing the line is safe even if the whole test suite is green please review carefully
2235.0,2236,1,0,0,0,1,1,0,0,bugfix verify on a wrapped mock fails pr for verify on a wrapped mock fails with unfinishedverificationexception
2238.0,2241,1,1,0,1,1,1,1,0,do not omit stack frames of causing class this pr will fix this problems described in the main cause wasnt the hiderecursivecall method but tryinvoke methodin tryinvoke the original stacktrace will be passed through the configured filter after it has been modified hiderecursivecall when calling hiderecursivecall the second argument current is set the the length of the stack trace of the causing exceptionthis will omit too much stack frames ultimately skipping the lines containing of the root exception causein this patch tryinvoke will try to find a better starting frame when an exception is caughtit will do this by investigating the created stack trace and look for the first entry matching the class name of the instance object given to tryinvoke this offset will then be given to hiderecursivecall as current argument instead of using the stack trace lengthif there is no instance object null the length of the stack trace is used like before
218.0,2259,1,0,0,1,1,1,0,0,but invoked here lists the invocation parameters supersedes and closes
2242.0,2263,0,0,0,0,0,1,0,0,make exceptions for inorderverify more standard spec… …ific adds nullinsteadofmockexception and notamockexception checks to inorderverify before checking if mocks were passed in during creation of inordersee for a description of the issueinorderverify mock now first checks if the passed argument is null and if the mock is in fact a mock and gives appropriate exception messages before checking if the passed in argument was passed during creation of inorder object and therefore giving a less specific error message code change loop checklist read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
2266.0,2267,1,1,0,1,1,1,1,0,include cause when fieldreader fails to access field simply passes the exception cause to the thrown mockitoexception
2273.0,2274,0,0,0,0,1,1,0,0,add missing parenthesis to javadoc example adds the missing parenthesis to the argumentmatcher javadoc example checklist read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
2257.0,2298,1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
2260.0,2298,1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
2282.0,2298,1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
2324.0,2298,1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
230.0,2306,1,1,1,1,1,1,1,0,use the parent classloader if the context classloader is a child of it this should only affect cases that previously would have thrown anexception
2303.0,2312,0,0,0,1,0,1,1,0,undo parent for multipleparentsclassloader ea f c adf cea e b a inadvertently undid a change from bc be d fb dcd b ced e fc which breaks behavior under some classloaders that special case mockito classes use of an explicit parent with multipleparentsclassloader appears to be discouraged in the documentation alsofollowup for
2303.0,2318,1,1,1,1,1,1,1,0,check package privacy of method params this patch handles methods where an interface uses a package private type as a param or return value without it the generated mock class will produce abstractmethoderror since its methods do not actually override the methods of the interfacesfollowup on