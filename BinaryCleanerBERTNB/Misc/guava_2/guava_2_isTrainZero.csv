prNumber,DB,DB,Interpreter,Logging,Thread,Data Structure,DevOps,DevOps,i18n,i18n,Logic,Microservices,ML,ML,Test,Search,IO,IO,UI,UI,Parser,Security,Cloud,Big Data,App,App,GIS,GIS,Util,Util,NLP,NLP,APM,APM,Network,prTitle,prBody,prIssue,issueNumber,issueTitle,issueBody,prComments,issueTitleLink,issueBodyLink,issue_Comments,isPR,isTrain,commitMessage,prCodeReviewComments,Util,Util,NLP,NLP,APM,APM,DB,DB,Multi Thread,Error Handling,Lang,DevOps,DevOps,i18n,i18n,Setup,ML,ML,IO,IO,UI,UI,Event Handling,App,App,GIS,GIS,Multimedia,CG
3117,0.0,0,0.0,0.0,1.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring of nonserializablememoizingsupplier  3107  9185822ee16cdd641657c0f8e7ead755c9e9a564  -------  <p> use splitter instead of string.split  in internetdomainname.  e56f1aa3d21b04eed8f5481d4103c05af5c51ec7  -------  <p> use splitter for ipv6  too. this eliminates usage of java.util.regex from this file (which is used via string.split  otherwise).  65a2a7de4ef4eea913f769a5cbbce6e35e1fccce  -------  <p> use diamond.  27eb336c2a2d9068878edbf49edcca493cd69cd8  -------  <p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.  it looks like the original change can cause an infinite loop in localcache.loadingvaluereference.get().  c2266a6ff8c6f298673688d6779b8b7368fe9147  -------  <p> don t enable use of unsafe.getlong() on aarch64 devices.  android devices may report to run aarch64 while running in 32-bit mode  and then crash when loading 64-bit values at unaligned addresses.  263bbcf6cf0cfae6768ddf9e9f3d749da555e422,,3107,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix tostring of nonserializablememoizingsupplier31079185822ee16cdd641657c0f8e7ead755c9e9a564-------<p> use splitter instead of stringsplit in internetdomainnamee56f1aa3d21b04eed8f5481d4103c05af5c51ec7-------<p> use splitter for ipv6 too this eliminates usage of javautilregex from this file (which is used via stringsplit otherwise)65a2a7de4ef4eea913f769a5cbbce6e35e1fccce-------<p> use diamond27eb336c2a2d9068878edbf49edcca493cd69cd8-------<p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174eit looks like the original change can cause an infinite loop in localcacheloadingvaluereferenceget()c2266a6ff8c6f298673688d6779b8b7368fe9147-------<p> dont enable use of unsafegetlong() on aarch64 devicesandroid devices may report to run aarch64 while running in 32-bit mode and thencrash when loading 64-bit values at unaligned addresses263bbcf6cf0cfae6768ddf9e9f3d749da555e422,    <!-- cla_yes --> || cla verified in #3107 ||,fix tostring of nonserializablememoizingsupplier,delegate is set to null once the value has been computed but is still referenced by the tostring method when its null use the value instead,first solution i thought of ||,1.0,0.0,dont enable use of unsafegetlong() on aarch64 devicesandroid devices may report to run aarch64 while running in 32-bit mode and thencrash when loading 64-bit values at unaligned addressesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid193371483,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3495,0.0,0,1.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  setfuture .  relnotes=removed  @beta  from  setfuture .  2c717c0092ad5abbbe6a34d426e084623c651354  -------  <p> upgrade maven-gpg-plugin to 1.6  fixes github.com/google/guava/pull/3490  c10a1647ffa968a96273d0961a6f9e0181a4fe70  -------  <p> clarify behavior of  immutablelist#copyof  for null argument.  3485  6f655fb940809499719ba7679a425961e39a8feb  -------  <p> make the incidentedges() documentation a little bit more clear.  b0a05097900ab2decf17681d3dcd9154f225d91f  -------  <p> simplify implementation of graphs.reachablenodes()  b917492c31401a2e6092c8f3f6bc60040c1dcebe  -------  <p> make the adjacentnodes() documentation a little bit more clear.  7a5a43b66a4f0a22077918404fa95a165ede2811  -------  <p> delete deprecated callwithtimeout().  fa13235f2c8edff9cd6c434f8a164250decf0249,,3485,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `setfuture`relnotesremoved `@beta` from `setfuture`2c717c0092ad5abbbe6a34d426e084623c651354-------<p> upgrade maven-gpg-plugin to 16fixes githubcom/google/guava/pull/3490c10a1647ffa968a96273d0961a6f9e0181a4fe70-------<p> clarify behavior of `immutablelist#copyof` for null argument34856f655fb940809499719ba7679a425961e39a8feb-------<p> make the incidentedges() documentation a little bit more clearb0a05097900ab2decf17681d3dcd9154f225d91f-------<p> simplify implementation of graphsreachablenodes()b917492c31401a2e6092c8f3f6bc60040c1dcebe-------<p> make the adjacentnodes() documentation a little bit more clear7a5a43b66a4f0a22077918404fa95a165ede2811-------<p> delete deprecated callwithtimeout()fa13235f2c8edff9cd6c434f8a164250decf0249,,clarify behavior of `immutablelist#copyof` for null argument,,afaik this is the behavior of all immutablecollection types the class javadoc on immutablelist explicitly refers to the immutablecollection which mentions this at the top so these changes donâ€˜t seem necessary || the factories are tested by other automated null tests so lets not add more teststhe existing doc is trying to say that the methods reject null elements but its saying it poorly so thanks for raising this how about this?```@throws nullpointerexception if {@code elements} contains a null element```that skips mentioning that `elements` itself might be `null` but we always skip that preferring to annotate the parameters that _can_ be `null` with `@nullable` (otherwise nearly all of our methods would have `@throws nullpointerexception if x y or z is null`) ||,1.0,0.0,delete deprecated callwithtimeout()relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid251819931,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3635,0.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33,,2677,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33, all non-googler contributions are taken from prs ||,add a mime type mpeg-dash (mpd files),this format is becoming a thing i couldnt find it in guavas media types,   ,1.0,0.0,fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3635,0.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33,,3210,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33, all non-googler contributions are taken from prs ||,quantilesscaleandindexes#computeinplace throws an unexpected arrayindexoutofboundsexception if the array indexes is empty,in `quantilesscaleandindexes#computeinplace` if the array `indexes` of `quantilesscaleandindexes` is empty an unexpected `arrayindexoutofboundsexception` is thrownthe problem is if the last argument(`int indexes`) of `quantilesscaleandindexes` constructor is length of 0 `computeinplace` passes an invalid negative value as the third argument to the private method `selectallinplace` and causes the error to reproduce run this code:```javaimport comgooglecommonmathquantilesimport javautilmappublic class emptyindexes {   public static void main(string args) {       int empty  {}       int scale  10       int dataset {0 1 2 3 4 5}       quantilesscaleandindexes sai  quantilesscale(scale)indexes(empty)       map<integer double> map  saicomputeinplace(datatset_double)   }}```the program throws `arrayindexoutofboundsexception`this is an unfriendly error that can be easily  by using `checkargument()` in constructor of `quantilesscaleandindexes`,link to proposed fix: [pr #3211]( || thanks for this @nhatdinh  i guess we missed this error case ||,1.0,0.0,fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3635,0.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33,,3211,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33, all non-googler contributions are taken from prs ||,check the array indexes in quantilesscaleandindexes is non empty,fix [issue #3210 ](https://githubcom/google/guava/issues/3210),   ,1.0,0.0,fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3635,0.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33,,3382,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33, all non-googler contributions are taken from prs ||,document the jdk 9+ alternative to `iterators#forenumeration`,- copied the phrasing from the various `streamsstream(optional*)` methods- didnt update the documentation in the android code base (which also mirrors the approach taken for the `streamsstream(optional*)` methods)- not completely sure whether the `unmodifiableiterator`/`iterator` distinction is worth pointing out,the jdk 11 build failures are unrelated to this change ||,1.0,0.0,fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3635,0.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33,,3580,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33, all non-googler contributions are taken from prs ||,simplify some code,remove some redundant if statementbesides i use toarray(new myclass[0])  replace toarray(new myclass[mylistsize()]) for improving the  efficiency  of the codehttps://stackoverflowcom/questions/174093/toarraynew-myclass0-or-toarraynew-myclassmylist-size,       i signed it! || clas look good thanks!  || -1 on the localcache changes just as commented in pr #3492 this fixes what is presumably reported by an ide at the expense of readability for no real reason  || @ljacqu ohsorry i prefer the version that i commit because i would do the same thing in my daily codingi can also understand that different projects have different coding styles do you mean that all the changes of if statement is unnecessary? if you think so i would revert them into the master version! || @ljacqu  i think that sum  0 needs to be preserved because sum  0 itself has the meaning of isempty positive thinking is more conducive to peoples understanding than negative thinkingif you do not agree with that i can also revert other if statement to the master versionlook forward to your reply || sorry if there was any misunderstanding iâ€˜m not in any way affiliated/involved with guava â€“ i just posted a comment as an individual passing by :) || @ljacqu  thatâ€™s all righti am very glad that you can reply to this prthanks for your suggestion ||,1.0,0.0,fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3636,0.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,1.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add testlib readme.  3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> change quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  fixes   relnotes= math :  quantiles   compute()  methods which return a  map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3,,3453,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add testlib readme34533b0f1e580b4e0bde8fd4806c832389d0aade4063-------<p> change quantiles compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes()fixes  `quantiles` `compute()` methods which return a `map` now return a map with entries in the same order in which the indexes were provided6a2d070ac268c138d6ad039605de54f535d5f5f3,,add testlib readme,,,1.0,0.0,change quantiles compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes()fixes  `quantiles` `compute()` methods which return a `map` now return a map with entries in the same order in which the indexes were provided-------------created by moe: https://githubcom/google/moemoe_migrated_revid272459623,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3637,0.0,0,1.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bump version  which went out of date since the previous cl was created.  90f4a1c88941d1d68ec2fc68397a5e11fefa7355  -------  <p> use if statement instead of for statement for a single item.  3633  020621e474e228b4b9c12dbd24badd9590b0af8e  -------  <p> upgrade maven source plugin from 2.1.2 to 3.1.0  fixes   e87b8807798808d5a526a6fd2f49b484bb4a846a  -------  <p> document the jdk 9+ alternative to  moreobjects#firstnonnull   fixes   145da12d85b536d6f2a527e1ccf2430147fa6b83,,3633,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> bump version which went out of date since the previous cl was created90f4a1c88941d1d68ec2fc68397a5e11fefa7355-------<p> use if statement instead of for statement for a single item3633020621e474e228b4b9c12dbd24badd9590b0af8e-------<p> upgrade maven source plugin from 212 to 310fixes  document the jdk 9+ alternative to `moreobjects#firstnonnull`fixes https://githubcom/google/guava/pull/3383145da12d85b536d6f2a527e1ccf2430147fa6b83,,code improvement `if` statement instead of a for `statement` to a single item,code improvement using `if` statement instead of a for `statement` to a single itemi also found some classes with empty methods that are not being used by the project is this correct? if these methods can be removed id like to open a pr for thisex: `allequalordering_customfieldserializerdeserialize(serializationstreamreader reader allequalordering instance)`,     clas look good thanks!  || thanksthe `customfieldserializer` methods are used through reflection by [gwt]( during its gwt-rpc serialization (were actually removing support for that at the beginning of next year but well take care of it then) ||,1.0,0.0,document the jdk 9+ alternative to `moreobjects#firstnonnull`fixes  by moe: https://githubcom/google/moemoe_migrated_revid272511395,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3654,1.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> switch to an internal annotation for ignoring jre requirements  3652  relnotes=removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> rename package-private duration apis:   saturatedtonanos() -> tonanossaturated()   saturatedtomillis() -> tomillissaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> suppress more goodtime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3,,3652,moe sync,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> switch to an internal annotation for ignoring jrerequirements3652relnotesremoved dependency on `animal-sniffer-annotations`3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86-------<p> rename package-private duration apis:  saturatedtonanos() -> tonanossaturated()  saturatedtomillis() -> tomillissaturated()#goodtimef3a053ea12ae808ddd52094d36fcd88fe95881f2-------<p> suppress more goodtime errors9e885c85265c3686aa876acebe6bb6bda18de1f3,,switch to an internal annotation for ignoring jre requirements, this completely removes the dependency on animal-sniffer annotations,(thanks!) ||,1.0,0.0,suppress more goodtime errorsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid274023658,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3677,0.0,0,0.0,0.0,1.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2019-10-31,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.  this is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.  82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c  -------  <p> handle stackoverflowerror from both pendingtostring and appenduserobject.  adds a bunch of tests to validate error handling in tostring code - verify that a future completing during the tostring call results in a done formatted string - verify that an exception thrown by pendingtostring doesn t cause tostring to fail - verify that cycles don t cause tostring to fail - verify that deep chains of setfuture don t cause tostring to fail  relnotes=catch stackoverflowerror in abstractfuture.tostring to prevent long chains of futures from failing tostring calls.  29981d416d6b4214e65360ad3d932ba0881a4c8f  -------  <p> update documentation  3507  8a0d6bb345341fc0ba91781070da5b522d4b714b,,3507,moe sync 2019-10-31,this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2cathis is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c-------<p> handle stackoverflowerror from both pendingtostring and appenduserobjectadds a bunch of tests to validate error handling in tostring code- verify that a future completing during the tostring call results in a done formatted string- verify that an exception thrown by pendingtostring doesnt cause tostring to fail- verify that cycles dont cause tostring to fail- verify that deep chains of setfuture dont cause tostring to failrelnotescatch stackoverflowerror in abstractfuturetostring to prevent long chains of futures from failing tostring calls29981d416d6b4214e65360ad3d932ba0881a4c8f-------<p> update documentation35078a0d6bb345341fc0ba91781070da5b522d4b714b,,update javadoc of unsignedbytesjava,unsignedbytes ```min()``` and ```max()``` method treat its parameter as unsigned and returns the least and greatest value also too as unsigned respectively it should be updated in the javadoctest case:-input:-```import comgooglecommonprimitivesunsignedbytesclass ex{    static void pr(byte a) {        systemoutprintln(unsignedbytesmin(a)) // 10 is less than -100 when treated as unsigned        systemoutprintln(unsignedbytesmax(a)) // -100 is greater than 10 when treated as unsigned    }    public static void main(string args) {        byte a{-10010}        pr(a)    }}```run it by typing in the terminal:-```javac exjavajava ex```output:-```10-100```,  >  > >     >   for more info** || it looks like we do mention unsignedness in the javadoc of other methods on the class so this seems reasonable ill try to get this submitted internally soon (with a couple small modifications) ||,1.0,0.0,update documentation3507-------------created by moe: https://githubcom/google/moemoe_migrated_revid277725484,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3748,1.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2019-12-23,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor: lambda can be replaced method reference  3745  1d8ab4f96855dcb9a7cd3990a671f4e5696faa4e,,3745,moe sync 2019-12-23,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor: lambda can be replaced method reference37451d8ab4f96855dcb9a7cd3990a671f4e5696faa4e,,refactor lambda can be replaced method reference,,     clas look good thanks!  ||,1.0,0.0,refactor: lambda can be replaced method reference3745relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286897808,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3765,0.0,0,1.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,1.0,0.0,1.0,0,1.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-01-08,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f,,3761,moe sync 2020-01-08,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtestaee54682770a3166c231bbfecced91f31c55d32a-------<p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest0aba85dd247e254e10fcd84e7b2940fa0383e14e-------<p> fix off-by-one error in asciidigitsasciidigits initialization37612b27d9f906e18ae1105766d41e0940122ce686a0-------<p> disable gwt-rpc by default in the open-source releaserelnotes[guava types can no longer be sent over gwt-rpc]( to _temporarily_ reenable support set the `guavagwtemergency_reenable_rpc` system property to `true`ff0cd947f82d24611e39fb3d86e3d19da4af801f, adding cla:yes label because 2b27d9f906e18ae1105766d41e0940122ce686a0 comes from @perceptron8s pr #3761 ||,fix off-by-one error in asciidigitsasciidigits initialization,`asciidigitsdigit([)` should return -1 instead of 36i changed both loops to consistently use strict inequalities now its clear that there are 10 + 26  36 digits / iterations in totalfortunately this bug doesnt affect anything other than `longstryparse` where it is - by accident - harmless that `longstryparse([ 36)` and `longstryparse(0[ 36)` currently return `null` because of `digit > radix` condition not `digit < 0` as it should be,i said about [  a + 26  z + 1 but i forgot to mention {  a + 26  z + 1 just for the record ||,1.0,0.0,disable gwt-rpc by default in the open-source releaserelnotes[guava types can no longer be sent over gwt-rpc]( to _temporarily_ reenable support set the `guavagwtemergency_reenable_rpc` system property to `true`-------------created by moe: https://githubcom/google/moemoe_migrated_revid288676838,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,1.0,0,1.0,0,0,0.0,0,0.0,0,0,0
3805,0.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,0.0,0.0,0.0,0,1.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-02-23,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify redundant  collection.addall()  calls.  3800  ae564a1d7c39704e800f04cef427f4c8abd6f010,,3800,moe sync 2020-02-23,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> simplify redundant `collectionaddall()` calls3800ae564a1d7c39704e800f04cef427f4c8abd6f010,,simplify redundant `collectionaddall()` call,simplify redundant `collectionaddall()` call and optimize performance,      clas look good thanks!  || a couple quick thoughts since i sadly doubt that ill be able to dedicate a lot of time to this:- i somewhat like to create the collection on one line and add to it on another _if_ i am then going to also _remove_ from it (or add more to it) like [here]( the multi-line process is a hint that theres going to be more to the collection than just its initial contents that is were not just making a defensive copy however this is a minor point and others might not see it that way plus were usually modifying the collection _immediately_ after creating so theres not much danger of confusion- for cases in which we add objects and then add more objects im not sure that we necessarily improve performance by presizing to the size of the _first_ set of objects like [here]( it might actually be better to accept the default sizethe unfortunate thing is that this code does need some performance tuning and general cleaning i just fear that it would be a big investment || thanks for your code review this pr was submitted for the following reasons : * using the constructor with parameter it can save one time array copy* improving readability and polishing the codebut i agree with your thoughts : * for the contextual semantic unity in a block of code* the performance improvement may be small* more time can be allocated for implementing features and fixing bugsi respect your decision so what should i do? || thanks im going to skip `derivedcollectiongeneratorsjava` since im not sure if that will help or hurt performance (i notice that that code could probably be simplified even further but i left it alone) im looking to merge the rest ||,1.0,0.0,simplify redundant `collectionaddall()` calls3800relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid296511169,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3830,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-03-19,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4,,3501,moe sync 2020-03-19,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  double slicing bytesource (#3501)38296fb7746b8bc39d4d547a1b2bb47549c6b8314af4,   i consent || ,slicing a bytesource twice throws an unexpected illegalargumentexception,currently trying to slice a `bytesource` twice throws an unexpected `illegalargumentexception` if the `bytesource` returned after the first slice has a length smaller than the offset of the subsequent slice for example this code throws an `illegalargumentexception`:```import comgooglecommoniobytesourcepublic class guavatest {    public static void main(string args) {        bytesourceconcat()slice(0 3)slice(4 3)    }}```that is against the documentation where it is specified that it should return an empty `bytesource`, should this issue be closed? it looks like it was  in #3830 ||,1.0,0.0, double slicing bytesource (#3501)3829relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301827957,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3830,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-03-19,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4,,3829,moe sync 2020-03-19,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  double slicing bytesource (#3501)38296fb7746b8bc39d4d547a1b2bb47549c6b8314af4,   i consent || , double slicing bytesource #3501,as previous pr has commit should not occur so i submit a new pr and add a test,,1.0,0.0, double slicing bytesource (#3501)3829relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301827957,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3831,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-03-20,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add some unit tests for base64url() in baseencoding  3816  e1c08a80e340efb4477dd601d6073936cc67617f,,3816,moe sync 2020-03-20,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add some unit tests for base64url() in baseencoding3816e1c08a80e340efb4477dd601d6073936cc67617f,,add uts for base64url() decode in baseencoding,i use base64url in code if gerrit to make the base64 url safebut found that it doesnt cover some basic cases,,1.0,0.0,add some unit tests for base64url() in baseencoding3816-------------created by moe: https://githubcom/google/moemoe_migrated_revid302064745,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3856,1.0,0,1.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-04-10,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea,,3418,moe sync 2020-04-10,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes33574d771b099991822ed78a726df0eea4646eea,,remove @beta from service and servicemanager,- in service it looks like it might be nice to use duration instead of (long timeunit) but im not sure were ready to take that plunge soon enough to worry about it -- and of course we want most people to run through servicemanager (where we can add such overloads) anyway(rumor has it that jesse wilson might be interested in this),any idea if this will happen? ive been using this api and id love to see the beta removed from it || i am interested in this || it looks like `javatime` overloads have been added is this reasonable now ? || its been on my list of items for the new issue-planning process ive tied up the other few issues i was looking at so this can be next || other open issues related to `service`:- services that are stopped cannot be restarted #418 - abstractservice needs functionality to triggershutdown or interrupt running tasks #1918- racecondition with abstractexecutionthreadservice? #2966- feature request: allow specifying dependencies in servicemanager #1406- feature request: add logging to servicemanagerstopasync #1405- add servicestateisterminal() #2403most of these look like features we could add after finalizing the existing api the main exception is permitting restarting services but that is a big enough change that we are unlikely to ever change the core `service` classes for it even when they are still `@beta` apis (we may still provide some other way to emulate restartable services just one that doesnt touch the core api) || on the `duration` front we might wish that `abstractscheduledservicecustomscheduler` were the name of the `duration`-based api rather than the `long timeunit`-based (ie `schedule`-based) api but since that name is taken for the latter were likely to pick a clumsier name for the `duration`-based method but im not sure a rename of the existing api would be worth the trouble especially since many android users cant easily use `duration` yet || also: i noticed recently that the `service` and `servicemanager` `await*` methods are `void` methods that throw `timeoutexception` this seems contrary to jdk precedent which appears to [use `timeoutexception` exclusively for non-`void` methods]( there are tradeoffs here (performance vs chance of unintentionally ignoring a failure) it may also be worth noting that our `await*` methods can also throw `illegalstateexception` on failure so were already somewhat exception-oriented anyway this feels more like an arguable wart than something wed actually change || hmm `servicemanager` does have [a no-`executor` overload of its `addlistener` method]( which is contrary to our usual practices we may want to take a look at removing that but that shouldnt interfere with removing `@beta` from the rest of the api || `immutablemultimap` is an unfortunate return type for `servicesbystate()`: we recommend either `immutablelistmultimap` or `immutablesetmultimap` as appropriate (here `immutablesetmultimap`) shockingly this _might_ be the only place that we inappropriately returned `immutablemultimap` / `multimap` we could try to fix that if we wanted || note that we can improve the return type of `servicesbystate()` compatibly by injecting a bridge method || for #418 i think the best solution is to start a fresh instance of the `service` class that also makes it much easier to implement correct servicesfor #1406 iâ€™ve got a full implementation of this in misk heres an [example test]( the trickiest part of our solution was expressing dependency relationships without instantiating service objects first for example we wonâ€™t construct `schemamigratorservice` until `databaseconnectionservice` is `running` our solution is deeply coupled to guice because itâ€™s what does the instance creation stuff i found it very convenient to express service dependencies alongside di || thanks i suspect that we will keep the no-`executor` overload of `addlistener` as `@beta` so that we can deprecate and remove it but im optimistic that we can remove `@beta` from the rest ill try to have an update by the end of the week || for #1406 weve done something kind of like what you have @swankjesse but using a kotlin dsl:```kotlinclass coordinatedservicesbuilder {    private val dependencygraph  graphbuilderdirected()build<service>()    fun servicedependson(vararg upstreamservices: service) {        dependencygraphaddnode(this) // allow no dependencies        upstreamservicesforeach { service ->            dependencygraphputedge(this service)        }    }    fun build(): set<service> {        require(!graphshascycle(dependencygraph))        // assemble the set of coordinated services    }}fun createcoordinatedservices(init: coordinatedservicesbuilder() -> unit)     coordinatedservicesbuilder()apply(init)build()```usage is then:```kotlinval servicemanager      servicemanager(        createcoordinatedservices {            serviceadependson(serviceb)            servicebdependson(servicec)            serviceddependson()        }    )```we werent worried about instantiation order we also built an extension to servicemanager to allow it to be used as a service - since we have some services that manage many other services from one class not sure how much general utility that could find || as hinted at [in #2966]( we arent sure if we love the contract of `abstractexecutionservicetriggershutdown` so we might leave that `@beta` too recommending that users who want similar functionality (and want to avoid `@beta` apis) attach a `stopping` listener to do that sort of worknothing new has come up in the past couple days though so ive started work on deprecating the 1-arg `addlistener`\[edit: following after  \] || progress:- deprecated 1-arg overload of `servicemanageraddlistener`- made `duration` overloads of `awaitrunning` and `awaitterminated` `final` in all `abstract*service` classes- changed return type of `servicemanagerservicesbystate()` to `immutablesetmultimap` (but also retained a method with the old signature for binary compatibility) \[not yet mirrored out\]im planning to put `@beta` on `abstractexecutionservicetriggershutdown` and `abstractservicedocancelstart` and then remove `@beta` from the types under discussionif anyone objects please speak up soon :) || jesse / others: let me know how this looks (i tweaked jesses cl slightly to keep 2 individual methods `@beta` but other than that it should look just how youd expect) || # ðŸŽ‰# Î²# ðŸ’¯,1.0,0.0,remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes-------------created by moe: https://githubcom/google/moemoe_migrated_revid305878924,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3856,1.0,0,1.0,0.0,0.0,0.0,0.0,0,1.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-04-10,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea,,3806,moe sync 2020-04-10,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes33574d771b099991822ed78a726df0eea4646eea,,remove @beta from service and servicemanager,this leaves abstractlisteningexecutorservice as @betacloses: https://githubcom/google/guava/issues/3418,,1.0,0.0,remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes-------------created by moe: https://githubcom/google/moemoe_migrated_revid305878924,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3876,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-04-24,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix github #3873 by reimplementing cartesian{set list}.contains.  relnotes=fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663,,3873,moe sync 2020-04-24,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix github #3873 by reimplementing cartesian{setlist}containsrelnotes #387327506700d2ce3a3a24840aa0ba932dba4a275663,,setscartesianproductcontains complexity depended on now-removed optimization in android version,this was almost certainly my fault but as i look at the implementation of setscartesianproduct i think its `contains` method made the assumption that `immutablesetaslist()indexof` was o(1) which is no longer the case for android  it should probably get a specific `contains` implementation that actually is o(sets) not o(sets*setsize),,1.0,0.0,fix github #3873 by reimplementing cartesian{setlist}containsrelnotes #3873-------------created by moe: https://githubcom/google/moemoe_migrated_revid308079008,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3885,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-04-28,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move comment to a more appropriate location  the comment was added along with putcoalescing in cl 143507326.  3883  8a704a86f565065a7573a13bb95d919a6c5bcbeb,,3883,moe sync 2020-04-28,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> move comment to a more appropriate locationthe comment was added along with putcoalescing in cl 14350732638838a704a86f565065a7573a13bb95d919a6c5bcbeb,,move comment to a more appropriate location,signed-off-by: sebastian zarnekow <sebastianzarnekow@gmailcom>,     clas look good thanks!  || thanks!a quick question in case you happen to have immediate thoughts on it if not no problemis it suspicious that the `putcoalescing` implementation for `subrangemap` has the very kind of `rangeisempty()` check that this comment seems to warn against? || good catch test and fix is in  ||,1.0,0.0,move comment to a more appropriate locationthe comment was added along with putcoalescing in cl 1435073263883relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid308826616,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3887,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-04-28,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed treerangemap.subrangemap.putcoalescing  the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated.  3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2,,3886,moe sync 2020-04-28,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  treerangemapsubrangemapputcoalescingthe short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated38866e0e978abc6d3de458ed7e2b9cb0533c735d36a2,, treerangemapsubrangemapputcoalescing,the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violatedsigned-off-by: sebastian zarnekow <sebastianzarnekow@gmailcom>,,1.0,0.0, treerangemapsubrangemapputcoalescingthe short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated3886relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid308881996,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3892,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-05-04,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f,,3890,moe sync 2020-05-04,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890befd5ced9edc93a65c75201eb0698a571398005f,,powersetequals depends on sets iteration order,if `comgooglecommoncollectsetspowerset` is called with two different sets that contain the same elements but in a different iteration order the returned power sets will also contain the same elements but in a different iteration order therefore `setequals` on those power sets is `true` but `comgooglecommoncollectsetspowersetequals` incorrectly returns `false`,wow almost 7 years old! nice find || thanks!   || ðŸ‘ðŸ‘ðŸ‘ðŸ‘ðŸ˜€ðŸ˜€ ||,1.0,0.0,fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890-------------created by moe: https://githubcom/google/moemoe_migrated_revid309745434,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3892,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-05-04,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f,,3891,moe sync 2020-05-04,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890befd5ced9edc93a65c75201eb0698a571398005f,,fix equals when comparing two powerset instances with different order,fixes https://githubcom/google/guava/issues/3890,thanks for the improvement! that certainly does look like a bug and i appreciate the reproducing testill mirror this change internally and you should see it added back out later today or tomorrow || cool thank you!   im very glad to have helped ||,1.0,0.0,fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890-------------created by moe: https://githubcom/google/moemoe_migrated_revid309745434,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3893,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-05-06,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for  cross-origin-embedder-policy(-report-only)?  headers ([w3](  relnotes=adds constants for  cross-origin-embedder-policy(-report-only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> implement trylockuninterruptibly  3880  c9278360493d074ecc88c9d42adbcde2ad90f035,,3880,moe sync 2020-05-06,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> adds constants for `cross-origin-embedder-policy(-report-only)?` headers ([w3]( constants for `cross-origin-embedder-policy(-report-only)?` headersa061f7e066ad470b47b749c0514ac581cf2397e2-------<p> implement trylockuninterruptibly3880c9278360493d074ecc88c9d42adbcde2ad90f035,,implement trylockuninterruptibly,based on awaituninterruptibly(condition ),  @arhimondr before this can/will be merged you need to sign the cla check the message from the googlebot || @original-codematrix im on it hopefully im going to be able to sign soon ||    clas look good thanks!  || @original-codematrix done ||,1.0,0.0,implement trylockuninterruptibly3880relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid310009910,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3899,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-05-13,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> in immutableintarray  use arrays.copyof when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> implemented lastindexof in cartesianlist  3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f,,3878,moe sync 2020-05-13,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> in immutableintarray use arrayscopyof when expanding the internal array909bdb290675c41238a194ad32e6686cda58f6dc-------<p> implemented lastindexof in cartesianlist387813da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f,,issue #3874: improve cartesianproductlastindexof,implemented `lastindexof()` in `certesianlist` and added appropriate tests,,1.0,0.0,implemented lastindexof in cartesianlist3878relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid311190643,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3922,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-06-08,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991,,3911,moe sync 2020-06-08,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> efficient unmodifiablemultimap foreachforeach can pass calls directly to the delegate protectedcollection because it is a read-only operation3911fixes #391298a616453df021b0792beb71c81b94d73e0cb69b-------<p> add comparatorsmin/maxrelnotes`collect`: added two-element min and max methods to comparatorsfc7433e647e82057ccc040885bf38dc503465d54-------<p> discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)8bf31e175d0f103ade07a351ed6135496f635991,,unmodifiablemultimapforeach inefficiently uses the default implementation,`unmodifiablemultimapforeach` uses the `multimapforeach` default implementation which involves listing entries and creating a new lambda instead of simply passing the biconsumer through to the protected instance this is safe to pass directly though because `foreach(biconsumer)` is a read-only operation,proposed solution:  ||,1.0,0.0,discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)-------------created by moe: https://githubcom/google/moemoe_migrated_revid315373918,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3922,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-06-08,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991,,3912,moe sync 2020-06-08,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> efficient unmodifiablemultimap foreachforeach can pass calls directly to the delegate protectedcollection because it is a read-only operation3911fixes #391298a616453df021b0792beb71c81b94d73e0cb69b-------<p> add comparatorsmin/maxrelnotes`collect`: added two-element min and max methods to comparatorsfc7433e647e82057ccc040885bf38dc503465d54-------<p> discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)8bf31e175d0f103ade07a351ed6135496f635991,,3911 efficient unmodifiablemultimap foreach,foreach can pass calls directly to the delegate protectedcollection because it is a read-only operation,,1.0,0.0,discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)-------------created by moe: https://githubcom/google/moemoe_migrated_revid315373918,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
3971,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,1.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-07-22,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 fixes #1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db,,3908,moe sync 2020-07-22,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`1ec90b045a45b4603ea5bd1c296f284ec1c438db,,#1315 add awaitterminationuninterruptibly() for executorservice - mâ€¦, kindly review the changes and suggest editsthanksnisarg,     i signed it!on thu may 21 2020 at 7:09 pm googlebot <notifications@githubcom> wrote:>  >>>> ðŸ“ *please visit  < to sign*>>>>  > ------------------------------>> what to do if you already signed the cla individual signers>>>>    - its possible we dont have your github username or youre using a>>    different email address on your commit check your existing cla data>>    < and verify that your email>>    is set on your git commits>>    < corporate signers>>>>    - your company has a point of contact who decides which employees are>>    authorized to participate ask your poc to be added to the group of>>    authorized contributors if you dont know who your point of contact is>>    direct the google project maintainer to go/cla#troubleshoot (public>>    version <    - the email used to register you as an authorized contributor must be>>    the email used for the git commit check your existing cla data>>    < and verify that your email>>    is set on your git commits>>    <    - the email used to register you as an authorized contributor must>>    also be attached to your github account>>    <  *googlers: go here>> < for more info*>>>> â€”>> you are receiving this because you authored the thread>> reply to this email directly view it on github>> < or>> unsubscribe>> < >>> || ,1.0,0.0,add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`-------------created by moe: https://githubcom/google/moemoe_migrated_revid322581454,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
4020,1.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-09-15,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65,,4012,moe sync 2020-09-15,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make closingfuture available in open-source guava (@beta)relnotes`utilconcurrent`: add `closingfuture`48851566428571694e62dee9f277d9833e78f17a-------<p> fix typos and remove unnecessary words401212c9012b0bde00a99cd454f1af6d90b1e5e11508-------<p> bump checker-qual from 2111 to 350for unfortunate reasons involving internal legacy infrastructure this is easier than merging #4018 but at least it gets us on the newest major version that makes it easier to see that its safe to resolve a conflict between say 350 and 361 by just using the newer onea2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d-------<p> remove spurious annotation to fix travis buildf106608d0c58c2c67dcd56e638ace73472768f65, cla:yes per #4012 ||, typos/grammatical errors,i just ran stuff through grammar checkers and found some typos/grammatical errors since i only added some small changes i didnt think i needed to do anything special like open an issue or something but if i should in the future please tell me if you think i got some stuff wrong ill fix it but there are definitely some typos in there,thanks im going to merge the typo fixes and a simplification the rest of the changes look more neutral (and a few of them look like steps backward) in the interest of getting this merged quickly ill stick to the noncontroversial ones || two of these changes are typo fixes but _none_ of them fixes a grammatical error four go from correct to differently correct one goes from correct to differently correct but definitely less clear one goes from correct to incorrect one goes from debatably correct to definitely incorrect and one goes from correct code formatting to incorrect code formatting || thanks for your feedback i went and changed what i thought you were talking about and now there are only more correct changes (i think) if there is anything else please let me know and sorry about the code formatting i dont know whats going on with that || ok i  everything you said now its just the bare minimal typos ||,1.0,0.0,remove spurious annotation to fix travis buildrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid331770482,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
4020,1.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-09-15,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65,,4018,moe sync 2020-09-15,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make closingfuture available in open-source guava (@beta)relnotes`utilconcurrent`: add `closingfuture`48851566428571694e62dee9f277d9833e78f17a-------<p> fix typos and remove unnecessary words401212c9012b0bde00a99cd454f1af6d90b1e5e11508-------<p> bump checker-qual from 2111 to 350for unfortunate reasons involving internal legacy infrastructure this is easier than merging #4018 but at least it gets us on the newest major version that makes it easier to see that its safe to resolve a conflict between say 350 and 361 by just using the newer onea2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d-------<p> remove spurious annotation to fix travis buildf106608d0c58c2c67dcd56e638ace73472768f65, cla:yes per #4012 ||,bump checker-qual from 2111 to 361,, gets us _part_ of the way there (at least to major version 3 which as youve pointed out is the especially important part)bonus: we may actually make a guava release pretty soon || thanks for upgrading to 350 ||,1.0,0.0,remove spurious annotation to fix travis buildrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid331770482,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
4029,1.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-09-17,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5,,4004,moe sync 2020-09-17,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix assertionerror from rangegap4007 #400488593a07f3a04163f2c68cf323a54cd8f8efdd03-------<p> fix random typos in guavafixes #40211102d11be3bbe534a5a569832aeb0099aa0eaa61-------<p> add back webapp to public suffix listd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d-------<p> externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 3317704827b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5,,assertionerror from rangegap,@zhanhb [reports]( at comgooglecommoncollectcut$abovealldescribeaslowerbound(cutjava:259)	at comgooglecommoncollectrangetostring(rangejava:674)	at comgooglecommoncollectrange<init>(rangejava:357)	at comgooglecommoncollectrangecreate(rangejava:155)	at comgooglecommoncollectrangegap(rangejava:582)```,,1.0,0.0,externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 331770482relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332225001,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
4029,1.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-09-17,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5,,4007,moe sync 2020-09-17,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix assertionerror from rangegap4007 #400488593a07f3a04163f2c68cf323a54cd8f8efdd03-------<p> fix random typos in guavafixes #40211102d11be3bbe534a5a569832aeb0099aa0eaa61-------<p> add back webapp to public suffix listd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d-------<p> externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 3317704827b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5,,issue #4004 assertionerror from rangegap,4004 got iae instead of assertionerror,  thanks i suspect that what wed prefer is to avoid calling `describeaslowerbound` at all in this case but id have to look at `gap` more to confirm (and to figure out what to do instead) || i think the problem is the ranges contain each other(intersection) it is illegal for `gap`and i made an opposite case```java rangeatmost(3)gap(rangeatmost(2))``````shelljavalangassertionerror	at comgooglecommoncollectcut$belowalldescribeasupperbound(cutjava:165)	at comgooglecommoncollectrangetostring(rangejava:677)	at comgooglecommoncollectrange<init>(rangejava:358)	at comgooglecommoncollectrangecreate(rangejava:156)	at comgooglecommoncollectrangegap(rangejava:583)```so i added the ranges check for the `gap`ptal   || sounds reasonable thanks would you also:- add your tests for the assertionerror cases- include the 2 input ranges in the exception message || @cpovirk  i added the test and the invalid ranges in the iae message  || thanks i got another set of eyes on this and hopefully well get it submitted internally and merged out soon ||,1.0,0.0,externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 331770482relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332225001,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
4030,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-09-18,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add(...).  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9,,4019,moe sync 2020-09-18,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix unsupportedoperationexception from treerangesetsubrangeset()add()4019 #40023685507ce36e24f111cabb45c6d5c5dd26565aad-------<p> deal with class#isinstance checks which are guaranteed to be false2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71-------<p> change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes https://githubcom/google/guava/issues/4028204904cbe79852e29aec2e461273f9b6112bd2f9,,issue #4002 unsupportedoperationexception when modify treerangesetsubrangeset(range),the same implementation as `remove`,,1.0,0.0,change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes  by moe: https://githubcom/google/moemoe_migrated_revid332443901,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
5252,0.0,0,1.0,0.0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0,1.0,0.0,1.0,0,0.0,0,0.0,1.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,1.0,moe sync 2020-09-29,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes to classpath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> internal changes to classpath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> remove unnecessary parens  4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> also print android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> fix classpathtest on android jdk 11.  037e10c0da8159c06fa471142ae923dceb03e4ea,,4036,moe sync 2020-09-29,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> internal changes to classpath643423a88d854deb863fa08f550a6e41d2823df5-------<p> internal changes to classpathb7e83b114f95f5b776ed60f5932420e5c5fc24ad-------<p> remove unnecessary parens403630c69a1ff047f8dad3abef2c315c305e052da0b2-------<p> also print android test failures0644480db466a331b7bd9fa7a8690f37d05ddda2-------<p> fix classpathtest on android jdk 11037e10c0da8159c06fa471142ae923dceb03e4ea, setting `cla: yes` because the commit by another author is derived directly from pr #4036 from that author ||,remove unnecessary parens,this pr is related to pr #3191in #3191 unnecessary parens in `pairedstats` were omitted but its similar class `stats` was not touchedi found unnecessary parens in the class so removed,    ,1.0,0.0,fix classpathtest on android jdk 11relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid334217434,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
5268,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-10-09,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71,,5265,moe sync 2020-10-09,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify `hashmultimap` docs about concurrencycloses #52663682e6b523481b34b2c2007046ea987bf62df92eb0f8-------<p> removed all references to now useless workaroundfixes #3679fixes #526526da0949c1cf54eb730578e75fe087f67110ee71, these commits were derived from the prs by @saucistophe so i am marking the cla as signed ||,removed all references to now useless workaround,3679,,1.0,0.0,removed all references to now useless workaround3679fixes #5265relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336161257,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
5268,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-10-09,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71,,5266,moe sync 2020-10-09,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify `hashmultimap` docs about concurrencycloses #52663682e6b523481b34b2c2007046ea987bf62df92eb0f8-------<p> removed all references to now useless workaroundfixes #3679fixes #526526da0949c1cf54eb730578e75fe087f67110ee71, these commits were derived from the prs by @saucistophe so i am marking the cla as signed ||,clarified hashmultimap javadoc about concurrency,3682,,1.0,0.0,removed all references to now useless workaround3679fixes #5265relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336161257,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
5275,0.0,0,1.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-10-13,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify how to use  iteratortester   when using  iteratortester   intellij idea automatically imports  abstractiteratortester.knownorder . however  abstractiteratortester  is private  and it is not obvious that one was meant to import  iteratortester.knownorder  instead. therefore this commit updates the javadoc to give an example of how to use the api properly.  5272  c3172e1a55041b118a984bc5863082fda32d8243  -------  <p> add a bunch of warnings to executionsequencer.  see discussion on cl 335046640.  0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac,,5272,moe sync 2020-10-13,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify how to use `iteratortester`when using `iteratortester` intellij idea automatically imports`abstractiteratortesterknownorder` however `abstractiteratortester`is private and it is not obvious that one was meant to import`iteratortesterknownorder` instead therefore this commit updates thejavadoc to give an example of how to use the api properly5272c3172e1a55041b118a984bc5863082fda32d8243-------<p> add a bunch of warnings to executionsequencersee discussion on cl 3350466400b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac,,clarify how to use `iteratortester`,partially addresses #5254,,1.0,0.0,add a bunch of warnings to executionsequencersee discussion on cl 335046640relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336787854,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
5277,0.0,0,0.0,0.0,0.0,0.0,0.0,0,1.0,0,0.0,0.0,0.0,0,1.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-10-13,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t call tostring() on the results of successful futures.  relnotes=abstractfuture.tostring() no longer includes the tostring() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> fix example in documentation for  iteratortester   i made a mistake and accidentally included an example that does not compile. specifically  importing  knownorder  as-is does not compile  instead one needs to import  iteratortester.knownorder . see #5254 for more information.  i also changed the example to use  collections#unmodifiablelist  rather than  arraylist  because  arraylist#iterator  does not satisfy all the requirements of  iteratorfeature#modifiable .  5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0,,5276,moe sync 2020-10-13,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> dont call tostring() on the results of successful futuresrelnotesabstractfuturetostring() no longer includes the tostring() of the result771629df701dfe565024db1cabfe19d7a5b2abfc-------<p> fix example in documentation for `iteratortester`i made a mistake and accidentally included an example that does notcompile specifically importing `knownorder` as-is does not compileinstead one needs to import `iteratortesterknownorder` see #5254 formore informationi also changed the example to use `collections#unmodifiablelist`rather than `arraylist` because `arraylist#iterator` does not satisfyall the requirements of `iteratorfeature#modifiable`5276448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0,,fix example in documentation for `iteratortester`,partially addresses #5254 (and fixes my own mistake in https://githubcom/google/guava/commit/9f03c474d92e724d2193ab64b5cfbd2b232a715e),,1.0,0.0,fix example in documentation for `iteratortester`i made a mistake and accidentally included an example that does notcompile specifically importing `knownorder` as-is does not compileinstead one needs to import `iteratortesterknownorder` see #5254 formore informationi also changed the example to use `collections#unmodifiablelist`rather than `arraylist` because `arraylist#iterator` does not satisfyall the requirements of `iteratorfeature#modifiable`5276relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336911192,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,1.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
5278,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,moe sync 2020-10-14,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that interner should be preferred instead of string.intern()  the existing language implies it s intended _only_ for other types.  see also   1034a2ee444ad03ec869638efa53b3ae880c7f4d  -------  <p> document what happens when futurecallback throws exception.  5250  #2058  3d573ac2514c53d678c3855b28d9223fea9c7e8f,,5250,moe sync 2020-10-14,this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify that interner should be preferred instead of stringintern() the existing language implies its intended _only_ for other typessee also  document what happens when futurecallback throws exception5250 #20583d573ac2514c53d678c3855b28d9223fea9c7e8f,,google#2058 add documentation on what happens when exception thrown bâ€¦,â€¦y callback,,1.0,0.0,document what happens when futurecallback throws exception5250 #2058relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336963896,,1.0,0,0.0,0,0.0,0,0.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0.0,0,0,0.0,0,0.0,0,0,0
5415,1.0,0,1.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0.0,0.0,0,0.0,0.0,1.0,0,0.0,0,0.0,0.0,0.0,0.0,0.0,0,0.0,0,1.0,0,0.0,0,0.0,0,0.0,remove redundant  else  blocks.,remove redundant  else  blocks.  3974.  relnotes=n/a,,3974,remove redundant `else` blocks,remove redundant `else` blocks3974relnotesn/a,,removed some redundant elses using early return,,  hi @pradipta many of these look good and well push out a commit that incorporates them attributed to you soon were not taking the ones where the else branch is of roughly the same size as the if branch because those seem to have more parallelism ||,1.0,0.0,remove redundant `else` blocks3974relnotesn/apiperorigin-revid: 359299673,,1.0,0,0.0,0,0.0,0,1.0,0,0,0,0,0.0,0,0.0,0,0,0.0,0,1.0,0,0.0,0,0,0.0,0,0.0,0,0,0
