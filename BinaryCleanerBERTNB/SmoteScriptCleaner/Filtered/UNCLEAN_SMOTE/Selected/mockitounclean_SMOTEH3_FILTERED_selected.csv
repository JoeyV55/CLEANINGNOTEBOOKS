prNumber,Util,Network,Interpreter,i18n,Logic,Test,IO,Security,App,issueNumber,corpus
103,0,0,0,0,1,1,1,0,1,99,fixes issue #99 : returns_deep_stubs automatically tries to create serializable mocks see issue #99 what it does is propagating the serializing mode of the parent upon each mock creation when deep stubbingbefore each mock created where made serializable by default which is not an issue when the types have a default no arg constructor but may become problematic when the type didnt have one mockito would report an error explaining that it couldnt mock this type awesome :)thanks brice for fixing the problem new version is already out   btw the release notes automation is based on the titles of the tickets in github: the better the title the better the release notes:  || ok ah yeah it makes sense i may be able to update it on the phone ||
103,1,1,1,1,1,1,1,0,1,251,fixes issue #99 : returns_deep_stubs automatically tries to create serializable mocks see issue #99 what it does is propagating the serializing mode of the parent upon each mock creation when deep stubbingbefore each mock created where made serializable by default which is not an issue when the types have a default no arg constructor but may become problematic when the type didnt have one mockito would report an error explaining that it couldnt mock this type awesome :)thanks brice for fixing the problem new version is already out   btw the release notes automation is based on the titles of the tickets in github: the better the title the better the release notes:  || ok ah yeah it makes sense i may be able to update it on the phone ||
103,1,1,0,1,1,1,0,0,1,922.859756475821,fixes issue #99 : returns_deep_stubs automatically tries to create serializable mocks see issue #99 what it does is propagating the serializing mode of the parent upon each mock creation when deep stubbingbefore each mock created where made serializable by default which is not an issue when the types have a default no arg constructor but may become problematic when the type didnt have one mockito would report an error explaining that it couldnt mock this type awesome :)thanks brice for fixing the problem new version is already out   btw the release notes automation is based on the titles of the tickets in github: the better the title the better the release notes:  || ok ah yeah it makes sense i may be able to update it on the phone ||
142,1,0,0,1,1,1,1,0,0,128,128 : deep stubbing with generic responses in the call chain is not working   also i kind of like the original unit test in #128 i propose you include it in this pr it could be name like : `orgmockitousagebugsdeepstubsdeepstubfailingwhengenricnestedasrawtypetest` if you can amend the change ill merge the pr || done - not sure its exactly what you were asking for but i dont see other option at the moment || the final diff looks good to me !could you squash the 6 commits in a single one (in the same branch / pr) ? better for the history ) || btw you should be able to do that this way : ``` bashgit reset --soft head~6git commit --message"fixes issue #128 for deep stubs with mixed raw generics type || i was off for few days - i see szczepan did the job so theres noting left for me :)btw happy new year!cheers || "
142,1,1,1,1,1,1,1,0,1,497,128 : deep stubbing with generic responses in the call chain is not working   also i kind of like the original unit test in #128 i propose you include it in this pr it could be name like : `orgmockitousagebugsdeepstubsdeepstubfailingwhengenricnestedasrawtypetest` if you can amend the change ill merge the pr || done - not sure its exactly what you were asking for but i dont see other option at the moment || the final diff looks good to me !could you squash the 6 commits in a single one (in the same branch / pr) ? better for the history ) || btw you should be able to do that this way : ``` bashgit reset --soft head~6git commit --message"fixes issue #128 for deep stubs with mixed raw generics type || i was off for few days - i see szczepan did the job so theres noting left for me :)btw happy new year!cheers || "
142,0,1,0,1,1,0,0,0,0,1369.36502618049,128 : deep stubbing with generic responses in the call chain is not working   also i kind of like the original unit test in #128 i propose you include it in this pr it could be name like : `orgmockitousagebugsdeepstubsdeepstubfailingwhengenricnestedasrawtypetest` if you can amend the change ill merge the pr || done - not sure its exactly what you were asking for but i dont see other option at the moment || the final diff looks good to me !could you squash the 6 commits in a single one (in the same branch / pr) ? better for the history ) || btw you should be able to do that this way : ``` bashgit reset --soft head~6git commit --message"fixes issue #128 for deep stubs with mixed raw generics type || i was off for few days - i see szczepan did the job so theres noting left for me :)btw happy new year!cheers || "
176,1,0,0,1,1,1,0,0,0,155,make propertyandsetterinjection field sorting consistent #155 is caused by calling `collectionssort` with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type `[iterable integer number]` it gives `iterable  integer` and `iterable  number` but also an inconsistent `integer < number`im not sure its possible to sort consistently with a stateless `comparator` so this change switches to a `sortsupertypeslast` method that first sorts by name and then shuffles any subclasses to after their superclasses its slower but should be deterministic the existing tests are preserved by leaving behind a dummy `comparator` that uses the new sort method new tests make sure that the sorted ordering doesnt depend on the original order155 wow nice pr thanks for diving in the problem !so i agree on the idea but ive mixed feelings on having a custom sort therealso i agree speed is not the real issue here anyway id prefer the algorithm to be deterministic || finally i like the comment in the commit messages though it would be better if the last 2 commit were amended properly :) || overall its really nice work   i you think its possible to rewrite with a comparator and rewrite a clean history ill merge _asap_ :) || thanks ive rebased to clean up historyusing `comparator` is trickier id really prefer to do that and i spent some time thinking about what state could be calculated to allow pairwise comparison however this is essentially a topological sort and i cant think of a way to do this short of using a custom sort and then preparing a `comparator` that checks indexes in that versionactually checking now thats exactly the fallback suggested in [this stackoverflow answer]( the only way i see that it would be possible to do using a comparator would be to first do a topological sort and then using the indexes of the objects in this sorting as keys when implementing the comparatorid be happy to add any more tests or change the style to increase confidence that its a safe implementation || mmmmh ok it would definitely be better to have the comparator but that seems a bit complex as you said so i propose 2 things then :1 without comparator it would be better to externalize the sorting in some class instead of a method could be used like       ``` java   sorted  new orgmockitointernalutilreflectiontopologysorter()sort()   ```2 thanks for the amend i propose that the proper commits starts `155` like you did in one of the previous commits github can track identify the keyword and the issue referencesorry to be nitpicky but as soon as the pr is merged there will be an automated release :)also tests are finethanks for the feedback and the interesting links :) ||   thanks for the modifications @josephw perfect pr :) || by the way do you have any remarks on the contributing guide (missing info style guideline git stuff etc) || its great that youve got a contribution guide i think a couple of the things i missed are mentioned by it but i might over-emphasise:>  at least one commit message in the pr contains "fixes #id"and suggest a template commit message> clean commit historyyou could make the history rewriting explicit here something like we prefer a clean commit history rebased and squashed if necessary so that each commit clearly changes one things and there are no extraneous fix-ups?thanks for the feedback -- everything else seemed specific enough that a review was the only way to pick it up || @josephw ok thanks for the feedback too || 
176,1,1,1,1,1,1,1,1,1,727,make propertyandsetterinjection field sorting consistent #155 is caused by calling `collectionssort` with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type `[iterable integer number]` it gives `iterable  integer` and `iterable  number` but also an inconsistent `integer < number`im not sure its possible to sort consistently with a stateless `comparator` so this change switches to a `sortsupertypeslast` method that first sorts by name and then shuffles any subclasses to after their superclasses its slower but should be deterministic the existing tests are preserved by leaving behind a dummy `comparator` that uses the new sort method new tests make sure that the sorted ordering doesnt depend on the original order155 wow nice pr thanks for diving in the problem !so i agree on the idea but ive mixed feelings on having a custom sort therealso i agree speed is not the real issue here anyway id prefer the algorithm to be deterministic || finally i like the comment in the commit messages though it would be better if the last 2 commit were amended properly :) || overall its really nice work   i you think its possible to rewrite with a comparator and rewrite a clean history ill merge _asap_ :) || thanks ive rebased to clean up historyusing `comparator` is trickier id really prefer to do that and i spent some time thinking about what state could be calculated to allow pairwise comparison however this is essentially a topological sort and i cant think of a way to do this short of using a custom sort and then preparing a `comparator` that checks indexes in that versionactually checking now thats exactly the fallback suggested in [this stackoverflow answer]( the only way i see that it would be possible to do using a comparator would be to first do a topological sort and then using the indexes of the objects in this sorting as keys when implementing the comparatorid be happy to add any more tests or change the style to increase confidence that its a safe implementation || mmmmh ok it would definitely be better to have the comparator but that seems a bit complex as you said so i propose 2 things then :1 without comparator it would be better to externalize the sorting in some class instead of a method could be used like       ``` java   sorted  new orgmockitointernalutilreflectiontopologysorter()sort()   ```2 thanks for the amend i propose that the proper commits starts `155` like you did in one of the previous commits github can track identify the keyword and the issue referencesorry to be nitpicky but as soon as the pr is merged there will be an automated release :)also tests are finethanks for the feedback and the interesting links :) ||   thanks for the modifications @josephw perfect pr :) || by the way do you have any remarks on the contributing guide (missing info style guideline git stuff etc) || its great that youve got a contribution guide i think a couple of the things i missed are mentioned by it but i might over-emphasise:>  at least one commit message in the pr contains "fixes #id"and suggest a template commit message> clean commit historyyou could make the history rewriting explicit here something like we prefer a clean commit history rebased and squashed if necessary so that each commit clearly changes one things and there are no extraneous fix-ups?thanks for the feedback -- everything else seemed specific enough that a review was the only way to pick it up || @josephw ok thanks for the feedback too || 
176,1,0,0,0,1,0,0,0,0,1756.594329157,make propertyandsetterinjection field sorting consistent #155 is caused by calling `collectionssort` with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type `[iterable integer number]` it gives `iterable  integer` and `iterable  number` but also an inconsistent `integer < number`im not sure its possible to sort consistently with a stateless `comparator` so this change switches to a `sortsupertypeslast` method that first sorts by name and then shuffles any subclasses to after their superclasses its slower but should be deterministic the existing tests are preserved by leaving behind a dummy `comparator` that uses the new sort method new tests make sure that the sorted ordering doesnt depend on the original order155 wow nice pr thanks for diving in the problem !so i agree on the idea but ive mixed feelings on having a custom sort therealso i agree speed is not the real issue here anyway id prefer the algorithm to be deterministic || finally i like the comment in the commit messages though it would be better if the last 2 commit were amended properly :) || overall its really nice work   i you think its possible to rewrite with a comparator and rewrite a clean history ill merge _asap_ :) || thanks ive rebased to clean up historyusing `comparator` is trickier id really prefer to do that and i spent some time thinking about what state could be calculated to allow pairwise comparison however this is essentially a topological sort and i cant think of a way to do this short of using a custom sort and then preparing a `comparator` that checks indexes in that versionactually checking now thats exactly the fallback suggested in [this stackoverflow answer]( the only way i see that it would be possible to do using a comparator would be to first do a topological sort and then using the indexes of the objects in this sorting as keys when implementing the comparatorid be happy to add any more tests or change the style to increase confidence that its a safe implementation || mmmmh ok it would definitely be better to have the comparator but that seems a bit complex as you said so i propose 2 things then :1 without comparator it would be better to externalize the sorting in some class instead of a method could be used like       ``` java   sorted  new orgmockitointernalutilreflectiontopologysorter()sort()   ```2 thanks for the amend i propose that the proper commits starts `155` like you did in one of the previous commits github can track identify the keyword and the issue referencesorry to be nitpicky but as soon as the pr is merged there will be an automated release :)also tests are finethanks for the feedback and the interesting links :) ||   thanks for the modifications @josephw perfect pr :) || by the way do you have any remarks on the contributing guide (missing info style guideline git stuff etc) || its great that youve got a contribution guide i think a couple of the things i missed are mentioned by it but i might over-emphasise:>  at least one commit message in the pr contains "fixes #id"and suggest a template commit message> clean commit historyyou could make the history rewriting explicit here something like we prefer a clean commit history rebased and squashed if necessary so that each commit clearly changes one things and there are no extraneous fix-ups?thanks for the feedback -- everything else seemed specific enough that a review was the only way to pick it up || @josephw ok thanks for the feedback too || 
201,1,0,0,0,1,1,0,0,1,200,200 : argumentcaptorforclass is more friendly with generic types we modify the signature of `argumentcaptorfromclass(class<t>)` to better express the type relationship between the argument and the return type  there is no change to the behavior of the method  this change is to allow expressions such as:``` javaargumentcaptor<consumer<string>> captor  argumentcaptorfromclass(consumerclass)```to type check which is desirable as a convenience to users of `argumentcaptor`we also add two tests to document this extension to the api both of which fail to compile without this change to `argumentcaptorfromclass`  these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile-time properties of `argumentcaptor` not its behavior almost perfect pr :)maybe the contributing guide is missing something here but the exemple `#id` should have been expended to the real gh issue number actually the commit message should be something like :```200 : tweak generic signature of argumentcaptorfromclass```ill merge it asap :)thanks for the pr by the way ! || i updated the contributing guide with an exemple :)if youre unsure how to rename the commit :``` bashgit commit --amendgit push --force``` || the travis build is broken in some way your code is fine thanks for the change :) ||
201,1,1,0,1,1,1,0,1,1,1083,200 : argumentcaptorforclass is more friendly with generic types we modify the signature of `argumentcaptorfromclass(class<t>)` to better express the type relationship between the argument and the return type  there is no change to the behavior of the method  this change is to allow expressions such as:``` javaargumentcaptor<consumer<string>> captor  argumentcaptorfromclass(consumerclass)```to type check which is desirable as a convenience to users of `argumentcaptor`we also add two tests to document this extension to the api both of which fail to compile without this change to `argumentcaptorfromclass`  these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile-time properties of `argumentcaptor` not its behavior almost perfect pr :)maybe the contributing guide is missing something here but the exemple `#id` should have been expended to the real gh issue number actually the commit message should be something like :```200 : tweak generic signature of argumentcaptorfromclass```ill merge it asap :)thanks for the pr by the way ! || i updated the contributing guide with an exemple :)if youre unsure how to rename the commit :``` bashgit commit --amendgit push --force``` || the travis build is broken in some way your code is fine thanks for the change :) ||
201,0,1,0,1,1,0,0,0,0,1332.13558377169,200 : argumentcaptorforclass is more friendly with generic types we modify the signature of `argumentcaptorfromclass(class<t>)` to better express the type relationship between the argument and the return type  there is no change to the behavior of the method  this change is to allow expressions such as:``` javaargumentcaptor<consumer<string>> captor  argumentcaptorfromclass(consumerclass)```to type check which is desirable as a convenience to users of `argumentcaptor`we also add two tests to document this extension to the api both of which fail to compile without this change to `argumentcaptorfromclass`  these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile-time properties of `argumentcaptor` not its behavior almost perfect pr :)maybe the contributing guide is missing something here but the exemple `#id` should have been expended to the real gh issue number actually the commit message should be something like :```200 : tweak generic signature of argumentcaptorfromclass```ill merge it asap :)thanks for the pr by the way ! || i updated the contributing guide with an exemple :)if youre unsure how to rename the commit :``` bashgit commit --amendgit push --force``` || the travis build is broken in some way your code is fine thanks for the change :) ||
202,1,0,0,1,1,1,1,0,1,187,better protection against incompatible returned value of default answer and get safely mock name fixes issue #187the value returned by the default answer is now validated to make sure there wont be a `classcastexception` if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a `classcastexception` when reporting a verification issue build is ok but fail on travis ||
202,1,1,1,1,1,1,1,0,1,1206,better protection against incompatible returned value of default answer and get safely mock name fixes issue #187the value returned by the default answer is now validated to make sure there wont be a `classcastexception` if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a `classcastexception` when reporting a verification issue build is ok but fail on travis ||
202,1,1,1,1,1,1,1,0,1,535.968322002965,better protection against incompatible returned value of default answer and get safely mock name fixes issue #187the value returned by the default answer is now validated to make sure there wont be a `classcastexception` if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a `classcastexception` when reporting a verification issue build is ok but fail on travis ||
207,0,0,0,0,1,0,0,0,0,197,197 : blocks ability to use negative value for timeout() and after() method it should  #197 if user uses mockitoafter() or mockitotimeout() with negative values then friendly reminder exception with details will be thrown first commit fixes the issue second one is a little bit of refactoring: (mostly reducing visibility and increasing encapsulation)197 : refactoring: - removed unused field from verificationovertimeimpl and also from constructors signature- improved encapsulation by removing 3 getters from verificationovertimeimpl- reduced visibility of few constructors in timeout and after classes   || nice pull request thank you !if comments are addressed ill merge right away ! || about timeouttest please look at it the whole point of this test is to pass timer object and do mocking/verifications on it if i use public constructor for this test i will not to able to pass timer objectthis is why constructor with this signature timeout(long pollingperiodmillis verificationmode delegate timer timer) was introduced by author in first place should i really touch it?btw there in so such thing like aftertest || oh yeah i see fair point just ignore what i said on thatignore the `aftertest` too i was a bit off this morning thanks for the feedback :) ||
207,0,1,1,1,1,0,0,0,0,1367,197 : blocks ability to use negative value for timeout() and after() method it should  #197 if user uses mockitoafter() or mockitotimeout() with negative values then friendly reminder exception with details will be thrown first commit fixes the issue second one is a little bit of refactoring: (mostly reducing visibility and increasing encapsulation)197 : refactoring: - removed unused field from verificationovertimeimpl and also from constructors signature- improved encapsulation by removing 3 getters from verificationovertimeimpl- reduced visibility of few constructors in timeout and after classes   || nice pull request thank you !if comments are addressed ill merge right away ! || about timeouttest please look at it the whole point of this test is to pass timer object and do mocking/verifications on it if i use public constructor for this test i will not to able to pass timer objectthis is why constructor with this signature timeout(long pollingperiodmillis verificationmode delegate timer timer) was introduced by author in first place should i really touch it?btw there in so such thing like aftertest || oh yeah i see fair point just ignore what i said on thatignore the `aftertest` too i was a bit off this morning thanks for the feedback :) ||
207,1,1,0,1,1,1,0,0,0,1932.49344155314,197 : blocks ability to use negative value for timeout() and after() method it should  #197 if user uses mockitoafter() or mockitotimeout() with negative values then friendly reminder exception with details will be thrown first commit fixes the issue second one is a little bit of refactoring: (mostly reducing visibility and increasing encapsulation)197 : refactoring: - removed unused field from verificationovertimeimpl and also from constructors signature- improved encapsulation by removing 3 getters from verificationovertimeimpl- reduced visibility of few constructors in timeout and after classes   || nice pull request thank you !if comments are addressed ill merge right away ! || about timeouttest please look at it the whole point of this test is to pass timer object and do mocking/verifications on it if i use public constructor for this test i will not to able to pass timer objectthis is why constructor with this signature timeout(long pollingperiodmillis verificationmode delegate timer timer) was introduced by author in first place should i really touch it?btw there in so such thing like aftertest || oh yeah i see fair point just ignore what i said on thatignore the `aftertest` too i was a bit off this morning thanks for the feedback :) ||
211,1,0,0,1,1,1,1,0,0,188,argumentcaptor no longer working for varargs 188  these commits should  with capturing varargs hi thanks for the pri will take a look at it soon and probably merge it in the mean time git history is fine except the merge commit can you get rid of it ?otherwise ill have to cherry-pick relevant commits || i will try to do rebase and then do force push hope it will work take a lookhm i see merge conflicts probably due your activity today :) || commit looks good but indeed theres some conflict to narrow down ill take a look later thanks for the rebase ) || now it should work || thanks ) ||
211,1,1,0,1,1,1,0,1,0,1364,argumentcaptor no longer working for varargs 188  these commits should  with capturing varargs hi thanks for the pri will take a look at it soon and probably merge it in the mean time git history is fine except the merge commit can you get rid of it ?otherwise ill have to cherry-pick relevant commits || i will try to do rebase and then do force push hope it will work take a lookhm i see merge conflicts probably due your activity today :) || commit looks good but indeed theres some conflict to narrow down ill take a look later thanks for the rebase ) || now it should work || thanks ) ||
211,1,1,1,1,1,1,1,0,1,2106.31931997424,argumentcaptor no longer working for varargs 188  these commits should  with capturing varargs hi thanks for the pri will take a look at it soon and probably merge it in the mean time git history is fine except the merge commit can you get rid of it ?otherwise ill have to cherry-pick relevant commits || i will try to do rebase and then do force push hope it will work take a lookhm i see merge conflicts probably due your activity today :) || commit looks good but indeed theres some conflict to narrow down ill take a look later thanks for the rebase ) || now it should work || thanks ) ||
221,1,0,0,0,1,1,0,0,0,212,212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions follow-up to #212 thanks @mkordas  ||
221,1,1,0,1,1,1,0,1,0,1240,212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions follow-up to #212 thanks @mkordas  ||
221,1,1,0,1,1,1,0,0,0,1279.9376776887,212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions follow-up to #212 thanks @mkordas  ||
222,1,0,0,0,1,1,0,0,0,203,203 : introduce bdd inorder verification follow-up to #203  
222,1,1,0,1,1,1,0,1,0,1419,203 : introduce bdd inorder verification follow-up to #203  
222,1,1,1,1,1,1,1,0,0,1586.41794172334,203 : introduce bdd inorder verification follow-up to #203  
223,1,1,0,1,1,0,1,0,1,206,206]  related to windows path problem was caused by file separator replacing hardcoded char / by fileseperatorchar solves issue in the same file there is second occurence of this character but it is used with getresource(path) method -  in such case / is only acceptable separator do i need to do something special in order to build with java 8? it looks like problem with default method - i create branch from master || dont worry about that error ill push the fix at some point todaythanks for fixing the windows test issue :) ||
223,1,1,1,1,1,1,1,0,0,1584,206]  related to windows path problem was caused by file separator replacing hardcoded char / by fileseperatorchar solves issue in the same file there is second occurence of this character but it is used with getresource(path) method -  in such case / is only acceptable separator do i need to do something special in order to build with java 8? it looks like problem with default method - i create branch from master || dont worry about that error ill push the fix at some point todaythanks for fixing the windows test issue :) ||
223,1,1,1,1,1,1,1,0,0,2508.11965925339,206]  related to windows path problem was caused by file separator replacing hardcoded char / by fileseperatorchar solves issue in the same file there is second occurence of this character but it is used with getresource(path) method -  in such case / is only acceptable separator do i need to do something special in order to build with java 8? it looks like problem with default method - i create branch from master || dont worry about that error ill push the fix at some point todaythanks for fixing the windows test issue :) ||
229,1,0,0,1,1,0,0,0,0,228,228:  a verify() call example in @captor javadoc   thanks for the fix :) ||
229,1,1,1,1,1,1,1,0,1,1532,228:  a verify() call example in @captor javadoc   thanks for the fix :) ||
229,1,0,0,0,1,0,0,0,0,1674.9837686714,228:  a verify() call example in @captor javadoc   thanks for the fix :) ||
234,0,0,0,0,0,1,0,0,0,233,cannot instantiate type with public method of a public parent class having a non public types in signature this should 233(awaiting delivery of bytebuddy fix  @raphw actually  in bytebuddy 0610 in commit  ||
234,1,1,1,1,1,1,1,0,1,1533,cannot instantiate type with public method of a public parent class having a non public types in signature this should 233(awaiting delivery of bytebuddy fix  @raphw actually  in bytebuddy 0610 in commit  ||
234,0,1,0,1,1,0,0,0,0,1367.24311767571,cannot instantiate type with public method of a public parent class having a non public types in signature this should 233(awaiting delivery of bytebuddy fix  @raphw actually  in bytebuddy 0610 in commit  ||
235,1,1,0,1,1,1,1,0,1,220,220 constructor invoking methods raise npe in some recent version of mockito `@spy` annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls (unconfirmed at this point)this pr aims to fix that by calling real code if interceptor is not set which can only happen if `constructorinstanciator` is usedthanks to @raphw for his tip on this regard as well : https://githubcom/raphw/byte-buddy/issues/32#issuecomment-113269844 i just saw that you chose to invoke the real method instead of returning a default value that might cause problems when the invoked method expects some state then again if the constructor is called the constructor might always receive correct input values?i added another interceptor to make the field receival a bit more convenient and runtime efficient and if you wanted to aupress the calls from the constructor (might be unsuitable for spies) i think i also found a better alternative for thati just send you a pull request on monday || yes for constructors that made sense (when spy is instantiated with constructor) though i agree with you other than this scenario it shouldnt be authorized i didnt yet wrap entirely my head around this yetim not yet sure how to ensure a bit more safety there ||
235,1,1,1,1,1,1,1,0,1,1614,220 constructor invoking methods raise npe in some recent version of mockito `@spy` annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls (unconfirmed at this point)this pr aims to fix that by calling real code if interceptor is not set which can only happen if `constructorinstanciator` is usedthanks to @raphw for his tip on this regard as well : https://githubcom/raphw/byte-buddy/issues/32#issuecomment-113269844 i just saw that you chose to invoke the real method instead of returning a default value that might cause problems when the invoked method expects some state then again if the constructor is called the constructor might always receive correct input values?i added another interceptor to make the field receival a bit more convenient and runtime efficient and if you wanted to aupress the calls from the constructor (might be unsuitable for spies) i think i also found a better alternative for thati just send you a pull request on monday || yes for constructors that made sense (when spy is instantiated with constructor) though i agree with you other than this scenario it shouldnt be authorized i didnt yet wrap entirely my head around this yetim not yet sure how to ensure a bit more safety there ||
235,1,1,0,1,1,1,0,0,0,1013.2691627411,220 constructor invoking methods raise npe in some recent version of mockito `@spy` annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls (unconfirmed at this point)this pr aims to fix that by calling real code if interceptor is not set which can only happen if `constructorinstanciator` is usedthanks to @raphw for his tip on this regard as well : https://githubcom/raphw/byte-buddy/issues/32#issuecomment-113269844 i just saw that you chose to invoke the real method instead of returning a default value that might cause problems when the invoked method expects some state then again if the constructor is called the constructor might always receive correct input values?i added another interceptor to make the field receival a bit more convenient and runtime efficient and if you wanted to aupress the calls from the constructor (might be unsuitable for spies) i think i also found a better alternative for thati just send you a pull request on monday || yes for constructors that made sense (when spy is instantiated with constructor) though i agree with you other than this scenario it shouldnt be authorized i didnt yet wrap entirely my head around this yetim not yet sure how to ensure a bit more safety there ||
252,1,1,1,1,1,1,1,0,1,251,251] migrate fest assert code to assertj 251   
252,1,0,1,0,1,0,0,0,0,1692,251] migrate fest assert code to assertj 251   
252,0,1,0,1,1,0,0,0,0,1439.54996510334,251] migrate fest assert code to assertj 251   
261,1,1,0,0,1,1,0,0,1,260,260: typo in documentation very minor typo in documentation:  an extra "at" (@) in the documentationbefore it reads:"annotating the junit test class with a @runwith(@mockitojunitrunnerclass)"after it reads:"annotating the junit test class with a @runwith(mockitojunitrunnerclass)"(https://cloudentcom/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749png)    merging **#261**   cool thanks for the fix :) ||
261,1,1,0,1,1,1,0,1,1,1717,260: typo in documentation very minor typo in documentation:  an extra "at" (@) in the documentationbefore it reads:"annotating the junit test class with a @runwith(@mockitojunitrunnerclass)"after it reads:"annotating the junit test class with a @runwith(mockitojunitrunnerclass)"(https://cloudentcom/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749png)    merging **#261**   cool thanks for the fix :) ||
261,1,1,1,1,1,1,1,0,0,1482.20511053813,260: typo in documentation very minor typo in documentation:  an extra "at" (@) in the documentationbefore it reads:"annotating the junit test class with a @runwith(@mockitojunitrunnerclass)"after it reads:"annotating the junit test class with a @runwith(mockitojunitrunnerclass)"(https://cloudentcom/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749png)    merging **#261**   cool thanks for the fix :) ||
270,1,0,0,1,1,1,0,0,1,268,issue #268: added support for generic arrays as return types solves  by explicitly checking for return types that represent a generic array and by resolving for the arrays component type   
270,1,1,1,0,1,1,1,0,1,189,issue #268: added support for generic arrays as return types solves  by explicitly checking for return types that represent a generic array and by resolving for the arrays component type   
270,1,1,1,0,1,1,1,0,0,229.656214416507,issue #268: added support for generic arrays as return types solves  by explicitly checking for return types that represent a generic array and by resolving for the arrays component type   
280,1,0,0,0,1,1,0,0,1,243,reintroduce null check on mockutilismock() will 243 - null check on mockutilismock() was incorrectly removed after successive refactoring this pr reintroduces null check   
280,1,1,1,0,1,1,1,0,1,1898,reintroduce null check on mockutilismock() will 243 - null check on mockutilismock() was incorrectly removed after successive refactoring this pr reintroduces null check   
280,1,1,1,1,1,1,1,0,0,2306.83027112779,reintroduce null check on mockutilismock() will 243 - null check on mockutilismock() was incorrectly removed after successive refactoring this pr reintroduces null check   
287,0,0,0,0,1,1,0,0,1,124,implement verificationcollector which can collect multiple verifications it will report in the end the result of multiple statements 124   
287,1,1,0,1,1,1,0,1,0,2011,implement verificationcollector which can collect multiple verifications it will report in the end the result of multiple statements 124   
287,1,1,1,1,1,1,1,0,0,1533.5779289688,implement verificationcollector which can collect multiple verifications it will report in the end the result of multiple statements 124   
293,1,1,0,0,1,1,1,0,1,245,remove validateserializable() 245:remove serializable validation   
293,1,1,0,1,1,1,1,1,1,2040,remove validateserializable() 245:remove serializable validation   
293,1,1,1,1,1,1,1,0,1,2094.88552750769,remove validateserializable() 245:remove serializable validation   
373,1,0,0,1,1,1,1,0,1,365,365 simplify the invocationonmock-api to get a casted argument this pull request 365 by introducing `t getargument(int)` and deprecating `t getargumentat(intclass<t>)` in type `invocationonmock` this improves the readabilty of custom answers this`string text  invocationgetargumentat(1stringclass)` can be replaced  string text  invocationgetargument(1)`   
373,1,1,1,1,1,1,1,0,1,2092,365 simplify the invocationonmock-api to get a casted argument this pull request 365 by introducing `t getargument(int)` and deprecating `t getargumentat(intclass<t>)` in type `invocationonmock` this improves the readabilty of custom answers this`string text  invocationgetargumentat(1stringclass)` can be replaced  string text  invocationgetargument(1)`   
373,1,0,1,0,1,0,0,0,0,1640.30148797142,365 simplify the invocationonmock-api to get a casted argument this pull request 365 by introducing `t getargument(int)` and deprecating `t getargumentat(intclass<t>)` in type `invocationonmock` this improves the readabilty of custom answers this`string text  invocationgetargumentat(1stringclass)` can be replaced  string text  invocationgetargument(1)`   
386,1,0,0,0,1,1,0,0,1,374,remove deprecated code fixes for #374 - more left though   
386,1,1,1,1,1,1,1,0,1,2094,remove deprecated code fixes for #374 - more left though   
386,1,1,1,0,1,1,1,0,0,306.897495272366,remove deprecated code fixes for #374 - more left though   
404,1,1,0,1,1,1,1,0,1,374,374 removed deprecated classes and methods 374 removed deprecated classes and methods thanks for this pr and for fixing the formatting could you also squash all commits to a single one for better versioning?  @raphw i  the line ending issue is it okay to squash the commits once the review of all commits is fine? the removal of some deprecated classes and methods was more than simply removing it eg mockitojunitrule if my implementation is not okay it can easily be reverted  || @raphw do you know why the check "codecov/changes" fail? || @christianschwarz fixing issue and will report back shortly || @christianschwarz can you submit an empty commit for another rebuild i believe this issue was fixed within the last 6 days thank you || i do not currently have good internet access (vacation) please repush (forced) and see if it worksthanksfor the effort this will be merged eventually  || @raphw and @stevepeak thanks for your support ||   @raphw @szczepiq  @bric3 sorry for stressing you the people want mockito 2 & 3 (lambda) please comment and/or merge this pr its a little step in the right direction || ping || lgtm thanks for doing the chore work! || 
404,1,1,1,1,1,1,1,0,1,2105,374 removed deprecated classes and methods 374 removed deprecated classes and methods thanks for this pr and for fixing the formatting could you also squash all commits to a single one for better versioning?  @raphw i  the line ending issue is it okay to squash the commits once the review of all commits is fine? the removal of some deprecated classes and methods was more than simply removing it eg mockitojunitrule if my implementation is not okay it can easily be reverted  || @raphw do you know why the check "codecov/changes" fail? || @christianschwarz fixing issue and will report back shortly || @christianschwarz can you submit an empty commit for another rebuild i believe this issue was fixed within the last 6 days thank you || i do not currently have good internet access (vacation) please repush (forced) and see if it worksthanksfor the effort this will be merged eventually  || @raphw and @stevepeak thanks for your support ||   @raphw @szczepiq  @bric3 sorry for stressing you the people want mockito 2 & 3 (lambda) please comment and/or merge this pr its a little step in the right direction || ping || lgtm thanks for doing the chore work! || 
404,1,1,0,1,1,1,0,0,1,448.105354422702,374 removed deprecated classes and methods 374 removed deprecated classes and methods thanks for this pr and for fixing the formatting could you also squash all commits to a single one for better versioning?  @raphw i  the line ending issue is it okay to squash the commits once the review of all commits is fine? the removal of some deprecated classes and methods was more than simply removing it eg mockitojunitrule if my implementation is not okay it can easily be reverted  || @raphw do you know why the check "codecov/changes" fail? || @christianschwarz fixing issue and will report back shortly || @christianschwarz can you submit an empty commit for another rebuild i believe this issue was fixed within the last 6 days thank you || i do not currently have good internet access (vacation) please repush (forced) and see if it worksthanksfor the effort this will be merged eventually  || @raphw and @stevepeak thanks for your support ||   @raphw @szczepiq  @bric3 sorry for stressing you the people want mockito 2 & 3 (lambda) please comment and/or merge this pr its a little step in the right direction || ping || lgtm thanks for doing the chore work! || 
412,0,0,0,1,1,1,1,0,1,407, #407 vararg method call on mock object fails   @andreyrmg can you add your test too? || oh yes of course! im sorry but only tomorrow ||   added test || +1 for adding unit tests!can you also add your `defaultanswerdemo` test case to the usage tests (package orgmockitousagestubbing)? name proposal: stubbingwithdelegatevarargstest || sorry for delay i added usage test case and squash commits into oneand there is need to extend from `testbase` for calling help method `orgmockitoutiltestbase#invocationof(javalangclass<?> javalangstring javalangobject)` || lgtm thanks for figuring this one out and adding an extensive test suite luckily an easy fix ||
412,1,1,1,1,1,1,1,0,0,230, #407 vararg method call on mock object fails   @andreyrmg can you add your test too? || oh yes of course! im sorry but only tomorrow ||   added test || +1 for adding unit tests!can you also add your `defaultanswerdemo` test case to the usage tests (package orgmockitousagestubbing)? name proposal: stubbingwithdelegatevarargstest || sorry for delay i added usage test case and squash commits into oneand there is need to extend from `testbase` for calling help method `orgmockitoutiltestbase#invocationof(javalangclass<?> javalangstring javalangobject)` || lgtm thanks for figuring this one out and adding an extensive test suite luckily an easy fix ||
412,1,1,0,1,1,1,0,0,0,1073.68457021094, #407 vararg method call on mock object fails   @andreyrmg can you add your test too? || oh yes of course! im sorry but only tomorrow ||   added test || +1 for adding unit tests!can you also add your `defaultanswerdemo` test case to the usage tests (package orgmockitousagestubbing)? name proposal: stubbingwithdelegatevarargstest || sorry for delay i added usage test case and squash commits into oneand there is need to extend from `testbase` for calling help method `orgmockitoutiltestbase#invocationof(javalangclass<?> javalangstring javalangobject)` || lgtm thanks for figuring this one out and adding an extensive test suite luckily an easy fix ||
424,1,1,0,0,1,1,0,0,1,20,inorder timeouts *fixes issue   *updated code provided by  in pr #20closes #20 could you please add tests to make sure the code is correctly behaving?also you have some unrelated changes mostly imports reordering please remove those as well || i should have some time to work on the code changes this weekend || @timvdlippe there was already a test there i just removed the @ignore tag ill add one for the exception throwing behavior as well i also removed the import reordering my ide was trying to be super helpful! || @jazzepi sounds great! :+1: the codecov status has to pass before this can be merged after the current feedback has been processed i will take another look but i think so far it is looking good! || @jazzepi could you rebase this pr and commit your changes? i would like to merge this sooner rather than later ||   @timvdlippe i think it should all be in working ordering now ive been doing git force pushes to my branch no idea if thats the accepted style but github seems to be figuring out what im doing i just wish it were layering patchsets on like gerrit does@christianschwarz i really puzzled over what you were looking for and could not understand how i could improve the code in the way youre describing id prefer this changeset get merged and then make whatever style changes you wanted yourself || lgtm 
424,1,1,1,1,1,1,1,0,0,2303,inorder timeouts *fixes issue   *updated code provided by  in pr #20closes #20 could you please add tests to make sure the code is correctly behaving?also you have some unrelated changes mostly imports reordering please remove those as well || i should have some time to work on the code changes this weekend || @timvdlippe there was already a test there i just removed the @ignore tag ill add one for the exception throwing behavior as well i also removed the import reordering my ide was trying to be super helpful! || @jazzepi sounds great! :+1: the codecov status has to pass before this can be merged after the current feedback has been processed i will take another look but i think so far it is looking good! || @jazzepi could you rebase this pr and commit your changes? i would like to merge this sooner rather than later ||   @timvdlippe i think it should all be in working ordering now ive been doing git force pushes to my branch no idea if thats the accepted style but github seems to be figuring out what im doing i just wish it were layering patchsets on like gerrit does@christianschwarz i really puzzled over what you were looking for and could not understand how i could improve the code in the way youre describing id prefer this changeset get merged and then make whatever style changes you wanted yourself || lgtm 
424,1,1,1,0,1,1,1,0,0,262.287768097864,inorder timeouts *fixes issue   *updated code provided by  in pr #20closes #20 could you please add tests to make sure the code is correctly behaving?also you have some unrelated changes mostly imports reordering please remove those as well || i should have some time to work on the code changes this weekend || @timvdlippe there was already a test there i just removed the @ignore tag ill add one for the exception throwing behavior as well i also removed the import reordering my ide was trying to be super helpful! || @jazzepi sounds great! :+1: the codecov status has to pass before this can be merged after the current feedback has been processed i will take another look but i think so far it is looking good! || @jazzepi could you rebase this pr and commit your changes? i would like to merge this sooner rather than later ||   @timvdlippe i think it should all be in working ordering now ive been doing git force pushes to my branch no idea if thats the accepted style but github seems to be figuring out what im doing i just wish it were layering patchsets on like gerrit does@christianschwarz i really puzzled over what you were looking for and could not understand how i could improve the code in the way youre describing id prefer this changeset get merged and then make whatever style changes you wanted yourself || lgtm 
427,1,0,0,1,1,1,1,0,1,426,refactored class reporter to a static utillity 426 for class reporter this pr changes the way errors are created and thrown all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly this improves the readability and eliminates the use of hacks to satisfiy the compilerhere is a sample:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            reporter()noargumentvaluewascaptured()            return null        } else {            return argumentsgetlast()        }}```the above code snipped can be rewritten to this:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            throw noargumentvaluewascaptured()        }         return argumentsgetlast()}```  
427,1,1,0,1,1,1,0,0,0,1218.96260306917,refactored class reporter to a static utillity 426 for class reporter this pr changes the way errors are created and thrown all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly this improves the readability and eliminates the use of hacks to satisfiy the compilerhere is a sample:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            reporter()noargumentvaluewascaptured()            return null        } else {            return argumentsgetlast()        }}```the above code snipped can be rewritten to this:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            throw noargumentvaluewascaptured()        }         return argumentsgetlast()}```  
431,1,0,0,0,1,1,1,0,1,426,426 dropped class handyreturnvalues #426while refactoring the class`handyreturnvalues` towards a static utility class i notices that it is not required at all therefore i decided to remove the type `handyreturnvalues`   lgtm but the formatting of quite some files is still incorrect some have a space too much others are indented too much please take a close look at the diff and make sure that formatting changes are reverted functionality is fine by me || @timvdlippe > lgtm but the formatting of quite some files is still incorrecthopefully  for now and ever ||
431,1,1,1,1,1,1,1,0,0,1499.47274034414,426 dropped class handyreturnvalues #426while refactoring the class`handyreturnvalues` towards a static utility class i notices that it is not required at all therefore i decided to remove the type `handyreturnvalues`   lgtm but the formatting of quite some files is still incorrect some have a space too much others are indented too much please take a close look at the diff and make sure that formatting changes are reverted functionality is fine by me || @timvdlippe > lgtm but the formatting of quite some files is still incorrecthopefully  for now and ever ||
432,1,0,0,0,1,1,0,0,0,426,426 refactored invocationmarker to a static utility class #426refactored `invocationmarker`to a static utility class   there are some imports remaining on the `invocationmarker` which i think can be removed other than that  how to trigger a build without the commiting squashing forced push cycle? that failing tests suck! || not much faster but the fastest way i know of to trigger building of pull request is```git commit --amendgit push -f``` || lgtm ||
432,1,1,0,1,1,1,0,0,0,2033.29322267001,426 refactored invocationmarker to a static utility class #426refactored `invocationmarker`to a static utility class   there are some imports remaining on the `invocationmarker` which i think can be removed other than that  how to trigger a build without the commiting squashing forced push cycle? that failing tests suck! || not much faster but the fastest way i know of to trigger building of pull request is```git commit --amendgit push -f``` || lgtm ||
442,0,0,0,0,0,1,1,0,1,304,enable some ignored tests of bridgemethodshitagaintest and detectingf… …inalmethodstestthis worked locally so lets see if this also works on the ci server304   thanks this has  issue #304 ! ||
442,1,0,0,0,1,0,0,0,0,1745.57402895754,enable some ignored tests of bridgemethodshitagaintest and detectingf… …inalmethodstestthis worked locally so lets see if this also works on the ci server304   thanks this has  issue #304 ! ||
444,0,0,0,1,0,1,1,0,0,438,add parameter elementtype to @mock todo: add a regression test to also show how this functionality can be used cc @smoyer64438  
444,1,1,1,1,1,1,1,0,1,499.253765187583,add parameter elementtype to @mock todo: add a regression test to also show how this functionality can be used cc @smoyer64438  
451,1,0,0,1,0,1,0,0,1,433,refactored timeout and after concurrent test refactored concurrent test in order to 433 the implementation now uses  an `executor`to perform async calls instead of extending `thread` and doesnt extend testbase anymore i also added a stopwatch which can be used for further time dependent testing in the future i want to use this class to write more tests for after/timeout can you rebase this to the latest removal of deprecated api?  seems like something went wrong with my rebase i will look tomorrow into it ||   @christianschwarz i think its preferable to rebase (eg `pull --rebase upstream master`) a pull request instead of merging that hides unrelated commits and makes reviewing easier thanks!edit: just saw your comment above so please ignore this || this lgtm but one small comment thank you again for your work! || okay i  the formatting issues || lgtm! || i guess it would have been better to use more lenient timeouts:  || it really sucks that we only experience this flakiness on master and now when we are reviewing such pull requests i cant seem to recreate these timing issues locally either || i can replicate the issues if i decrease the timeouts and run a timeout test in an endless looptravis builds have very limited cpu resources: so  so failures of multi-threaded tests are more likely ||
451,1,1,1,1,1,1,1,0,1,2095.21643309717,refactored timeout and after concurrent test refactored concurrent test in order to 433 the implementation now uses  an `executor`to perform async calls instead of extending `thread` and doesnt extend testbase anymore i also added a stopwatch which can be used for further time dependent testing in the future i want to use this class to write more tests for after/timeout can you rebase this to the latest removal of deprecated api?  seems like something went wrong with my rebase i will look tomorrow into it ||   @christianschwarz i think its preferable to rebase (eg `pull --rebase upstream master`) a pull request instead of merging that hides unrelated commits and makes reviewing easier thanks!edit: just saw your comment above so please ignore this || this lgtm but one small comment thank you again for your work! || okay i  the formatting issues || lgtm! || i guess it would have been better to use more lenient timeouts:  || it really sucks that we only experience this flakiness on master and now when we are reviewing such pull requests i cant seem to recreate these timing issues locally either || i can replicate the issues if i decrease the timeouts and run a timeout test in an endless looptravis builds have very limited cpu resources: so  so failures of multi-threaded tests are more likely ||
454,0,0,0,0,1,1,0,0,0,453,modified javadoc for argumentmatcher to 453 - this is the amendment to the `argumentmatcher` javadoc   
454,1,1,0,1,1,1,0,0,0,1196.14105885473,modified javadoc for argumentmatcher to 453 - this is the amendment to the `argumentmatcher` javadoc   
491,0,0,0,1,1,1,0,0,1,390,deprecate whitebox and corresponding verboserunner and junitfailureha… a quick google showed that there are almost zero usages of this runner moreover it was relying on a very hackish implementation i think we can do a better job by creating a new runner with junit 5 as part of #390 therefore the intent is to deprecate these classes and remove them in mockito 30489   491 by private methods || rebased and updated pull request with feedback ptal    || indeed the timeout test is picky especially with openjdk 6 i restarted the job 2 times || verbose runner and console spamming runner are now both deprecated lets kill them in 30 :) ||
491,1,1,1,0,1,1,1,0,0,227.291817632464,deprecate whitebox and corresponding verboserunner and junitfailureha… a quick google showed that there are almost zero usages of this runner moreover it was relying on a very hackish implementation i think we can do a better job by creating a new runner with junit 5 as part of #390 therefore the intent is to deprecate these classes and remove them in mockito 30489   491 by private methods || rebased and updated pull request with feedback ptal    || indeed the timeout test is picky especially with openjdk 6 i restarted the job 2 times || verbose runner and console spamming runner are now both deprecated lets kill them in 30 :) ||
492,1,0,0,1,1,1,0,0,0,482,revert "remove deprecated method" simple git revert for an accidental removal of a deprecated api since 20 instead of 1x482  
492,1,1,1,1,1,1,1,0,0,1608.36634539969,revert "remove deprecated method" simple git revert for an accidental removal of a deprecated api since 20 instead of 1x482  
499,1,0,0,0,1,1,0,0,0,401,401 - makes the junit runner detect unused stubs 401this is a breaking change because junit runner will now fail the test class if there is an unused stubbingfeedback is welcome sorry for working on it for a long time and big number of commits investigating the failure on travis works for me locally! :d || i would rather not default to strict right away this will break a lot of user test suites which significantly increasing the upgrade process to mockito 20if we let developers know our intention is to makr the strict version default later they can slowly make the changes for each of their runners then we can change the default in mockito 30 so developers had some time to adopt ||   it this weekend || late in the review game but nice feature ||
499,1,1,0,1,1,1,0,0,0,1065.71302939559,401 - makes the junit runner detect unused stubs 401this is a breaking change because junit runner will now fail the test class if there is an unused stubbingfeedback is welcome sorry for working on it for a long time and big number of commits investigating the failure on travis works for me locally! :d || i would rather not default to strict right away this will break a lot of user test suites which significantly increasing the upgrade process to mockito 20if we let developers know our intention is to makr the strict version default later they can slowly make the changes for each of their runners then we can change the default in mockito 30 so developers had some time to adopt ||   it this weekend || late in the review game but nice feature ||
501,0,0,0,1,1,1,0,0,0,426,refactored testmethodsfinder to a static utility class (#426)    
501,0,1,0,1,1,0,0,0,0,1437.39667724897,refactored testmethodsfinder to a static utility class (#426)    
502,1,0,0,1,1,1,1,0,0,426,refactored argumentscomparator to a static utility class (#426)    
502,1,1,0,1,1,1,0,0,0,1197.98037684384,refactored argumentscomparator to a static utility class (#426)    
503,1,0,0,0,1,1,0,0,0,426,refactored nongreedynumberofinvocationsinorderchecker to a static uti… …lity class (#426)  
503,1,1,1,0,1,1,1,0,0,258.048498115635,refactored nongreedynumberofinvocationsinorderchecker to a static uti… …lity class (#426)  
507,1,0,0,1,1,1,0,0,1,506,improved exception message - fixes issue 506 506  
507,1,1,0,1,1,1,0,0,0,1190.58265618558,improved exception message - fixes issue 506 506  
510,1,0,0,0,1,0,0,0,0,194,194 tweaks any matchers details is #194 i took the opportunity to - replace `testbaseassertthat` by more powerful assertj equivalent theres still some work to be done in this class- add iterable matchersbefore merging-  i ponder to make `anyobject()` not to accept `null` currently `any()` is an alias of `anyobject()` > keeping the `anyobjet` behaviour and deprecate the method-  i need to update `anyint` family description   
510,1,1,1,1,1,1,1,0,0,1516.75636528771,194 tweaks any matchers details is #194 i took the opportunity to - replace `testbaseassertthat` by more powerful assertj equivalent theres still some work to be done in this class- add iterable matchersbefore merging-  i ponder to make `anyobject()` not to accept `null` currently `any()` is an alias of `anyobject()` > keeping the `anyobjet` behaviour and deprecate the method-  i need to update `anyint` family description   
514,1,0,0,1,1,1,1,0,1,426,refactored mockutil to a static utility class (#426)     514  
514,1,1,0,1,1,1,0,0,0,1201.89359090233,refactored mockutil to a static utility class (#426)     514  
515,1,0,0,0,1,1,0,0,1,426,refactored allinvocationsfinder and verifiableinvocationsfinder to st… …atic utility classes (#426)   515   @pascalschumacher these 2 classes have only one public method they can be merged into:- `verificationfinder::findverified()` /  `::findall()`what do you think? || @christianschwarz sure ||
515,1,1,0,0,1,1,0,0,0,1880.60208451596,refactored allinvocationsfinder and verifiableinvocationsfinder to st… …atic utility classes (#426)   515   @pascalschumacher these 2 classes have only one public method they can be merged into:- `verificationfinder::findverified()` /  `::findall()`what do you think? || @christianschwarz sure ||
525,0,0,0,0,0,1,0,0,1,508,add regression test for #508 as mentioned in the bug report for #508  adds a test which would catch this issue if it happened to regress in the future  
525,1,1,1,1,1,1,1,0,0,1604.72758663356,add regression test for #508 as mentioned in the bug report for #508  adds a test which would catch this issue if it happened to regress in the future  
528,1,0,0,0,1,0,0,0,0,194,missing generics info on collection matchers follow up on #510 (issue #194) following this comment  it tweaks the collection matchers with generic support it should have bee in abf9851  
528,1,0,1,0,1,0,0,0,0,1621.44551366283,missing generics info on collection matchers follow up on #510 (issue #194) following this comment  it tweaks the collection matchers with generic support it should have bee in abf9851  
535,1,0,0,1,1,1,0,0,1,426,refactored supertypeslastsorter to a static utility class refactored supertypeslastsorter to a static utility classrelates to #426  
535,1,1,0,1,1,1,0,0,0,1060.95707221606,refactored supertypeslastsorter to a static utility class refactored supertypeslastsorter to a static utility classrelates to #426  
540,1,0,0,0,1,0,0,0,0,426,inlined arrayutilsisempty() in argumentsprocessor inlined arrayutilsisempty() in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessoralso isempty() was renamed to isnullorempty() for clarityrelates to #426   540   
540,1,1,0,1,1,1,0,0,0,2036.79015403292,inlined arrayutilsisempty() in argumentsprocessor inlined arrayutilsisempty() in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessoralso isempty() was renamed to isnullorempty() for clarityrelates to #426   540   
547,1,0,0,1,1,1,1,0,0,426,refactored objectmethodsguru to a static utility class - refactored `objectmethodsguru` to a static utility class- removed unused methods and associated tests:  - `istostring(mockitomethod method)`  - `isequalsmethod(method method)`  - `ishashcodemethod(method method)`- renamed `istostring()` to `istostringmethod()`relates to #426   547   
547,1,1,0,1,1,1,0,0,0,1232.81228511514,refactored objectmethodsguru to a static utility class - refactored `objectmethodsguru` to a static utility class- removed unused methods and associated tests:  - `istostring(mockitomethod method)`  - `isequalsmethod(method method)`  - `ishashcodemethod(method method)`- renamed `istostring()` to `istostringmethod()`relates to #426   547   
550,1,0,0,1,1,1,0,0,1,538, #538 changed error message in case initialization for mock injection fails  #538if a filed is annotated with @injectmocks and the type of a field is an enum inner class interface or local class the error message is now: _"mock injection failed on field fieldname cause the type abstractcollection is an abstract class_" openjdk6 build failed the others gone clearwow! the native world exploded``` test*** buffer overflow detected ***: /usr/lib/jvm/java-6-openjdk-amd64/bin/java terminated backtrace: /lib/x86_64-linux-gnu/libcso6(__fortify_fail+0x37)[0x7fa189635e37]/lib/x86_64-linux-gnu/libcso6(+0x108d30)[0x7fa189634d30]/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/amd64/libnetso(java_java_net_inet4addressimpl_getlocalhostname+0x1a0)[0x7fa1843c0d80][0x7fa17d0136b0]``` || this seem to be an issue with travis itself :  || from their thread the workaround in the [travisyml]( doesnt work anymorecc @raphw  || ha theres been a change a few days ago :  should use the hosts addon : ``` ymladdons:  hosts:    - myshorthost  hostname: myshorthost``` || aside from the help removal that i dont want removed the code  @christianschwarz you can rebase on master i may have pushed a working fix for the buffer overflow issue in #553 || @bric3 > aside from the help removal that i dont want removed the code looks goodthanks for reviewing! if you dont mind i would like to have a short discussion on the error message inorder to help devs to fix the issue---full error message:```cannot instantiate @injectmocks field named configurationmanageryou havent provided the instance at field declaration so i tried to construct the instancehowever i failed because: the type configurationmanager is an interfaceexamples of correct usage of @injectmocks:   @injectmocks service service  new service()   @injectmocks service service   //also dont forget about mockitoannotationsinitmocks()   //and dont forget about some @mocks for injection :)```**line 1**: `"cannot instantiate @injectmocks field named " + fieldname + ""`okay that line was replaced with something like: `"@injectmocks failed on field f cause the type innerclass is an inner non static class"` so far so good**line 2**:  `"you havent provided the instance at field declaration so i tried to construct the instance"`i would like to remove that line the dev added @injectmocks in order to construct  an instance do  we really need to tell him what he did?  **line 3**: `"however i failed because: " + detailsgetmessage()`can be removed it is now included in the first line**line 4**: `"examples of correct usage of @injectmocks:"`hmmm i have no idea how a dev can learn from the provided examples the field declaration is not wrong in this case but the provided filed type that is hard (impossible) to express in an example if you have an idea i will add it**line 5**: `"   @injectmocks service service  new service()"`ouch that hurts! i didnt know that it works! what do users expect to happen in this case big question? imho mockito should fail here indicating that either @injectmocks should be removed cause it have no effect or indicating that the field must be initialised with `null`/ leaved blank or is it over written after mockito set the field?**line 6**: `"   @injectmocks service service"`same as for line 4**line 7**: `"   //also dont forget about mockitoannotationsinitmocks()"`this line can be removed the user (or rule/runner) didnt forget to call initmocks() other wise he wont see this error message**line 8**:  `"   //and dont forget about some @mocks for injection :)"`that is confusing we dont need mocked fields if the class has an no arg  constructor` ||   550  **<  
550,1,1,1,0,1,1,1,0,0,259.691072471037, #538 changed error message in case initialization for mock injection fails  #538if a filed is annotated with @injectmocks and the type of a field is an enum inner class interface or local class the error message is now: _"mock injection failed on field fieldname cause the type abstractcollection is an abstract class_" openjdk6 build failed the others gone clearwow! the native world exploded``` test*** buffer overflow detected ***: /usr/lib/jvm/java-6-openjdk-amd64/bin/java terminated backtrace: /lib/x86_64-linux-gnu/libcso6(__fortify_fail+0x37)[0x7fa189635e37]/lib/x86_64-linux-gnu/libcso6(+0x108d30)[0x7fa189634d30]/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/amd64/libnetso(java_java_net_inet4addressimpl_getlocalhostname+0x1a0)[0x7fa1843c0d80][0x7fa17d0136b0]``` || this seem to be an issue with travis itself :  || from their thread the workaround in the [travisyml]( doesnt work anymorecc @raphw  || ha theres been a change a few days ago :  should use the hosts addon : ``` ymladdons:  hosts:    - myshorthost  hostname: myshorthost``` || aside from the help removal that i dont want removed the code  @christianschwarz you can rebase on master i may have pushed a working fix for the buffer overflow issue in #553 || @bric3 > aside from the help removal that i dont want removed the code looks goodthanks for reviewing! if you dont mind i would like to have a short discussion on the error message inorder to help devs to fix the issue---full error message:```cannot instantiate @injectmocks field named configurationmanageryou havent provided the instance at field declaration so i tried to construct the instancehowever i failed because: the type configurationmanager is an interfaceexamples of correct usage of @injectmocks:   @injectmocks service service  new service()   @injectmocks service service   //also dont forget about mockitoannotationsinitmocks()   //and dont forget about some @mocks for injection :)```**line 1**: `"cannot instantiate @injectmocks field named " + fieldname + ""`okay that line was replaced with something like: `"@injectmocks failed on field f cause the type innerclass is an inner non static class"` so far so good**line 2**:  `"you havent provided the instance at field declaration so i tried to construct the instance"`i would like to remove that line the dev added @injectmocks in order to construct  an instance do  we really need to tell him what he did?  **line 3**: `"however i failed because: " + detailsgetmessage()`can be removed it is now included in the first line**line 4**: `"examples of correct usage of @injectmocks:"`hmmm i have no idea how a dev can learn from the provided examples the field declaration is not wrong in this case but the provided filed type that is hard (impossible) to express in an example if you have an idea i will add it**line 5**: `"   @injectmocks service service  new service()"`ouch that hurts! i didnt know that it works! what do users expect to happen in this case big question? imho mockito should fail here indicating that either @injectmocks should be removed cause it have no effect or indicating that the field must be initialised with `null`/ leaved blank or is it over written after mockito set the field?**line 6**: `"   @injectmocks service service"`same as for line 4**line 7**: `"   //also dont forget about mockitoannotationsinitmocks()"`this line can be removed the user (or rule/runner) didnt forget to call initmocks() other wise he wont see this error message**line 8**:  `"   //and dont forget about some @mocks for injection :)"`that is confusing we dont need mocked fields if the class has an no arg  constructor` ||   550  **<  
555,1,1,0,1,1,1,1,0,1,384,junit rules report unused stubs - 384 - makes junit rules detect unused stubs- introduces mockitolistener api- see the use case in issue #384 - recreated pr #527 with squashed commits lets merge this today this pr is a squash of #527 plus some code changes per code review feedback (i addressed code feedback subjectively and selectively :) ||   555  
555,1,1,0,1,1,1,0,0,1,622.376115226719,junit rules report unused stubs - 384 - makes junit rules detect unused stubs- introduces mockitolistener api- see the use case in issue #384 - recreated pr #527 with squashed commits lets merge this today this pr is a squash of #527 plus some code changes per code review feedback (i addressed code feedback subjectively and selectively :) ||   555  
555,1,1,0,1,1,1,1,0,1,527,junit rules report unused stubs - 384 - makes junit rules detect unused stubs- introduces mockitolistener api- see the use case in issue #384 - recreated pr #527 with squashed commits lets merge this today this pr is a squash of #527 plus some code changes per code review feedback (i addressed code feedback subjectively and selectively :) ||   555  
555,1,1,0,1,1,1,0,0,0,1240.84395405605,junit rules report unused stubs - 384 - makes junit rules detect unused stubs- introduces mockitolistener api- see the use case in issue #384 - recreated pr #527 with squashed commits lets merge this today this pr is a squash of #527 plus some code changes per code review feedback (i addressed code feedback subjectively and selectively :) ||   555  
560,1,0,0,1,1,1,0,0,1,554,554 : checkschecknotnull now throws iae instead of npe changes npe to iae see #554 lgtm you can merge when travis passes ||
560,1,1,0,1,1,1,0,0,0,1077.94839423188,554 : checkschecknotnull now throws iae instead of npe changes npe to iae see #554 lgtm you can merge when travis passes ||
568,1,0,0,0,1,1,0,0,0,332,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes #401 yay!!!!highlights:-  the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs- removed stubbinglistener api (it could not work to the thread safety levels we support in mockito see also #545)closes #332401   if no other feedback if youre happy with change merge yourself :) ||
568,0,1,0,1,1,0,0,0,0,1317.96964217827,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes #401 yay!!!!highlights:-  the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs- removed stubbinglistener api (it could not work to the thread safety levels we support in mockito see also #545)closes #332401   if no other feedback if youre happy with change merge yourself :) ||
568,1,0,0,0,1,1,0,0,0,401,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes #401 yay!!!!highlights:-  the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs- removed stubbinglistener api (it could not work to the thread safety levels we support in mockito see also #545)closes #332401   if no other feedback if youre happy with change merge yourself :) ||
568,1,0,1,0,1,0,0,0,0,1626.73840836016,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes #401 yay!!!!highlights:-  the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs- removed stubbinglistener api (it could not work to the thread safety levels we support in mockito see also #545)closes #332401   if no other feedback if youre happy with change merge yourself :) ||
569,1,0,0,0,1,1,0,0,1,541,improved the public api of mockingdetails 541 highlights:- started exposing full mock creation information instead of just type to mock and extra interfaces- changed public api but only for methods that were introduced in 2x so it is _not_ backwards incompatible change as far as 110 is concerned   if no other feedback if youre happy with change merge yourself :) || i needed to merge because it was blocking me i can address @bric3 comment later if such is the decision || @szczepiq nope your feedback works for me as well ) ||
569,1,1,0,0,1,1,0,0,0,1881.97546837135,improved the public api of mockingdetails 541 highlights:- started exposing full mock creation information instead of just type to mock and extra interfaces- changed public api but only for methods that were introduced in 2x so it is _not_ backwards incompatible change as far as 110 is concerned   if no other feedback if youre happy with change merge yourself :) || i needed to merge because it was blocking me i can address @bric3 comment later if such is the decision || @szczepiq nope your feedback works for me as well ) ||
592,1,1,0,1,1,1,1,0,1,552,stylesheet-tweaks-for-openjdk6 #589 aimed to fix the javadoc rendering but the assumption was that the javadoc tool of the sun jdk6 will render javadoc the same way as openjdk6unfortunately this is not the same the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements this making the stylesheet incompatiblethis pr aims to fix that and thus 552 bonus i changed the `2*` and `20`  200` in the javadoc this way we have aligned version numbers  
592,1,1,1,1,1,1,1,0,1,2111.37264372978,stylesheet-tweaks-for-openjdk6 #589 aimed to fix the javadoc rendering but the assumption was that the javadoc tool of the sun jdk6 will render javadoc the same way as openjdk6unfortunately this is not the same the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements this making the stylesheet incompatiblethis pr aims to fix that and thus 552 bonus i changed the `2*` and `20`  200` in the javadoc this way we have aligned version numbers  
615,1,1,1,1,1,1,1,0,1,497,497 : returns_deep_stubs may try to mock final classes 497with deep stubs it was possible for generic metadata to be lost/unusedthrough nested invocations on non generic types this could cause `returns_deep_stubs` to try mocking final classes which would result in a `classcastexception`apparently my other pr (#549) wasnt quite enough to fully fix this problem---**edited by mockito team**   615  **< 
615,1,1,0,1,1,1,0,0,0,969.966572538691,497 : returns_deep_stubs may try to mock final classes 497with deep stubs it was possible for generic metadata to be lost/unusedthrough nested invocations on non generic types this could cause `returns_deep_stubs` to try mocking final classes which would result in a `classcastexception`apparently my other pr (#549) wasnt quite enough to fully fix this problem---**edited by mockito team**   615  **< 
617,1,0,0,0,1,1,0,0,0,338,moves arity interfaces of java8 helper answers to public api the java 8 helper interfaces have been introduced in #338 however the public `additionalanswersanswer` family leak the functional interfacesthese _parameter arity_ interfaces can be public hence they are moved next to `answer` in the `orgmockitostubbing` packageim however in favor of adding the `@incubating` annotation on those apis and related objects thoughts ?614   617   some very small doc comments lgtm also with the `@incubating` 
617,1,1,0,1,1,1,0,0,1,598.891577858182,moves arity interfaces of java8 helper answers to public api the java 8 helper interfaces have been introduced in #338 however the public `additionalanswersanswer` family leak the functional interfacesthese _parameter arity_ interfaces can be public hence they are moved next to `answer` in the `orgmockitostubbing` packageim however in favor of adding the `@incubating` annotation on those apis and related objects thoughts ?614   617   some very small doc comments lgtm also with the `@incubating` 
619,1,0,0,0,0,1,0,0,1,548,548 from now on verification happens always call in other thre… should fix problems with #548 and #601     i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist :  || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now!    || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||
619,1,0,1,0,1,0,0,0,0,1585.3189419666,548 from now on verification happens always call in other thre… should fix problems with #548 and #601     i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist :  || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now!    || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||
619,1,0,0,0,0,1,0,0,1,601,548 from now on verification happens always call in other thre… should fix problems with #548 and #601     i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist :  || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now!    || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||
619,0,1,0,1,1,0,0,0,0,1361.59629675846,548 from now on verification happens always call in other thre… should fix problems with #548 and #601     i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist :  || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now!    || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||
623,0,0,0,0,0,1,0,0,0,596,updated the javadocs polishing the javadocs starting with this small pr:issue #596- updated @since to 210 (instead 200)- added more docs around the verification collector     
623,1,1,1,1,1,1,1,0,0,1589.5578425593,updated the javadocs polishing the javadocs starting with this small pr:issue #596- updated @since to 210 (instead 200)- added more docs around the verification collector     
635,0,0,0,1,1,1,0,0,1,439,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a `matcherapplicationstrategy` this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches(arg) call and an other is used to perfrom the capturing- 439 argumentcaptor and argumentmatchers can now be mixed in varargs- fixes #583 no more npe when null is passed to an varargs - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently) - reduced logic duplication   the pr! || @bric3 > some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with #463 at first i tried to retrieve the type-argument from the class but this turned out to be more complex eg when the type-argument is bound in an upper class or interface or additional type-arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now!> other improvements can be made later sounds good can you open a new ticket so i can take look || @mockito-core#606 can be closed now || > > other improvements can be made later> > sounds good can you open a new ticket so i can take lookat the moment this works quite well! so no hurry especially given your above remark on mockito 3 (on master atm) we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that || @christianschwarz i have seen an interesting problem with `varargstest` fail on master which is jdk 8 only while the same test passes on release/2x which is compiled and run against 3 jdk 6/7/8 im not sure why at the moment this behavior is different  plus my dev laptop is being  for a few days so im limited in my debug right nowthis happened after a merge of release/2x to master (52df10af105b7e9cd45bf214141c5096db3ecafe)i noticed that `verify(mock)varargs(isnull())` is compiled to invoke `imethodsvarargs(string  string)` im not sure other jdks behave/compile differently though one of the failing test can be fixed by adding the cast statement```    @test    public void shouldmatchvarargs_nullarrayarg() {        object argarray  null        mockvarargs(argarray)        verify(mock)varargs((object) isnull()) // otherwise it is linked against string    }```could it be that something went wrong with the merge regarding this pr ? || @christianschwarz actually the investigation continue see  ||
635,1,1,0,1,1,1,0,0,0,1256.51225283056,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a `matcherapplicationstrategy` this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches(arg) call and an other is used to perfrom the capturing- 439 argumentcaptor and argumentmatchers can now be mixed in varargs- fixes #583 no more npe when null is passed to an varargs - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently) - reduced logic duplication   the pr! || @bric3 > some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with #463 at first i tried to retrieve the type-argument from the class but this turned out to be more complex eg when the type-argument is bound in an upper class or interface or additional type-arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now!> other improvements can be made later sounds good can you open a new ticket so i can take look || @mockito-core#606 can be closed now || > > other improvements can be made later> > sounds good can you open a new ticket so i can take lookat the moment this works quite well! so no hurry especially given your above remark on mockito 3 (on master atm) we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that || @christianschwarz i have seen an interesting problem with `varargstest` fail on master which is jdk 8 only while the same test passes on release/2x which is compiled and run against 3 jdk 6/7/8 im not sure why at the moment this behavior is different  plus my dev laptop is being  for a few days so im limited in my debug right nowthis happened after a merge of release/2x to master (52df10af105b7e9cd45bf214141c5096db3ecafe)i noticed that `verify(mock)varargs(isnull())` is compiled to invoke `imethodsvarargs(string  string)` im not sure other jdks behave/compile differently though one of the failing test can be fixed by adding the cast statement```    @test    public void shouldmatchvarargs_nullarrayarg() {        object argarray  null        mockvarargs(argarray)        verify(mock)varargs((object) isnull()) // otherwise it is linked against string    }```could it be that something went wrong with the merge regarding this pr ? || @christianschwarz actually the investigation continue see  ||
635,0,0,0,1,1,1,0,0,1,583,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a `matcherapplicationstrategy` this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches(arg) call and an other is used to perfrom the capturing- 439 argumentcaptor and argumentmatchers can now be mixed in varargs- fixes #583 no more npe when null is passed to an varargs - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently) - reduced logic duplication   the pr! || @bric3 > some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with #463 at first i tried to retrieve the type-argument from the class but this turned out to be more complex eg when the type-argument is bound in an upper class or interface or additional type-arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now!> other improvements can be made later sounds good can you open a new ticket so i can take look || @mockito-core#606 can be closed now || > > other improvements can be made later> > sounds good can you open a new ticket so i can take lookat the moment this works quite well! so no hurry especially given your above remark on mockito 3 (on master atm) we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that || @christianschwarz i have seen an interesting problem with `varargstest` fail on master which is jdk 8 only while the same test passes on release/2x which is compiled and run against 3 jdk 6/7/8 im not sure why at the moment this behavior is different  plus my dev laptop is being  for a few days so im limited in my debug right nowthis happened after a merge of release/2x to master (52df10af105b7e9cd45bf214141c5096db3ecafe)i noticed that `verify(mock)varargs(isnull())` is compiled to invoke `imethodsvarargs(string  string)` im not sure other jdks behave/compile differently though one of the failing test can be fixed by adding the cast statement```    @test    public void shouldmatchvarargs_nullarrayarg() {        object argarray  null        mockvarargs(argarray)        verify(mock)varargs((object) isnull()) // otherwise it is linked against string    }```could it be that something went wrong with the merge regarding this pr ? || @christianschwarz actually the investigation continue see  ||
635,1,1,0,1,1,1,0,0,0,1255.49618908556,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a `matcherapplicationstrategy` this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches(arg) call and an other is used to perfrom the capturing- 439 argumentcaptor and argumentmatchers can now be mixed in varargs- fixes #583 no more npe when null is passed to an varargs - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently) - reduced logic duplication   the pr! || @bric3 > some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with #463 at first i tried to retrieve the type-argument from the class but this turned out to be more complex eg when the type-argument is bound in an upper class or interface or additional type-arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now!> other improvements can be made later sounds good can you open a new ticket so i can take look || @mockito-core#606 can be closed now || > > other improvements can be made later> > sounds good can you open a new ticket so i can take lookat the moment this works quite well! so no hurry especially given your above remark on mockito 3 (on master atm) we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that || @christianschwarz i have seen an interesting problem with `varargstest` fail on master which is jdk 8 only while the same test passes on release/2x which is compiled and run against 3 jdk 6/7/8 im not sure why at the moment this behavior is different  plus my dev laptop is being  for a few days so im limited in my debug right nowthis happened after a merge of release/2x to master (52df10af105b7e9cd45bf214141c5096db3ecafe)i noticed that `verify(mock)varargs(isnull())` is compiled to invoke `imethodsvarargs(string  string)` im not sure other jdks behave/compile differently though one of the failing test can be fixed by adding the cast statement```    @test    public void shouldmatchvarargs_nullarrayarg() {        object argarray  null        mockvarargs(argarray)        verify(mock)varargs((object) isnull()) // otherwise it is linked against string    }```could it be that something went wrong with the merge regarding this pr ? || @christianschwarz actually the investigation continue see  ||
639,0,0,0,0,1,1,0,0,1,520,update travis configuration to also build on oraclejdk9 lets see if this actually works testing for #520   639 theres a new build || > also shall we update jacoco snapshot theres a new buildi would rather wait for the official 078 release and upgrade to that || ok fair enough ) || shalli merge this one? || yes || 
639,1,1,1,1,1,1,1,0,0,1511.26638484237,update travis configuration to also build on oraclejdk9 lets see if this actually works testing for #520   639 theres a new build || > also shall we update jacoco snapshot theres a new buildi would rather wait for the official 078 release and upgrade to that || ok fair enough ) || shalli merge this one? || yes || 
646,1,1,0,1,1,1,1,0,1,640,640 warns user to upgrade if java 8 version is to low 640 warns user to upgrade if java 8 version is to lowalso took the opportunity to log other platform details if mock class cannot be created before merging not that automatic release system will release a 210rc2 ||   646   some test for platform would be nice especially too see if the version number extraction works with all known formats eg : - feature -> 180-b24- maintai ce -> 141_05-ea-b01- update -> 140_03-b04  140_03-ea-b01 does it work for other jvms like jrockit j9 or excelsior jet? || ok thanks for feedback ill update the code accordingly || beautiful!!! we can push and generate new rc or use the magic incantation in the commit message to prevent release and stack this change to next rc (if there is need for yet another rc) || @christianschwarz we dont care about those as we dont have report on those only oracle / openjdk although i dont know about their version scheme- bea (now oracle) jrockit > discontinued last version is java 6 and oracle migrated features in oracle jdk- ibm j9- excelsior jet - azul zing > ?- azul zulu > based on openjdk || @bric3 what i wanted to say was: the update version mechanism should be aware of version schemes other than the expected  the current implementation throws an indexoutofboundsexception if the jvm_version is eg  "180b5_u44" or an numberformatexception if the jvm_version is "140_03-ea-b01"  || @christianschwarz fantastic review  @christianschwarz yes no problem that was a valuable input i didnt want these exceptions to be thrown !i updated the test case and i did some research as well for future cases like this || wow really nice tests!!   this  
646,1,1,0,1,1,1,0,0,0,1190.58476348294,640 warns user to upgrade if java 8 version is to low 640 warns user to upgrade if java 8 version is to lowalso took the opportunity to log other platform details if mock class cannot be created before merging not that automatic release system will release a 210rc2 ||   646   some test for platform would be nice especially too see if the version number extraction works with all known formats eg : - feature -> 180-b24- maintai ce -> 141_05-ea-b01- update -> 140_03-b04  140_03-ea-b01 does it work for other jvms like jrockit j9 or excelsior jet? || ok thanks for feedback ill update the code accordingly || beautiful!!! we can push and generate new rc or use the magic incantation in the commit message to prevent release and stack this change to next rc (if there is need for yet another rc) || @christianschwarz we dont care about those as we dont have report on those only oracle / openjdk although i dont know about their version scheme- bea (now oracle) jrockit > discontinued last version is java 6 and oracle migrated features in oracle jdk- ibm j9- excelsior jet - azul zing > ?- azul zulu > based on openjdk || @bric3 what i wanted to say was: the update version mechanism should be aware of version schemes other than the expected  the current implementation throws an indexoutofboundsexception if the jvm_version is eg  "180b5_u44" or an numberformatexception if the jvm_version is "140_03-ea-b01"  || @christianschwarz fantastic review  @christianschwarz yes no problem that was a valuable input i didnt want these exceptions to be thrown !i updated the test case and i did some research as well for future cases like this || wow really nice tests!!   this  
654,0,0,0,0,1,1,0,0,0,653,renamed failuredetecter to failure detector also renamed misspelled issussessful() to issuccessful()fixes: #653     thanks oliver! ||
654,1,1,0,1,1,1,0,0,0,1218.9115223721,renamed failuredetecter to failure detector also renamed misspelled issussessful() to issuccessful()fixes: #653     thanks oliver! ||
711,0,0,0,0,1,0,0,0,0,707,707 adds throwable to arity answers also improved javadoc all in the title this should 707 lgtm restarted the build that was failing on an unrelated test ||  
711,1,1,1,1,1,1,1,0,0,1531.26800029429,707 adds throwable to arity answers also improved javadoc all in the title this should 707 lgtm restarted the build that was failing on an unrelated test ||  
746,1,1,1,1,1,1,1,1,1,727,add missing copyright headers -  727 -  add missing copyrights using [license-gradle-plugin](  updated only source files test files were skipped existing copyright headers were not modified unfortunately the plug-in is not compiled for java 6i really would like to avoid as much as possible maintaining 2x too long || however i suppose we can change the jdk that gradle use if this is a separate task in traviswhy a separate task because if gradle runs the under the code under another jdk we may miss specific jdk 6 runtime behavior || per  we can use version 0110 and make it work on jdk6 || good point lets do that instead @dmitriyzaitsev could you amend b27af329e91743e945e5971a3e5b7a4f839d0f03 with the working version? thanks in advance || @dmitriyzaitsev by id like to say you have done a proper pull request thats very nice! ||  
746,0,1,0,1,1,0,0,0,0,1361.86206490125,add missing copyright headers -  727 -  add missing copyrights using [license-gradle-plugin](  updated only source files test files were skipped existing copyright headers were not modified unfortunately the plug-in is not compiled for java 6i really would like to avoid as much as possible maintaining 2x too long || however i suppose we can change the jdk that gradle use if this is a separate task in traviswhy a separate task because if gradle runs the under the code under another jdk we may miss specific jdk 6 runtime behavior || per  we can use version 0110 and make it work on jdk6 || good point lets do that instead @dmitriyzaitsev could you amend b27af329e91743e945e5971a3e5b7a4f839d0f03 with the working version? thanks in advance || @dmitriyzaitsev by id like to say you have done a proper pull request thats very nice! ||  
771,1,0,0,0,0,1,0,0,1,731,731 implements retry rule for flaky tests previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in #731 to gain back stability on the build  
771,1,1,0,1,1,1,0,0,1,746.26806360342,731 implements retry rule for flaky tests previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in #731 to gain back stability on the build  
803,1,0,0,1,1,1,0,0,1,801,adds a warning for ibm j9 vms if mock generation fails related to #801 this pr simply adds a warning for ibm j9 vms if the mock maker fails  
803,1,0,0,0,1,0,0,0,0,1702.11423206814,adds a warning for ibm j9 vms if mock generation fails related to #801 this pr simply adds a warning for ibm j9 vms if the mock maker fails  
807,1,0,0,0,0,1,0,0,0,770,new opt-in stubbing strictness implemented in junit rules new api (for rationale see #769 for code review history see #770):```java//existing api:@rule public mockitorule mockito  mockitojunitrule()//proposed improvements:rule()strictness(strictnesslenient)rule()strictness(strictnesswarn)       // <-- is the defaultrule()strictness(strictnessstrict_stubs)  // <-- mockito 30 default```what "strict stubbing" means?- improved debuggability: the test fails early when code under test invokes stubbed method with different arguments- cleaner tests without unnecessary stubbings: the test fails when there are any unused stubs declared- cleaner more dry tests ("dont repeat yourself"): if you use mockitoverifynomoreinteractions() you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out [szczepans article on linkedin](https://wwwlinkedincom/pulse/curious-how-get-even-cleaner-tests-new-mockito-features-faber) with interactive rebase you can squash commits away or use `git reset --soft head~2` to reset the last 2 commits    ||   
807,1,1,1,0,1,1,1,0,0,148.964451899767,new opt-in stubbing strictness implemented in junit rules new api (for rationale see #769 for code review history see #770):```java//existing api:@rule public mockitorule mockito  mockitojunitrule()//proposed improvements:rule()strictness(strictnesslenient)rule()strictness(strictnesswarn)       // <-- is the defaultrule()strictness(strictnessstrict_stubs)  // <-- mockito 30 default```what "strict stubbing" means?- improved debuggability: the test fails early when code under test invokes stubbed method with different arguments- cleaner tests without unnecessary stubbings: the test fails when there are any unused stubs declared- cleaner more dry tests ("dont repeat yourself"): if you use mockitoverifynomoreinteractions() you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out [szczepans article on linkedin](https://wwwlinkedincom/pulse/curious-how-get-even-cleaner-tests-new-mockito-features-faber) with interactive rebase you can squash commits away or use `git reset --soft head~2` to reset the last 2 commits    ||   
821,1,0,0,1,1,1,1,0,0,820,820 returnsargat to handle returning vararg as arrays attempt at fixing #820basically it makes the returnsargumentat answer a bit more smart about varargs but im not satisfied with the fix yet  
821,1,1,1,0,1,1,1,0,0,285.521646395587,820 returnsargat to handle returning vararg as arrays attempt at fixing #820basically it makes the returnsargumentat answer a bit more smart about varargs but im not satisfied with the fix yet  
823,1,1,0,1,1,1,1,0,1,818,only resolve instrumented method after validating that an instance is… this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a `method` instance which requires using a `hashmap` which causes an infitite loop upon mocking the hash map type 818  
823,1,1,1,1,1,1,1,0,1,2090.08244930174,only resolve instrumented method after validating that an instance is… this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a `method` instance which requires using a `hashmap` which causes an infitite loop upon mocking the hash map type 818  
826,0,0,0,1,1,1,1,0,1,820,introduce validable answers for early validation of stubbing ## overviewcustom answers are now more robust - users can add add validation logic to the answer implementation it can validate the return type early during stubbing in test rather than fail late during execution of code under test mockito team uses this api behind the hood for all custom implementations of answer interface now advanced users can leverage this new api too!```javaclass mycustomanswer implements answer validableanswer { // <-- note extra "validableanswer" interface  public object answer(invocationonmock invocation) {    // answer implementation  }  public void validatefor(invocationonmock invocation) {    // throw mockitoexception if answer cannot be applied to given invocation  }}``` ## implementationwhile trying to 820 / #821 i noticed that `answersvalidator` knew too much about other answers to fix the design issue i propose the following design :* introduce `validableanswer` in public api which is a single method interface that doesnt extends `answer`* each answer that wants to be validated hence implement this interfacebenefit reduced visibility of some methods in these answers each new answer that want to be validated can just by implementing the new contractvalidating returned value of a mocks default answer had to be handled differently   
826,1,1,0,1,1,1,0,0,0,1252.89591510024,introduce validable answers for early validation of stubbing ## overviewcustom answers are now more robust - users can add add validation logic to the answer implementation it can validate the return type early during stubbing in test rather than fail late during execution of code under test mockito team uses this api behind the hood for all custom implementations of answer interface now advanced users can leverage this new api too!```javaclass mycustomanswer implements answer validableanswer { // <-- note extra "validableanswer" interface  public object answer(invocationonmock invocation) {    // answer implementation  }  public void validatefor(invocationonmock invocation) {    // throw mockitoexception if answer cannot be applied to given invocation  }}``` ## implementationwhile trying to 820 / #821 i noticed that `answersvalidator` knew too much about other answers to fix the design issue i propose the following design :* introduce `validableanswer` in public api which is a single method interface that doesnt extends `answer`* each answer that wants to be validated hence implement this interfacebenefit reduced visibility of some methods in these answers each new answer that want to be validated can just by implementing the new contractvalidating returned value of a mocks default answer had to be handled differently   
830,0,0,0,0,0,1,1,0,0,822,improves exception message in case a matcher is used for a primitive parameter this should help for cases like #822 npe can be raised by the jvm on the callsite of a matcher returning object like `any()`the thing is that the jvm does several thing like to allows a type to match a signature like `<t> t any()` type inference with java 8 cast and unboxing however `any()` can only return `null` so the jvm raises an npe on the cast opcode of course the problem isnt new but more possible due to java 8 flexibility thats why mockito had for a long time the primitivewhen mockito is used with the junit runner or the junit rule theres a `invaliduseofmatchersexception` raised **after** the npe with a message about misplaced matchers this exception is raised because the matchers were not consumed by the mock since the npe is raised first so this exception is correct and can help the neophyte to discover the primitive variant like `anyint()` i love this change! the description of the pr is really good i immediately was able to understand the use case mockito is great because we never stop improving the ux - the exception messages and suchbig 
830,1,0,0,0,1,0,0,0,0,1762.71677589399,improves exception message in case a matcher is used for a primitive parameter this should help for cases like #822 npe can be raised by the jvm on the callsite of a matcher returning object like `any()`the thing is that the jvm does several thing like to allows a type to match a signature like `<t> t any()` type inference with java 8 cast and unboxing however `any()` can only return `null` so the jvm raises an npe on the cast opcode of course the problem isnt new but more possible due to java 8 flexibility thats why mockito had for a long time the primitivewhen mockito is used with the junit runner or the junit rule theres a `invaliduseofmatchersexception` raised **after** the npe with a message about misplaced matchers this exception is raised because the matchers were not consumed by the mock since the npe is raised first so this exception is correct and can help the neophyte to discover the primitive variant like `anyint()` i love this change! the description of the pr is really good i immediately was able to understand the use case mockito is great because we never stop improving the ux - the exception messages and suchbig 
831,1,0,0,1,1,1,0,0,1,825,test clean up according to discussions for rememberinglisteners according to issue @719 we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in #825 that build was failing for some reason not obvious and had 1 merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr     @bric3 @timvdlippe sorry for this new pr with the same code previously we were discussing #825 in an attempt to fix the pr github lost the link and i couldnt reconnect it this pr is building and has only one commit message and no merge || looks good to me thanks for the improvement ||
831,1,1,0,1,1,1,0,0,0,1002.83512211236,test clean up according to discussions for rememberinglisteners according to issue @719 we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in #825 that build was failing for some reason not obvious and had 1 merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr     @bric3 @timvdlippe sorry for this new pr with the same code previously we were discussing #825 in an attempt to fix the pr github lost the link and i couldnt reconnect it this pr is building and has only one commit message and no merge || looks good to me thanks for the improvement ||
839,1,0,0,0,1,1,1,0,1,838,838 : adds a matches(pattern) following discussion in #838 it is sensible to add a mockito matcher that can take a `pattern` as an argumentthe usage is the same as `matches(string)````javawhen(mockonearg(matches(patterncompile("[a-z]+\\d\\d"))))thenreturn()```although it allows to build more complex regex especially with regular expression flags @mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right away || >@mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right awayabsolutelyupdating the public api needs review from other team mates but in this case its best to move fast its an overloaded method very natural complement to the existing one thanks @bric3! || yes exactly :) ||
839,1,1,1,1,1,1,1,0,0,1517.99555225991,838 : adds a matches(pattern) following discussion in #838 it is sensible to add a mockito matcher that can take a `pattern` as an argumentthe usage is the same as `matches(string)````javawhen(mockonearg(matches(patterncompile("[a-z]+\\d\\d"))))thenreturn()```although it allows to build more complex regex especially with regular expression flags @mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right away || >@mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right awayabsolutelyupdating the public api needs review from other team mates but in this case its best to move fast its an overloaded method very natural complement to the existing one thanks @bric3! || yes exactly :) ||
843,0,0,0,0,0,1,0,0,0,840,junit rule strictness can be tweaked per test method see the design and rationale at #840please review!   tomorrow morning unless theres feedback thanks @timvdlippe for review! ||
843,1,0,0,0,1,0,0,0,0,1718.86243323303,junit rule strictness can be tweaked per test method see the design and rationale at #840please review!   tomorrow morning unless theres feedback thanks @timvdlippe for review! ||
861,0,0,0,0,1,1,0,0,1,860,backport release/2x changes to master (20161231) + fix for #860 backport release/2x changes to master + the fix for #860 reported also #862 for broken inlinebytebuddymockmakertest test with java 9 ||   861   its green anyone willing to approve/provide further feedback? || lgtm! ||
861,1,1,1,0,1,1,1,0,0,265.385167787706,backport release/2x changes to master (20161231) + fix for #860 backport release/2x changes to master + the fix for #860 reported also #862 for broken inlinebytebuddymockmakertest test with java 9 ||   861   its green anyone willing to approve/provide further feedback? || lgtm! ||
865,1,0,0,0,1,1,0,0,0,384,new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking   
865,0,1,0,1,1,0,0,0,0,1449.14803262631,new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking   
865,1,0,0,0,1,1,0,0,0,857,new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking   
865,1,1,0,1,1,1,0,0,1,924.812729400616,new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking   
865,1,0,0,0,1,1,0,0,0,898,new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking   
865,0,1,0,1,1,0,0,0,0,1471.43457044661,new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking   
867,0,0,0,0,1,1,1,0,0,866,866 should not throw npe when custom exception fillinstacktrace returns null 866 @wuwen5 can you rebase this commit on the latest `release/2x`also thanks for the contribution || the build is failingthe reason is `please export gh_token env variable first expression: javalangsystemenv[it] values: it  gh_token`@timvdlippe that sound familiar however i believe this was  a couple of weeks ago ||
867,1,1,0,1,1,1,0,0,0,2017.58629281242,866 should not throw npe when custom exception fillinstacktrace returns null 866 @wuwen5 can you rebase this commit on the latest `release/2x`also thanks for the contribution || the build is failingthe reason is `please export gh_token env variable first expression: javalangsystemenv[it] values: it  gh_token`@timvdlippe that sound familiar however i believe this was  a couple of weeks ago ||
868,1,1,0,1,1,0,1,0,1,860,860 jacaco synthetic fields are not anymore final in 078 860 this internal assumed jacoco fields will always be `static final` obviously not jacoco 078 changed that the simple fix was to make the source field _accessible_ instead of skipping this fieldhence removing the test exclusion  
868,1,0,1,0,1,0,0,0,0,1548.15306314614,860 jacaco synthetic fields are not anymore final in 078 860 this internal assumed jacoco fields will always be `static final` obviously not jacoco 078 changed that the simple fix was to make the source field _accessible_ instead of skipping this fieldhence removing the test exclusion  
880,1,0,0,0,1,0,0,0,0,879,879: argumentmatchers javadoc grammar improvement  grammar issue in `argumentmatchers`:> this implementation is due static type safety imposed by java compilershould be:> this implementation is due to static type safety imposed by java compilerthis pr fixes issue #879   880   
880,1,1,1,1,1,1,1,0,1,640.895589358662,879: argumentmatchers javadoc grammar improvement  grammar issue in `argumentmatchers`:> this implementation is due static type safety imposed by java compilershould be:> this implementation is due to static type safety imposed by java compilerthis pr fixes issue #879   880   
881,1,0,0,0,1,0,0,0,0,879, #879: argumentmatchers grammar fix cherry-pick pr #880 to the 2x branchthis pr should  #879 on this branch too  
881,1,1,0,1,1,1,0,0,1,803.046047493856, #879: argumentmatchers grammar fix cherry-pick pr #880 to the 2x branchthis pr should  #879 on this branch too  
885,0,0,0,1,1,0,0,0,1,878,spy annotation reports better error message if instance creation is impossible this simple piece of code prevents the `spyannotationengine` to try create a spy instance for a some inner private class with different set of modifierswhile preventing execution it reports slightly better error messages before some time the cause was `null`  this should 878  
885,1,1,1,1,1,1,1,0,1,2081.90108819742,spy annotation reports better error message if instance creation is impossible this simple piece of code prevents the `spyannotationengine` to try create a spy instance for a some inner private class with different set of modifierswhile preventing execution it reports slightly better error messages before some time the cause was `null`  this should 878  
891,1,0,0,0,0,1,0,0,1,874,update to byte buddy 164: fixes bridge method resolution for generic types 874  
891,1,1,0,0,1,1,0,0,0,1796.54862729649,update to byte buddy 164: fixes bridge method resolution for generic types 874  
896,1,1,0,0,1,1,0,0,1,895,clarify documentation for consecutive stubbing 895as of now the documentation does not clarify the difference of behaviour between chaining multiple thenreturn() statements and using multiple when/thenreturn statements when someone attempts to perform consecutive stubbingi added a warning/clarification in the documentation with a corresponding example so that its more clear (especially for new users of mockito)  
896,1,1,1,0,1,1,1,0,0,174.271123449041,clarify documentation for consecutive stubbing 895as of now the documentation does not clarify the difference of behaviour between chaining multiple thenreturn() statements and using multiple when/thenreturn statements when someone attempts to perform consecutive stubbingi added a warning/clarification in the documentation with a corresponding example so that its more clear (especially for new users of mockito)  
905,1,1,0,0,1,1,0,0,1,814,814 : a elements were missing the name attribute meaningful links probably never worked as expectedthe `a` elements were missing the `name` attribute so the browser couldnt find the matching part of the documentfor reference : [598 navigating to a fragment identifier]( for html documents (and the text/html mime type) the following processing model must be followed to determine what the indicated part of the document is> > 1 parse the url and let fragid be the <fragment> component of the url> 2 if fragid is the empty string then the indicated part of the document is the top of the document> 3 if there is an element in the dom that has an id exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here> 4 if there is an a element in the dom that has a name attribute whose value is exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here> 5 otherwise there is no indicated part of the document i am merging this one as this is very simple || hm dont want a quick review? i try to never self-merge as it got me numerous times already || the change is damn simple (its just adding `name` attribute)  with a simple regexp ||  
905,1,1,0,0,1,1,0,0,0,1806.27930591297,814 : a elements were missing the name attribute meaningful links probably never worked as expectedthe `a` elements were missing the `name` attribute so the browser couldnt find the matching part of the documentfor reference : [598 navigating to a fragment identifier]( for html documents (and the text/html mime type) the following processing model must be followed to determine what the indicated part of the document is> > 1 parse the url and let fragid be the <fragment> component of the url> 2 if fragid is the empty string then the indicated part of the document is the top of the document> 3 if there is an element in the dom that has an id exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here> 4 if there is an a element in the dom that has a name attribute whose value is exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here> 5 otherwise there is no indicated part of the document i am merging this one as this is very simple || hm dont want a quick review? i try to never self-merge as it got me numerous times already || the change is damn simple (its just adding `name` attribute)  with a simple regexp ||  
907,1,0,0,0,1,1,0,0,1,426,unified all number of invocations checker in numberofinvocationschecker 426this pr unifies the functionality of `nongreedynumberofinvocationschecker` `numberofinvocationscheckerinorder `and `numberofinvocationschecker `in static methods of the type `numberofinvocationschecker` this saves ~50 lines of code and increases readability on the call sides  
907,1,1,1,1,1,1,1,0,0,2467.65273025959,unified all number of invocations checker in numberofinvocationschecker 426this pr unifies the functionality of `nongreedynumberofinvocationschecker` `numberofinvocationscheckerinorder `and `numberofinvocationschecker `in static methods of the type `numberofinvocationschecker` this saves ~50 lines of code and increases readability on the call sides  
908,1,0,0,1,1,1,0,0,0,426,simplified the creation of argumentsaredifferent-exceptions relates to #426 this pr simplifies the creation of argumentsaredifferent-exceptions saving 2 classes and ~40 lines of code    no coverage uploaded for pull request base (`release/2x@1cbc7f8`) [click here to learn what that means]( ` 
908,1,1,0,1,1,1,0,0,0,1183.35614133498,simplified the creation of argumentsaredifferent-exceptions relates to #426 this pr simplifies the creation of argumentsaredifferent-exceptions saving 2 classes and ~40 lines of code    no coverage uploaded for pull request base (`release/2x@1cbc7f8`) [click here to learn what that means]( ` 
914,1,1,0,1,1,1,1,0,1,426,refactored removefirstline to a static utility class relates to #426 refactored `removefirstline` to a static utility classi would like to unifiy `removefirstline` `decamelizer` and `stringjoiner` to a new type `stringutil` they all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes any thoughts?  
914,1,1,1,1,1,1,1,0,0,1592.20946240327,refactored removefirstline to a static utility class relates to #426 refactored `removefirstline` to a static utility classi would like to unifiy `removefirstline` `decamelizer` and `stringjoiner` to a new type `stringutil` they all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes any thoughts?  
933,1,1,0,1,1,1,1,0,1,927,support for return type void in doesnothinganswer 927 this pr allows to use `donothing()` for methods with return type `javalangvoid` like void-methods  to solve this `invocationinfoisvoid()` checks now the return type for the pseudo-type of the keyword `void` or `void`    no coverage uploaded for pull request base  
933,1,1,1,1,1,1,1,0,0,1497.35400857642,support for return type void in doesnothinganswer 927 this pr allows to use `donothing()` for methods with return type `javalangvoid` like void-methods  to solve this `invocationinfoisvoid()` checks now the return type for the pseudo-type of the keyword `void` or `void`    no coverage uploaded for pull request base  
935,1,1,0,1,1,1,1,0,1,685,new feature - enable mocking using constructor arguments ## motivation and design - see #685to quote the requirement (see in-depth design in #685):> we already support spying on abstract classes by allowingparameterless constructor however there is no support forconstructor parametersthis has been asked about long time ago mockito api is not robustenough if it supports mocking with constructor but not when one hasany constructor parametersthis patch enhances the `mocksettings#useconstrctor()` method (as suggested in the alternative api comment in the issue) and addsoptional ellipsis arguments that are passed to the constructorthe patch streamlines the creation of mocks via constructors to asingle flow where using a no-arg constructor or an enclosing classare just private cases of this flow and dont require their ownspecial treatment wow! thank you for swift contribution! i will review once i have a bandwidth || apologies the previous push had a couple of failing tests due to a missed file ive updated it and it should work now ||  merging 935 
935,0,1,0,1,1,0,0,0,0,1473.96470451867,new feature - enable mocking using constructor arguments ## motivation and design - see #685to quote the requirement (see in-depth design in #685):> we already support spying on abstract classes by allowingparameterless constructor however there is no support forconstructor parametersthis has been asked about long time ago mockito api is not robustenough if it supports mocking with constructor but not when one hasany constructor parametersthis patch enhances the `mocksettings#useconstrctor()` method (as suggested in the alternative api comment in the issue) and addsoptional ellipsis arguments that are passed to the constructorthe patch streamlines the creation of mocks via constructors to asingle flow where using a no-arg constructor or an enclosing classare just private cases of this flow and dont require their ownspecial treatment wow! thank you for swift contribution! i will review once i have a bandwidth || apologies the previous push had a couple of failing tests due to a missed file ive updated it and it should work now ||  merging 935 
942,1,1,0,0,1,1,0,0,1,680,allow spying on interfaces so that it is convenient to work with java 8 default methods 680  merging 942 
942,1,1,1,1,1,1,1,0,0,1575.48714374297,allow spying on interfaces so that it is convenient to work with java 8 default methods 680  merging 942 
972,0,0,0,0,0,1,0,0,0,688,verifies #688: acceptance test to prevent future regression added an acceptance test to verify #688 this is going to fail until mockito updates to the next version of byte buddy (that re-688) that contains the following commit:  || could you rebase on `release/2x`? this test should pass now    || @timvdlippe rebased on `release/2x` and tests are passing now ||   thank you guys! nice and clean change and makes mockito safer for our users!!! ||
972,1,1,0,1,1,1,0,0,1,948.686477898196,verifies #688: acceptance test to prevent future regression added an acceptance test to verify #688 this is going to fail until mockito updates to the next version of byte buddy (that re-688) that contains the following commit:  || could you rebase on `release/2x`? this test should pass now    || @timvdlippe rebased on `release/2x` and tests are passing now ||   thank you guys! nice and clean change and makes mockito safer for our users!!! ||
979,1,1,0,1,1,1,1,0,1,974,974: fix to get correct stubbing location with inline mocking - fix stacktracefilter to support inline mocking- add one test to stacktracefiltertest- add stubbinglocationtest into inline subprojectthis pr 974  merging 979 
979,1,1,1,1,1,1,1,0,1,494.453602943089,974: fix to get correct stubbing location with inline mocking - fix stacktracefilter to support inline mocking- add one test to stacktracefiltertest- add stubbinglocationtest into inline subprojectthis pr 974  merging 979 
980,1,0,0,1,1,1,0,0,1,976,976: resolve ambiguous constructors with the current code (introduced in mockito 2714 by commit 6a82c03) calling `mocksettingsuseconstructor` with an argument list that would be applicable to more than one constructor would fail with an `orgmockitointernalcreationinstanceinstantiationexception`this behavior however is suboptimal as described in issue #976 as it makes `useconstructor` less robust than the java compiler which is able to resolve such ambiguitieswith this patch mockito will attempt to match the constructor with the most specific parameter types a constructor x is considered more specific than a constructor y if:1 they are both applicable to the given argument list2 constructor x has at least one parameter which is a further specialization of the corresponding parameter of constructor y (ie `paramxisassignablefrom(paramy)`)3 constructor y has no parameter which is a further specialization of the corresponding parameter of constructor x as defined aboveeg consider the following class:    public class someclass {        someclass(object o) {}        someclass(string s) {}    }without this patch calling    mock(someclassclass withsettings()useconstructor("string!"))would fail with this patch such a call would invoke the `someclass(string)` constructoras noted above this pr fixes issue #976  merging 980  
980,1,1,1,1,1,1,1,0,0,2381.50410966631,976: resolve ambiguous constructors with the current code (introduced in mockito 2714 by commit 6a82c03) calling `mocksettingsuseconstructor` with an argument list that would be applicable to more than one constructor would fail with an `orgmockitointernalcreationinstanceinstantiationexception`this behavior however is suboptimal as described in issue #976 as it makes `useconstructor` less robust than the java compiler which is able to resolve such ambiguitieswith this patch mockito will attempt to match the constructor with the most specific parameter types a constructor x is considered more specific than a constructor y if:1 they are both applicable to the given argument list2 constructor x has at least one parameter which is a further specialization of the corresponding parameter of constructor y (ie `paramxisassignablefrom(paramy)`)3 constructor y has no parameter which is a further specialization of the corresponding parameter of constructor x as defined aboveeg consider the following class:    public class someclass {        someclass(object o) {}        someclass(string s) {}    }without this patch calling    mock(someclassclass withsettings()useconstructor("string!"))would fail with this patch such a call would invoke the `someclass(string)` constructoras noted above this pr fixes issue #976  merging 980  
983,1,1,0,1,1,1,1,0,1,982,break cyclical compile time dependency on hiderecursivecall 982    no coverage uploaded for pull request base (`release/2x@64a1180`) [click here to learn what that means]( ` ! thanks for your quick reviews @raphw ! ||
983,1,1,1,0,1,1,1,0,0,165.640997230162,break cyclical compile time dependency on hiderecursivecall 982    no coverage uploaded for pull request base (`release/2x@64a1180`) [click here to learn what that means]( ` ! thanks for your quick reviews @raphw ! ||
985,1,1,0,0,1,1,0,0,1,929,981: update javadoc about the mockito-inline artifact this pr 981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that  
985,1,1,0,1,1,1,0,0,0,2055.08669546024,981: update javadoc about the mockito-inline artifact this pr 981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that  
985,1,1,0,0,1,1,0,0,1,981,981: update javadoc about the mockito-inline artifact this pr 981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that  
985,1,1,0,1,1,1,0,0,0,1181.62734320668,981: update javadoc about the mockito-inline artifact this pr 981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that  
995,1,0,0,0,1,1,0,0,1,989,verifyzerointeractions guarantees zero interactions instead of just delegating to verifynomoreinteractions 989`verifyzerointeractions` no longer delegates to `verifynomoreinteractions`instead it fetches the number of invocations made to the mock and checks ifthey are zero failing otherwiseim not sure if the style of my code complies with mockito: please let me know what to change and where to look to make it more mockitoish you can always check if you comply with the code by running `/gradlew build` that runs the test and checks the code style :) ||  merging 995  
1018,1,1,0,0,1,1,0,0,1,911,enabled continuous delivery via robust mockito-release-tools project - continuous delivery pipeline 20 (#911) almost implemented!- removed tons of release logic complexity now all that is a part of general purpose mockito release tools project- the new release automation should be much easier to test   does this also implement the logic to only publish a release once every x weeks? || >does this also implement the logic to only publish a release once every x weeks?it will be simpler let me finish off the documentation so that everything is clear good question! || i will be merging soon readmemd contains information about the releases more documentation will be provided but it should not blocking this pr! || more documentation on [spanking new wiki page]( plan to merge today || really excited for this change thanks for the great work @szczepiq ! || just merged this puppy ill keep an eye on the release automation things might be bumpy for the next week or so until the dust after this change drops down and all fallout is cleaned up :)thank you guys for patience! more documentation and improvements i will duly provide in the meantime shoot feedback || @szczepiq does this also close #618? || >@szczepiq does this also close #618?i suggest we leave #618 open for now so that its a place for discussion || btw thank you for updating #618 thread with the status! ||
1076,0,0,0,1,1,1,1,0,0,1071, validation in returnargumentat(int) in case of type erasure on the parameter 1071 the parameter type inference takes now the type of the actual instanceinto account to avoid type erasure issues in case the parameter isgenericsee also: https://githubcom/mockito/mockito/issues/1071#issuecomment-300091021  merging 1076 
1079,1,0,0,1,1,1,0,0,0,1065, #1065 add information about donothing() method to cannotstubvo…    
1090,1,1,0,1,1,1,0,1,1,1083,1083: interfaces only declare tostring implicitly and should t… …herefore override it explicitly from the inline mock maker  
1091,1,1,0,0,1,1,0,0,1,1088,1088 : updating documentation of verify feature to correct a s… updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut pasted and run verbatimthe documentation presents the following example of the verify exact number of invocations feature:    //using mock    mockedlistadd("once")        mockedlistadd("twice")    mockedlistadd("twice")        mockedlistadd("three times")    mockedlistadd("three times")    mockedlistadd("three times")        //following two verifications work exactly the same - times(1) is used by default    verify(mockedlist)add("once")    verify(mockedlist times(1))add("once")        //exact number of invocations verification    verify(mockedlist times(2))add("twice")    verify(mockedlist times(3))add("three times")        //verification using never() never() is an alias to times(0)    verify(mockedlist never())add("never happened")        //verification using atleast()/atmost()    verify(mockedlist atleastonce())add("three times")    verify(mockedlist atleast(2))add("five times")    verify(mockedlist atmost(5))add("three times")the last but one line says:    verify(mockedlist atleast(2))add("five times")this could be confusing to someone using these examples as it would result in a toolittleactualinvocations failure being reported by mockito this is because in the example the `add()` method is never called with the string `five times` in order to have this example make sense in the way i think it should ive replaced the string `five times` with `three times` as suggested by @szczepiq cheerstim cooke  merging 1091 
1119,1,0,0,0,1,1,1,0,0,1117,made it possible to delay the return of a mock or spy  (#1117) this is a useful aid in debugging race conditions and other synchronicity problems  merging 1119  
1121,1,1,0,1,1,1,1,0,1,1110,improve and develop apis required for framework integrators mockito does not do static mocking at the moment powermockito does powermockito uses a lot of internal mockito apis exposing the community to issues and wasted productivity on version upgrades we want mockito apis to be easily extensible by framework integrators such us powermockito without compromising api simplicity and consistencyall proposed changes are backwards compatible in accordance to mockitos compatibility contract (in short: limited changes to orgmockito* types freedom to change orgmockitointernal*)### public api changesthe full discussion on the use cases implementation options and decisions is in #1110 ticket1 new public method for creating mock creation settings object:```javamockitowithsettings()name(“my mock”)build(fooclass)```2 framework integrators can now provide custom mockhandler via ```mockmaker#getmockhandler()``` previously it we didn’t offer this capability because we didn’t have convincing use cases that it was needed### public api considerations1 framework integrators may **not** provide custom implementation of ```invocationcontainer``` at this stage this part of api is accessible via public ```mockmaker#getmockhandler()getinvocationcontainer()``` method there are no convincing use cases that exposing this new public api is needed  merging 1121  
1122,1,0,0,0,1,1,1,0,0,1117,made it possible to delay the return of a mock or spy (#1117) a cherry-picked version of #1119 for the 2x branch yup in master there are not checkstyle verification || thats because the backport wasnt finished yet :( havent had time to dive into the failing tests there ||  merging 1122  the change to 2x! ||
1136,1,1,0,1,1,1,1,0,1,1135,1135: properly resolve visibility bridges resolve the method hierarchy by byte buddys method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect  merging 1136 
1146,1,0,0,1,0,1,0,0,1,86,enable stubonly() on @mock annotation since issue #86  withsettings() has a api stubonly() which speed up mocked stub a lotsin my case stubonly() huge amount of test overhead stacktrace and avoid invocation footprint list grow too large and cause oomhowever  the api is not available with `@mock` annotationi had to move tens of mock annotation from `@mock foo foo` into `mockitomock(fooclass withsetting()stubonly())````@mock(stubonlytrue)public foo lightweight```suggest adding the above api for convenience check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_  merging 1146  < 
1162,1,0,0,0,0,1,1,0,1,1155,fix for #1155 thenthrow(class) fix for #1155 mockitothenthrow(class) now fails when the given throwable type is not declared on the stubbed method the build fails for jdk7 seem like an ci problem: execution failed for task :fetchallcontributors || >the build fails for jdk7 seem like an ci problem: execution failed for task :fetchallcontributorsi will look into that thank you ||  merging 1162  
1181,1,1,0,1,1,0,1,0,1,1179,#1179: fix performance regression caused by use of method graph compiler in order to properly discover visibility bridges we have to run a full analysis of the method graph the compilation of this method graph is rather expensive and we require to cache a computed graph the caching is however non-trivial as it references classes which might be unloaded in order to avoid a leak we cache classes using non-strong referencesthis requires some real-world experience to discover if this caching mechanism suffices  merging 1181  < 
1186,1,1,0,1,1,1,1,0,1,1180,compare method of graph to defined form of method 1180: compare against non-generic method when deciding if a method should be stubbed  merging 1186 ` 
1192,1,0,0,0,1,1,1,0,1,1191,added new public api for spring-boot use case not intended for merging yet submitted for visibility- for design and rationale see #1191- for usage see "verificationstartedlistenertest" classthis is still experimental so refactorings error handling javadoc is missing  merging 1192  
1202,1,0,0,0,1,1,0,0,0,1198,1202] java 9 ci build for mockito 2x ## summaryprovide java 9 travis build to ensure java 9 compatibility in at least tested use casessupport for java 9 was improved in gradle 4x and that version is being used due to some issues with newer gradle versions (#1198) some other configuration changes were required as well as jacoco version has been bump ( #1198## check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_  merging 1202  
1203,1,0,0,0,1,1,0,0,1,1191, documentation issue added unit tests - while working on new verification started listeners (#1191) i found an instance of incorrect documentation i added unit tests and simplified the documentation- currently contrary to what the javadoc said we do guarantee the order in which invocation listeners get notified some of our users might have started to depend on this behavior i added unit tests and  the javadoc in general it is seems useful to guarantee the order this way the api is more predictable easier to use   thank you for review! ||
1214,1,1,0,0,1,1,0,0,1,1211,1211: improve @deprecated javadoc this pull request 1211 by improving the `@deprecated` javadoc of `mockitodebug()` `mockitodebugger` and `mockitodebuggerprintinvocations(object  mocks)` by adding the additional information on how to retrieve an actual instance of the `mockitodebugger` interface  
1216,1,1,1,1,1,1,1,0,1,1206,adresses #1206: allow opting out from annotation copying within mocks the `mocksettings` now include an option to disable copying of annotations to mock classes  merging 1216  < 
1217,1,1,0,1,1,0,1,0,1,1183,1183: make override check more forgiving to accomondate kotlin compile patterns the override check implies java compile patterns such that kotlin method resolutions could fail for void return types which do not fit into javas reference-type only generic hierarchies this pr eases this restriction to fix this resolution for kotlini added the test case of the reported issue as a reference  merging 1217 
1219,1,0,0,0,0,1,0,0,0,117,add regression test for issue #1174 regression that shows the issue of #1174 i am unable to reproduce this locally lets see what travis sayscloses #1174   thank you! ||
1221,1,0,0,1,1,1,0,0,0,445,mockitoextension for junit5 445discussion:  of all thanks to the junit5-team (@sbrannen) for that great api! the implementation was straight forward and the docu is top notch not comparable to a junitrule or runner implementation one can feel the hard work ----the here provided `mockitoextension` allows to mock/spy/validate like the well known mockito-junitrule/runner this is still "work in progress" feel free to commentusage:```java@extendwith(mockitoextensionclass)class junit5test {   @mock  private dependency mock   @test  void checkmockcreation(){    when(mockfoo())thenreturn("hello junit5")    mockfoo()    verify(mock)foo()  }}``` possibly we need an annotation on class or method level to provide control of the "strictness" eg:```@extendwith(mockitoextensionclass)@mockitostrictness(warn)class junit5test {    @mockitostrictness(strict_stubs)    void testwithlocaldefinedstrictness(){    }}``` ||  merging 1221                             release/2x    #1221   +/-   ##  coverage ! || 
1228,0,0,0,1,0,0,0,0,0,1130,add @checkreturnvalue to stubbing/verification methods introduce a new annotation `@checkreturnvalue` and add this to methods like `when` and `verify` such that static analysis can verify the value is actually used ( this makes sure developers can get warnings on build-time instead of run-time (with our internal `validatestate`)1130  merging 1228 
1247,1,0,0,1,1,1,0,0,1,904,remove several container classes and inline code remove several classes that were containers for code that is easier to be inlined they were only referenced once or never at all this makes it easier to reason about the code while also maintaining less code and classescloses #904  merging 1247 
1257,1,1,0,1,1,1,1,0,1,1254,1254 and #1256: improved check for self-invocation better checks for recursive calls and guards internally used jdk types1254 fixes #1256  merging 1257 ! ||
1257,1,1,0,1,1,1,1,0,1,1256,1254 and #1256: improved check for self-invocation better checks for recursive calls and guards internally used jdk types1254 fixes #1256  merging 1257 ! ||
1258,1,1,0,1,1,1,0,0,1,106,prevent class loading race condition allow singleton locking in context with class loading races1067 fully agree will do soon ||  merging 1258  <  
1268,1,1,0,0,1,1,0,0,1,1262,1262: update doc for answerscalls_real_methods update the documentation for the answerscalls_real_methods according to #1262 and also included a note with recommendation not to use when()thenreturn() for partial mock   hey @seriybg this is a nice change! sorry we have not reviewed earlier it must have slipped our radar continually improving documentation is absolutely important thank you for contributing! ||
1270,1,1,0,1,1,1,0,0,1,1130,cleaner code for mockito users by better integration with static code checkers more @checkreturnvalue builds on #1130 #1228 note that almost all non-`void` `orgmockitomockito` methods are now annotated `@checkreturnvalue` you could consider going the other way by annotating the class as a whole `@checkreturnvalue` and adding [`@canignorereturnvalue`]( to the non-`void` methods that form the complement ||   context for this change: within a company-internal pr i found an unused `mock(someclass)` statement and thought "itd be nice if mockito supported `@checkreturnvalue`" then i found #1228 but noticed that the `#mock` methods werent annotated in fixing that i decided to go over the whole class for each method annotated in this pr i traced its logic most are side-effect free while the remainder throw an exception in case of misuse the only non-`void` method in `orgmockitomockito` i did not annotate is `#ignorestubs` because it returns its input  || the reason i did not include these methods in #1228 was because there were no side-effects checking them would therefore not required as it would be perfectly okay (from a mockito-perspective) that these methods are invoked and then discarded the methods i annotated do have side-effects and thus are harmful if you discard the return valuetherefore i am hesitant to accept this pr as (to my knowledge) these methods are pure and are not harmful for mockito to be invoked a lot of times || invoking these methods many times may not be harmful in a functional sense but imho `@checkreturnvalue` is more about establishing correctness ignoring the return value of any of these methods indicates a human error leading to cluttered tests in the best case and a false sense of security in the worst caselooking at guava that seems to be the way how they use the annotation for example it is applied to the whole package `comgooglecommoncollect` with some methods within that package annotated `@canignorereturnvalue` none of those are pure || i do understand that point-of-view however in that case we would need to update every public api that is non-void to have this annotation which seems counter-intuitiveanyways these are my 2 cents paging @mockito/core to give their opinion    || > \[\] in that case we would need to update every public api that is non-void to have this annotation \[\]well a single annotation in `package-infojava` takes care of that ([example]( :dbut indeed lets see how others feel about it || interesting discussion! heres how i would summarize the decision point: - a) benefit: a chance of making our customers code cleaner because they could identify and remove dead code - b) downside: hard to apply this strategy consistently we would have to review all public api and always remember to use those annotations when adding new apigiven that we already started using the annotations the downside b) already applies merging the pr does not make it any worse hence the downside can be discounted and we only have the benefit :)+1 im in favor of merging the prthank you @stephan202 for tracing the public api methods and coming up with the pr! || @timvdlippe the current `master`s last commit is e51a0515ac8440572cf1af80f7aa620d51e8075e but `git grep -i prone` doesnt show an error prone integration cant find another applicable branch using `git log -s prone -i  --all` either am i looking cross-eyed or? :) || ah my brain was derping i was working on #1339 and thought i merged it but i did not so we have to rebase after that pr is merged sorry for the confusion || no worries   i see #1339 also targets the `release/2x` branch so i wont need to switch the target branch for this pr(and indeed that pr contains a bunch of `@suppresswarnings("checkreturnvalue")` this pr will almost certainly force the addition of a bunch more of those)ive subscribed to the other pr and will rebase again once its  
1272,1,1,0,0,1,1,0,0,1,792,strictness configurable per mock / stubbing 792today we have strict stubs feature a key enabler for cleaner tests and improved debuggability strict stubs dont work well with "common stubbing" pattern they also dont like when we call stubbed methods with unexpected arguments - even though sometimes it is legit for more see #792 ### solution```java@test public void demo() {  //1 "lenient()" method on mocksettings interface:  foo mock  mockitomock(fooclass withsettings()lenient())  //2 "lenient()" method on mockito class:  mockitolenient()when(mockfoo(1))thenreturn(1)  mockitolenient()doreturn(1)when(mock)foo(1)}```for more see #792### public api changes- new methods:   - mockito#lenient()   - mocksettings#lenient()   - mockcreationsettings#islenient()   - stubbing#getstrictness()  - new interfaces:   - basestubber - extracted out from existing "stubber" interface so that we can reuse api with "lenientstubber"   - lenientstubber - instance returned by "mockitolenient()"- other changes:   - made @orgmockitonotextensible annotation public so that we can use it in subpackages  merging 1272 
1280,0,0,0,0,1,1,0,0,0,108,update strict_stubs documentation for verifynomoreinteractions 1086  
1301,1,0,0,1,1,1,1,0,1,1232,extend mockitosession(builder) api to enable usage by testing frameworks the first commit in this pr 1232 in the additional commits ive taken the liberty to implement my proposals from  add `mockitosessionbuildername(string)` to pass a name from the testing framework to the `mockitosession`- add `mockitosessionbuilderlogger(mockitosessionlogger)` to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter)- add `mockitosessionfinishmocking(throwable)` to avoid potentially confusing warnings for failing tests- add `mockitosessionsetstrictness(strictness)` to change the strictness of the current session (there were two test cases requiring that)each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to 1232to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the `junitrule` implementation to use it  merging 1301  || 
1307,1,0,0,0,1,1,0,0,1,1306,update public api of invocationfactory needed for android static mocking 1306a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior  a callable that throws athrowable  merging 1307  thanks for review! || 
1310,0,0,0,0,1,1,0,0,0,1279,ensure isolation of stubbings  compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal (corner cases only possibly incorrect tests) and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test - it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods:```javawhen(mockfoo())the swer(() -> { othermockbar() }```we need to ensure that ```mockfoo()``` and ```othermockbar()``` dont interfere prior to this bugfix this scenario resulted in various problems like: stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see #1279### solutionthe solution is based on great pr #1296 by @r-smirnov **huge thanks** to @r-smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as "documented mockito syntax caveat" thank you @r-smirnov for persistence and getting this ! can we give an example of a test that breaks with this "new" behavior? ||  merging 1310  <  || 
1310,0,0,0,0,1,1,0,0,0,1296,ensure isolation of stubbings  compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal (corner cases only possibly incorrect tests) and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test - it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods:```javawhen(mockfoo())the swer(() -> { othermockbar() }```we need to ensure that ```mockfoo()``` and ```othermockbar()``` dont interfere prior to this bugfix this scenario resulted in various problems like: stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see #1279### solutionthe solution is based on great pr #1296 by @r-smirnov **huge thanks** to @r-smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as "documented mockito syntax caveat" thank you @r-smirnov for persistence and getting this ! can we give an example of a test that breaks with this "new" behavior? ||  merging 1310  <  || 
1319,1,0,0,0,1,1,0,0,1,1314,1314 : include all the invocation in mock verification error message have changes the verify error message to include all the invocation instead of including just one undesired invocationpreviously we have message like:```wanted 1 time:-> at but was 2 times undesired invocation:-> at ```this pr changes it to ```wanted 1 time:-> at but was 2 times:-> at -> at ```to make the error message consistent the similar changes was made for too little invocations casethe message:```wanted 3 times:-> at but was 2 times:-> at ```changed to:```wanted 3 times:-> at but was 2 times:-> at -> at ```  merging 1319 
1320,1,1,0,1,1,1,1,0,1,111,avoid bytebuddy import issue to enable repackaging without bytebuddy this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectorytest: grep -r -e "import org\mockito\internal\creation\bytebuddy\[^\]*$" src/main does not return anythingoffers workaround for #1112  merging 1320 ` ! || 
1327,0,0,0,0,1,0,1,0,0,1326,1326 : reduce the allocation rate for the typical use of locat… …ionimpla trivial one but should be very useful as i noticed this class being instantiated quite a lot  merging 1327  < 
1349,1,0,0,1,1,1,0,0,0,1346,1346 - different mocks are used for @mock and @injectmock in the same test class with junit 5 extension 1346 - fix `mockitoextension` which has init mocks with two identical test instances which cause the mock to be initialized and injected two times   sadly this doesnt cover the case where we are using `@testinstance(testinstancelifecycleper_class)`>  ||
1350,1,1,0,1,1,1,1,0,1,1348,support local parameters in test methods with junit jupiter note that this implementation differs from the prototype implementation of the junitteam ( instead it will do not do any parameter resolution between test methods1348  merging 1350  || 
1368,0,1,1,1,1,0,0,0,0,1367,resolve the correct protection domain for the codegen package when using reflection 1367  merging 1368 ` 
1369,1,1,0,1,1,1,0,1,0,1364,performance improvements use less expensive method graph compiler for inline mock maker update byte buddy for general performance improvements and bug fixes 1364 also fixes javadoc warning  merging 1369  < 
1378,1,1,0,1,1,1,0,1,0,1240,avoid circularity: avoid endless loop during mock creation if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop (described in comment) 1240it is a bit difficult to reproduce this issue in our tests it mainly happens with classes generated by kotlin or scala and requires the inline mock maker and a jdk 9 or older if we want to add such a test we can copy the test from https://githubcom/guenhter/mockito-final-class-kotlin-problem > if we want to add such a test we can copy the test from  should be able to add this to the mockito-kotlin subproject i suppose? || does it use the inline mock maker? || true of course! || added a test || does that test really reproduce the issue? that seems awfully simple yet we did not encounter it thus far 😮  ||  merging 1378  < 
1387,1,0,0,0,0,1,0,0,1,1386,1386: adding atmostonce() rename threadverifiescontinuoslyinteractingmocktest and one todo hii would like to make a quick contribution on this projecti add atmostonce() it seems not to be a big feature i just want to highlight the fact you have the function atleastonce() but nothing for the atmostonce casei rename the testclass threadverifiescontinuoslyinteractingmocktest on threadverifiescontinuouslyinteractingmocktest and the todo on tostring() from hamcrestargumentmatcher  merging 1387  < 
1391,1,0,0,0,0,1,0,0,1,1390,make mockitoextension constructor public it is possible to register an extension for automatic use using javas `serviceloader` mechanism projects may want to provide their own `meta-inf` file to avoid tediously adding `mockitoextension` to tests since it is very common however `serviceloader` requires the class to have a no-args *public* constructor so the current extension cannot be used with the `serviceloader` mechanism1390check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `fixes #<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_ would be great if you could add a test for this not sure if that is possible? it is not a blocking issue for me though ||   added a test (a bit heavyweight since it needs to be a separate project to avoid influencing others) ||
1402,1,0,0,0,1,1,0,0,0,1401,1401 : correctly handle varargsmatcher check for hamcrestmatchers    merging 1402  < 
1426,1,1,0,1,1,1,0,1,0,1419,mockito on java 11-ea+21 1419 requires `-dnetbytebuddyexperimentaltrue` system property to be set to let bytebuddy use asm api version `asm7_expermiental` and use the same one in `inlinebytecodegenerator`  merging 1426 `  
1439,1,1,0,0,1,1,0,0,1,1438,javadoc: #1438 update ignorestubs to include strictness it updates `ignorestubs()` docs to include `strictness` information (#1438)   this is ready to merge ill wait until current build is complete and merge it || thank you! ||
1458,1,0,0,0,1,1,0,0,0,793,add stubbinglookupevent and notifier (a part of #793) this pr adds `stubbinglookupevent` and `stubbinglookupnotifier` as a part of the issue #793  merging 1458  < 
1463,0,0,0,0,0,1,0,0,1,1460,prevent stubonly() from being verified (#1460) this pr adds assertion to verification methods to prevent stub-only mock from being verified (#1460)- `verify()`- `verifynomoreinteractions()`- `inorder()`  merging 1463  < 
1543,1,0,0,0,1,1,1,0,0,1466,exposed new api - stubbinglookuplistener exposed new public api based on an internal api - stubbinglookuplistener - #793as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of "onion skin api"this pr replaces #1466 - very nice pr from @marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr @marchpig thank you for understanding!  merging 1543 
1543,1,0,0,0,1,1,1,0,0,793,exposed new api - stubbinglookuplistener exposed new public api based on an internal api - stubbinglookuplistener - #793as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of "onion skin api"this pr replaces #1466 - very nice pr from @marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr @marchpig thank you for understanding!  merging 1543 
1544,1,0,0,0,1,1,0,0,0,1541,1541: prevent premature garbage collection of mock objects 1541if using one-liner stubs ( the mock object may be premature cleaned up and returning the mock fails with an exception this occurs because there is no strong reference to the mock itselftherefore we need to maintain a strong reference to the mock until weve returned it while making sure that the gc can still cleanup the mock correctly when neededcause implementations of `basestubbing` are intended to be cleaned up after usage we can store a strong ref to the mock there `getmock` then uses the strong ref (instead of the weak ref provided by the invocation) after cleaning up the implementations of  `basestubbing` there is no strong ref to the mock itself anymore (except the one in the test class)i tried some alternative solutions but i believe this is the only way it works----bind last mock creation to mockingprogress does not work because of this:```when(mock(testclass2class)gettestclass())thenreturn(mock(testclassclass))getmock()```bind mock of last invocation for stubbing to mockingprogress does not work because of this:```when(mock(testclassclass)getstuff())thenreturn("x")thenreturn(    when(mock(testclassclass)getstuff())thenreturn("xxx")<testclass>getmock()getstuff())getmock()```  merging 1544  < ! || lgtm thanks for your improvementsonly passing the mock was my first take but i thought passing the `invocationcontainerimpl` is more type safe than just having `object` as parameter also the "mock retrieval logic" would be located in one central place but im very fine with the refactoring || thank you! || 
1549,1,0,0,0,1,1,0,0,1,151, issue with leftover state when stubbing with bad throwables  issue with leftover state when stubbing with bad throwables 1514 good catch ||  merging 1549 
1552,0,0,0,0,0,1,0,0,1,155,minimal test to repro generic issue with smart nulls created a minimal test that reproduces bug with smart nulls and generics see issue #1551   since this is a new test ill just merge it without review happy to fix / change things later if someone reviews it ||
1554,0,0,0,0,0,0,0,0,0,155, verifyerror when junit 3 is in the classpath mockito will throw verifyerror during its junit detection when junit 3is in the classpath because the code only supports junit 4 and laterthis change will catch this error and pretend that junit is not thereissue: #1553 i would like some opinions on testing because i was not able to figure out a good way to test this i tried changing the class hierarchy of comparisonfailure using byte buddy and a custom classloader but was not able to get that to work i also thought it would be possible (though heavy) to use a gradle property to change the version of the junit dependency to run a test and add that to the test matrix but i dont expect that to work without other changes because mockito itself uses junit 4 to compile and run its own tests ||  merging 1554 ` 
1576,0,0,0,0,1,1,1,0,1,1551,fix/bug 1551 cce on smart not null answers this pr intends to 1551 for fix it the `returnssmartnulls` answer use now some reflection to find the correct return type instead of the `javautilobject`when the return type can be found it will start to retrieve empty values using the answer `returnsmoreemptyvalues` & `returnsemptyvalues` before creating a new mock instanceas you may notice in tests there is still one case where the return type cannot be found in this case the `answer` will return a `null` instead of `object` mocki think it may be possible to improve this code any suggestion will be welcome !  merging 1576 
1582,1,0,0,0,1,1,1,0,0,1577,1577: refactoring naming rule for sealed packages to better work with the java module system the java module system consideres packages of all named modules to be sealed this results in the naming strategy to rename classes such that they cannot subclass package-private types  merging 1582  
1585,1,1,1,1,1,1,1,0,0,1584,1584 where multipleparentclassloader lacks of classloaders of superclasses the multipleparentclassloader is now composed also with classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy the problem of test case is that is not possible reflect a real osgi environment without use some test framework like pax exam (the most complicate thing is do not pollute test dependency with 10 and more dependencies) if is not a problem i can try to create test case that verify if the multiparentclassloader contains more classloaders || a job fails to install jdk11 other jobs are ok || i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top-most type this would effectively prevent mocking package-private classes and methods for such types which worked until nowi just extended the multiple parent class loader in byte buddy to allow for collecting the most specific class loaders only after this i think we can add this change probably we would also need to include all class loaders of interface types for this to work universallyi am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type tree || > i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top-most typei had a look to the implementation of `multipleparentclassloader` and it delegate to parents in the exact order they was added this means that if the classloader of the actual type (the first added) is able to load all classes other classloaders are not visited> probably we would also need to include all class loaders of interface types for this to work universallyits already like that the actual classloader is built with a composition of classloader of actual type and the classloader of all interfaces the class implements my pr simply add classloaders from superclasses> i am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type treei do not expect a hierarchy bigger than 10 classloader are filtered at most we should ensure there are no duplicated in the list (if not already) || this needs a rebase now ||  merging 1585 
1588,1,0,0,1,1,0,0,0,1,1587,1587 : remove unnecessary loop from injectingannotationengine removes injectingannotationengine::processinjectmocks method that does an unnecessary loopfixes https://githubcom/mockito/mockito/issues/1587  merging 1588  < 
1596,0,0,0,0,0,1,0,0,1,1578,1578: outer class mocks unavailable from inner class i opened issue #1578 a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward  however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency  the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue  i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression (reported to be working in #353)  the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_- problem - junitrule detects an unfinished mocking session when an inner class is detected- fix - if a mockitosession has been established for junitrule then use that and init mocks of the inner class- tests - within an inner class  ensure mocks are accessible override outer class values when desired retain original values if not overwritten- demonstrated with debechtejunit:junit-hierarchicalcontextrunner:4122-snapshot  merging 1596  < 
1596,0,0,0,0,0,1,0,0,1,353,1578: outer class mocks unavailable from inner class i opened issue #1578 a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward  however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency  the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue  i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression (reported to be working in #353)  the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_- problem - junitrule detects an unfinished mocking session when an inner class is detected- fix - if a mockitosession has been established for junitrule then use that and init mocks of the inner class- tests - within an inner class  ensure mocks are accessible override outer class values when desired retain original values if not overwritten- demonstrated with debechtejunit:junit-hierarchicalcontextrunner:4122-snapshot  merging 1596  < 
1612,1,0,0,0,1,1,1,0,1,357,return null instead of causing a cce this solves a large number of edge-cases where `null` will actuallyremove the runtime classcastexception this essentially negates thewhole mockitocast errorprone check we can still not support every usecase but causing a npe instead of a cce does not seem to make thisworsei am still running internal tests within google to see if there are anyregressions but i already saw that some of the test failures we hadwith bytebuddy were resolved with this particular patchnote that this now fully closes #357 a previous pr resolved the sameissue with returnssmartnulls: #1576357  merging 1612  < 
1617,1,0,0,0,0,1,1,0,0,1615, with mocking of javautil* classes 1615i hope the test is correct at least it failed before and succeeds now  merging 1617 
1619,1,1,1,1,1,1,1,0,1,1532,new api to clean up all inline mocks after test in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them1532 and #1533 i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it ||  merging 1619  || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || 
1619,1,1,1,1,1,1,1,0,1,1533,new api to clean up all inline mocks after test in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them1532 and #1533 i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it ||  merging 1619  || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || 
1619,1,1,1,1,1,1,1,0,1,1614,new api to clean up all inline mocks after test in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them1532 and #1533 i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it ||  merging 1619  || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || 
1620,1,0,0,0,1,1,1,0,1,1618,1618 : fix strict stubbing profile serialization support when strict stubs profile is enabled mock serialization doesnt workthis pr fixes this problem  
1624,1,1,0,1,1,1,1,0,1,1621,handle terminal type var with bounds this pr aim to fix the issue described in #1621 the issue being that terminal type variable arguments were not looked up for their bounds1621  merging 1624 
1644,0,0,0,0,1,1,0,0,1,1642,verificationcollector to handle non-matching args and other assertions this fix for #1642 widens the catch in `verificationcollectorimpl` so that it will catch any `assertionerror` rather than just `mockitoassertionerror` in this way any comparison failures (such as the built-in argument comparison when running under junit) will also be collected rather than propagating through to the test frameworkthere are also two commits which are more cosmetic improvements to `verificationcollectorimpltest`:* rename `assertatleastonefailure()` to `assertexactlyonefailure()` (more accurate description of what it does)* change `assertfail()` to assertjs `assertbecauseexceptionwasnotthrown()` (produces better diagnostics in the case of a failure)  merging 1644 ` 
1665,1,0,0,1,1,0,1,0,0,166,new public api: invocationgetargumentsasmatchers() - new public api: invocationgetargumentsasmatchers() useful for advanced integrations such as mockito-scala- some internal refactorings that provide temporary help with mockito-scala integration1664  merging 1665 
1667,1,1,0,1,1,1,0,0,1,1663,improved ide experience for junit5 - visual comparison failure when junit5+mockito is used in modern ide (idea eclipse) we now show "visual" comparison failure pop-up for certain mockito exceptions (such as argumentsaredifferent)1663  merging 1667  as-is || 
1672,0,0,0,0,1,1,0,0,1,1599,report initialization failures per test method prior to this commit `defaultinternalrunner` threw an exception when`mockitoannotationsinitmocks()` failed from the overridden`withbefores` method instead it now returns a `statement` that isresponsible for initializing potential exceptions are then handled byjunit regardless whether version 412 or 413-beta-2 is used insteadof reporting a class-level error junit will now report a failure foreach test method in such test classesrelated issue: junit-team/junit4#1599 -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_  merging 1672 
1693,1,0,1,0,1,0,0,0,0,1692,make `mockitonotextensible` service-loadable this way error prone can find the plugin when `mockito-errorprone` is added to the annotation processor classpath1692 nb: in this pr i chose to use [google autoservice]( as is customary for error prone plugins if preferred i can instead introduce an explicit ` meta-inf/services/comgoogleerrorpronebugpatternsbugchecker` file || @timvdlippe sure! will have a look at whats the simplest way to achieve this ||   @stephan202 were you able to take a look at this? i wanted to fix the same in #1690 || @timvdlippe i considered several approaches and concluded that the best way forward would be to see whether/how support for this kind of "real"/"full" test can be added to error prones `compilationtesthelper` and `bugcheckerrefactoringtesthelper` classes the idea would be that they get another static factory method which relies on service loading rather than an explicitly provided checker class this would also benefit other non-google ep users such as @ubers [nullaway]( then "life happened" so i didnt yet get to the point of actually trying that implementation note that even if it would work this pr would be blocked on those changes getting merged and released as part of error prone (but i assume you could help getting the changes reviewed by the ep team)so that leaves the question of timelines i can try (but wont commit) to spend some time on this later this week likely in the weekend alternatively if you agree with the suggested solution you could have a crack at an error prone pr and id be happy to be the first reviewerwrt whether this pr should be blocked on all that: i have manually tested the changes in this pr so functionally we could just merge this for now the approach taken here is [exactly]( what nullaway does (but "just merging" is not in the spirit of the mockito project so i totally undestand not wanting to go that route)  || lets merge it for now and hope we dont regress in the future || 
1701,1,0,0,1,1,1,0,0,0,1542,show multiple invocations on argumentsaredifferent this is the reconciliation of #1556 with the tests  and implementation rebased on `release/2x`1542  
1701,1,0,0,1,1,1,0,0,0,1556,show multiple invocations on argumentsaredifferent this is the reconciliation of #1556 with the tests  and implementation rebased on `release/2x`1542  
1708,1,0,0,1,1,1,0,0,1,1623,1623 : rename toolittleactualinvocations rename the exception toolittleactualinvocations totoofewactualinvocations as this is more correct english as thisexception is public api we rename by subclassing and deprecating theoriginal rename all tests and internal methods that were referencingthe old name by aligning with the new namecheck list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_  merging 1708  < 
1714,1,1,0,0,1,1,0,0,1,1713,1713: fix typo in mockitojava javadoc i was confused and tried to look for `verifynomoreinvocations` when i came across this javadocshopefully this prevents further confusion  
1715,1,0,0,0,0,1,0,0,0,298,298: replaces objenesis references from stubbing classes with plugin equivalents this enables the ios mockito plugin( to upgrade to v2  merging 1715  < 
1718,1,1,0,1,1,1,0,1,1,1717,1717 : configure the methodvisitor for java 11 compatibility im looking into adding a unit test if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java 11 this should 1717 ||  merging 1718 
1723,0,0,0,0,0,0,0,0,0,1716,change implementation of exceptionfactory to explicitly test for dependent classes the original implementation of conditional opentest4j support (#1667) relied on some implicit behaviour of the java classloader to generate and catch the exception at the right time it seems that this behaviour is not always exactly replicated in all environments - for example in #1716 where mockito was being used in an instrumentation test that was being run on an android emulatorthe new implementation is a bit more direct in how it tests for the dependent classes the existing test cases still pass and @matejdro confirmed that this  his problem1716  merging 1723  < 
1733,1,1,0,1,1,1,1,0,1,977,verifynointeractions guarantees no interactions with mock with #995 i provided a fix to #977 and #989however that pr targeted `master` which eventually became `old-3x` and its code didnt make it into `release/3x`#977 and #989 should be reopenedi have back-ported that pr to target `release/3x``verifyzerointeractions` is marked as `@deprecated` and a new `verifynointeractions` is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if/when this code will ship javadocs contain a placeholder `since 3xx`  merging 1733     ||
1733,1,1,0,1,1,1,1,0,1,989,verifynointeractions guarantees no interactions with mock with #995 i provided a fix to #977 and #989however that pr targeted `master` which eventually became `old-3x` and its code didnt make it into `release/3x`#977 and #989 should be reopenedi have back-ported that pr to target `release/3x``verifyzerointeractions` is marked as `@deprecated` and a new `verifynointeractions` is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if/when this code will ship javadocs contain a placeholder `since 3xx`  merging 1733     ||
1745,1,1,0,0,1,1,0,0,1,1743,1743: clarify default answer in 300 api changes postponed to 400 default answer has not been changed in 300 oh travis is deeply unhappy i would need to investigate that 😢  || please rebase this pr to fix the travis issue ||  
1760,1,1,0,0,1,1,0,0,1,1513,minor bug fixes 1747: removed typofixes #1513: added missing tag to fix javadocsupersedes and closes #1748  merging 1760 ` 
1760,1,1,0,0,1,1,0,0,1,1747,minor bug fixes 1747: removed typofixes #1513: added missing tag to fix javadocsupersedes and closes #1748  merging 1760 ` 
1762,1,0,0,1,1,1,1,0,0,1758,1758: method generictypeextractor#findgenericinterface always … …returns first interface  merging 1762 ` 
1773,0,0,0,0,1,1,0,0,0,1769,1769: clarify default strict stubbing behaviour in 300 similar to  as requested by @timvdlippe in  #1769  
1781,1,0,0,0,1,1,0,0,1,178,1780: close file handle to avoid a file-handle-leak fix a small file-handle-leak which pops up when running tests with [file-leak-detector]( 1780 good catch this always gets me as the class name is *file ||
1781,1,0,0,0,1,1,0,0,1,1780,1780: close file handle to avoid a file-handle-leak fix a small file-handle-leak which pops up when running tests with [file-leak-detector]( 1780 good catch this always gets me as the class name is *file ||
1787,1,1,0,0,1,1,0,0,1,1786,1786 : clarify differences between timeout and after tries to improve the javadoc for `timeout` to differentiate it from `after` directly in the first sentence   the root cause can be  by pr #936 "unification of timeout() and after() api" || 
1788,0,0,0,0,0,1,0,0,0,1630,upgraded junit jupiter 511 -> 542 we need higher version of junit jupiter to reproduce and 1630added a test to enhance coverage  merging 1788 ! ||
1789,1,0,0,1,1,1,0,0,0,1630, junit jupiter parallel issue 1630this fix improves mockito junit jupiter extension however it does not completely resolve all kinds of parallel issues when nested test classes are used ill open a separate ticket for it  merging 1789  < 
1798,1,1,0,0,1,1,0,0,1,1791,fix typo in the wiki link 1791check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `fixes #<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_  
1810,0,0,0,0,0,1,0,0,0,1587,revert "1587 : remove unnecessary loop from injectingannotationengine" reverts mockito/mockito#1588related to #1631 heres a pseudo code to describe the issues around this issue# before 22315:	```while (clazz ! objectclazz) {	val mocks  aggregatespyormockfields(clazzgetmockfields())  val fields  aggregateinjectmocksfields(clazz)	val ret  tryconstructorinjection(clazz fields mock)  if (! retfieldwasinitializedusingconstructorinjection()) {    trysetterorpropertyinjection(clazz fields mock)  }	clazz  clazzgetsuperclass()}```# after 22315:```	val mocks  aggregatespyormockfields(clazzgetmockfields())  val fields  aggregateinjectmocksfields(clazz)	val ret  tryconstructorinjection(clazz fields mock)  if (! retfieldwasinitializedusingconstructorinjection()) {    trysetterorpropertyinjection(clazz fields mock)  }```# detailsbefore 22315 if the `@injectmocks` field has a field that not listed in the constructor argument will fill by setter/property injection at the 2nd loop 😃it may not the expected behaviors by mockito authors but some users code depends on this behaviormy suggestion is to revert the [1587 : remove unnecessary loop from injectingannotationengine by lihmeh · pull request #1588 · mockito/mockito · github]( at this time why travis fails? || this needs a rebase that should fix travis (presumably) ||  merging 1810 
1813,1,1,0,1,1,0,1,0,1,1771,1771: upgrade byte-buddy to 1102 (from 1910) release notes: commits:raphw/byte-buddy@byte-buddy-1910byte-buddy-1102  
1818,1,1,0,0,1,1,0,0,1,181,add duration overloads 1815 add new `javatimeduration`-based public apis to `mockito` `after` and `timeout` and deprecate the corresponding `long`-based public apisplumb those `duration` instances through the internals of mockito  merging 1818 
1819,0,0,0,0,1,1,0,0,0,181,deprecate mockitohamcrest this class was used during the migration period from mockito 1 andmockito 2 but is no longer necessary to be able to remove ourdependency on hamcrest we should remove mockitohamcrestin response to #1817 friendly ping on this pr || i will submit this pr next week if there are no objections || there were no objections so i am merging this || sorry im late here! i suggest we dont deprecate it the use case (as documented in the javadoc) is the following: "hamcrest integration is provided so that users can take advantage of existing hamcrest matchers" that use case is still valid (perhaps the docs need to be clearer to address #1817)for code that does not use hamcrest users should be following standard non-hamcrest argthat() apihope that helps! || > for code that does not use hamcrest users should be following standard non-hamcrest argthat() apithe problem is that this project requires hamcrest as compile-time dependency to be built this is a problem for users who do not want to use hamcrest but still build the source code (as they cant use the pre-built jars)if we want to keep supporting hamcrest users with this api i would suggest a `mockito-hamcrest` artifact that takes care of the integration that way those users who do *not* want to use hamcrest dont rely on it as wellwdyt? || im novice to testing because i have to wear many hats (and i avoided getting into it like the plague in the past) returning to spring development in my career and discovering mockito this year changed my [integration testing] life i rely heavily on googling stack overflow examples until it become memorized (if ever i do)  it seems like there is a much larger documented wealth of knowledge on hamcrest on stack overflow (maybe cause its been around a long time) and so its easy to find solutions to basic challenges while someone new to mockito gets used to itfor example hasentry from this so helped me today  like timvdlippes suggestion because it leverages giving your users the ability to tap into that knowledge/solutions while slimming down the dependencies for the core mockito code basethanks for all your contributions in this area and letting us stand on your shoulders || thanks for that response @mansours ! i will look into introducing a `mockito-hamcrest` artifact and figure out a way forward tomorrow i can revert this pr given the points raised by @mockitoguy and make that work || > this is a problem for users who do not want to use hamcrest but still build the source code (as they cant use the pre-built jars)can you elaborate this problem? we use "compileonly" dependency for hamcrest just like we do for junit4 or opentest4j this should not cause problems for consumers || yes we are facing the same issues with junit4 and opentest4j junit4 is not an issue atm as we are also using it but opentest4j is currently an issuewe are not able to include jars as we require source code to be included and built (for security analyses) thus the inclusion of the dependencies during compile time does lead to problems when we want to build mockito in isolationi am currently investigating solutions for junit4 and opentest4j and how that could be decoupled i went ahead with this pr as it was my understanding with mockito 2 is that we wanted to remove our dependency of hamcrest therefore i assumed that deprecation was appropriate especially as there were no objections posted on this pr for almost 2 weeks i understood that this was okayi will revert the pr for us to revisit but i would like to come to a decision on our hamcrest support and whether we want to support it or not at all when we come to a decision i would like to update our javadoc and wiki on that to clarify that for our users || > especially as there were no objections posted on this pr for almost 2 weeks i understood that this was okayof course! thank you for waiting 2 weeks dont block on us> yes we are facing the same issues with junit4 and opentest4j junit4 is not an issue atm as we are also using it but opentest4j is currently an issuecan you elaborate the problem? is it a google mono-repo use case? (i dont object reworking the artifacts - i want understanding for me and others :)) || > can you elaborate the problem? is it a google mono-repo use case? (i dont object reworking the artifacts - i want understanding for me and others :))this is for every repository that includes third_party code that we need to have the original source code for security analyses that includes the mono repository as well as some other repositories that we havesince the hamcrest api is not type-safe (as it requires casting with `object` vs `t` as argument type) we would like to move away from unsafe type casts the `argumentmatcher` interface does not inherit that problem but the older hamcrest api doesby having the hamcrest-compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apii would personally say that while the hamcrest api was originally useful for defining reusable matchers the lack of type-safety does more harm than good i have received good responses when i finished the migration of the `argumentmatcher` to be typed and it already caught bugs in our tests i think we should promote the type-safe `argumentmatcher` and thus deprecate the old api but happy to disagree on that part and leave hamcrest compatibility in for example a separate artifact || > that we need to have the original source code for security analysesso the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis? (i still dont feel i fully understand this use case)> by having the hamcrest-compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apithats a fair argument> leave hamcrest compatibility in for example a separate artifactto keep backwards compatibility we would need "mockito-core" -> "mockito-hamcrest" are you thinking of reversing the dependency in future major version? || revert of this pr is in  || > so the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis? (i still dont feel i fully understand this use case)correct since jars can be built with any arbitrary code we prefer to not check in a jar as we cant be certain that it was built from the original source code thats why we check in the original source code and build that instead> to keep backwards compatibility we would need "mockito-core" -> "mockito-hamcrest" are you thinking of reversing the dependency in future major version?yes but since maven does not allow a cyclic dependency we have to figure out what the possibilities are || 
1821,0,0,0,0,1,1,0,0,0,1767,guard against multiple evaluations of before statement some rules evaluate the base statement multiple times eg to executetests repeatedly the changes made in #1672 led to an exception in suchcases because the `mockitolistener` was registered multiple times nowwe only add the listener the first time the statement is evaluated inorder to restore the old behavior1767 oh this fails a lot of tests 😢 could it be that `testfinished` needs the same treatment? || > could it be that `testfinished` needs the same treatment?it does indeed   merging 1821  < 
1845,1,1,0,1,1,1,0,0,1,1815,revert "add duration overloads 1815" reverts mockito/mockito#18181843  merging 1845 
1847,1,0,0,1,1,1,0,0,1,1846, undetected unused stubbing when matching previous stubbed call 1846  merging 1847 
1849,1,0,0,1,1,1,1,0,1,1848,performance optimization by using methodgetparametercount() where possible hias described in #1848 we could make use of `methodgetparametercount()` in order to save some overhead from unnecessary cloning caused  methodgetparametertypes()`as this is my first contribution to mockito let me know if i can do something to helplet me know what you thinkcheerschristoph  merging 1849  < 
1850,1,0,0,0,1,1,1,0,1,522,522 : basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for #678 is caught with the following exception:```javalangillegalstateexception: failed to install bundle: mockito-core-323jar	at orgmockitoosgitestosgitestsetup(osgitestjava:55)	 (snipped)caused by: orgosgiframeworkbundleexception: error occurred installing a bundle	at orgeclipseosgistoragestorageinstall(storagejava:739)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:187)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:179)	at orgmockitoosgitestosgitestsetup(osgitestjava:53)	 40 morecaused by: javalangillegalargumentexception: invalid range "[160": invalid format	at orgosgiframeworkversionrange<init>(versionrangejava:173)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports(osgimanifestbuilderfactoryjava:373)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports(osgimanifestbuilderfactoryjava:352)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:111)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:78)	at orgeclipseosgistoragestoragegetbuilder(storagejava:784)	at orgeclipseosgistoragestoragegetbuilder(storagejava:766)	at orgeclipseosgistoragestorageinstall(storagejava:706)	 43 morecaused by: javautilnosuchelementexception	at javautilstringtokenizernexttoken(stringtokenizerjava:349)	at orgosgiframeworkversionrange<init>(versionrangejava:157)	 50 more```the osgi test project consists of three source sets:1 a regular junit4 `test` source set with a single class osgitest starts an osgi framework installs mockito-core byte-buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework2 a source set `testbundle` thats built to an osgi bundle using the `bundle` task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle3 a source set `otherbundle` thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details:- the `test` source set only has compile dependencies on the osgi apis and junit4 ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used- the test cases are run by loading classes from the test bundle that all implement `runnable` this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit4 inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework- the osgi bundles are built using the [bnd gradle plugin]( instead of the deprecated `osgi` plugin in gradle the reason is both future proofing to not impede a migration to gradle 60 in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains  merging 1850  
1850,1,0,0,0,1,1,1,0,1,678,522 : basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for #678 is caught with the following exception:```javalangillegalstateexception: failed to install bundle: mockito-core-323jar	at orgmockitoosgitestosgitestsetup(osgitestjava:55)	 (snipped)caused by: orgosgiframeworkbundleexception: error occurred installing a bundle	at orgeclipseosgistoragestorageinstall(storagejava:739)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:187)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:179)	at orgmockitoosgitestosgitestsetup(osgitestjava:53)	 40 morecaused by: javalangillegalargumentexception: invalid range "[160": invalid format	at orgosgiframeworkversionrange<init>(versionrangejava:173)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports(osgimanifestbuilderfactoryjava:373)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports(osgimanifestbuilderfactoryjava:352)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:111)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:78)	at orgeclipseosgistoragestoragegetbuilder(storagejava:784)	at orgeclipseosgistoragestoragegetbuilder(storagejava:766)	at orgeclipseosgistoragestorageinstall(storagejava:706)	 43 morecaused by: javautilnosuchelementexception	at javautilstringtokenizernexttoken(stringtokenizerjava:349)	at orgosgiframeworkversionrange<init>(versionrangejava:157)	 50 more```the osgi test project consists of three source sets:1 a regular junit4 `test` source set with a single class osgitest starts an osgi framework installs mockito-core byte-buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework2 a source set `testbundle` thats built to an osgi bundle using the `bundle` task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle3 a source set `otherbundle` thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details:- the `test` source set only has compile dependencies on the osgi apis and junit4 ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used- the test cases are run by loading classes from the test bundle that all implement `runnable` this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit4 inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework- the osgi bundles are built using the [bnd gradle plugin]( instead of the deprecated `osgi` plugin in gradle the reason is both future proofing to not impede a migration to gradle 60 in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains  merging 1850  
1854,1,0,0,1,0,1,0,0,0,1853,1853: allow @mockitosettings to be inherited -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_   > > > could you add a regression test in the junit-jupiter-test testsuite?ive just amended the commit with a test ||
1878,1,0,0,1,1,1,1,0,1,1877,revert " undetected unused stubbing when matching previous stubbed call" reverts mockito/mockito#18471877 based on feedback in #1846  merging 1878 
1881,0,0,0,0,0,0,0,0,0,1880,fix unnecessarystubbingexception javadoc 1880  
1890,1,0,0,0,1,1,1,0,1,1875,fix mocks throwing same instance with throwable class fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with `dothrow(class)` or `thenthrow(class)`this is achieved by moving the instantiation of the throwable into a new answer called throwsexceptionclass - much like throwsexception then `thenthrow(class)` calls `the swer(answer)` with a new instance of throwsexceptionclass rather than `thenthrow(throwable)` similar for `dothrow(class)` `dothrow(throwable)` and `doanswer(answer)`1875 @timvdlippe just have a quick inquiry: the test in uninstantiablethrowabletest is failing because it expects an instantiationerror to be thrown in the middle of stubbing (check pr #1549) the new code doesnt instantiate in the middle of stubbing anymore how do i ignore the test? or do i just delete the test file? im used to using an annotation to ignore tests the pr should be ready after thats sorted and any other suggested changes  
1895,1,0,0,0,0,1,0,0,1,1894,1894 checkstyle error on windows windows has some issues with relative paths in checkstyle config files additionally it failed with an euro sign in codeplease verify if it also works on unix env  
1911,1,0,0,0,1,0,0,0,0,1910,1910: update description of argumentmatcher javadoc for any() the doc says that"any() is an alias of: anyobject() and any(javalangclass)"but in the note it says that"since mockito 210 any(class) is not anymore an alias of this method"this is confusing so the alias in the doc should exclude any(javalangclass) to simply be"any() is an alias of: anyobject()"also update the same issue of anyobject()check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_  
1914,1,0,0,0,0,1,1,0,1,190,fix pattern matcher not matching to subregion issue #1905 talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument (provided with an invocation) to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas `matchermatch()` (see [comment]( in #1905) this commit fixes that by using `matcherfind()`1905  
1914,1,0,0,0,0,1,1,0,1,1905,fix pattern matcher not matching to subregion issue #1905 talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument (provided with an invocation) to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas `matchermatch()` (see [comment]( in #1905) this commit fixes that by using `matcherfind()`1905  
1942,1,1,1,0,1,1,1,0,1,189,1898 : return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning null1898  merging 1942 
1942,1,1,1,0,1,1,1,0,1,1898,1898 : return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning null1898  merging 1942 
1949,1,0,0,0,1,1,0,0,1,1712,1712 : prepend description to assertionerror thrown in verification extended mockitoassertionerror to wrap instance of assertionerror in addition to mockitoassertionerror so that the various possible exceptions thrown for non-matching arguments have description prepended to the message oh it seems like you need to run `/gradlew spotlessapply` locally to fix the formatting issues || i think you need to rebase on release/3x to pick up the latest changes your spotless configuration locally appears to be out-of-date || are you running `/gradlew spotlessapply`? i can take a look on monday why it is not formatting as expected || thanks tim ive rebased now hopefully should fix the formatting issue just squashed the commits ||  merging 1949 
1968,1,1,0,1,1,1,0,0,1,1967,1967: correctly handle mocks with limited life-cycle in listeners due to the limited lifetime of static mocks they cannot be validated within a mockito session since they might have expired when the validation is applied this patch excludes static mocks from all validation to support static mocks in the regular session validation we would rather need to trigger the validation upon release of any static mock it only tests part of the issue for actually testing it we would need to run the junit tests with the inline mock maker and create subprojects for it i am going on a two week vacation tomorrow so i did not want to open that barrel of wine tonight but i validated the working manually if you have some time could you add additional subprojects? i validated the runners manually however || ah okay i got confused as the commit mentions that the issue is  so thats why i thought we had test the whole scenario please go on vacation we can figure it out later 😄  ||  merging 1968 
1974,1,0,0,1,1,1,0,0,1,1855,1855 and #939: improve error message when the inline mock maker cannot be used improves the error message and does not create a hard dependency on the compiler module it also points out that byte buddy can now emulate the attachment api using jna if its added to the class path  merging 1974 
1989,1,0,0,1,1,1,0,0,1,1988,do not pass static mocks to regular listener callback does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks 1988we have passed `class` objects to the listener to indicate a static mock the class object is of course itself not a regular mock and its cleaner to create a callback method of its own this way existing listeners remain logically backwards compatible including our own listener that is used within the junit runner (we have only tested the rule i added a test for the runner too)  merging 1989 
2017,1,1,0,1,1,1,0,0,1,2015,only enable mocking of types right before instantiation to avoid circular interception of constructor creation 2015  
2018,1,1,0,1,1,1,0,0,1,2015,only enable mocking of types right before instantiation to avoid circular interception of constructor creation 2015  
2023,1,1,0,1,1,1,0,1,0,2011,initializes classes prior to instrumentation to avoid uncontrolled code execution 2011 - triggeres initializers explicitly  merging 2023 
2034,1,1,0,1,1,1,1,0,0,1802,escape mock during method dispatch on mock to avoid premature garbage collection under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch to avoid this we escape the mock instance during the dispatch to make sure that the gc cannot collect the object1802 indeed force pushed a new version just nowlets hope the jit stays dumb enough to avoid this error in the future - i was really certain that the stack allocation of the mock object would avoid the allocation but if the entire mockito call stack gets inlined that does no longer apply worst case we need to make the mockito call stack deeper then the inlining heuristic ) ||
2042,1,1,0,1,1,1,1,0,1,198,mock resolver plugin adds a plugin to allow for adding one or multiple mock resolvers this way instances that are provided to mockitos dsl do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as springthis works today with the subclass mock maker by accident as we read the mock state from the mock instance via a method which gets proxied if we ever find a more private appraoch this would however break springs mockito use and it is already broken with the inline mock makerby this spi spring could add an unproxy resolver to its mockito build-up and make its proxied mocks compatible with mockito other frameworks could use the same approach if desired as this spi is genericcloses #1980  merging 2042 
2046,1,1,0,1,1,1,1,1,1,2040,do not exclude synthetic constructors from instrumentation 2040 byte buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic (eg bridge methods) for constructor instrumentation it is however crucial that no code is called during mock creation and that fields are copied during spy creation  merging 2046 
2071,1,0,0,1,1,1,0,0,0,206,2061: argumentmatcher error messages use lambda class names 2061  merging 2071 
2071,1,0,0,1,1,1,0,0,0,2061,2061: argumentmatcher error messages use lambda class names 2061  merging 2071 
2176,1,1,1,1,1,1,1,0,1,2092,bump versionserrorprone from 240 to 251 bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li> <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href" positive in <code>differentnamebutsame</code> (<a href" positive in <code>unnecessaryoptionalget</code> (<a href" positive in <code>unnecessarymethodreference</code> (<a href" a regression in jdk 16-ea support (<a href" prone 250</h2><p>new checks:</p><ul><li><a href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href" release error prone 251</li><li><a href" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href" dont set checks as <code>disableable  false</code> in external</li><li><a href" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href" dont suggest private constructors for abstract classes</li><li><a href" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href" address a <code>visiblefortestingused</code> finding</li><li><a href" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href" positive in <code>differentnamebutsame</code> (<a href" positive in <code>unnecessaryoptionalget</code> (<a href" positive in <code>unnecessarymethodreference</code> (<a href" a regression in jdk 16-ea support (<a href" prone 250</h2><p>new checks:</p><ul><li><a href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href" release error prone 251</li><li><a href" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href" dont set checks as <code>disableable  false</code> in external</li><li><a href" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href" dont suggest private constructors for abstract classes</li><li><a href" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href" address a <code>visiblefortestingused</code> finding</li><li><a href" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> errorprone is catching actual issues i will work through them ||
2176,1,1,1,1,1,1,1,0,1,2094,bump versionserrorprone from 240 to 251 bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li> <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href" positive in <code>differentnamebutsame</code> (<a href" positive in <code>unnecessaryoptionalget</code> (<a href" positive in <code>unnecessarymethodreference</code> (<a href" a regression in jdk 16-ea support (<a href" prone 250</h2><p>new checks:</p><ul><li><a href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href" release error prone 251</li><li><a href" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href" dont set checks as <code>disableable  false</code> in external</li><li><a href" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href" dont suggest private constructors for abstract classes</li><li><a href" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href" address a <code>visiblefortestingused</code> finding</li><li><a href" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href" positive in <code>differentnamebutsame</code> (<a href" positive in <code>unnecessaryoptionalget</code> (<a href" positive in <code>unnecessarymethodreference</code> (<a href" a regression in jdk 16-ea support (<a href" prone 250</h2><p>new checks:</p><ul><li><a href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href" release error prone 251</li><li><a href" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href" dont set checks as <code>disableable  false</code> in external</li><li><a href" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href" dont suggest private constructors for abstract classes</li><li><a href" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href" address a <code>visiblefortestingused</code> finding</li><li><a href" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> errorprone is catching actual issues i will work through them ||
2176,1,1,1,1,1,1,1,0,1,2105,bump versionserrorprone from 240 to 251 bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li> <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href" positive in <code>differentnamebutsame</code> (<a href" positive in <code>unnecessaryoptionalget</code> (<a href" positive in <code>unnecessarymethodreference</code> (<a href" a regression in jdk 16-ea support (<a href" prone 250</h2><p>new checks:</p><ul><li><a href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href" release error prone 251</li><li><a href" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href" dont set checks as <code>disableable  false</code> in external</li><li><a href" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href" dont suggest private constructors for abstract classes</li><li><a href" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href" address a <code>visiblefortestingused</code> finding</li><li><a href" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href" positive in <code>differentnamebutsame</code> (<a href" positive in <code>unnecessaryoptionalget</code> (<a href" positive in <code>unnecessarymethodreference</code> (<a href" a regression in jdk 16-ea support (<a href" prone 250</h2><p>new checks:</p><ul><li><a href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" href" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href" release error prone 251</li><li><a href" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href" dont set checks as <code>disableable  false</code> in external</li><li><a href" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href" dont suggest private constructors for abstract classes</li><li><a href" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href" address a <code>visiblefortestingused</code> finding</li><li><a href" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> errorprone is catching actual issues i will work through them ||
2179,0,0,0,0,1,1,0,0,1,2173,fix reversed order of verify parameters for consistency the parameters of the methodmockedstaticverify(verificationmode verification)have been swapped tomockedstaticverify(verification verificationmode)as this order is already used inmockitoverify(t verificationmode)fixes: #2173check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_  merging 2179 
2193,0,0,0,0,1,1,0,0,1,2154,2154 : javalangobject is now instrumented again seems like ```// the object type does not ever need instrumentationtargetsremove(objectclass)```in `orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(set<class<?>> boolean)` was a bit over the top i e it does seem to break mocking of `tostring` when inherited from `javalangobject`i added a test for this which should have been there in the first place due to this i am still not sure if removing the line is safe even if the whole test suite is green please review carefully yeah good point i dont know why i ever added that ||
2236,1,0,0,0,1,1,0,0,1,2235,bugfix/2235 verify on a wrapped mock fails pr for #2235: verify() on a wrapped mock fails with unfinishedverificationexception  
2241,1,1,0,1,1,1,1,0,1,2238,2238: do not omit stack frames of causing class this pr will fix this problems described in #2238 the main cause wasnt the `hiderecursivecall` method but `tryinvoke` methodin `tryinvoke` the original stacktrace will be passed through the configured filter after it has been modified  hiderecursivecall`when calling `hiderecursivecall` the second argument (`current`) is set the the length of the stack trace of the causing exceptionthis will omit too much stack frames ultimately skipping the lines containing of the root exception causein this patch `tryinvoke` will try to find a better starting frame when an exception is caughtit will do this by investigating the created stack trace and look for the first entry matching the class name of the `instance` object given to `tryinvoke` this offset will then be given to `hiderecursivecall` as `current` argument instead of using the stack trace lengthif there is no `instance` object (`null`) the length of the stack trace is used (like before)  
2259,1,0,0,1,1,1,0,0,0,218,"but invoked here" lists the invocation parameters supersedes and closes #2188  
2263,0,0,0,0,0,1,0,0,1,2242,2242 : make exceptions for inorderverify more standard / spec… …ific*adds nullinsteadofmockexception and notamockexception checks to inorderverify() *before* checking if mocks were passed in during creation of inordersee  for a description of the issueinorderverify(mock) now first checks if the passed argument is null and if the mock is in fact a mock and gives appropriate exception messages before checking if the passed in argument was passed during creation of inorder object and therefore giving a less specific error message<!-- hey thanks for the contribution this is awesomeas you may have read project members have somehow an opinionated view on what and how should bemockito eg we dont want mockito to be a feature bloatthere may be a thorough review with feedback -> code change loop--><!--which branch : - on mockito 3x make your pull request target `release/3x`- on mockito 2x make your pull request target `release/2x` (2x is in mainte ce mode)--><!--if you have a suggestion for this template you can fix it in the github/pull_request_templatemd file-->## checklist -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_ indeed 
2267,1,1,0,1,1,1,1,0,1,2266,include cause when fieldreader fails to access field 2266simply passes the exception cause to the thrown mockitoexception  merging 2267 
2274,0,0,0,0,1,1,0,0,0,2273,2273 : add missing parenthesis to javadoc example adds the missing parenthesis to the argumentmatcher javadoc example## checklist -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_  merging 2274 
2298,1,0,0,1,1,1,0,0,1,2257,bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href" prone 270</a> plus an <a href" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href" reports</a> for issues with java 17 are welcome</li><li><a href" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href" checks:</p><ul><li><a href" href" href" href" href" issues: <a href" <a href" <a href" <a href" <a href" <a href" <a href" href" release error prone 271</li><li><a href" improve jdk 17 support</li><li><a href" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href" fix a jdk 17 incompatibility</li><li><a href" add tests for method invocation bug with the <code>inliner</code></li><li><a href" fix a jdk 16-only test</li><li><a href" internal refactoring</li><li><a href" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href" fix a jdk 16 incompatibility</li><li><a href" fix some crashes involving records</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href" prone 270</a> plus an <a href" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href" reports</a> for issues with java 17 are welcome</li><li><a href" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href" checks:</p><ul><li><a href" href" href" href" href" issues: <a href" <a href" <a href" <a href" <a href" <a href" <a href" href" release error prone 271</li><li><a href" improve jdk 17 support</li><li><a href" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href" fix a jdk 17 incompatibility</li><li><a href" add tests for method invocation bug with the <code>inliner</code></li><li><a href" fix a jdk 16-only test</li><li><a href" internal refactoring</li><li><a href" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href" fix a jdk 16 incompatibility</li><li><a href" fix some crashes involving records</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>  
2298,1,0,0,1,1,1,0,0,1,2260,bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href" prone 270</a> plus an <a href" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href" reports</a> for issues with java 17 are welcome</li><li><a href" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href" checks:</p><ul><li><a href" href" href" href" href" issues: <a href" <a href" <a href" <a href" <a href" <a href" <a href" href" release error prone 271</li><li><a href" improve jdk 17 support</li><li><a href" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href" fix a jdk 17 incompatibility</li><li><a href" add tests for method invocation bug with the <code>inliner</code></li><li><a href" fix a jdk 16-only test</li><li><a href" internal refactoring</li><li><a href" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href" fix a jdk 16 incompatibility</li><li><a href" fix some crashes involving records</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href" prone 270</a> plus an <a href" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href" reports</a> for issues with java 17 are welcome</li><li><a href" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href" checks:</p><ul><li><a href" href" href" href" href" issues: <a href" <a href" <a href" <a href" <a href" <a href" <a href" href" release error prone 271</li><li><a href" improve jdk 17 support</li><li><a href" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href" fix a jdk 17 incompatibility</li><li><a href" add tests for method invocation bug with the <code>inliner</code></li><li><a href" fix a jdk 16-only test</li><li><a href" internal refactoring</li><li><a href" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href" fix a jdk 16 incompatibility</li><li><a href" fix some crashes involving records</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>  
2298,1,0,0,1,1,1,0,0,1,2282,bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href" prone 270</a> plus an <a href" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href" reports</a> for issues with java 17 are welcome</li><li><a href" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href" checks:</p><ul><li><a href" href" href" href" href" issues: <a href" <a href" <a href" <a href" <a href" <a href" <a href" href" release error prone 271</li><li><a href" improve jdk 17 support</li><li><a href" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href" fix a jdk 17 incompatibility</li><li><a href" add tests for method invocation bug with the <code>inliner</code></li><li><a href" fix a jdk 16-only test</li><li><a href" internal refactoring</li><li><a href" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href" fix a jdk 16 incompatibility</li><li><a href" fix some crashes involving records</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href" prone 270</a> plus an <a href" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href" reports</a> for issues with java 17 are welcome</li><li><a href" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href" checks:</p><ul><li><a href" href" href" href" href" issues: <a href" <a href" <a href" <a href" <a href" <a href" <a href" href" release error prone 271</li><li><a href" improve jdk 17 support</li><li><a href" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href" fix a jdk 17 incompatibility</li><li><a href" add tests for method invocation bug with the <code>inliner</code></li><li><a href" fix a jdk 16-only test</li><li><a href" internal refactoring</li><li><a href" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href" fix a jdk 16 incompatibility</li><li><a href" fix some crashes involving records</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>  
2298,1,0,0,1,1,1,0,0,1,2324,bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href" prone 270</a> plus an <a href" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href" reports</a> for issues with java 17 are welcome</li><li><a href" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href" checks:</p><ul><li><a href" href" href" href" href" issues: <a href" <a href" <a href" <a href" <a href" <a href" <a href" href" release error prone 271</li><li><a href" improve jdk 17 support</li><li><a href" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href" fix a jdk 17 incompatibility</li><li><a href" add tests for method invocation bug with the <code>inliner</code></li><li><a href" fix a jdk 16-only test</li><li><a href" internal refactoring</li><li><a href" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href" fix a jdk 16 incompatibility</li><li><a href" fix some crashes involving records</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href" prone 270</a> plus an <a href" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href" reports</a> for issues with java 17 are welcome</li><li><a href" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href" checks:</p><ul><li><a href" href" href" href" href" issues: <a href" <a href" <a href" <a href" <a href" <a href" <a href" href" release error prone 271</li><li><a href" improve jdk 17 support</li><li><a href" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href" fix a jdk 17 incompatibility</li><li><a href" add tests for method invocation bug with the <code>inliner</code></li><li><a href" fix a jdk 16-only test</li><li><a href" internal refactoring</li><li><a href" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href" fix a jdk 16 incompatibility</li><li><a href" fix some crashes involving records</li><li>additional commits viewable in <a href" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>  
2306,1,1,1,1,1,1,1,0,0,230,use the parent classloader if the context classloader is a child of it this should only affect cases that previously would have thrown anexception2303 there are some formatting issues that should be automatically  if you run `/gradlew spotlessapply` locally || formatting issues fixed ||  merging 2306 
2312,0,0,0,1,0,1,1,0,1,2303,undo parent for multipleparentsclassloader 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1 which breaks behavior under some classloaders that special-case mockito classes use of an explicit parent with `multipleparentsclassloader` appears to be discouraged in the documentation alsofollowup for #2303  merging 2312 
2318,1,1,1,1,1,1,1,0,0,2303,check package-privacy of method params this patch handles methods where an interface uses a package-private type as a param or return value - without it the generated mock class will produce abstractmethoderror since its methods do not actually override the methods of the interfacesfollowup on #2303 i have run this through googles internal tests and it doesnt break anything ||
