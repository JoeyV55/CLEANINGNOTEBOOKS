prNumber,Util,Network,Interpreter,i18n,Logic,Test,IO,App,corpus
138,1,0,0,0,0,0,1,0,implemented sequenceequal operator fixes issue since there is no direct analogue of iequalitycomparer in java func has been used nice and great use of the zip operator thank you again mairbek
138,1,0,1,0,0,0,1,0,implemented sequenceequal operator fixes issue since there is no direct analogue of iequalitycomparer in java func has been used nice and great use of the zip operator thank you again mairbek
138,1,0,0,0,1,1,1,1,implemented sequenceequal operator fixes issue since there is no direct analogue of iequalitycomparer in java func has been used nice and great use of the zip operator thank you again mairbek
146,1,0,0,0,0,0,1,0,merge of pull for issue operator takewhile manually merging https githubcom netflix rxjava pull from mairbek implementation of https githubcom netflix rxjava issues done by mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch
146,1,0,1,0,0,1,1,1,merge of pull for issue operator takewhile manually merging https githubcom netflix rxjava pull from mairbek implementation of https githubcom netflix rxjava issues done by mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch
146,1,0,0,0,0,0,1,0,merge of pull for issue operator takewhile manually merging https githubcom netflix rxjava pull from mairbek implementation of https githubcom netflix rxjava issues done by mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch
146,1,0,0,0,0,0,1,0,merge of pull for issue operator takewhile manually merging https githubcom netflix rxjava pull from mairbek implementation of https githubcom netflix rxjava issues done by mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch
146,1,0,1,0,0,1,1,1,merge of pull for issue operator takewhile manually merging https githubcom netflix rxjava pull from mairbek implementation of https githubcom netflix rxjava issues done by mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch
146,1,0,1,0,0,0,1,0,merge of pull for issue operator takewhile manually merging https githubcom netflix rxjava pull from mairbek implementation of https githubcom netflix rxjava issues done by mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch
156,1,0,0,0,0,0,1,0,implemented toiterable operation for issue this would allow to implement other blocking methods like single lastordefault next this looks good merging
156,1,0,1,0,0,1,1,1,implemented toiterable operation for issue this would allow to implement other blocking methods like single lastordefault next this looks good merging
156,1,0,1,0,0,0,1,0,implemented toiterable operation for issue this would allow to implement other blocking methods like single lastordefault next this looks good merging
165,1,0,0,0,0,0,1,0,fixed bug in ranges fixed issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
165,1,0,1,0,0,0,1,0,fixed bug in ranges fixed issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
165,1,0,1,0,0,0,1,0,fixed bug in ranges fixed issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
205,1,0,0,0,0,0,1,0,reimplementation of concat improved handling of observable the old version required all of the observable s to be generated and bufferedbefore the concat could begin if the outer observable was asynchronous itemscould be dropped test added the new version passes the test and does thebest job i could after examining several possible strategies of achievingclear and consistent semantics in accordance with the principle of leastsurprise my attempt to fix issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted there is another issue with this implementation the countdown latch will always block the calling thread which is not desirable anything that returns an observable should never be blocking rx is meant to support composition of operations and allows each operation to run concurrently while reviewing this i started playing with the unit tests and added new ones i also made them use inorderverify so they ensure correct ordering ive pasted it below so you can merge into your branch instead of me complicating the merge with another branch the tests pass pass except testconcatunsubscribe which deadlocks it does this because a list wont return the subscription asynchronously so it cant unsubscribe meanwhile a countdownlatch is waiting for the change to trigger and the two latches end up waiting on each otheri havent thought through enough yet to determine if there is a way to solve that or if the unit test is just testing the wrong thing and thus a bad testthe comment above from billy about countdownlatch originated from a discussion between him and i but while reviewing this it is probably the right approachi was playing with other approaches that are purely non blocking while retaining the correct concat sequential behavior but they all seem to require either another wrapping thread stealing work from one of the child observable threads and making it do work that is queued on the others and that seems like a bad idea even though it can be hacked to work but it does so in a way that is very unexpected and thus not something i want to pursue queueing all onnext values which could be a bad memory issue and also means we eagerly subscribe which is not what we wantmy biggest issue right now is that concat o o is a very common usage but that results in list which will be blocking and unsubscribe doesnt workill think through this more but id appreciate your thoughts on how to handle testconcatunsubscribe java public static class unittest { test public void testconcat { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e suppresswarnings unchecked observable concat observablecreate concat odds even concatsubscribe observer verify observer times onnext anystring } test public void testconcatwithlist { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final list list new arraylist listadd odds listadd even observable concat observablecreate concat list concatsubscribe observer verify observer times onnext anystring } test public void testconcatunsubscribe { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w new testobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked observable concat observablecreate concat w w systemoutprintln before subscribe subscription s concatsubscribe aobserver systemoutprintln after subscribe try { block main thread to allow observable w to complete and observable w to call onnext once systemoutprintln before callonceawait callonceawait systemoutprintln after callonceawait s unsubscribe systemoutprintln after s unsubscribe unblock the observable to continue oktocontinuecountdown systemoutprintln after countdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six inorderverify aobserver times oncompleted } test public void testmergeobservableofobservables { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e observable observableofobservables observablecreate new func subscription { override public subscription call observer observer { simulate what would happen in an observable observeronnext odds observeronnext even observeroncompleted return new subscription { override public void unsubscribe { unregister will never be called here since we are executing synchronously } } } } observable concat observablecreate concat observableofobservables concatsubscribe observer verify observer times onnext anystring } simple concat of asynchronous observables ensuring it emits in correct order suppresswarnings unchecked test public void testsimpleasyncconcat { observer observer mock observerclass testobservable o new testobservable one two three testobservable o new testobservable four five six observableconcat o o subscribe observer try { wait for async observables to complete o tjoin o tjoin } catch exception e { throw new runtimeexception failed waiting on threads } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six } test an async observable that emits more async observables suppresswarnings unchecked test public void testnestedasyncconcat throws exception { observer observer mock observerclass final testobservable o new testobservable one two three final testobservable o new testobservable four five six final testobservable o new testobservable seven eight nine final countdownlatch allowthird new countdownlatch final atomicreference parent new atomicreference observable observableofobservables observablecreate new func subscription { override public subscription call final observer observer { final booleansubscription s new booleansubscription parentset new thread new runnable { override public void run { try { emit first if sisunsubscribed { systemoutprintln emit o observeronnext o } emit second if sisunsubscribed { systemoutprintln emit o observeronnext o } wait until sometime later and emit third try { allowthirdawait } catch interruptedexception e { observeronerror e } if sisunsubscribed { systemoutprintln emit o observeronnext o } } catch exception e { observeronerror e } finally { systemoutprintln done parent observable observeroncompleted } } } parentget start return s } } observablecreate concat observableofobservables subscribe observer wait for parent to start while parentget null { threadsleep } try { wait for first async observables to complete while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six we shouldnt have the following yet inorderverify observer never onnext seven inorderverify observer never onnext eight inorderverify observer never onnext nine we should not be completed yet verify observer never oncompleted verify observer never onerror any exceptionclass now allow the third allowthirdcountdown try { while o t null { threadsleep } wait for rd to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorderverify observer times onnext seven inorderverify observer times onnext eight inorderverify observer times onnext nine inorderverify observer times oncompleted verify observer never onerror any exceptionclass } suppresswarnings unchecked test public void testblockedobservableofobservables { observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch testobservable observableofobservables new testobservable callonce oktocontinue odds even func subscription concatf concat observableofobservables observable concat observablecreate concatf concatsubscribe observer try { block main thread to allow observables to serve up o callonceawait } catch exception ex { exprintstacktrace fail exgetmessage } the concated observable should have served up all of the odds verify observer times onnext verify observer times onnext verify observer times onnext verify observer times onnext try { unblock observables so it can serve up o and complete oktocontinuecountdown observableofobservablestjoin } catch exception ex { exprintstacktrace fail exgetmessage } the concatenated observable should now have served up all the evens verify observer times onnext verify observer times onnext verify observer times onnext } private static class testobservable extends observable { private final subscription s new subscription { override public void unsubscribe { subscribed false } } private final list values private thread t null private int count private boolean subscribed true private final countdownlatch once private final countdownlatch oktocontinue public testobservable t values { this null null values } public testobservable countdownlatch once countdownlatch oktocontinue t values { thisvalues arraysaslist values thisonce once thisoktocontinue oktocontinue } override public subscription subscribe final observer observer { t new thread new runnable { override public void run { try { while count while reviewing this i started playing with the unit tests and added new ones i also made them use inorderverify so they ensure correct ordering ive pasted it below so you can merge into your branch instead of me complicating the merge with another branch the tests pass pass except testconcatunsubscribe which deadlocks it does this because a list wont return the subscription asynchronously so it cant unsubscribe meanwhile a countdownlatch is waiting for the change to trigger and the two latches end up waiting on each other i havent thought through enough yet to determine if there is a way to solve that or if the unit test is just testing the wrong thing and thus a bad test the comment above from billy https githubcom billy about countdownlatch originated from a discussion between him and i but while reviewing this it is probably the right approach i was playing with other approaches that are purely non blocking while retaining the correct concat sequential behavior but they all seem to require either another wrapping thread stealing work from one of the child observable threads and making it do work that is queued on the others and that seems like a bad idea even though it can be hacked to work but it does so in a way that is very unexpected and thus not something i want to pursue queueing all onnext values which could be a bad memory issue and also means we eagerly subscribe which is not what we want my biggest issue right now is that concat o o is a very common usage but that results in list which will be blocking and unsubscribe doesnt work ill think through this more but id appreciate your thoughts on how to handle testconcatunsubscribe public static class unittest { test public void testconcat { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e suppresswarnings unchecked observable concat observablecreate concat odds even concatsubscribe observer verify observer times onnext anystring } test public void testconcatwithlist { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final list list new arraylist listadd odds listadd even observable concat observablecreate concat list concatsubscribe observer verify observer times onnext anystring } test public void testconcatunsubscribe { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w new testobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked observable concat observablecreate concat w w systemoutprintln before subscribe subscription s concatsubscribe aobserver systemoutprintln after subscribe try { block main thread to allow observable w to complete and observable w to call onnext once systemoutprintln before callonceawait callonceawait systemoutprintln after callonceawait s unsubscribe systemoutprintln after s unsubscribe unblock the observable to continue oktocontinuecountdown systemoutprintln after countdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six inorderverify aobserver times oncompleted } test public void testmergeobservableofobservables { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e observable observableofobservables observablecreate new func subscription { override public subscription call observer observer { simulate what would happen in an observable observeronnext odds observeronnext even observeroncompleted return new subscription { override public void unsubscribe { unregister will never be called here since we are executing synchronously } } } } observable concat observablecreate concat observableofobservables concatsubscribe observer verify observer times onnext anystring } simple concat of asynchronous observables ensuring it emits in correct order suppresswarnings unchecked test public void testsimpleasyncconcat { observer observer mock observerclass testobservable o new testobservable one two three testobservable o new testobservable four five six observableconcat o o subscribe observer try { wait for async observables to complete o tjoin o tjoin } catch exception e { throw new runtimeexception failed waiting on threads } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six } test an async observable that emits more async observables suppresswarnings unchecked test public void testnestedasyncconcat throws exception { observer observer mock observerclass final testobservable o new testobservable one two three final testobservable o new testobservable four five six final testobservable o new testobservable seven eight nine final countdownlatch allowthird new countdownlatch final atomicreference parent new atomicreference observable observableofobservables observablecreate new func subscription { override public subscription call final observer observer { final booleansubscription s new booleansubscription parentset new thread new runnable { override public void run { try { emit first if sisunsubscribed { systemoutprintln emit o observeronnext o } emit second if sisunsubscribed { systemoutprintln emit o observeronnext o } wait until sometime later and emit third try { allowthirdawait } catch interruptedexception e { observeronerror e } if sisunsubscribed { systemoutprintln emit o observeronnext o } } catch exception e { observeronerror e } finally { systemoutprintln done parent observable observeroncompleted } } } parentget start return s } } observablecreate concat observableofobservables subscribe observer wait for parent to start while parentget null { threadsleep } try { wait for first async observables to complete while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six we shouldnt have the following yet inorderverify observer never onnext seven inorderverify observer never onnext eight inorderverify observer never onnext nine we should not be completed yet verify observer never oncompleted verify observer never onerror any exceptionclass now allow the third allowthirdcountdown try { while o t null { threadsleep } wait for rd to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorderverify observer times onnext seven inorderverify observer times onnext eight inorderverify observer times onnext nine inorderverify observer times oncompleted verify observer never onerror any exceptionclass } suppresswarnings unchecked test public void testblockedobservableofobservables { observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch testobservable observableofobservables new testobservable callonce oktocontinue odds even func subscription concatf concat observableofobservables observable concat observablecreate concatf concatsubscribe observer try { block main thread to allow observables to serve up o callonceawait } catch exception ex { exprintstacktrace fail exgetmessage } the concated observable should have served up all of the odds verify observer times onnext verify observer times onnext verify observer times onnext verify observer times onnext try { unblock observables so it can serve up o and complete oktocontinuecountdown observableofobservablestjoin } catch exception ex { exprintstacktrace fail exgetmessage } the concatenated observable should now have served up all the evens verify observer times onnext verify observer times onnext verify observer times onnext } private static class testobservable extends observable { private final subscription s new subscription { override public void unsubscribe { subscribed false } } private final list values private thread t null private int count private boolean subscribed true private final countdownlatch once private final countdownlatch oktocontinue public testobservable t values { this null null values } public testobservable countdownlatch once countdownlatch oktocontinue t values { thisvalues arraysaslist values thisonce once thisoktocontinue oktocontinue } override public subscription subscribe final observer observer { t new thread new runnable { override public void run { try { while count observeronnext valuesget count count unblock the main thread to call unsubscribe if null once oncecountdown block until the main thread has called unsubscribe if null once oktocontinueawait } if subscribed observeroncompleted } catch interruptedexception e { eprintstacktrace fail egetmessage } } } tstart return s } } }  reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks for update let me take a look and i will do some moreresearch thought on the testconcatsubscribe test caseon fri mar at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good my original test case was intended to test the unsubscribe inside one ofchild observable the countdownlatch was used so that the code will havea chance to unsubscribe in a predicable manner unsubscribe after four in a normal case there should be no blocking between inner and outerobservable i rewrote the case for better clarity and having the outerobservable is in a separate thread so the test will pass now youbrought up a good point about when you can unsubscribe should it onlyallow unsubscribe to happen during the outer onnext i need to do moreresearch on it here is the test i plan to add test public void testconcatunsubscribeobservableofobservable { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w newtestobservable callonce oktocontinuefour five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked testobservable observableofobservables newtestobservable w w func subscription concatf concat observableofobservables observable concat observablecreate concatf subscription s concatsubscribe aobserver try { block main thread to allow observable w to complete and observable w to call onnext exactly once callonceawait four has been processed by onnext s unsubscribe five and six will not be processed by onnext unblock the observable to continue oktocontinuecountdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six verify aobserver never oncompleted verify aobserver never onerror any exceptionclass }on tue apr at pm cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment the rx net version of concat uses the immediatescheduler to execute theoperation which will execute the operation on the same calling thread soif the observables are running on the same thread it will besynchronous blocked i have pulled in your changes from your fork andadded the additional unit test to test unsubscribe with observablesrunning in different thread i have also updated the javadoc about theblocking with observable on the same thread from my side it looks goodon wed apr at am billy yuen billyy gmailcom wrote my original test case was intended to test the unsubscribe inside one of child observable the countdownlatch was used so that the code will have a chance to unsubscribe in a predicable manner unsubscribe after four in a normal case there should be no blocking between inner and outer observable i rewrote the case for better clarity and having the outer observable is in a separate thread so the test will pass now you brought up a good point about when you can unsubscribe should it only allow unsubscribe to happen during the outer onnext i need to do more research on it here is the test i plan to add test public void testconcatunsubscribeobservableofobservable { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w newtestobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked testobservable observableofobservables newtestobservable w w func subscription concatf concat observableofobservables observable concat observablecreate concatf subscription s concatsubscribe aobserver try { block main thread to allow observable w to complete and observable w to call onnext exactly once callonceawait four has been processed by onnext s unsubscribe five and six will not be processed by onnext unblock the observable to continue oktocontinuecountdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six verify aobserver never oncompleted verify aobserver never onerror any exceptionclass } on tue apr at pm cloudbees pull request builder plugin notifications githubcom wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment i do find it a little strange that observablefrom iterable is a shotgun observable ie the subscribe blocks until all downstream operations have completed on all items which means it is impossible to ever unsubscribe but given that this is correct behavior i think that it makes sense that concat o o also cannot be unsubscribed from i added a cautionary comment to the javadocrx does not or rarely does add concurrency see guideline thus observablefrom is wrapping a synchronous iterable therefore the observable will be synchronousa scheduler could be used to make the subscription to an iterable happen on another thread or a custom observable could be created that handles an iterable asynchronouslyall rx operators must be capable of handling both synchronous and asynchronous sequences and if its synchronous that means unsubscribe will not work which means its up to the implementor of an observable to understand this and decided if its okay to firehose the results for the case of concat my concern is that if all the sequences being combined are async then we need to retain the async behavior and not block and prevent unsubscriptionfor example async or synchronous observablea with items async or synchronous observableb with items async observablec with infinite items hot observable that never completed i should be able to do this concat a b c take this should get the items from a items from b and first items from c and then unsubscribe and continuedoes this work with the current implementation and correctly unsubscribe from observablec good point the best way to tell is to build an unit test for this case i can expand my new test to include this case and see what happenon wed apr at pm ben christensen notifications githubcomwrote i do find it a little strange that observablefrom iterable is a shotgun observable ie the subscribe blocks until all downstream operations have completed on all items which means it is impossible to ever unsubscribe but given that this is correct behavior i think that it makes sense that concat o o also cannot be unsubscribed from i added a cautionary comment to the javadoc rx does not or rarely does add concurrency see guideline thus observablefrom is wrapping a synchronous iterable therefore the observable will be synchronous a scheduler could be used to make the subscription to an iterable happen on another thread or a custom observable could be created that handles an iterable asynchronously all rx operators must be capable of handling both synchronous and asynchronous sequences and if its synchronous that means unsubscribe will not work which means its up to the implementor of an observable to understand this and decided if its okay to firehose the results for the case of concat my concern is that if all the sequences being combined are async then we need to retain the async behavior and not block and prevent unsubscription for example async or synchronous observablea with items async or synchronous observableb with items async observablec with infinite items hot observable that never completed i should be able to do this concat a b c take this should get the items from a items from b and first items from c and then unsubscribe and continue does this work with the current implementation and correctly unsubscribe from observablec — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment
205,1,0,1,0,0,0,1,0,reimplementation of concat improved handling of observable the old version required all of the observable s to be generated and bufferedbefore the concat could begin if the outer observable was asynchronous itemscould be dropped test added the new version passes the test and does thebest job i could after examining several possible strategies of achievingclear and consistent semantics in accordance with the principle of leastsurprise my attempt to fix issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted there is another issue with this implementation the countdown latch will always block the calling thread which is not desirable anything that returns an observable should never be blocking rx is meant to support composition of operations and allows each operation to run concurrently while reviewing this i started playing with the unit tests and added new ones i also made them use inorderverify so they ensure correct ordering ive pasted it below so you can merge into your branch instead of me complicating the merge with another branch the tests pass pass except testconcatunsubscribe which deadlocks it does this because a list wont return the subscription asynchronously so it cant unsubscribe meanwhile a countdownlatch is waiting for the change to trigger and the two latches end up waiting on each otheri havent thought through enough yet to determine if there is a way to solve that or if the unit test is just testing the wrong thing and thus a bad testthe comment above from billy about countdownlatch originated from a discussion between him and i but while reviewing this it is probably the right approachi was playing with other approaches that are purely non blocking while retaining the correct concat sequential behavior but they all seem to require either another wrapping thread stealing work from one of the child observable threads and making it do work that is queued on the others and that seems like a bad idea even though it can be hacked to work but it does so in a way that is very unexpected and thus not something i want to pursue queueing all onnext values which could be a bad memory issue and also means we eagerly subscribe which is not what we wantmy biggest issue right now is that concat o o is a very common usage but that results in list which will be blocking and unsubscribe doesnt workill think through this more but id appreciate your thoughts on how to handle testconcatunsubscribe java public static class unittest { test public void testconcat { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e suppresswarnings unchecked observable concat observablecreate concat odds even concatsubscribe observer verify observer times onnext anystring } test public void testconcatwithlist { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final list list new arraylist listadd odds listadd even observable concat observablecreate concat list concatsubscribe observer verify observer times onnext anystring } test public void testconcatunsubscribe { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w new testobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked observable concat observablecreate concat w w systemoutprintln before subscribe subscription s concatsubscribe aobserver systemoutprintln after subscribe try { block main thread to allow observable w to complete and observable w to call onnext once systemoutprintln before callonceawait callonceawait systemoutprintln after callonceawait s unsubscribe systemoutprintln after s unsubscribe unblock the observable to continue oktocontinuecountdown systemoutprintln after countdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six inorderverify aobserver times oncompleted } test public void testmergeobservableofobservables { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e observable observableofobservables observablecreate new func subscription { override public subscription call observer observer { simulate what would happen in an observable observeronnext odds observeronnext even observeroncompleted return new subscription { override public void unsubscribe { unregister will never be called here since we are executing synchronously } } } } observable concat observablecreate concat observableofobservables concatsubscribe observer verify observer times onnext anystring } simple concat of asynchronous observables ensuring it emits in correct order suppresswarnings unchecked test public void testsimpleasyncconcat { observer observer mock observerclass testobservable o new testobservable one two three testobservable o new testobservable four five six observableconcat o o subscribe observer try { wait for async observables to complete o tjoin o tjoin } catch exception e { throw new runtimeexception failed waiting on threads } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six } test an async observable that emits more async observables suppresswarnings unchecked test public void testnestedasyncconcat throws exception { observer observer mock observerclass final testobservable o new testobservable one two three final testobservable o new testobservable four five six final testobservable o new testobservable seven eight nine final countdownlatch allowthird new countdownlatch final atomicreference parent new atomicreference observable observableofobservables observablecreate new func subscription { override public subscription call final observer observer { final booleansubscription s new booleansubscription parentset new thread new runnable { override public void run { try { emit first if sisunsubscribed { systemoutprintln emit o observeronnext o } emit second if sisunsubscribed { systemoutprintln emit o observeronnext o } wait until sometime later and emit third try { allowthirdawait } catch interruptedexception e { observeronerror e } if sisunsubscribed { systemoutprintln emit o observeronnext o } } catch exception e { observeronerror e } finally { systemoutprintln done parent observable observeroncompleted } } } parentget start return s } } observablecreate concat observableofobservables subscribe observer wait for parent to start while parentget null { threadsleep } try { wait for first async observables to complete while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six we shouldnt have the following yet inorderverify observer never onnext seven inorderverify observer never onnext eight inorderverify observer never onnext nine we should not be completed yet verify observer never oncompleted verify observer never onerror any exceptionclass now allow the third allowthirdcountdown try { while o t null { threadsleep } wait for rd to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorderverify observer times onnext seven inorderverify observer times onnext eight inorderverify observer times onnext nine inorderverify observer times oncompleted verify observer never onerror any exceptionclass } suppresswarnings unchecked test public void testblockedobservableofobservables { observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch testobservable observableofobservables new testobservable callonce oktocontinue odds even func subscription concatf concat observableofobservables observable concat observablecreate concatf concatsubscribe observer try { block main thread to allow observables to serve up o callonceawait } catch exception ex { exprintstacktrace fail exgetmessage } the concated observable should have served up all of the odds verify observer times onnext verify observer times onnext verify observer times onnext verify observer times onnext try { unblock observables so it can serve up o and complete oktocontinuecountdown observableofobservablestjoin } catch exception ex { exprintstacktrace fail exgetmessage } the concatenated observable should now have served up all the evens verify observer times onnext verify observer times onnext verify observer times onnext } private static class testobservable extends observable { private final subscription s new subscription { override public void unsubscribe { subscribed false } } private final list values private thread t null private int count private boolean subscribed true private final countdownlatch once private final countdownlatch oktocontinue public testobservable t values { this null null values } public testobservable countdownlatch once countdownlatch oktocontinue t values { thisvalues arraysaslist values thisonce once thisoktocontinue oktocontinue } override public subscription subscribe final observer observer { t new thread new runnable { override public void run { try { while count while reviewing this i started playing with the unit tests and added new ones i also made them use inorderverify so they ensure correct ordering ive pasted it below so you can merge into your branch instead of me complicating the merge with another branch the tests pass pass except testconcatunsubscribe which deadlocks it does this because a list wont return the subscription asynchronously so it cant unsubscribe meanwhile a countdownlatch is waiting for the change to trigger and the two latches end up waiting on each other i havent thought through enough yet to determine if there is a way to solve that or if the unit test is just testing the wrong thing and thus a bad test the comment above from billy https githubcom billy about countdownlatch originated from a discussion between him and i but while reviewing this it is probably the right approach i was playing with other approaches that are purely non blocking while retaining the correct concat sequential behavior but they all seem to require either another wrapping thread stealing work from one of the child observable threads and making it do work that is queued on the others and that seems like a bad idea even though it can be hacked to work but it does so in a way that is very unexpected and thus not something i want to pursue queueing all onnext values which could be a bad memory issue and also means we eagerly subscribe which is not what we want my biggest issue right now is that concat o o is a very common usage but that results in list which will be blocking and unsubscribe doesnt work ill think through this more but id appreciate your thoughts on how to handle testconcatunsubscribe public static class unittest { test public void testconcat { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e suppresswarnings unchecked observable concat observablecreate concat odds even concatsubscribe observer verify observer times onnext anystring } test public void testconcatwithlist { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final list list new arraylist listadd odds listadd even observable concat observablecreate concat list concatsubscribe observer verify observer times onnext anystring } test public void testconcatunsubscribe { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w new testobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked observable concat observablecreate concat w w systemoutprintln before subscribe subscription s concatsubscribe aobserver systemoutprintln after subscribe try { block main thread to allow observable w to complete and observable w to call onnext once systemoutprintln before callonceawait callonceawait systemoutprintln after callonceawait s unsubscribe systemoutprintln after s unsubscribe unblock the observable to continue oktocontinuecountdown systemoutprintln after countdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six inorderverify aobserver times oncompleted } test public void testmergeobservableofobservables { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e observable observableofobservables observablecreate new func subscription { override public subscription call observer observer { simulate what would happen in an observable observeronnext odds observeronnext even observeroncompleted return new subscription { override public void unsubscribe { unregister will never be called here since we are executing synchronously } } } } observable concat observablecreate concat observableofobservables concatsubscribe observer verify observer times onnext anystring } simple concat of asynchronous observables ensuring it emits in correct order suppresswarnings unchecked test public void testsimpleasyncconcat { observer observer mock observerclass testobservable o new testobservable one two three testobservable o new testobservable four five six observableconcat o o subscribe observer try { wait for async observables to complete o tjoin o tjoin } catch exception e { throw new runtimeexception failed waiting on threads } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six } test an async observable that emits more async observables suppresswarnings unchecked test public void testnestedasyncconcat throws exception { observer observer mock observerclass final testobservable o new testobservable one two three final testobservable o new testobservable four five six final testobservable o new testobservable seven eight nine final countdownlatch allowthird new countdownlatch final atomicreference parent new atomicreference observable observableofobservables observablecreate new func subscription { override public subscription call final observer observer { final booleansubscription s new booleansubscription parentset new thread new runnable { override public void run { try { emit first if sisunsubscribed { systemoutprintln emit o observeronnext o } emit second if sisunsubscribed { systemoutprintln emit o observeronnext o } wait until sometime later and emit third try { allowthirdawait } catch interruptedexception e { observeronerror e } if sisunsubscribed { systemoutprintln emit o observeronnext o } } catch exception e { observeronerror e } finally { systemoutprintln done parent observable observeroncompleted } } } parentget start return s } } observablecreate concat observableofobservables subscribe observer wait for parent to start while parentget null { threadsleep } try { wait for first async observables to complete while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six we shouldnt have the following yet inorderverify observer never onnext seven inorderverify observer never onnext eight inorderverify observer never onnext nine we should not be completed yet verify observer never oncompleted verify observer never onerror any exceptionclass now allow the third allowthirdcountdown try { while o t null { threadsleep } wait for rd to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorderverify observer times onnext seven inorderverify observer times onnext eight inorderverify observer times onnext nine inorderverify observer times oncompleted verify observer never onerror any exceptionclass } suppresswarnings unchecked test public void testblockedobservableofobservables { observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch testobservable observableofobservables new testobservable callonce oktocontinue odds even func subscription concatf concat observableofobservables observable concat observablecreate concatf concatsubscribe observer try { block main thread to allow observables to serve up o callonceawait } catch exception ex { exprintstacktrace fail exgetmessage } the concated observable should have served up all of the odds verify observer times onnext verify observer times onnext verify observer times onnext verify observer times onnext try { unblock observables so it can serve up o and complete oktocontinuecountdown observableofobservablestjoin } catch exception ex { exprintstacktrace fail exgetmessage } the concatenated observable should now have served up all the evens verify observer times onnext verify observer times onnext verify observer times onnext } private static class testobservable extends observable { private final subscription s new subscription { override public void unsubscribe { subscribed false } } private final list values private thread t null private int count private boolean subscribed true private final countdownlatch once private final countdownlatch oktocontinue public testobservable t values { this null null values } public testobservable countdownlatch once countdownlatch oktocontinue t values { thisvalues arraysaslist values thisonce once thisoktocontinue oktocontinue } override public subscription subscribe final observer observer { t new thread new runnable { override public void run { try { while count observeronnext valuesget count count unblock the main thread to call unsubscribe if null once oncecountdown block until the main thread has called unsubscribe if null once oktocontinueawait } if subscribed observeroncompleted } catch interruptedexception e { eprintstacktrace fail egetmessage } } } tstart return s } } }  reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks for update let me take a look and i will do some moreresearch thought on the testconcatsubscribe test caseon fri mar at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good my original test case was intended to test the unsubscribe inside one ofchild observable the countdownlatch was used so that the code will havea chance to unsubscribe in a predicable manner unsubscribe after four in a normal case there should be no blocking between inner and outerobservable i rewrote the case for better clarity and having the outerobservable is in a separate thread so the test will pass now youbrought up a good point about when you can unsubscribe should it onlyallow unsubscribe to happen during the outer onnext i need to do moreresearch on it here is the test i plan to add test public void testconcatunsubscribeobservableofobservable { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w newtestobservable callonce oktocontinuefour five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked testobservable observableofobservables newtestobservable w w func subscription concatf concat observableofobservables observable concat observablecreate concatf subscription s concatsubscribe aobserver try { block main thread to allow observable w to complete and observable w to call onnext exactly once callonceawait four has been processed by onnext s unsubscribe five and six will not be processed by onnext unblock the observable to continue oktocontinuecountdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six verify aobserver never oncompleted verify aobserver never onerror any exceptionclass }on tue apr at pm cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment the rx net version of concat uses the immediatescheduler to execute theoperation which will execute the operation on the same calling thread soif the observables are running on the same thread it will besynchronous blocked i have pulled in your changes from your fork andadded the additional unit test to test unsubscribe with observablesrunning in different thread i have also updated the javadoc about theblocking with observable on the same thread from my side it looks goodon wed apr at am billy yuen billyy gmailcom wrote my original test case was intended to test the unsubscribe inside one of child observable the countdownlatch was used so that the code will have a chance to unsubscribe in a predicable manner unsubscribe after four in a normal case there should be no blocking between inner and outer observable i rewrote the case for better clarity and having the outer observable is in a separate thread so the test will pass now you brought up a good point about when you can unsubscribe should it only allow unsubscribe to happen during the outer onnext i need to do more research on it here is the test i plan to add test public void testconcatunsubscribeobservableofobservable { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w newtestobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked testobservable observableofobservables newtestobservable w w func subscription concatf concat observableofobservables observable concat observablecreate concatf subscription s concatsubscribe aobserver try { block main thread to allow observable w to complete and observable w to call onnext exactly once callonceawait four has been processed by onnext s unsubscribe five and six will not be processed by onnext unblock the observable to continue oktocontinuecountdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six verify aobserver never oncompleted verify aobserver never onerror any exceptionclass } on tue apr at pm cloudbees pull request builder plugin notifications githubcom wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment i do find it a little strange that observablefrom iterable is a shotgun observable ie the subscribe blocks until all downstream operations have completed on all items which means it is impossible to ever unsubscribe but given that this is correct behavior i think that it makes sense that concat o o also cannot be unsubscribed from i added a cautionary comment to the javadocrx does not or rarely does add concurrency see guideline thus observablefrom is wrapping a synchronous iterable therefore the observable will be synchronousa scheduler could be used to make the subscription to an iterable happen on another thread or a custom observable could be created that handles an iterable asynchronouslyall rx operators must be capable of handling both synchronous and asynchronous sequences and if its synchronous that means unsubscribe will not work which means its up to the implementor of an observable to understand this and decided if its okay to firehose the results for the case of concat my concern is that if all the sequences being combined are async then we need to retain the async behavior and not block and prevent unsubscriptionfor example async or synchronous observablea with items async or synchronous observableb with items async observablec with infinite items hot observable that never completed i should be able to do this concat a b c take this should get the items from a items from b and first items from c and then unsubscribe and continuedoes this work with the current implementation and correctly unsubscribe from observablec good point the best way to tell is to build an unit test for this case i can expand my new test to include this case and see what happenon wed apr at pm ben christensen notifications githubcomwrote i do find it a little strange that observablefrom iterable is a shotgun observable ie the subscribe blocks until all downstream operations have completed on all items which means it is impossible to ever unsubscribe but given that this is correct behavior i think that it makes sense that concat o o also cannot be unsubscribed from i added a cautionary comment to the javadoc rx does not or rarely does add concurrency see guideline thus observablefrom is wrapping a synchronous iterable therefore the observable will be synchronous a scheduler could be used to make the subscription to an iterable happen on another thread or a custom observable could be created that handles an iterable asynchronously all rx operators must be capable of handling both synchronous and asynchronous sequences and if its synchronous that means unsubscribe will not work which means its up to the implementor of an observable to understand this and decided if its okay to firehose the results for the case of concat my concern is that if all the sequences being combined are async then we need to retain the async behavior and not block and prevent unsubscription for example async or synchronous observablea with items async or synchronous observableb with items async observablec with infinite items hot observable that never completed i should be able to do this concat a b c take this should get the items from a items from b and first items from c and then unsubscribe and continue does this work with the current implementation and correctly unsubscribe from observablec — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment
205,1,0,0,0,1,1,1,1,reimplementation of concat improved handling of observable the old version required all of the observable s to be generated and bufferedbefore the concat could begin if the outer observable was asynchronous itemscould be dropped test added the new version passes the test and does thebest job i could after examining several possible strategies of achievingclear and consistent semantics in accordance with the principle of leastsurprise my attempt to fix issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted there is another issue with this implementation the countdown latch will always block the calling thread which is not desirable anything that returns an observable should never be blocking rx is meant to support composition of operations and allows each operation to run concurrently while reviewing this i started playing with the unit tests and added new ones i also made them use inorderverify so they ensure correct ordering ive pasted it below so you can merge into your branch instead of me complicating the merge with another branch the tests pass pass except testconcatunsubscribe which deadlocks it does this because a list wont return the subscription asynchronously so it cant unsubscribe meanwhile a countdownlatch is waiting for the change to trigger and the two latches end up waiting on each otheri havent thought through enough yet to determine if there is a way to solve that or if the unit test is just testing the wrong thing and thus a bad testthe comment above from billy about countdownlatch originated from a discussion between him and i but while reviewing this it is probably the right approachi was playing with other approaches that are purely non blocking while retaining the correct concat sequential behavior but they all seem to require either another wrapping thread stealing work from one of the child observable threads and making it do work that is queued on the others and that seems like a bad idea even though it can be hacked to work but it does so in a way that is very unexpected and thus not something i want to pursue queueing all onnext values which could be a bad memory issue and also means we eagerly subscribe which is not what we wantmy biggest issue right now is that concat o o is a very common usage but that results in list which will be blocking and unsubscribe doesnt workill think through this more but id appreciate your thoughts on how to handle testconcatunsubscribe java public static class unittest { test public void testconcat { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e suppresswarnings unchecked observable concat observablecreate concat odds even concatsubscribe observer verify observer times onnext anystring } test public void testconcatwithlist { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final list list new arraylist listadd odds listadd even observable concat observablecreate concat list concatsubscribe observer verify observer times onnext anystring } test public void testconcatunsubscribe { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w new testobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked observable concat observablecreate concat w w systemoutprintln before subscribe subscription s concatsubscribe aobserver systemoutprintln after subscribe try { block main thread to allow observable w to complete and observable w to call onnext once systemoutprintln before callonceawait callonceawait systemoutprintln after callonceawait s unsubscribe systemoutprintln after s unsubscribe unblock the observable to continue oktocontinuecountdown systemoutprintln after countdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six inorderverify aobserver times oncompleted } test public void testmergeobservableofobservables { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e observable observableofobservables observablecreate new func subscription { override public subscription call observer observer { simulate what would happen in an observable observeronnext odds observeronnext even observeroncompleted return new subscription { override public void unsubscribe { unregister will never be called here since we are executing synchronously } } } } observable concat observablecreate concat observableofobservables concatsubscribe observer verify observer times onnext anystring } simple concat of asynchronous observables ensuring it emits in correct order suppresswarnings unchecked test public void testsimpleasyncconcat { observer observer mock observerclass testobservable o new testobservable one two three testobservable o new testobservable four five six observableconcat o o subscribe observer try { wait for async observables to complete o tjoin o tjoin } catch exception e { throw new runtimeexception failed waiting on threads } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six } test an async observable that emits more async observables suppresswarnings unchecked test public void testnestedasyncconcat throws exception { observer observer mock observerclass final testobservable o new testobservable one two three final testobservable o new testobservable four five six final testobservable o new testobservable seven eight nine final countdownlatch allowthird new countdownlatch final atomicreference parent new atomicreference observable observableofobservables observablecreate new func subscription { override public subscription call final observer observer { final booleansubscription s new booleansubscription parentset new thread new runnable { override public void run { try { emit first if sisunsubscribed { systemoutprintln emit o observeronnext o } emit second if sisunsubscribed { systemoutprintln emit o observeronnext o } wait until sometime later and emit third try { allowthirdawait } catch interruptedexception e { observeronerror e } if sisunsubscribed { systemoutprintln emit o observeronnext o } } catch exception e { observeronerror e } finally { systemoutprintln done parent observable observeroncompleted } } } parentget start return s } } observablecreate concat observableofobservables subscribe observer wait for parent to start while parentget null { threadsleep } try { wait for first async observables to complete while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six we shouldnt have the following yet inorderverify observer never onnext seven inorderverify observer never onnext eight inorderverify observer never onnext nine we should not be completed yet verify observer never oncompleted verify observer never onerror any exceptionclass now allow the third allowthirdcountdown try { while o t null { threadsleep } wait for rd to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorderverify observer times onnext seven inorderverify observer times onnext eight inorderverify observer times onnext nine inorderverify observer times oncompleted verify observer never onerror any exceptionclass } suppresswarnings unchecked test public void testblockedobservableofobservables { observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch testobservable observableofobservables new testobservable callonce oktocontinue odds even func subscription concatf concat observableofobservables observable concat observablecreate concatf concatsubscribe observer try { block main thread to allow observables to serve up o callonceawait } catch exception ex { exprintstacktrace fail exgetmessage } the concated observable should have served up all of the odds verify observer times onnext verify observer times onnext verify observer times onnext verify observer times onnext try { unblock observables so it can serve up o and complete oktocontinuecountdown observableofobservablestjoin } catch exception ex { exprintstacktrace fail exgetmessage } the concatenated observable should now have served up all the evens verify observer times onnext verify observer times onnext verify observer times onnext } private static class testobservable extends observable { private final subscription s new subscription { override public void unsubscribe { subscribed false } } private final list values private thread t null private int count private boolean subscribed true private final countdownlatch once private final countdownlatch oktocontinue public testobservable t values { this null null values } public testobservable countdownlatch once countdownlatch oktocontinue t values { thisvalues arraysaslist values thisonce once thisoktocontinue oktocontinue } override public subscription subscribe final observer observer { t new thread new runnable { override public void run { try { while count while reviewing this i started playing with the unit tests and added new ones i also made them use inorderverify so they ensure correct ordering ive pasted it below so you can merge into your branch instead of me complicating the merge with another branch the tests pass pass except testconcatunsubscribe which deadlocks it does this because a list wont return the subscription asynchronously so it cant unsubscribe meanwhile a countdownlatch is waiting for the change to trigger and the two latches end up waiting on each other i havent thought through enough yet to determine if there is a way to solve that or if the unit test is just testing the wrong thing and thus a bad test the comment above from billy https githubcom billy about countdownlatch originated from a discussion between him and i but while reviewing this it is probably the right approach i was playing with other approaches that are purely non blocking while retaining the correct concat sequential behavior but they all seem to require either another wrapping thread stealing work from one of the child observable threads and making it do work that is queued on the others and that seems like a bad idea even though it can be hacked to work but it does so in a way that is very unexpected and thus not something i want to pursue queueing all onnext values which could be a bad memory issue and also means we eagerly subscribe which is not what we want my biggest issue right now is that concat o o is a very common usage but that results in list which will be blocking and unsubscribe doesnt work ill think through this more but id appreciate your thoughts on how to handle testconcatunsubscribe public static class unittest { test public void testconcat { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e suppresswarnings unchecked observable concat observablecreate concat odds even concatsubscribe observer verify observer times onnext anystring } test public void testconcatwithlist { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final list list new arraylist listadd odds listadd even observable concat observablecreate concat list concatsubscribe observer verify observer times onnext anystring } test public void testconcatunsubscribe { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w new testobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked observable concat observablecreate concat w w systemoutprintln before subscribe subscription s concatsubscribe aobserver systemoutprintln after subscribe try { block main thread to allow observable w to complete and observable w to call onnext once systemoutprintln before callonceawait callonceawait systemoutprintln after callonceawait s unsubscribe systemoutprintln after s unsubscribe unblock the observable to continue oktocontinuecountdown systemoutprintln after countdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six inorderverify aobserver times oncompleted } test public void testmergeobservableofobservables { suppresswarnings unchecked observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e observable observableofobservables observablecreate new func subscription { override public subscription call observer observer { simulate what would happen in an observable observeronnext odds observeronnext even observeroncompleted return new subscription { override public void unsubscribe { unregister will never be called here since we are executing synchronously } } } } observable concat observablecreate concat observableofobservables concatsubscribe observer verify observer times onnext anystring } simple concat of asynchronous observables ensuring it emits in correct order suppresswarnings unchecked test public void testsimpleasyncconcat { observer observer mock observerclass testobservable o new testobservable one two three testobservable o new testobservable four five six observableconcat o o subscribe observer try { wait for async observables to complete o tjoin o tjoin } catch exception e { throw new runtimeexception failed waiting on threads } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six } test an async observable that emits more async observables suppresswarnings unchecked test public void testnestedasyncconcat throws exception { observer observer mock observerclass final testobservable o new testobservable one two three final testobservable o new testobservable four five six final testobservable o new testobservable seven eight nine final countdownlatch allowthird new countdownlatch final atomicreference parent new atomicreference observable observableofobservables observablecreate new func subscription { override public subscription call final observer observer { final booleansubscription s new booleansubscription parentset new thread new runnable { override public void run { try { emit first if sisunsubscribed { systemoutprintln emit o observeronnext o } emit second if sisunsubscribed { systemoutprintln emit o observeronnext o } wait until sometime later and emit third try { allowthirdawait } catch interruptedexception e { observeronerror e } if sisunsubscribed { systemoutprintln emit o observeronnext o } } catch exception e { observeronerror e } finally { systemoutprintln done parent observable observeroncompleted } } } parentget start return s } } observablecreate concat observableofobservables subscribe observer wait for parent to start while parentget null { threadsleep } try { wait for first async observables to complete while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin while o t null { threadsleep } systemoutprintln thread started waiting for it to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorder inorder inorder observer inorderverify observer times onnext one inorderverify observer times onnext two inorderverify observer times onnext three inorderverify observer times onnext four inorderverify observer times onnext five inorderverify observer times onnext six we shouldnt have the following yet inorderverify observer never onnext seven inorderverify observer never onnext eight inorderverify observer never onnext nine we should not be completed yet verify observer never oncompleted verify observer never onerror any exceptionclass now allow the third allowthirdcountdown try { while o t null { threadsleep } wait for rd to complete o tjoin } catch exception e { throw new runtimeexception failed waiting on threads e } inorderverify observer times onnext seven inorderverify observer times onnext eight inorderverify observer times onnext nine inorderverify observer times oncompleted verify observer never onerror any exceptionclass } suppresswarnings unchecked test public void testblockedobservableofobservables { observer observer mock observerclass final string o { } final string e { } final observable odds observabletoobservable o final observable even observabletoobservable e final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch testobservable observableofobservables new testobservable callonce oktocontinue odds even func subscription concatf concat observableofobservables observable concat observablecreate concatf concatsubscribe observer try { block main thread to allow observables to serve up o callonceawait } catch exception ex { exprintstacktrace fail exgetmessage } the concated observable should have served up all of the odds verify observer times onnext verify observer times onnext verify observer times onnext verify observer times onnext try { unblock observables so it can serve up o and complete oktocontinuecountdown observableofobservablestjoin } catch exception ex { exprintstacktrace fail exgetmessage } the concatenated observable should now have served up all the evens verify observer times onnext verify observer times onnext verify observer times onnext } private static class testobservable extends observable { private final subscription s new subscription { override public void unsubscribe { subscribed false } } private final list values private thread t null private int count private boolean subscribed true private final countdownlatch once private final countdownlatch oktocontinue public testobservable t values { this null null values } public testobservable countdownlatch once countdownlatch oktocontinue t values { thisvalues arraysaslist values thisonce once thisoktocontinue oktocontinue } override public subscription subscribe final observer observer { t new thread new runnable { override public void run { try { while count observeronnext valuesget count count unblock the main thread to call unsubscribe if null once oncecountdown block until the main thread has called unsubscribe if null once oktocontinueawait } if subscribed observeroncompleted } catch interruptedexception e { eprintstacktrace fail egetmessage } } } tstart return s } } }  reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks for update let me take a look and i will do some moreresearch thought on the testconcatsubscribe test caseon fri mar at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good my original test case was intended to test the unsubscribe inside one ofchild observable the countdownlatch was used so that the code will havea chance to unsubscribe in a predicable manner unsubscribe after four in a normal case there should be no blocking between inner and outerobservable i rewrote the case for better clarity and having the outerobservable is in a separate thread so the test will pass now youbrought up a good point about when you can unsubscribe should it onlyallow unsubscribe to happen during the outer onnext i need to do moreresearch on it here is the test i plan to add test public void testconcatunsubscribeobservableofobservable { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w newtestobservable callonce oktocontinuefour five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked testobservable observableofobservables newtestobservable w w func subscription concatf concat observableofobservables observable concat observablecreate concatf subscription s concatsubscribe aobserver try { block main thread to allow observable w to complete and observable w to call onnext exactly once callonceawait four has been processed by onnext s unsubscribe five and six will not be processed by onnext unblock the observable to continue oktocontinuecountdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six verify aobserver never oncompleted verify aobserver never onerror any exceptionclass }on tue apr at pm cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment the rx net version of concat uses the immediatescheduler to execute theoperation which will execute the operation on the same calling thread soif the observables are running on the same thread it will besynchronous blocked i have pulled in your changes from your fork andadded the additional unit test to test unsubscribe with observablesrunning in different thread i have also updated the javadoc about theblocking with observable on the same thread from my side it looks goodon wed apr at am billy yuen billyy gmailcom wrote my original test case was intended to test the unsubscribe inside one of child observable the countdownlatch was used so that the code will have a chance to unsubscribe in a predicable manner unsubscribe after four in a normal case there should be no blocking between inner and outer observable i rewrote the case for better clarity and having the outer observable is in a separate thread so the test will pass now you brought up a good point about when you can unsubscribe should it only allow unsubscribe to happen during the outer onnext i need to do more research on it here is the test i plan to add test public void testconcatunsubscribeobservableofobservable { final countdownlatch callonce new countdownlatch final countdownlatch oktocontinue new countdownlatch final testobservable w new testobservable one two three final testobservable w newtestobservable callonce oktocontinue four five six suppresswarnings unchecked observer aobserver mock observerclass suppresswarnings unchecked testobservable observableofobservables newtestobservable w w func subscription concatf concat observableofobservables observable concat observablecreate concatf subscription s concatsubscribe aobserver try { block main thread to allow observable w to complete and observable w to call onnext exactly once callonceawait four has been processed by onnext s unsubscribe five and six will not be processed by onnext unblock the observable to continue oktocontinuecountdown w tjoin w tjoin } catch exception e { eprintstacktrace fail egetmessage } inorder inorder inorder aobserver inorderverify aobserver times onnext one inorderverify aobserver times onnext two inorderverify aobserver times onnext three inorderverify aobserver times onnext four inorderverify aobserver never onnext five inorderverify aobserver never onnext six verify aobserver never oncompleted verify aobserver never onerror any exceptionclass } on tue apr at pm cloudbees pull request builder plugin notifications githubcom wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment i do find it a little strange that observablefrom iterable is a shotgun observable ie the subscribe blocks until all downstream operations have completed on all items which means it is impossible to ever unsubscribe but given that this is correct behavior i think that it makes sense that concat o o also cannot be unsubscribed from i added a cautionary comment to the javadocrx does not or rarely does add concurrency see guideline thus observablefrom is wrapping a synchronous iterable therefore the observable will be synchronousa scheduler could be used to make the subscription to an iterable happen on another thread or a custom observable could be created that handles an iterable asynchronouslyall rx operators must be capable of handling both synchronous and asynchronous sequences and if its synchronous that means unsubscribe will not work which means its up to the implementor of an observable to understand this and decided if its okay to firehose the results for the case of concat my concern is that if all the sequences being combined are async then we need to retain the async behavior and not block and prevent unsubscriptionfor example async or synchronous observablea with items async or synchronous observableb with items async observablec with infinite items hot observable that never completed i should be able to do this concat a b c take this should get the items from a items from b and first items from c and then unsubscribe and continuedoes this work with the current implementation and correctly unsubscribe from observablec good point the best way to tell is to build an unit test for this case i can expand my new test to include this case and see what happenon wed apr at pm ben christensen notifications githubcomwrote i do find it a little strange that observablefrom iterable is a shotgun observable ie the subscribe blocks until all downstream operations have completed on all items which means it is impossible to ever unsubscribe but given that this is correct behavior i think that it makes sense that concat o o also cannot be unsubscribed from i added a cautionary comment to the javadoc rx does not or rarely does add concurrency see guideline thus observablefrom is wrapping a synchronous iterable therefore the observable will be synchronous a scheduler could be used to make the subscription to an iterable happen on another thread or a custom observable could be created that handles an iterable asynchronously all rx operators must be capable of handling both synchronous and asynchronous sequences and if its synchronous that means unsubscribe will not work which means its up to the implementor of an observable to understand this and decided if its okay to firehose the results for the case of concat my concern is that if all the sequences being combined are async then we need to retain the async behavior and not block and prevent unsubscription for example async or synchronous observablea with items async or synchronous observableb with items async observablec with infinite items hot observable that never completed i should be able to do this concat a b c take this should get the items from a items from b and first items from c and then unsubscribe and continue does this work with the current implementation and correctly unsubscribe from observablec — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment
225,1,0,0,0,0,0,1,0,schedulers merge of pull manual merge of https githubcom netflix rxjava pull by mairbek plus the following changes made some classes non public so they dont become part of the published api if we find they have value in the public api we can make them so but once published its hard to remove them so id rather keep them implementation details until then consolidated executorscheduler and scheduledexecutorscheduler made executorscheduler use a system wide scheduledexecutorscheduler for handling delayed events when only an executor is available made the iothreadpool use a non bounded cached thread pool next step from here is to review all operator implementations and add the scheduler overloads rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request the unit test is poorly written non deterministic ill fix in the morning awesome work with this it should be easy to implement operators like sample etc yes it should open the gates to many operators we havent been able to pursue committed a few tweaks and fixesopen questions for me are were not using the schedulernow value anywhere should we be or is that only for the virtual scheduler used for testing not quite sure how the overloads should work on merge etc ive implemented them but the behavior might not yet match c can someone with an rxnet environment setup implement a test similar to this from java and tell me the output java test public void testmixedschedulers throws interruptedexception { final string mainthreadname threadcurrentthread getname observable o observable create new func subscription { override public subscription call observer observer { systemoutprintln origin observable is running on threadcurrentthread getname assertfalse threadcurrentthread getname equals mainthreadname asserttrue actually threadcurrentthread getname threadcurrentthread getname startswith rxiothreadpool observeronnext one observeronnext two observeronnext three observeroncompleted return subscriptionsempty } } subscribeon schedulersthreadpoolforio subscribe to the source on the io thread pool now merge on the cpu threadpool o observable merge o observable from four five subscribeon schedulersthreadpoolforcomputation map new func { override public string call string v { opportunity to see what thread the merge is running on systemoutprintln merge is running on threadcurrentthread getname return v } } final countdownlatch latch new countdownlatch final atomicreference onerror new atomicreference subscribe on a new thread osubscribe new observer { override public void oncompleted { systemoutprintln received oncompleted latchcountdown } override public void onerror exception e { systemoutprintln received onerror egetmessage onerrorset runtimeexception e latchcountdown } override public void onnext string v { systemoutprintln final subscribe is running on threadcurrentthread getname systemoutprintln onnext v } } schedulersnewthread wait for the above to finish or blow up if its blocked latchawait timeunitseconds } im trying to understand how a sequence should work when multiple subscribeon operators are applied at different steps of a sequenceof course rxnet doesnt have the io and cpu thread pools those are just helper methods to executors which would be separate threadpools for different work types so youll need to adjust that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good is there any reason to use schedulerschedule on an internal operator implementation instead of just leveraging subscribeon other than when we need the delay arguments of course for example on a method overload of merge is this okay java return merge source subscribeon scheduler or is there some reason to inside the operationmerge do this java return schedulerschedule new func { override public subscription call { return new mergeobservable o call observer } } they seem to accomplish the same thing but would like to know if theres a reason to prefer one over the otheri prefer just reusing subscribeon i cant tell from reading c code what it does as i cant find the extensions that implement the override methods im pulling the trigger and merging this into master so people can start playing with it and providing feedbackthe public api changes are fairly limited still so most changes which i fully expect will be implementation details rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
225,1,0,1,0,0,0,1,0,schedulers merge of pull manual merge of https githubcom netflix rxjava pull by mairbek plus the following changes made some classes non public so they dont become part of the published api if we find they have value in the public api we can make them so but once published its hard to remove them so id rather keep them implementation details until then consolidated executorscheduler and scheduledexecutorscheduler made executorscheduler use a system wide scheduledexecutorscheduler for handling delayed events when only an executor is available made the iothreadpool use a non bounded cached thread pool next step from here is to review all operator implementations and add the scheduler overloads rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request the unit test is poorly written non deterministic ill fix in the morning awesome work with this it should be easy to implement operators like sample etc yes it should open the gates to many operators we havent been able to pursue committed a few tweaks and fixesopen questions for me are were not using the schedulernow value anywhere should we be or is that only for the virtual scheduler used for testing not quite sure how the overloads should work on merge etc ive implemented them but the behavior might not yet match c can someone with an rxnet environment setup implement a test similar to this from java and tell me the output java test public void testmixedschedulers throws interruptedexception { final string mainthreadname threadcurrentthread getname observable o observable create new func subscription { override public subscription call observer observer { systemoutprintln origin observable is running on threadcurrentthread getname assertfalse threadcurrentthread getname equals mainthreadname asserttrue actually threadcurrentthread getname threadcurrentthread getname startswith rxiothreadpool observeronnext one observeronnext two observeronnext three observeroncompleted return subscriptionsempty } } subscribeon schedulersthreadpoolforio subscribe to the source on the io thread pool now merge on the cpu threadpool o observable merge o observable from four five subscribeon schedulersthreadpoolforcomputation map new func { override public string call string v { opportunity to see what thread the merge is running on systemoutprintln merge is running on threadcurrentthread getname return v } } final countdownlatch latch new countdownlatch final atomicreference onerror new atomicreference subscribe on a new thread osubscribe new observer { override public void oncompleted { systemoutprintln received oncompleted latchcountdown } override public void onerror exception e { systemoutprintln received onerror egetmessage onerrorset runtimeexception e latchcountdown } override public void onnext string v { systemoutprintln final subscribe is running on threadcurrentthread getname systemoutprintln onnext v } } schedulersnewthread wait for the above to finish or blow up if its blocked latchawait timeunitseconds } im trying to understand how a sequence should work when multiple subscribeon operators are applied at different steps of a sequenceof course rxnet doesnt have the io and cpu thread pools those are just helper methods to executors which would be separate threadpools for different work types so youll need to adjust that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good is there any reason to use schedulerschedule on an internal operator implementation instead of just leveraging subscribeon other than when we need the delay arguments of course for example on a method overload of merge is this okay java return merge source subscribeon scheduler or is there some reason to inside the operationmerge do this java return schedulerschedule new func { override public subscription call { return new mergeobservable o call observer } } they seem to accomplish the same thing but would like to know if theres a reason to prefer one over the otheri prefer just reusing subscribeon i cant tell from reading c code what it does as i cant find the extensions that implement the override methods im pulling the trigger and merging this into master so people can start playing with it and providing feedbackthe public api changes are fairly limited still so most changes which i fully expect will be implementation details rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
225,1,0,0,1,1,1,1,1,schedulers merge of pull manual merge of https githubcom netflix rxjava pull by mairbek plus the following changes made some classes non public so they dont become part of the published api if we find they have value in the public api we can make them so but once published its hard to remove them so id rather keep them implementation details until then consolidated executorscheduler and scheduledexecutorscheduler made executorscheduler use a system wide scheduledexecutorscheduler for handling delayed events when only an executor is available made the iothreadpool use a non bounded cached thread pool next step from here is to review all operator implementations and add the scheduler overloads rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request the unit test is poorly written non deterministic ill fix in the morning awesome work with this it should be easy to implement operators like sample etc yes it should open the gates to many operators we havent been able to pursue committed a few tweaks and fixesopen questions for me are were not using the schedulernow value anywhere should we be or is that only for the virtual scheduler used for testing not quite sure how the overloads should work on merge etc ive implemented them but the behavior might not yet match c can someone with an rxnet environment setup implement a test similar to this from java and tell me the output java test public void testmixedschedulers throws interruptedexception { final string mainthreadname threadcurrentthread getname observable o observable create new func subscription { override public subscription call observer observer { systemoutprintln origin observable is running on threadcurrentthread getname assertfalse threadcurrentthread getname equals mainthreadname asserttrue actually threadcurrentthread getname threadcurrentthread getname startswith rxiothreadpool observeronnext one observeronnext two observeronnext three observeroncompleted return subscriptionsempty } } subscribeon schedulersthreadpoolforio subscribe to the source on the io thread pool now merge on the cpu threadpool o observable merge o observable from four five subscribeon schedulersthreadpoolforcomputation map new func { override public string call string v { opportunity to see what thread the merge is running on systemoutprintln merge is running on threadcurrentthread getname return v } } final countdownlatch latch new countdownlatch final atomicreference onerror new atomicreference subscribe on a new thread osubscribe new observer { override public void oncompleted { systemoutprintln received oncompleted latchcountdown } override public void onerror exception e { systemoutprintln received onerror egetmessage onerrorset runtimeexception e latchcountdown } override public void onnext string v { systemoutprintln final subscribe is running on threadcurrentthread getname systemoutprintln onnext v } } schedulersnewthread wait for the above to finish or blow up if its blocked latchawait timeunitseconds } im trying to understand how a sequence should work when multiple subscribeon operators are applied at different steps of a sequenceof course rxnet doesnt have the io and cpu thread pools those are just helper methods to executors which would be separate threadpools for different work types so youll need to adjust that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good is there any reason to use schedulerschedule on an internal operator implementation instead of just leveraging subscribeon other than when we need the delay arguments of course for example on a method overload of merge is this okay java return merge source subscribeon scheduler or is there some reason to inside the operationmerge do this java return schedulerschedule new func { override public subscription call { return new mergeobservable o call observer } } they seem to accomplish the same thing but would like to know if theres a reason to prefer one over the otheri prefer just reusing subscribeon i cant tell from reading c code what it does as i cant find the extensions that implement the override methods im pulling the trigger and merging this into master so people can start playing with it and providing feedbackthe public api changes are fairly limited still so most changes which i fully expect will be implementation details rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
228,1,0,0,0,0,0,1,0,interval i have attempted to implement the interval operator here as far as i can see it seems to work this is based on the quite fresh work on schedulersit doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughfor testing this conveniently i also wrote a test scheduler with adjustable timelooking forward to any review comments rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good lets consider adding new method to the scheduler javascheduleperiodically action action long initialdelay long period timeunit unit it would allow to leverage scheduledexecutorservicescheduleatfixedrate for the executorscheduler for other schedulers we could use recursive action scheduling from pull request i agree scheduleperiodically would be helpful here jmhofer do you plan to work on this feature im thinking about implementing buffer operator and this one will be very helpful for me ill have a look at it maybe we should also combine all the longs and units into a timespan class it doesnt feel right to always have them as separate parameters anyone know why net wouldnt have a scheduleperiodically concept if we were to add that it would only really work with scheduledexecutorservice and thus most scheduler implementations would have to rely upon the generic scheduledexecutorservice that ive added in https githubcom netflix rxjava pull called genericscheduledexecutorservice this suggests to me that it isnt the right solution to add another interface method as it seems very tied to a particular implementation cant this be achieved with recursive schedulers which now work after the changes you did in https githubcom netflix rxjava pull im curious about this it doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughit seems that this operator needs to be async and must default to using something like schedulersthreadpoolforcomputation documentation at msdn http msdnmicrosoftcom en us library hh vvs aspx suggests that this defaults to using a thread pool scheduler the following example code uses the interval operator to generate a sequence of long integers staring at zero each integer in the sequence is generated after the two second period has expired each integer is written to the console window along with the current time to show the period parameter in effect the generation of the integer sequence is scheduled to run on a thread from the net thread pool so the main thread is not blocked and can process the enter key being pressed to stop the intervalperhaps newthreadscheduler will work as of https githubcom netflix rxjava pull because it now uses genericscheduledexecutorservice when a delay is passed in instead of sleepingaction what happens in net if someone tries to use immediatescheduler or currentthreadscheduler anyone have access to net to try that maybe we should also combine all the longs and units into a timespan class it doesnt feel right to always have them as separate parametersif were going to consider doing this then we should do it as part of https githubcom netflix rxjava pull before i release another version since this would change the schedulers interfacejava itself always keeps the separate though so perhaps the idiomatic thing to do in java is to keep them separate i dont have a strong opinion on this one but the decision made now will last a very long time actually net does have scheduleperiodic see here https rxcodeplexcom sourcecontrol changeset view e e fb b dd d aa d b rx net source systemreactiveinterfaces reactive concurrency ischedulerperiodiccsimho its useful to avoid recursive scheduling where the schedulers support this directly as well as to do the slightly messy recursive scheduling ourselves for other types of schedulers so that the user doesnt have to ah interesting thanks for educating me on that this doesnt look like its been integrated into observable but im going to merge as it looks useful to get this in the testscheduler especially while interval continues getting work done great thanks this still needs a bit of work if when we do periodic scheduling are you okay with me releasing current code on the master branch and then the rest of interval coming lateris there anything else about master branch as it stands that should be changed before i release id like to do so today thats alright with me benjchristensen now the interval operators in rxjava and rxnet have different behaviors when the scheduler is currentthread in rxnet the following codes c var o observableinterval timespanfrommilliseconds schedulercurrentthread otake subscribe x consolewriteline x otake subscribe x consolewriteline x consolereadline output in rxjava the following codes java observable o observableinterval timeunitmilliseconds schedulerscurrentthread otake subscribe new action { override public void call long t { systemoutprintln t } } otake subscribe new action { override public void call long t { systemoutprintln t } } output and the current thread is blocked at the first subscribe is it ok or the interval operator should not be used with currentthread
228,1,0,1,0,0,0,1,0,interval i have attempted to implement the interval operator here as far as i can see it seems to work this is based on the quite fresh work on schedulersit doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughfor testing this conveniently i also wrote a test scheduler with adjustable timelooking forward to any review comments rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good lets consider adding new method to the scheduler javascheduleperiodically action action long initialdelay long period timeunit unit it would allow to leverage scheduledexecutorservicescheduleatfixedrate for the executorscheduler for other schedulers we could use recursive action scheduling from pull request i agree scheduleperiodically would be helpful here jmhofer do you plan to work on this feature im thinking about implementing buffer operator and this one will be very helpful for me ill have a look at it maybe we should also combine all the longs and units into a timespan class it doesnt feel right to always have them as separate parameters anyone know why net wouldnt have a scheduleperiodically concept if we were to add that it would only really work with scheduledexecutorservice and thus most scheduler implementations would have to rely upon the generic scheduledexecutorservice that ive added in https githubcom netflix rxjava pull called genericscheduledexecutorservice this suggests to me that it isnt the right solution to add another interface method as it seems very tied to a particular implementation cant this be achieved with recursive schedulers which now work after the changes you did in https githubcom netflix rxjava pull im curious about this it doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughit seems that this operator needs to be async and must default to using something like schedulersthreadpoolforcomputation documentation at msdn http msdnmicrosoftcom en us library hh vvs aspx suggests that this defaults to using a thread pool scheduler the following example code uses the interval operator to generate a sequence of long integers staring at zero each integer in the sequence is generated after the two second period has expired each integer is written to the console window along with the current time to show the period parameter in effect the generation of the integer sequence is scheduled to run on a thread from the net thread pool so the main thread is not blocked and can process the enter key being pressed to stop the intervalperhaps newthreadscheduler will work as of https githubcom netflix rxjava pull because it now uses genericscheduledexecutorservice when a delay is passed in instead of sleepingaction what happens in net if someone tries to use immediatescheduler or currentthreadscheduler anyone have access to net to try that maybe we should also combine all the longs and units into a timespan class it doesnt feel right to always have them as separate parametersif were going to consider doing this then we should do it as part of https githubcom netflix rxjava pull before i release another version since this would change the schedulers interfacejava itself always keeps the separate though so perhaps the idiomatic thing to do in java is to keep them separate i dont have a strong opinion on this one but the decision made now will last a very long time actually net does have scheduleperiodic see here https rxcodeplexcom sourcecontrol changeset view e e fb b dd d aa d b rx net source systemreactiveinterfaces reactive concurrency ischedulerperiodiccsimho its useful to avoid recursive scheduling where the schedulers support this directly as well as to do the slightly messy recursive scheduling ourselves for other types of schedulers so that the user doesnt have to ah interesting thanks for educating me on that this doesnt look like its been integrated into observable but im going to merge as it looks useful to get this in the testscheduler especially while interval continues getting work done great thanks this still needs a bit of work if when we do periodic scheduling are you okay with me releasing current code on the master branch and then the rest of interval coming lateris there anything else about master branch as it stands that should be changed before i release id like to do so today thats alright with me benjchristensen now the interval operators in rxjava and rxnet have different behaviors when the scheduler is currentthread in rxnet the following codes c var o observableinterval timespanfrommilliseconds schedulercurrentthread otake subscribe x consolewriteline x otake subscribe x consolewriteline x consolereadline output in rxjava the following codes java observable o observableinterval timeunitmilliseconds schedulerscurrentthread otake subscribe new action { override public void call long t { systemoutprintln t } } otake subscribe new action { override public void call long t { systemoutprintln t } } output and the current thread is blocked at the first subscribe is it ok or the interval operator should not be used with currentthread
228,1,0,0,0,1,1,1,1,interval i have attempted to implement the interval operator here as far as i can see it seems to work this is based on the quite fresh work on schedulersit doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughfor testing this conveniently i also wrote a test scheduler with adjustable timelooking forward to any review comments rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good lets consider adding new method to the scheduler javascheduleperiodically action action long initialdelay long period timeunit unit it would allow to leverage scheduledexecutorservicescheduleatfixedrate for the executorscheduler for other schedulers we could use recursive action scheduling from pull request i agree scheduleperiodically would be helpful here jmhofer do you plan to work on this feature im thinking about implementing buffer operator and this one will be very helpful for me ill have a look at it maybe we should also combine all the longs and units into a timespan class it doesnt feel right to always have them as separate parameters anyone know why net wouldnt have a scheduleperiodically concept if we were to add that it would only really work with scheduledexecutorservice and thus most scheduler implementations would have to rely upon the generic scheduledexecutorservice that ive added in https githubcom netflix rxjava pull called genericscheduledexecutorservice this suggests to me that it isnt the right solution to add another interface method as it seems very tied to a particular implementation cant this be achieved with recursive schedulers which now work after the changes you did in https githubcom netflix rxjava pull im curious about this it doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughit seems that this operator needs to be async and must default to using something like schedulersthreadpoolforcomputation documentation at msdn http msdnmicrosoftcom en us library hh vvs aspx suggests that this defaults to using a thread pool scheduler the following example code uses the interval operator to generate a sequence of long integers staring at zero each integer in the sequence is generated after the two second period has expired each integer is written to the console window along with the current time to show the period parameter in effect the generation of the integer sequence is scheduled to run on a thread from the net thread pool so the main thread is not blocked and can process the enter key being pressed to stop the intervalperhaps newthreadscheduler will work as of https githubcom netflix rxjava pull because it now uses genericscheduledexecutorservice when a delay is passed in instead of sleepingaction what happens in net if someone tries to use immediatescheduler or currentthreadscheduler anyone have access to net to try that maybe we should also combine all the longs and units into a timespan class it doesnt feel right to always have them as separate parametersif were going to consider doing this then we should do it as part of https githubcom netflix rxjava pull before i release another version since this would change the schedulers interfacejava itself always keeps the separate though so perhaps the idiomatic thing to do in java is to keep them separate i dont have a strong opinion on this one but the decision made now will last a very long time actually net does have scheduleperiodic see here https rxcodeplexcom sourcecontrol changeset view e e fb b dd d aa d b rx net source systemreactiveinterfaces reactive concurrency ischedulerperiodiccsimho its useful to avoid recursive scheduling where the schedulers support this directly as well as to do the slightly messy recursive scheduling ourselves for other types of schedulers so that the user doesnt have to ah interesting thanks for educating me on that this doesnt look like its been integrated into observable but im going to merge as it looks useful to get this in the testscheduler especially while interval continues getting work done great thanks this still needs a bit of work if when we do periodic scheduling are you okay with me releasing current code on the master branch and then the rest of interval coming lateris there anything else about master branch as it stands that should be changed before i release id like to do so today thats alright with me benjchristensen now the interval operators in rxjava and rxnet have different behaviors when the scheduler is currentthread in rxnet the following codes c var o observableinterval timespanfrommilliseconds schedulercurrentthread otake subscribe x consolewriteline x otake subscribe x consolewriteline x consolereadline output in rxjava the following codes java observable o observableinterval timeunitmilliseconds schedulerscurrentthread otake subscribe new action { override public void call long t { systemoutprintln t } } otake subscribe new action { override public void call long t { systemoutprintln t } } output and the current thread is blocked at the first subscribe is it ok or the interval operator should not be used with currentthread
229,1,0,0,0,0,0,1,0,trying to extend the scheduler interface according to the comments at ive tried to extend the scheduler interface according to the discussion at issue if i understand this correctly most of it can be done via the abstractscheduler i hope this helps please have a look rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good awesome looks like it doesnt break a scheduler interface i thought about two examples java final scheduler scheduler schedulerscurrentthread observable obs observablecreate new func subscription { override public subscription call final observer observer { return schedulerschedule new func { override public subscription call scheduler scheduler integer i { if i { observeroncompleted return subscriptionsempty } observeronnext i return schedulerschedule i this } } } } obssubscribe new observer { override public void oncompleted { systemoutprintln completed } override public void onerror exception e { systemoutprintln error } override public void onnext integer args { systemoutprintln args } } and java final scheduler scheduler schedulersthreadpoolforcomputation observable obs observablecreate new func subscription { override public subscription call final observer observer { return schedulerschedule new booleansubscription new func { override public subscription call scheduler scheduler booleansubscription cancel { if cancelisunsubscribed { observeroncompleted return subscriptionsempty } observeronnext try { threadsleep } catch interruptedexception e { eprintstacktrace } schedulerschedule cancel this return cancel } } } } subscription subscribe obssubscribe new observer { override public void oncompleted { systemoutprintln completed } override public void onerror exception e { systemoutprintln error } override public void onnext integer args { systemoutprintln args } } threadsleep subscribeunsubscribe systemoutprintln unsubscribe threadsleep and they worked well for me im wondering if the scheduler interface really needs all of these overloadsrx has primary methods the rest are extension methods that look like they do transformations http msdnmicrosoftcom en us library hh vvs aspxthus the key ones are java subscription schedule t state func action subscription schedule t state func action long duetime timeunit unit we dont have one with an explicit time to run only relative at this time it appears the overloads all make sense but again net is able to use extension methods to make the design much more elegant where only the main are part of the interface and the rest come along for the rideit means we end up with a scheduler abstractscheduler interface abstract pairing to make this workshould we just make scheduler an abstract im very tempted to do so because of the following problems adding methods to scheduler will be breaking changes requiring major version increments people implementing schedulers will basically always have to also extend abstractscheduler or copy paste all of those method overloadsor should be remove all but the main methods from scheduler and put all the overloads as utility functions on the schedulers class insteadthe precedent for using abstract or concrete classes instead of interfaces which net then augments with extension methods is already done observable is a concrete class instead of interface for this very reasonall plugins are done as abstracts instead of interfaces for this reason as wellthoughts while reviewing and playing with this i considered some changes id like to propose i have submitted another pull request https githubcom netflix rxjava pull that builds on top of your work jmhofer and includes the unit tests from mairbek i would appreciate your thoughts on it and whether they are beneficial changes or just pedantic merged manually via https githubcom netflix rxjava pull
229,1,0,0,0,1,1,1,1,trying to extend the scheduler interface according to the comments at ive tried to extend the scheduler interface according to the discussion at issue if i understand this correctly most of it can be done via the abstractscheduler i hope this helps please have a look rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good awesome looks like it doesnt break a scheduler interface i thought about two examples java final scheduler scheduler schedulerscurrentthread observable obs observablecreate new func subscription { override public subscription call final observer observer { return schedulerschedule new func { override public subscription call scheduler scheduler integer i { if i { observeroncompleted return subscriptionsempty } observeronnext i return schedulerschedule i this } } } } obssubscribe new observer { override public void oncompleted { systemoutprintln completed } override public void onerror exception e { systemoutprintln error } override public void onnext integer args { systemoutprintln args } } and java final scheduler scheduler schedulersthreadpoolforcomputation observable obs observablecreate new func subscription { override public subscription call final observer observer { return schedulerschedule new booleansubscription new func { override public subscription call scheduler scheduler booleansubscription cancel { if cancelisunsubscribed { observeroncompleted return subscriptionsempty } observeronnext try { threadsleep } catch interruptedexception e { eprintstacktrace } schedulerschedule cancel this return cancel } } } } subscription subscribe obssubscribe new observer { override public void oncompleted { systemoutprintln completed } override public void onerror exception e { systemoutprintln error } override public void onnext integer args { systemoutprintln args } } threadsleep subscribeunsubscribe systemoutprintln unsubscribe threadsleep and they worked well for me im wondering if the scheduler interface really needs all of these overloadsrx has primary methods the rest are extension methods that look like they do transformations http msdnmicrosoftcom en us library hh vvs aspxthus the key ones are java subscription schedule t state func action subscription schedule t state func action long duetime timeunit unit we dont have one with an explicit time to run only relative at this time it appears the overloads all make sense but again net is able to use extension methods to make the design much more elegant where only the main are part of the interface and the rest come along for the rideit means we end up with a scheduler abstractscheduler interface abstract pairing to make this workshould we just make scheduler an abstract im very tempted to do so because of the following problems adding methods to scheduler will be breaking changes requiring major version increments people implementing schedulers will basically always have to also extend abstractscheduler or copy paste all of those method overloadsor should be remove all but the main methods from scheduler and put all the overloads as utility functions on the schedulers class insteadthe precedent for using abstract or concrete classes instead of interfaces which net then augments with extension methods is already done observable is a concrete class instead of interface for this very reasonall plugins are done as abstracts instead of interfaces for this reason as wellthoughts while reviewing and playing with this i considered some changes id like to propose i have submitted another pull request https githubcom netflix rxjava pull that builds on top of your work jmhofer and includes the unit tests from mairbek i would appreciate your thoughts on it and whether they are beneficial changes or just pedantic merged manually via https githubcom netflix rxjava pull
229,1,1,0,1,1,1,1,1,trying to extend the scheduler interface according to the comments at ive tried to extend the scheduler interface according to the discussion at issue if i understand this correctly most of it can be done via the abstractscheduler i hope this helps please have a look rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good awesome looks like it doesnt break a scheduler interface i thought about two examples java final scheduler scheduler schedulerscurrentthread observable obs observablecreate new func subscription { override public subscription call final observer observer { return schedulerschedule new func { override public subscription call scheduler scheduler integer i { if i { observeroncompleted return subscriptionsempty } observeronnext i return schedulerschedule i this } } } } obssubscribe new observer { override public void oncompleted { systemoutprintln completed } override public void onerror exception e { systemoutprintln error } override public void onnext integer args { systemoutprintln args } } and java final scheduler scheduler schedulersthreadpoolforcomputation observable obs observablecreate new func subscription { override public subscription call final observer observer { return schedulerschedule new booleansubscription new func { override public subscription call scheduler scheduler booleansubscription cancel { if cancelisunsubscribed { observeroncompleted return subscriptionsempty } observeronnext try { threadsleep } catch interruptedexception e { eprintstacktrace } schedulerschedule cancel this return cancel } } } } subscription subscribe obssubscribe new observer { override public void oncompleted { systemoutprintln completed } override public void onerror exception e { systemoutprintln error } override public void onnext integer args { systemoutprintln args } } threadsleep subscribeunsubscribe systemoutprintln unsubscribe threadsleep and they worked well for me im wondering if the scheduler interface really needs all of these overloadsrx has primary methods the rest are extension methods that look like they do transformations http msdnmicrosoftcom en us library hh vvs aspxthus the key ones are java subscription schedule t state func action subscription schedule t state func action long duetime timeunit unit we dont have one with an explicit time to run only relative at this time it appears the overloads all make sense but again net is able to use extension methods to make the design much more elegant where only the main are part of the interface and the rest come along for the rideit means we end up with a scheduler abstractscheduler interface abstract pairing to make this workshould we just make scheduler an abstract im very tempted to do so because of the following problems adding methods to scheduler will be breaking changes requiring major version increments people implementing schedulers will basically always have to also extend abstractscheduler or copy paste all of those method overloadsor should be remove all but the main methods from scheduler and put all the overloads as utility functions on the schedulers class insteadthe precedent for using abstract or concrete classes instead of interfaces which net then augments with extension methods is already done observable is a concrete class instead of interface for this very reasonall plugins are done as abstracts instead of interfaces for this reason as wellthoughts while reviewing and playing with this i considered some changes id like to propose i have submitted another pull request https githubcom netflix rxjava pull that builds on top of your work jmhofer and includes the unit tests from mairbek i would appreciate your thoughts on it and whether they are beneficial changes or just pedantic merged manually via https githubcom netflix rxjava pull
248,1,0,0,0,0,0,1,0,implemented sample operation now that operationinterval is in operationsample see was kind of straightforward i also added a unit test against sampling and allowed for specifying a scheduler used by the sample operation rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good we want methods on observable dont we sure i just completely forgot about that ill add them rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
248,1,0,0,1,1,1,1,1,implemented sample operation now that operationinterval is in operationsample see was kind of straightforward i also added a unit test against sampling and allowed for specifying a scheduler used by the sample operation rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good we want methods on observable dont we sure i just completely forgot about that ill add them rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
248,1,0,0,0,1,1,1,1,implemented sample operation now that operationinterval is in operationsample see was kind of straightforward i also added a unit test against sampling and allowed for specifying a scheduler used by the sample operation rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good we want methods on observable dont we sure i just completely forgot about that ill add them rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
249,1,0,0,0,0,0,1,0,timestamp operation straightforward implementation of issue based on operationmap without the scheduler version as map doesnt take a scheduler yet either rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request the failing test has nothing to do with my changes i guess its a sporadic test problem as theres not much difference between and milliseconds this should also be added to observable shouldnt it rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request my eclipse configuration also automatically added a lot of override annotations i hope you dont mind otherwise i can remove them again of course the override annotations are fine they are standard java they may be missing in some places because this project started with java compliance and it had the annotations in less places than java
249,1,0,1,1,0,1,1,1,timestamp operation straightforward implementation of issue based on operationmap without the scheduler version as map doesnt take a scheduler yet either rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request the failing test has nothing to do with my changes i guess its a sporadic test problem as theres not much difference between and milliseconds this should also be added to observable shouldnt it rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request my eclipse configuration also automatically added a lot of override annotations i hope you dont mind otherwise i can remove them again of course the override annotations are fine they are standard java they may be missing in some places because this project started with java compliance and it had the annotations in less places than java
249,1,0,1,0,0,0,1,0,timestamp operation straightforward implementation of issue based on operationmap without the scheduler version as map doesnt take a scheduler yet either rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request the failing test has nothing to do with my changes i guess its a sporadic test problem as theres not much difference between and milliseconds this should also be added to observable shouldnt it rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request my eclipse configuration also automatically added a lot of override annotations i hope you dont mind otherwise i can remove them again of course the override annotations are fine they are standard java they may be missing in some places because this project started with java compliance and it had the annotations in less places than java
250,1,0,0,0,0,0,1,0,initial implementation of asyncsubject ive done some work on asyncsubject including unit tests and im looking for feedback i dont expect to get this pull request immediately accepted but i hope to find out if this is the correct workflow for this repository and if the code is up to your standards before i start pouring in more hours into issue if you guys are ok with the asyncsubject implementation ill start working on the otherslooking forward to some feedback rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good hi michaeldejong thanks for getting involvedbased on my reading of the msdn docs for asyncsubject and your code this looks goodthank for you following the coding style of the project and making sure the copyright unit tests etc are all in placemerging now
250,1,0,0,1,1,1,1,1,initial implementation of asyncsubject ive done some work on asyncsubject including unit tests and im looking for feedback i dont expect to get this pull request immediately accepted but i hope to find out if this is the correct workflow for this repository and if the code is up to your standards before i start pouring in more hours into issue if you guys are ok with the asyncsubject implementation ill start working on the otherslooking forward to some feedback rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good hi michaeldejong thanks for getting involvedbased on my reading of the msdn docs for asyncsubject and your code this looks goodthank for you following the coding style of the project and making sure the copyright unit tests etc are all in placemerging now
250,1,1,0,1,1,1,1,1,initial implementation of asyncsubject ive done some work on asyncsubject including unit tests and im looking for feedback i dont expect to get this pull request immediately accepted but i hope to find out if this is the correct workflow for this repository and if the code is up to your standards before i start pouring in more hours into issue if you guys are ok with the asyncsubject implementation ill start working on the otherslooking forward to some feedback rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good hi michaeldejong thanks for getting involvedbased on my reading of the msdn docs for asyncsubject and your code this looks goodthank for you following the coding style of the project and making sure the copyright unit tests etc are all in placemerging now
257,1,0,0,0,0,0,1,0,improved scan reduce aggregate scan is currently restricted to accumulators of type func where func would be possible for initial values of type r this pull request tries to fix this by generalizing the scan implementation i had to restructure the scan operator a bit for this to stay typesafe imho its more readable now thoughthis indirectly leads to generalized reduce tooalso aggregate is added as an alias for reduce see rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you for working on this observable had not had any changes done to it to expose the new reduce or scan methods so that should probably be added to this pull request what names should we use on the public apirxnet never used reduce it uses aggregate others call it fold accumulate etc more here http enwikipediaorg wiki fold_ higher order_function java is using the reduce and collector names http downloadjavanet lambda b docs api java util stream streamhtml what names should we use and what aliases if any should we include in observable about observable hmm seems that the changes got lost somehow ill go dig them out agai d about the names to use imho rxjava should have the java names as well as the orginial rxnet names agreed with your opinion on naming can you add those when you update the observable and make sure the javadocs of the methods are clear in linking to each other when they are aliases of each other ive had a look at the java stream operations to me it looks like theres no explicit scan equivalent in java or am i missing something collect seems to be specifically made for mutable operations i dont see where we would use thatso i would just alias reduce with aggregate and scan stays unaliased if thats okay that works for me we can always add more aliases if java adds a scan equivalent i plan on doing a release tomorrow about hours from now if you want to try and have this ready for that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good as soon as this is in my swing branch becomes finally ready for a merge it offers a few simple observables created from button click keyboard and mouse events looking forward to this
257,1,0,1,1,1,1,1,1,improved scan reduce aggregate scan is currently restricted to accumulators of type func where func would be possible for initial values of type r this pull request tries to fix this by generalizing the scan implementation i had to restructure the scan operator a bit for this to stay typesafe imho its more readable now thoughthis indirectly leads to generalized reduce tooalso aggregate is added as an alias for reduce see rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you for working on this observable had not had any changes done to it to expose the new reduce or scan methods so that should probably be added to this pull request what names should we use on the public apirxnet never used reduce it uses aggregate others call it fold accumulate etc more here http enwikipediaorg wiki fold_ higher order_function java is using the reduce and collector names http downloadjavanet lambda b docs api java util stream streamhtml what names should we use and what aliases if any should we include in observable about observable hmm seems that the changes got lost somehow ill go dig them out agai d about the names to use imho rxjava should have the java names as well as the orginial rxnet names agreed with your opinion on naming can you add those when you update the observable and make sure the javadocs of the methods are clear in linking to each other when they are aliases of each other ive had a look at the java stream operations to me it looks like theres no explicit scan equivalent in java or am i missing something collect seems to be specifically made for mutable operations i dont see where we would use thatso i would just alias reduce with aggregate and scan stays unaliased if thats okay that works for me we can always add more aliases if java adds a scan equivalent i plan on doing a release tomorrow about hours from now if you want to try and have this ready for that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good as soon as this is in my swing branch becomes finally ready for a merge it offers a few simple observables created from button click keyboard and mouse events looking forward to this
257,1,0,0,0,1,1,1,1,improved scan reduce aggregate scan is currently restricted to accumulators of type func where func would be possible for initial values of type r this pull request tries to fix this by generalizing the scan implementation i had to restructure the scan operator a bit for this to stay typesafe imho its more readable now thoughthis indirectly leads to generalized reduce tooalso aggregate is added as an alias for reduce see rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you for working on this observable had not had any changes done to it to expose the new reduce or scan methods so that should probably be added to this pull request what names should we use on the public apirxnet never used reduce it uses aggregate others call it fold accumulate etc more here http enwikipediaorg wiki fold_ higher order_function java is using the reduce and collector names http downloadjavanet lambda b docs api java util stream streamhtml what names should we use and what aliases if any should we include in observable about observable hmm seems that the changes got lost somehow ill go dig them out agai d about the names to use imho rxjava should have the java names as well as the orginial rxnet names agreed with your opinion on naming can you add those when you update the observable and make sure the javadocs of the methods are clear in linking to each other when they are aliases of each other ive had a look at the java stream operations to me it looks like theres no explicit scan equivalent in java or am i missing something collect seems to be specifically made for mutable operations i dont see where we would use thatso i would just alias reduce with aggregate and scan stays unaliased if thats okay that works for me we can always add more aliases if java adds a scan equivalent i plan on doing a release tomorrow about hours from now if you want to try and have this ready for that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good as soon as this is in my swing branch becomes finally ready for a merge it offers a few simple observables created from button click keyboard and mouse events looking forward to this
331,1,0,0,1,0,0,1,0,adding super extends so that observable is covariant ok so this pull request changes a _lot_ of lines its mostly generalizing all the funcx s to be used like funcx t t tx r contravariant parameters covariant return type and all the observer s to be used in a contravariant way a few of the observable uses are covariant now too mostly zip this is the pull request for this doesnt look very good in the code thanks java also it doesnt seem to make scala interop easier at all at least not yet please take a look im not exactly happy with the result maybe im doing something wrong here ive still got hope that theres an easier waythe pull request compiles and tests ok for me except for the clojure module but thats another story and not due to my changes rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request ill have to spend some time later playing with this anyone else able to try this out and comment on the changes jmhofer can you provide examples or use cases of using the updated code that demonstrates covariant contravariant usage that couldnt be achieved before ok heres an example of what you can do now with the improved zip javaimport rxobservableimport rxutilfunctionsfunc class media {}class movie extends media {}class horrormovie extends movie {}class rating {}class coolrating extends rating {}class result {}class extendedresult extends result {}public class covariance { public static void main string args { observable horrors observablefrom new horrormovie observable ratings observablefrom new coolrating func combine new func { override public extendedresult call media m rating r { return null } } observablezip horrors ratings combine the method zip observable observable func in the type observable is not applicable for the arguments observable observable func but works in super extends branch }} lots more observable usages to go however the observer s are probably mostly done rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request let me know when youre ready for this to be merged and released i plan on releasing this as as it does have some breaking changes that cloudbees build failure is legit i also cant build rxjava scala on my machine with this branch the core library is fine what went wrong execution failed for task language adaptors rxjava scala compilescala compilation failed because of an internal compiler error see the error output for details in this line javaobservable observable observablecreate new func subscription is it the case that java programmers creating an observable this way would always have to include the super bit or is this just for completeness is this what you mean by im not exactly happy with the result i havent thought through it but this doesnt seem like it should be necessary if its done right benjchristensen i just noticed that too and adapted the rximplicits daveray looks like it yes i couldnt make the compiler happy without it but maybe im missing something if you find something that avoids this then please let me know rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good still to do future is covariant and timestamped and notification are probably tooalso lots of operators can be used standalone and therefore should be generalized too rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request huh very interesting compiles for me rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i would call this ready to merge now i looked through all the code and adapted everything i found i cant guarantee that i havent overlooked something but i guess a few places here and there can still be adapted later on without too much harmthe one caveat is daverays comment maybe the observers are overgeneralized somewhere and we can really avoid people having to write super x when creating their own observers i havent found a solution for this but im probably blind to it by nowof course one could still add a lot of tests or use cases in covariancetest to show that everything compiles as it should in that respect im rather optimistic thoughmaybe we can also get rid of more rawtype unchecked annotations now ill check this later onnow i need some time to recover from all that toiling through java boilerplatery i need to spend some more time on this in my playing around i wasnt thrilled by how it forces this type of user code that has super in it java public static observable o observablecreate new func subscription { override public subscription call observer t { return null } } i have the same concern guava seems to takes the same approach but i dont recall ever having to use type constraints like that when using it briefly looking through the guava code nothing stood out to me though that would make it behave differently though re reading effective java josh bloch says this on page properly used wildcard types are nearly invisible to users of a class they cause methods to accept the parameters they should accept and reject those they should reject if the user of a class has to think about wildcard types there is probably something wrong with the class’s apihowever all of his examples are about methods they arent about instantiating classes like func where ends up as extends subscription perhaps if this is what covariant generics truly requires we create a new function type specifically for this extremely common case of creating an observable and have it be something like this javapublic interface observablefunction extends func subscription { public subscription call observer t } it can then be used like this java public static observable o observablecreate new observablefunction { override public subscription call observer t { return null } } public static class myobserver implements observer { override public void oncompleted { todo auto generated method stub } override public void onerror throwable e { todo auto generated method stub } override public void onnext media args { todo auto generated method stub } } public static void testthis { o subscribe new myobserver } this still requires public subscription call observer t but that is auto generated by an ide and lets face it anyone writing java is using an ide whereas the function definition is far easier new observablefunction probably need a better name than observablefunction but thus far it feels better to use unfortunately it cant be an overload of the existing create method as type erasure and dynamic languages see it as the same thing javapublic static observable create func extends subscription func using the observablefunction works against that but then people would have to discover that new type in some other way to be truly user friendly the method signature would need to change to javapublic static observable create observablefunction func this way people would get prompted by their ides and javadoc to use the easiest approachthis whole thing with or without a new type is a wide impact breaking change all places someone does observablecreate i tried again to do without observer in several relevant places but i failed yet again it seems to be just necessary it stands to reason though if you think about it because observer is a contravariant type and java cant deal with that in any other way and in the case of observers api users are not just using them theyre creating themi like bens observablefunction idea above i think it would probably even be possible to get around the overloading problem by not inheriting from func delegating to it instead however its still a wide impact breaking change due to the super that has to be added within every call method signature concerning observersstill if the create method is the biggest problem maybe its not so big after all or is create really so widely used id think that mostly api users will be using already created observables combining them and subscribing to them here is a trivial example using java demonstrating how super needs to exist even here if retaining type safety java observable omovie observablecreate observer o { oonnext new movie oonnext new movie return subscriptionsempty } map movie { return movie transformed movie } observable omedia observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } map movie { return media transformed movie } observablezip omovie omedia a b { return a b } subscribe movie { systemoutprintln media movie movie } or type safety can be thrown away java observable omovie observablecreate observer o { oonnext new movie oonnext new movie return subscriptionsempty } map movie { return movie transformed movie } but now that allows this to compile java observable omovie observablecreate observer o { oonnext new movie oonnext hello this is not a movie object return subscriptionsempty } map movie { return movie transformed movie } jmhofer the create method is how observable s are created so this affects all producers this should not affect consumers other than making the prompts docs verbose screen shot at pm https fcloudgithubcom assets a a a f e bdddd de png mttkay and mustafasezgin do you have any input on this discussion since you are using rxjava from plain java groovy is similar but the generics dont actually do much for it as they are more or less ignored at compile time as best i can tell groovy observable omovie observablecreate { observer o oonnext new movie oonnext new movie return subscriptionsempty } map { movie return movie transformed movie } observable omedia observablecreate { observer o oonnext new media oonnext new horrormovie return subscriptionsempty } map { movie return media transformed movie } observablezip omovie omedia { a b return a b } subscribe { movie systemoutprintln media movie movie } this groovy code works against current master as well as the new code with super groovy observable omovie observablecreate { observer o oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } observable omedia observablecreate { observer o oonnext new media oonnext new horrormovie ooncompleted return subscriptionsempty } observablezip omovie omedia { movie a media b return stringvalueof a stringvalueof b } subscribe { media systemoutprintln media movie media } and here it is again in plain java java observable omovie observablecreate new func subscription { override public subscription call observer o { oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } } observable omedia observablecreate new func subscription { override public subscription call observer o { oonnext new media oonnext new horrormovie ooncompleted return subscriptionsempty } } observablezip omovie omedia new func { override public string call movie a media b { return stringvalueof a stringvalueof b } } subscribe new action { override public void call string media { systemoutprintln media movie media } } it seems that super is fine on the outer generics and doesnt need to be typed everywhere its just when its a generic inside a generic the type of the observer that it becomes annoying it seems the only option while supporting covariance for reducing code verbosity is to create a new type that hides the func extends subscription complexityso my question now is should we change the api to make all uses of create use the new type or should it remain as func and the other type is just a nice utility that can be used to fulfill the signaturein other words do we leave it as this javapublic static observable create func extends subscription func or change it to javapublic static observable create observablefunction func and what do we call the new type if we go that route options ive considered are observablefunction observablefunc onsubscribefunction onsubscribefunc funconsubscribe and should that live in rxutilfunctions or rx alongside rxobservable it feels that this is not generic and should therefore live inside rx unfortunately we can not overload this method and support both as type erasure makes them the same and it will confuse dynamic languages implicits etc if we had two methods with similar single function signaturesnormally id rather leave the lower level func method signature and just have a helper class but code completion and javadocs will be far less obvious and not very discoverable thus for discoverability i think it makes more sense to use create observablefunction func i cant yet think of any forward compatibility reason why this would be a bad thing this pull request is breaking either direction we pursue one last spam to everyone please weigh in if you have an opinion as i intend on making a decision and releasing this weekthis will be a breaking change and affect usage for everyone here is what the observablefunction interface looks like java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public interface observablefunction extends func subscription { public subscription call observer t } and the updated create method javapublic static observable create observablefunction func and sample code using this java observable omovie observablecreate new observablefunction { override public subscription call observer o { oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } } here is a fork including these changes so we can review and discuss https githubcom benjchristensen rxjava commit de f cea aaf fbb ee eec im still not thrilled by any of the directions we can take here i cant argue against making rxjava support covariant types josh bloch certainly supports it in effective java when he says if you write a library that will be widely used the proper use of wildcard types should be considered mandatoryon the flip side it forces the use of super extends everywhere even when covariant requirements are rarei think the only decision at this point to make is whether we should use something like observablefunction to minimize the verbosity or just leave func extends subscription and if we do use observablefunction do we provide similar solutions elsewhere that feels wrong to have special function interfaces for so many things even though it likely will improve readability and usabilityother operators that are awkward include defer func observablefactory aggregate func accumulator buffer func bufferclosingselector flatmap func func flatmap is very common and ends up like this java omediaflatmap new func { override public observable call media s { } } compare this with current java omediaflatmap new func { override public observable call media s { } } however lambdas do make a big different on instance methods not as much on statics as they can infer the types for example in java the above can become this java omediaflatmap value { return null } so without observablefunction in java we have java observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } flatmap movie { return observablefrom media transformed moviegetname } with observablefunction in java we get this java observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } flatmap movie { return observablefrom media transformed moviegetname } it seems that type inference will handle the instance methods for example aggregate reduce becomes this java observablecreate observer o { oonnext oonnext return subscriptionsempty } aggregate previous current { return previous current } so its only the static methods of concern create being the most significantjava and android are going to be ugly no matter what but we already knew that and they already are this makes it worse experiencing some of the pain with generic method signatures and nestingfirst hand i prefer the type alias in form of an interface i would arguethat the subscription function is so widely used that the interfacecloaking it will be understood quickly enough by developers so the loss indirect clarity should be negligible rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request observablefunction interface but call it something else maybe with subscription subscribe in the name benjchristensen we could overload create etc for this wed have to make observablefunction delegate to func then instead of inheriting from it im not sure if thats a good idea though it would probably be even more confusingim not sure about the naming although it is kind of _the_ internal observable function i think id prefer subscriptionfunction or subscriberfunction or something like that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good how about these names onsubscribefunction onsubscribefunc funconsubscribe based on my highly scientific poll of people around me at my office and the few who have commented above im going with onsubscribefunc benjchristensen works for me will it extend func or be an independent type as jmhofer suggests above i think id prefer the latter i havent played with it not extending func it will need to at least extend function so it fits with all other functions in the codebase in what way will it improve things if it doesnt extend since this function is only intended for us by the observablecreate does anyone have issues with it being namespaced as rxobservableonsubscribefunc as a static inner class of observable rather than a first class citizen rxonsubscribefunc this works great in java are there any issues from clojure or scala doing it this waycreate looks like this javapublic static observable create onsubscribefunc func use of it looks like this java import rxobservable import rxobservableonsubscribefunc observable observable observablecreate new onsubscribefunc { override public subscription call observer observer { observeronnext one observeronnext two observeronnext three observeroncompleted return subscriptionsempty } } the function definition looks like java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public static interface onsubscribefunc extends function { public subscription call observer t } good idea and shouldnt be a problem for scala great ill proceed with this change then thanks for the feedback final interface looks like this java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public static interface onsubscribefunc extends function { public subscription onsubscribe observer t } this is being merged in https githubcom netflix rxjava pull
331,1,0,1,1,1,1,1,1,adding super extends so that observable is covariant ok so this pull request changes a _lot_ of lines its mostly generalizing all the funcx s to be used like funcx t t tx r contravariant parameters covariant return type and all the observer s to be used in a contravariant way a few of the observable uses are covariant now too mostly zip this is the pull request for this doesnt look very good in the code thanks java also it doesnt seem to make scala interop easier at all at least not yet please take a look im not exactly happy with the result maybe im doing something wrong here ive still got hope that theres an easier waythe pull request compiles and tests ok for me except for the clojure module but thats another story and not due to my changes rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request ill have to spend some time later playing with this anyone else able to try this out and comment on the changes jmhofer can you provide examples or use cases of using the updated code that demonstrates covariant contravariant usage that couldnt be achieved before ok heres an example of what you can do now with the improved zip javaimport rxobservableimport rxutilfunctionsfunc class media {}class movie extends media {}class horrormovie extends movie {}class rating {}class coolrating extends rating {}class result {}class extendedresult extends result {}public class covariance { public static void main string args { observable horrors observablefrom new horrormovie observable ratings observablefrom new coolrating func combine new func { override public extendedresult call media m rating r { return null } } observablezip horrors ratings combine the method zip observable observable func in the type observable is not applicable for the arguments observable observable func but works in super extends branch }} lots more observable usages to go however the observer s are probably mostly done rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request let me know when youre ready for this to be merged and released i plan on releasing this as as it does have some breaking changes that cloudbees build failure is legit i also cant build rxjava scala on my machine with this branch the core library is fine what went wrong execution failed for task language adaptors rxjava scala compilescala compilation failed because of an internal compiler error see the error output for details in this line javaobservable observable observablecreate new func subscription is it the case that java programmers creating an observable this way would always have to include the super bit or is this just for completeness is this what you mean by im not exactly happy with the result i havent thought through it but this doesnt seem like it should be necessary if its done right benjchristensen i just noticed that too and adapted the rximplicits daveray looks like it yes i couldnt make the compiler happy without it but maybe im missing something if you find something that avoids this then please let me know rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good still to do future is covariant and timestamped and notification are probably tooalso lots of operators can be used standalone and therefore should be generalized too rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request huh very interesting compiles for me rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i would call this ready to merge now i looked through all the code and adapted everything i found i cant guarantee that i havent overlooked something but i guess a few places here and there can still be adapted later on without too much harmthe one caveat is daverays comment maybe the observers are overgeneralized somewhere and we can really avoid people having to write super x when creating their own observers i havent found a solution for this but im probably blind to it by nowof course one could still add a lot of tests or use cases in covariancetest to show that everything compiles as it should in that respect im rather optimistic thoughmaybe we can also get rid of more rawtype unchecked annotations now ill check this later onnow i need some time to recover from all that toiling through java boilerplatery i need to spend some more time on this in my playing around i wasnt thrilled by how it forces this type of user code that has super in it java public static observable o observablecreate new func subscription { override public subscription call observer t { return null } } i have the same concern guava seems to takes the same approach but i dont recall ever having to use type constraints like that when using it briefly looking through the guava code nothing stood out to me though that would make it behave differently though re reading effective java josh bloch says this on page properly used wildcard types are nearly invisible to users of a class they cause methods to accept the parameters they should accept and reject those they should reject if the user of a class has to think about wildcard types there is probably something wrong with the class’s apihowever all of his examples are about methods they arent about instantiating classes like func where ends up as extends subscription perhaps if this is what covariant generics truly requires we create a new function type specifically for this extremely common case of creating an observable and have it be something like this javapublic interface observablefunction extends func subscription { public subscription call observer t } it can then be used like this java public static observable o observablecreate new observablefunction { override public subscription call observer t { return null } } public static class myobserver implements observer { override public void oncompleted { todo auto generated method stub } override public void onerror throwable e { todo auto generated method stub } override public void onnext media args { todo auto generated method stub } } public static void testthis { o subscribe new myobserver } this still requires public subscription call observer t but that is auto generated by an ide and lets face it anyone writing java is using an ide whereas the function definition is far easier new observablefunction probably need a better name than observablefunction but thus far it feels better to use unfortunately it cant be an overload of the existing create method as type erasure and dynamic languages see it as the same thing javapublic static observable create func extends subscription func using the observablefunction works against that but then people would have to discover that new type in some other way to be truly user friendly the method signature would need to change to javapublic static observable create observablefunction func this way people would get prompted by their ides and javadoc to use the easiest approachthis whole thing with or without a new type is a wide impact breaking change all places someone does observablecreate i tried again to do without observer in several relevant places but i failed yet again it seems to be just necessary it stands to reason though if you think about it because observer is a contravariant type and java cant deal with that in any other way and in the case of observers api users are not just using them theyre creating themi like bens observablefunction idea above i think it would probably even be possible to get around the overloading problem by not inheriting from func delegating to it instead however its still a wide impact breaking change due to the super that has to be added within every call method signature concerning observersstill if the create method is the biggest problem maybe its not so big after all or is create really so widely used id think that mostly api users will be using already created observables combining them and subscribing to them here is a trivial example using java demonstrating how super needs to exist even here if retaining type safety java observable omovie observablecreate observer o { oonnext new movie oonnext new movie return subscriptionsempty } map movie { return movie transformed movie } observable omedia observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } map movie { return media transformed movie } observablezip omovie omedia a b { return a b } subscribe movie { systemoutprintln media movie movie } or type safety can be thrown away java observable omovie observablecreate observer o { oonnext new movie oonnext new movie return subscriptionsempty } map movie { return movie transformed movie } but now that allows this to compile java observable omovie observablecreate observer o { oonnext new movie oonnext hello this is not a movie object return subscriptionsempty } map movie { return movie transformed movie } jmhofer the create method is how observable s are created so this affects all producers this should not affect consumers other than making the prompts docs verbose screen shot at pm https fcloudgithubcom assets a a a f e bdddd de png mttkay and mustafasezgin do you have any input on this discussion since you are using rxjava from plain java groovy is similar but the generics dont actually do much for it as they are more or less ignored at compile time as best i can tell groovy observable omovie observablecreate { observer o oonnext new movie oonnext new movie return subscriptionsempty } map { movie return movie transformed movie } observable omedia observablecreate { observer o oonnext new media oonnext new horrormovie return subscriptionsempty } map { movie return media transformed movie } observablezip omovie omedia { a b return a b } subscribe { movie systemoutprintln media movie movie } this groovy code works against current master as well as the new code with super groovy observable omovie observablecreate { observer o oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } observable omedia observablecreate { observer o oonnext new media oonnext new horrormovie ooncompleted return subscriptionsempty } observablezip omovie omedia { movie a media b return stringvalueof a stringvalueof b } subscribe { media systemoutprintln media movie media } and here it is again in plain java java observable omovie observablecreate new func subscription { override public subscription call observer o { oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } } observable omedia observablecreate new func subscription { override public subscription call observer o { oonnext new media oonnext new horrormovie ooncompleted return subscriptionsempty } } observablezip omovie omedia new func { override public string call movie a media b { return stringvalueof a stringvalueof b } } subscribe new action { override public void call string media { systemoutprintln media movie media } } it seems that super is fine on the outer generics and doesnt need to be typed everywhere its just when its a generic inside a generic the type of the observer that it becomes annoying it seems the only option while supporting covariance for reducing code verbosity is to create a new type that hides the func extends subscription complexityso my question now is should we change the api to make all uses of create use the new type or should it remain as func and the other type is just a nice utility that can be used to fulfill the signaturein other words do we leave it as this javapublic static observable create func extends subscription func or change it to javapublic static observable create observablefunction func and what do we call the new type if we go that route options ive considered are observablefunction observablefunc onsubscribefunction onsubscribefunc funconsubscribe and should that live in rxutilfunctions or rx alongside rxobservable it feels that this is not generic and should therefore live inside rx unfortunately we can not overload this method and support both as type erasure makes them the same and it will confuse dynamic languages implicits etc if we had two methods with similar single function signaturesnormally id rather leave the lower level func method signature and just have a helper class but code completion and javadocs will be far less obvious and not very discoverable thus for discoverability i think it makes more sense to use create observablefunction func i cant yet think of any forward compatibility reason why this would be a bad thing this pull request is breaking either direction we pursue one last spam to everyone please weigh in if you have an opinion as i intend on making a decision and releasing this weekthis will be a breaking change and affect usage for everyone here is what the observablefunction interface looks like java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public interface observablefunction extends func subscription { public subscription call observer t } and the updated create method javapublic static observable create observablefunction func and sample code using this java observable omovie observablecreate new observablefunction { override public subscription call observer o { oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } } here is a fork including these changes so we can review and discuss https githubcom benjchristensen rxjava commit de f cea aaf fbb ee eec im still not thrilled by any of the directions we can take here i cant argue against making rxjava support covariant types josh bloch certainly supports it in effective java when he says if you write a library that will be widely used the proper use of wildcard types should be considered mandatoryon the flip side it forces the use of super extends everywhere even when covariant requirements are rarei think the only decision at this point to make is whether we should use something like observablefunction to minimize the verbosity or just leave func extends subscription and if we do use observablefunction do we provide similar solutions elsewhere that feels wrong to have special function interfaces for so many things even though it likely will improve readability and usabilityother operators that are awkward include defer func observablefactory aggregate func accumulator buffer func bufferclosingselector flatmap func func flatmap is very common and ends up like this java omediaflatmap new func { override public observable call media s { } } compare this with current java omediaflatmap new func { override public observable call media s { } } however lambdas do make a big different on instance methods not as much on statics as they can infer the types for example in java the above can become this java omediaflatmap value { return null } so without observablefunction in java we have java observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } flatmap movie { return observablefrom media transformed moviegetname } with observablefunction in java we get this java observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } flatmap movie { return observablefrom media transformed moviegetname } it seems that type inference will handle the instance methods for example aggregate reduce becomes this java observablecreate observer o { oonnext oonnext return subscriptionsempty } aggregate previous current { return previous current } so its only the static methods of concern create being the most significantjava and android are going to be ugly no matter what but we already knew that and they already are this makes it worse experiencing some of the pain with generic method signatures and nestingfirst hand i prefer the type alias in form of an interface i would arguethat the subscription function is so widely used that the interfacecloaking it will be understood quickly enough by developers so the loss indirect clarity should be negligible rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request observablefunction interface but call it something else maybe with subscription subscribe in the name benjchristensen we could overload create etc for this wed have to make observablefunction delegate to func then instead of inheriting from it im not sure if thats a good idea though it would probably be even more confusingim not sure about the naming although it is kind of _the_ internal observable function i think id prefer subscriptionfunction or subscriberfunction or something like that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good how about these names onsubscribefunction onsubscribefunc funconsubscribe based on my highly scientific poll of people around me at my office and the few who have commented above im going with onsubscribefunc benjchristensen works for me will it extend func or be an independent type as jmhofer suggests above i think id prefer the latter i havent played with it not extending func it will need to at least extend function so it fits with all other functions in the codebase in what way will it improve things if it doesnt extend since this function is only intended for us by the observablecreate does anyone have issues with it being namespaced as rxobservableonsubscribefunc as a static inner class of observable rather than a first class citizen rxonsubscribefunc this works great in java are there any issues from clojure or scala doing it this waycreate looks like this javapublic static observable create onsubscribefunc func use of it looks like this java import rxobservable import rxobservableonsubscribefunc observable observable observablecreate new onsubscribefunc { override public subscription call observer observer { observeronnext one observeronnext two observeronnext three observeroncompleted return subscriptionsempty } } the function definition looks like java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public static interface onsubscribefunc extends function { public subscription call observer t } good idea and shouldnt be a problem for scala great ill proceed with this change then thanks for the feedback final interface looks like this java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public static interface onsubscribefunc extends function { public subscription onsubscribe observer t } this is being merged in https githubcom netflix rxjava pull
331,1,0,0,0,1,1,1,1,adding super extends so that observable is covariant ok so this pull request changes a _lot_ of lines its mostly generalizing all the funcx s to be used like funcx t t tx r contravariant parameters covariant return type and all the observer s to be used in a contravariant way a few of the observable uses are covariant now too mostly zip this is the pull request for this doesnt look very good in the code thanks java also it doesnt seem to make scala interop easier at all at least not yet please take a look im not exactly happy with the result maybe im doing something wrong here ive still got hope that theres an easier waythe pull request compiles and tests ok for me except for the clojure module but thats another story and not due to my changes rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request ill have to spend some time later playing with this anyone else able to try this out and comment on the changes jmhofer can you provide examples or use cases of using the updated code that demonstrates covariant contravariant usage that couldnt be achieved before ok heres an example of what you can do now with the improved zip javaimport rxobservableimport rxutilfunctionsfunc class media {}class movie extends media {}class horrormovie extends movie {}class rating {}class coolrating extends rating {}class result {}class extendedresult extends result {}public class covariance { public static void main string args { observable horrors observablefrom new horrormovie observable ratings observablefrom new coolrating func combine new func { override public extendedresult call media m rating r { return null } } observablezip horrors ratings combine the method zip observable observable func in the type observable is not applicable for the arguments observable observable func but works in super extends branch }} lots more observable usages to go however the observer s are probably mostly done rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request let me know when youre ready for this to be merged and released i plan on releasing this as as it does have some breaking changes that cloudbees build failure is legit i also cant build rxjava scala on my machine with this branch the core library is fine what went wrong execution failed for task language adaptors rxjava scala compilescala compilation failed because of an internal compiler error see the error output for details in this line javaobservable observable observablecreate new func subscription is it the case that java programmers creating an observable this way would always have to include the super bit or is this just for completeness is this what you mean by im not exactly happy with the result i havent thought through it but this doesnt seem like it should be necessary if its done right benjchristensen i just noticed that too and adapted the rximplicits daveray looks like it yes i couldnt make the compiler happy without it but maybe im missing something if you find something that avoids this then please let me know rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good still to do future is covariant and timestamped and notification are probably tooalso lots of operators can be used standalone and therefore should be generalized too rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request huh very interesting compiles for me rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i would call this ready to merge now i looked through all the code and adapted everything i found i cant guarantee that i havent overlooked something but i guess a few places here and there can still be adapted later on without too much harmthe one caveat is daverays comment maybe the observers are overgeneralized somewhere and we can really avoid people having to write super x when creating their own observers i havent found a solution for this but im probably blind to it by nowof course one could still add a lot of tests or use cases in covariancetest to show that everything compiles as it should in that respect im rather optimistic thoughmaybe we can also get rid of more rawtype unchecked annotations now ill check this later onnow i need some time to recover from all that toiling through java boilerplatery i need to spend some more time on this in my playing around i wasnt thrilled by how it forces this type of user code that has super in it java public static observable o observablecreate new func subscription { override public subscription call observer t { return null } } i have the same concern guava seems to takes the same approach but i dont recall ever having to use type constraints like that when using it briefly looking through the guava code nothing stood out to me though that would make it behave differently though re reading effective java josh bloch says this on page properly used wildcard types are nearly invisible to users of a class they cause methods to accept the parameters they should accept and reject those they should reject if the user of a class has to think about wildcard types there is probably something wrong with the class’s apihowever all of his examples are about methods they arent about instantiating classes like func where ends up as extends subscription perhaps if this is what covariant generics truly requires we create a new function type specifically for this extremely common case of creating an observable and have it be something like this javapublic interface observablefunction extends func subscription { public subscription call observer t } it can then be used like this java public static observable o observablecreate new observablefunction { override public subscription call observer t { return null } } public static class myobserver implements observer { override public void oncompleted { todo auto generated method stub } override public void onerror throwable e { todo auto generated method stub } override public void onnext media args { todo auto generated method stub } } public static void testthis { o subscribe new myobserver } this still requires public subscription call observer t but that is auto generated by an ide and lets face it anyone writing java is using an ide whereas the function definition is far easier new observablefunction probably need a better name than observablefunction but thus far it feels better to use unfortunately it cant be an overload of the existing create method as type erasure and dynamic languages see it as the same thing javapublic static observable create func extends subscription func using the observablefunction works against that but then people would have to discover that new type in some other way to be truly user friendly the method signature would need to change to javapublic static observable create observablefunction func this way people would get prompted by their ides and javadoc to use the easiest approachthis whole thing with or without a new type is a wide impact breaking change all places someone does observablecreate i tried again to do without observer in several relevant places but i failed yet again it seems to be just necessary it stands to reason though if you think about it because observer is a contravariant type and java cant deal with that in any other way and in the case of observers api users are not just using them theyre creating themi like bens observablefunction idea above i think it would probably even be possible to get around the overloading problem by not inheriting from func delegating to it instead however its still a wide impact breaking change due to the super that has to be added within every call method signature concerning observersstill if the create method is the biggest problem maybe its not so big after all or is create really so widely used id think that mostly api users will be using already created observables combining them and subscribing to them here is a trivial example using java demonstrating how super needs to exist even here if retaining type safety java observable omovie observablecreate observer o { oonnext new movie oonnext new movie return subscriptionsempty } map movie { return movie transformed movie } observable omedia observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } map movie { return media transformed movie } observablezip omovie omedia a b { return a b } subscribe movie { systemoutprintln media movie movie } or type safety can be thrown away java observable omovie observablecreate observer o { oonnext new movie oonnext new movie return subscriptionsempty } map movie { return movie transformed movie } but now that allows this to compile java observable omovie observablecreate observer o { oonnext new movie oonnext hello this is not a movie object return subscriptionsempty } map movie { return movie transformed movie } jmhofer the create method is how observable s are created so this affects all producers this should not affect consumers other than making the prompts docs verbose screen shot at pm https fcloudgithubcom assets a a a f e bdddd de png mttkay and mustafasezgin do you have any input on this discussion since you are using rxjava from plain java groovy is similar but the generics dont actually do much for it as they are more or less ignored at compile time as best i can tell groovy observable omovie observablecreate { observer o oonnext new movie oonnext new movie return subscriptionsempty } map { movie return movie transformed movie } observable omedia observablecreate { observer o oonnext new media oonnext new horrormovie return subscriptionsempty } map { movie return media transformed movie } observablezip omovie omedia { a b return a b } subscribe { movie systemoutprintln media movie movie } this groovy code works against current master as well as the new code with super groovy observable omovie observablecreate { observer o oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } observable omedia observablecreate { observer o oonnext new media oonnext new horrormovie ooncompleted return subscriptionsempty } observablezip omovie omedia { movie a media b return stringvalueof a stringvalueof b } subscribe { media systemoutprintln media movie media } and here it is again in plain java java observable omovie observablecreate new func subscription { override public subscription call observer o { oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } } observable omedia observablecreate new func subscription { override public subscription call observer o { oonnext new media oonnext new horrormovie ooncompleted return subscriptionsempty } } observablezip omovie omedia new func { override public string call movie a media b { return stringvalueof a stringvalueof b } } subscribe new action { override public void call string media { systemoutprintln media movie media } } it seems that super is fine on the outer generics and doesnt need to be typed everywhere its just when its a generic inside a generic the type of the observer that it becomes annoying it seems the only option while supporting covariance for reducing code verbosity is to create a new type that hides the func extends subscription complexityso my question now is should we change the api to make all uses of create use the new type or should it remain as func and the other type is just a nice utility that can be used to fulfill the signaturein other words do we leave it as this javapublic static observable create func extends subscription func or change it to javapublic static observable create observablefunction func and what do we call the new type if we go that route options ive considered are observablefunction observablefunc onsubscribefunction onsubscribefunc funconsubscribe and should that live in rxutilfunctions or rx alongside rxobservable it feels that this is not generic and should therefore live inside rx unfortunately we can not overload this method and support both as type erasure makes them the same and it will confuse dynamic languages implicits etc if we had two methods with similar single function signaturesnormally id rather leave the lower level func method signature and just have a helper class but code completion and javadocs will be far less obvious and not very discoverable thus for discoverability i think it makes more sense to use create observablefunction func i cant yet think of any forward compatibility reason why this would be a bad thing this pull request is breaking either direction we pursue one last spam to everyone please weigh in if you have an opinion as i intend on making a decision and releasing this weekthis will be a breaking change and affect usage for everyone here is what the observablefunction interface looks like java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public interface observablefunction extends func subscription { public subscription call observer t } and the updated create method javapublic static observable create observablefunction func and sample code using this java observable omovie observablecreate new observablefunction { override public subscription call observer o { oonnext new movie oonnext new movie ooncompleted return subscriptionsempty } } here is a fork including these changes so we can review and discuss https githubcom benjchristensen rxjava commit de f cea aaf fbb ee eec im still not thrilled by any of the directions we can take here i cant argue against making rxjava support covariant types josh bloch certainly supports it in effective java when he says if you write a library that will be widely used the proper use of wildcard types should be considered mandatoryon the flip side it forces the use of super extends everywhere even when covariant requirements are rarei think the only decision at this point to make is whether we should use something like observablefunction to minimize the verbosity or just leave func extends subscription and if we do use observablefunction do we provide similar solutions elsewhere that feels wrong to have special function interfaces for so many things even though it likely will improve readability and usabilityother operators that are awkward include defer func observablefactory aggregate func accumulator buffer func bufferclosingselector flatmap func func flatmap is very common and ends up like this java omediaflatmap new func { override public observable call media s { } } compare this with current java omediaflatmap new func { override public observable call media s { } } however lambdas do make a big different on instance methods not as much on statics as they can infer the types for example in java the above can become this java omediaflatmap value { return null } so without observablefunction in java we have java observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } flatmap movie { return observablefrom media transformed moviegetname } with observablefunction in java we get this java observablecreate observer o { oonnext new media oonnext new horrormovie return subscriptionsempty } flatmap movie { return observablefrom media transformed moviegetname } it seems that type inference will handle the instance methods for example aggregate reduce becomes this java observablecreate observer o { oonnext oonnext return subscriptionsempty } aggregate previous current { return previous current } so its only the static methods of concern create being the most significantjava and android are going to be ugly no matter what but we already knew that and they already are this makes it worse experiencing some of the pain with generic method signatures and nestingfirst hand i prefer the type alias in form of an interface i would arguethat the subscription function is so widely used that the interfacecloaking it will be understood quickly enough by developers so the loss indirect clarity should be negligible rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request observablefunction interface but call it something else maybe with subscription subscribe in the name benjchristensen we could overload create etc for this wed have to make observablefunction delegate to func then instead of inheriting from it im not sure if thats a good idea though it would probably be even more confusingim not sure about the naming although it is kind of _the_ internal observable function i think id prefer subscriptionfunction or subscriberfunction or something like that rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good how about these names onsubscribefunction onsubscribefunc funconsubscribe based on my highly scientific poll of people around me at my office and the few who have commented above im going with onsubscribefunc benjchristensen works for me will it extend func or be an independent type as jmhofer suggests above i think id prefer the latter i havent played with it not extending func it will need to at least extend function so it fits with all other functions in the codebase in what way will it improve things if it doesnt extend since this function is only intended for us by the observablecreate does anyone have issues with it being namespaced as rxobservableonsubscribefunc as a static inner class of observable rather than a first class citizen rxonsubscribefunc this works great in java are there any issues from clojure or scala doing it this waycreate looks like this javapublic static observable create onsubscribefunc func use of it looks like this java import rxobservable import rxobservableonsubscribefunc observable observable observablecreate new onsubscribefunc { override public subscription call observer observer { observeronnext one observeronnext two observeronnext three observeroncompleted return subscriptionsempty } } the function definition looks like java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public static interface onsubscribefunc extends function { public subscription call observer t } good idea and shouldnt be a problem for scala great ill proceed with this change then thanks for the feedback final interface looks like this java function interface for work to be performed when an { link observable} is subscribed to via { link observablesubscribe observer } param public static interface onsubscribefunc extends function { public subscription onsubscribe observer t } this is being merged in https githubcom netflix rxjava pull
375,1,0,0,0,0,0,1,0,implemented distinct operator this pr implements distinct as speficied by again i havent implemented the net methods taking an iequalitycomparator see rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
375,1,0,1,1,1,1,1,1,implemented distinct operator this pr implements distinct as speficied by again i havent implemented the net methods taking an iequalitycomparator see rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
375,1,0,0,0,1,1,1,1,implemented distinct operator this pr implements distinct as speficied by again i havent implemented the net methods taking an iequalitycomparator see rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
381,1,0,0,0,0,0,1,0,implemented mapwithindex as requested by samuelgruetter in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request test failure again due to sporadic timing problems i just submitted an issue https githubcom netflix rxjava issues for this looks good
381,1,1,0,1,1,1,1,1,implemented mapwithindex as requested by samuelgruetter in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request test failure again due to sporadic timing problems i just submitted an issue https githubcom netflix rxjava issues for this looks good
381,1,0,1,0,0,0,1,0,implemented mapwithindex as requested by samuelgruetter in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request test failure again due to sporadic timing problems i just submitted an issue https githubcom netflix rxjava issues for this looks good
385,1,0,0,0,0,0,1,0,implemented the any operator this implements the operator any from in all two variantshowever i encountered two problemsupdated the online document http msdnmicrosoftcom en us library hh vvs aspx is wrong see my later discussio other question is if i add the any method to rxobservable some unit tests will fail as the method any in rxobservable overrides the method orgmockitomatchersany javalangclass in some unit tests eg rxsubjectsreplaysubject do i need to use another method name or just modify the unit tests now the any methods in rxobservable are commented outthanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i havent looked at the first question yet but on the second one well likely need to stop importing orgmockitomatchers and call it directly orgmockitomatchersany sorry that i missed the keyword empty in my description the first question is im not sure how to handle an empty observable sequence rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted i tested the c any today the environment is vs net i found the description in my vs is determines whether any element of an observable sequence satisfies a condition this is totally different from the online document http msdnmicrosoftcom en us library hh vvs aspxi always did some tests for any here is the code using systemusing systemcollectionsgenericusing systemlinqusing systemtextusing systemreactivelinqnamespace consoleapplication { class program { static void main string args { var any observableempty any anysubscribe x consolewriteline subscriber got x subscriber got false any observablerange any anysubscribe x consolewriteline subscriber got x subscriber got true any observableempty any x true anysubscribe x consolewriteline subscriber got x subscriber got false any observablerange any x x anysubscribe x consolewriteline subscriber got x subscriber got true any observablerange any x x anysubscribe x consolewriteline subscriber got x subscriber got false consolereadline } }} here is the output subscriber got falsesubscriber got truesubscriber got falsesubscriber got truesubscriber got false in summary if an observable sequence is empty any emits false if one element of an observable sequence satisfies the condition any emits true if all elements of an observable sequence do not satisfy the condition any emits false i have implemented the correct any operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted in scala we will probably use isempty instead of any negated and exists somepredicate instead of any somepredicate you could use these names also in java to avoid confusion and name conflicts zsxwing i dont have time tonight but will definitely get to this in the near future thank you for getting involved
385,1,1,0,1,1,1,1,1,implemented the any operator this implements the operator any from in all two variantshowever i encountered two problemsupdated the online document http msdnmicrosoftcom en us library hh vvs aspx is wrong see my later discussio other question is if i add the any method to rxobservable some unit tests will fail as the method any in rxobservable overrides the method orgmockitomatchersany javalangclass in some unit tests eg rxsubjectsreplaysubject do i need to use another method name or just modify the unit tests now the any methods in rxobservable are commented outthanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i havent looked at the first question yet but on the second one well likely need to stop importing orgmockitomatchers and call it directly orgmockitomatchersany sorry that i missed the keyword empty in my description the first question is im not sure how to handle an empty observable sequence rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted i tested the c any today the environment is vs net i found the description in my vs is determines whether any element of an observable sequence satisfies a condition this is totally different from the online document http msdnmicrosoftcom en us library hh vvs aspxi always did some tests for any here is the code using systemusing systemcollectionsgenericusing systemlinqusing systemtextusing systemreactivelinqnamespace consoleapplication { class program { static void main string args { var any observableempty any anysubscribe x consolewriteline subscriber got x subscriber got false any observablerange any anysubscribe x consolewriteline subscriber got x subscriber got true any observableempty any x true anysubscribe x consolewriteline subscriber got x subscriber got false any observablerange any x x anysubscribe x consolewriteline subscriber got x subscriber got true any observablerange any x x anysubscribe x consolewriteline subscriber got x subscriber got false consolereadline } }} here is the output subscriber got falsesubscriber got truesubscriber got falsesubscriber got truesubscriber got false in summary if an observable sequence is empty any emits false if one element of an observable sequence satisfies the condition any emits true if all elements of an observable sequence do not satisfy the condition any emits false i have implemented the correct any operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted in scala we will probably use isempty instead of any negated and exists somepredicate instead of any somepredicate you could use these names also in java to avoid confusion and name conflicts zsxwing i dont have time tonight but will definitely get to this in the near future thank you for getting involved
385,1,0,0,1,1,1,1,1,implemented the any operator this implements the operator any from in all two variantshowever i encountered two problemsupdated the online document http msdnmicrosoftcom en us library hh vvs aspx is wrong see my later discussio other question is if i add the any method to rxobservable some unit tests will fail as the method any in rxobservable overrides the method orgmockitomatchersany javalangclass in some unit tests eg rxsubjectsreplaysubject do i need to use another method name or just modify the unit tests now the any methods in rxobservable are commented outthanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i havent looked at the first question yet but on the second one well likely need to stop importing orgmockitomatchers and call it directly orgmockitomatchersany sorry that i missed the keyword empty in my description the first question is im not sure how to handle an empty observable sequence rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted i tested the c any today the environment is vs net i found the description in my vs is determines whether any element of an observable sequence satisfies a condition this is totally different from the online document http msdnmicrosoftcom en us library hh vvs aspxi always did some tests for any here is the code using systemusing systemcollectionsgenericusing systemlinqusing systemtextusing systemreactivelinqnamespace consoleapplication { class program { static void main string args { var any observableempty any anysubscribe x consolewriteline subscriber got x subscriber got false any observablerange any anysubscribe x consolewriteline subscriber got x subscriber got true any observableempty any x true anysubscribe x consolewriteline subscriber got x subscriber got false any observablerange any x x anysubscribe x consolewriteline subscriber got x subscriber got true any observablerange any x x anysubscribe x consolewriteline subscriber got x subscriber got false consolereadline } }} here is the output subscriber got falsesubscriber got truesubscriber got falsesubscriber got truesubscriber got false in summary if an observable sequence is empty any emits false if one element of an observable sequence satisfies the condition any emits true if all elements of an observable sequence do not satisfy the condition any emits false i have implemented the correct any operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted in scala we will probably use isempty instead of any negated and exists somepredicate instead of any somepredicate you could use these names also in java to avoid confusion and name conflicts zsxwing i dont have time tonight but will definitely get to this in the near future thank you for getting involved
390,1,0,0,0,0,0,1,0,implemented the elementat and elementatordefault operators see hithis implements the elementat and elementatordefault operators from for elementat if the index is less than or greater than or equal to the number of elements in the source sequence an indexoutofboundsexception will be threwfor elementatordefault if the index is less than an indexoutofboundsexception will be threw whats more i added a defaultvalue parameter i can not get the element type in the source observable due to type erasure so i can not determine the default value automatically thats why elementatordefault needs a defaultvalue parameter rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you zsxwing
390,1,0,0,0,1,1,1,1,implemented the elementat and elementatordefault operators see hithis implements the elementat and elementatordefault operators from for elementat if the index is less than or greater than or equal to the number of elements in the source sequence an indexoutofboundsexception will be threwfor elementatordefault if the index is less than an indexoutofboundsexception will be threw whats more i added a defaultvalue parameter i can not get the element type in the source observable due to type erasure so i can not determine the default value automatically thats why elementatordefault needs a defaultvalue parameter rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you zsxwing
390,1,0,0,0,0,1,1,1,implemented the elementat and elementatordefault operators see hithis implements the elementat and elementatordefault operators from for elementat if the index is less than or greater than or equal to the number of elements in the source sequence an indexoutofboundsexception will be threwfor elementatordefault if the index is less than an indexoutofboundsexception will be threw whats more i added a defaultvalue parameter i can not get the element type in the source observable due to type erasure so i can not determine the default value automatically thats why elementatordefault needs a defaultvalue parameter rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you zsxwing
409,1,0,0,0,0,0,1,0,implemented synchronize with lock hii implemented to support that sending a lock to the synchronize operatori also found that there was a issue that testmultithreadedwithnpe and testmultithreadedwithnpeinmiddle might fail in some special situation when onerror is invoked before any onnext the last statement assertequals busyobservermaxconcurrentthreadsget in these methods will fail i also fixed this issue in the pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted looks good thank you
409,1,0,1,1,0,1,1,1,implemented synchronize with lock hii implemented to support that sending a lock to the synchronize operatori also found that there was a issue that testmultithreadedwithnpe and testmultithreadedwithnpeinmiddle might fail in some special situation when onerror is invoked before any onnext the last statement assertequals busyobservermaxconcurrentthreadsget in these methods will fail i also fixed this issue in the pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted looks good thank you
409,1,0,0,0,1,1,1,1,implemented synchronize with lock hii implemented to support that sending a lock to the synchronize operatori also found that there was a issue that testmultithreadedwithnpe and testmultithreadedwithnpeinmiddle might fail in some special situation when onerror is invoked before any onnext the last statement assertequals busyobservermaxconcurrentthreadsget in these methods will fail i also fixed this issue in the pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests aborted looks good thank you
415,1,0,0,0,0,0,1,0,implemented the empty operator with scheduler hii implemented the empty operator with scheduler please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
415,1,0,1,0,1,1,1,1,implemented the empty operator with scheduler hii implemented the empty operator with scheduler please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
415,1,0,1,0,0,1,1,1,implemented the empty operator with scheduler hii implemented the empty operator with scheduler please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
416,1,0,0,0,0,0,1,0,implemented the throw operator with scheduler hii implemented the throw operator with scheduler i found that rxjava had an error method so i just implemented the scheduler overload rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good benjchristensen i agree with you i updated the codes and rebased it to master rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
416,1,1,1,1,1,1,1,1,implemented the throw operator with scheduler hii implemented the throw operator with scheduler i found that rxjava had an error method so i just implemented the scheduler overload rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good benjchristensen i agree with you i updated the codes and rebased it to master rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
416,1,0,0,1,0,1,1,1,implemented the throw operator with scheduler hii implemented the throw operator with scheduler i found that rxjava had an error method so i just implemented the scheduler overload rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good benjchristensen i agree with you i updated the codes and rebased it to master rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
424,1,0,0,0,0,0,1,0,implemented the ignoreelements operator hii implemented the ignoreelements operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good can you rebase this with the changes to master so it can be cleanly merged again with all the other changes this no longer cleanly mergesthank you zsxwing for this and all the other pull requests i really appreciate your involvement in the project i rebased the pull request now it should be able to merge to master directly rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
424,1,1,0,1,1,1,1,1,implemented the ignoreelements operator hii implemented the ignoreelements operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good can you rebase this with the changes to master so it can be cleanly merged again with all the other changes this no longer cleanly mergesthank you zsxwing for this and all the other pull requests i really appreciate your involvement in the project i rebased the pull request now it should be able to merge to master directly rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
424,1,0,1,0,0,0,1,0,implemented the ignoreelements operator hii implemented the ignoreelements operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good can you rebase this with the changes to master so it can be cleanly merged again with all the other changes this no longer cleanly mergesthank you zsxwing for this and all the other pull requests i really appreciate your involvement in the project i rebased the pull request now it should be able to merge to master directly rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
450,1,0,0,0,0,0,1,0,implemented the timeinterval operator hi this pr implemented the timeinterval operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request looks good thanks zsxwing
450,1,0,1,0,0,0,1,0,implemented the timeinterval operator hi this pr implemented the timeinterval operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request looks good thanks zsxwing
450,1,0,0,0,1,1,1,1,implemented the timeinterval operator hi this pr implemented the timeinterval operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request looks good thanks zsxwing
460,1,0,0,0,0,0,1,0,implemented the amb operator hi this pr implemented the amb operator i used varargs to support the array version and first second version in one method so in my pr there are only two variants rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request you shouldnt define a vararg method taking a generic type because you cannot use it without getting warnings weve already had this with other operators instead define an overload for args args args yup its a pain but this is what we ended up doing for zip merge etc instead of using varargs rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request thank you
460,1,0,0,0,1,1,1,1,implemented the amb operator hi this pr implemented the amb operator i used varargs to support the array version and first second version in one method so in my pr there are only two variants rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request you shouldnt define a vararg method taking a generic type because you cannot use it without getting warnings weve already had this with other operators instead define an overload for args args args yup its a pain but this is what we ended up doing for zip merge etc instead of using varargs rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request thank you
460,1,0,0,0,0,1,1,1,implemented the amb operator hi this pr implemented the amb operator i used varargs to support the array version and first second version in one method so in my pr there are only two variants rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request you shouldnt define a vararg method taking a generic type because you cannot use it without getting warnings weve already had this with other operators instead define an overload for args args args yup its a pain but this is what we ended up doing for zip merge etc instead of using varargs rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request thank you
463,1,0,0,0,0,1,1,1,added the rest overloads of timeout operator hi this pr implemented the rest overloads of timeout operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request due to pull request https githubcom netflix rxjava pull which touched virtually every file in the project can you please rebase this so it can merge cleanly again rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i have rebased it thank you zsxwing
463,1,0,0,0,1,1,1,1,added the rest overloads of timeout operator hi this pr implemented the rest overloads of timeout operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request due to pull request https githubcom netflix rxjava pull which touched virtually every file in the project can you please rebase this so it can merge cleanly again rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i have rebased it thank you zsxwing
463,1,0,0,0,0,0,1,0,added the rest overloads of timeout operator hi this pr implemented the rest overloads of timeout operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request due to pull request https githubcom netflix rxjava pull which touched virtually every file in the project can you please rebase this so it can merge cleanly again rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i have rebased it thank you zsxwing
478,1,0,0,0,0,0,1,0,implemented the operator min and minby and operator max and maxby hi this pr implemented the operator min and minby and operator max and maxby every operator has variants one for comparable another for comparator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good operationmin and operationmax are exactly the same except that are swapped cant you implement one in terms of the other or create a general one which takes or to know whether we want is the following solution ok java public static observable min observable source { return minmax source } public static observable max observable source { return minmax source } public static observable minmax observable source final long flag { return sourcereduce new func { override public t call t acc t value { if flag acccompareto value { return acc } return value } } } flag must be long as integermin_value integermin_value but we will have one multiplication for every compareto another solution is java public static observable min observable source { return minmax source true } public static observable max observable source { return minmax source false } public static observable minmax observable source final boolean ismin { return sourcereduce new func { override public t call t acc t value { if ismin { if acccompareto value { return acc } } return value } } } samuelgruetter do you have other better solution i like both of these two solutions with a slight preference for the first one nice catch with integermin_value a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue what if there are several minimal elements does min return the first of them the last of them or is it unspecified this should be documented samuelgruetter thanks for your review i used the way to implement it and also updated the document rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good looks good zsxwing and thanks samuelgruetter for the reviewsome nice use of generics in those signatures
478,1,0,0,0,1,1,1,1,implemented the operator min and minby and operator max and maxby hi this pr implemented the operator min and minby and operator max and maxby every operator has variants one for comparable another for comparator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good operationmin and operationmax are exactly the same except that are swapped cant you implement one in terms of the other or create a general one which takes or to know whether we want is the following solution ok java public static observable min observable source { return minmax source } public static observable max observable source { return minmax source } public static observable minmax observable source final long flag { return sourcereduce new func { override public t call t acc t value { if flag acccompareto value { return acc } return value } } } flag must be long as integermin_value integermin_value but we will have one multiplication for every compareto another solution is java public static observable min observable source { return minmax source true } public static observable max observable source { return minmax source false } public static observable minmax observable source final boolean ismin { return sourcereduce new func { override public t call t acc t value { if ismin { if acccompareto value { return acc } } return value } } } samuelgruetter do you have other better solution i like both of these two solutions with a slight preference for the first one nice catch with integermin_value a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue what if there are several minimal elements does min return the first of them the last of them or is it unspecified this should be documented samuelgruetter thanks for your review i used the way to implement it and also updated the document rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good looks good zsxwing and thanks samuelgruetter for the reviewsome nice use of generics in those signatures
478,1,0,0,0,1,1,1,1,implemented the operator min and minby and operator max and maxby hi this pr implemented the operator min and minby and operator max and maxby every operator has variants one for comparable another for comparator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good operationmin and operationmax are exactly the same except that are swapped cant you implement one in terms of the other or create a general one which takes or to know whether we want is the following solution ok java public static observable min observable source { return minmax source } public static observable max observable source { return minmax source } public static observable minmax observable source final long flag { return sourcereduce new func { override public t call t acc t value { if flag acccompareto value { return acc } return value } } } flag must be long as integermin_value integermin_value but we will have one multiplication for every compareto another solution is java public static observable min observable source { return minmax source true } public static observable max observable source { return minmax source false } public static observable minmax observable source final boolean ismin { return sourcereduce new func { override public t call t acc t value { if ismin { if acccompareto value { return acc } } return value } } } samuelgruetter do you have other better solution i like both of these two solutions with a slight preference for the first one nice catch with integermin_value a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue what if there are several minimal elements does min return the first of them the last of them or is it unspecified this should be documented samuelgruetter thanks for your review i used the way to implement it and also updated the document rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good looks good zsxwing and thanks samuelgruetter for the reviewsome nice use of generics in those signatures
478,1,0,0,0,0,0,1,0,implemented the operator min and minby and operator max and maxby hi this pr implemented the operator min and minby and operator max and maxby every operator has variants one for comparable another for comparator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good operationmin and operationmax are exactly the same except that are swapped cant you implement one in terms of the other or create a general one which takes or to know whether we want is the following solution ok java public static observable min observable source { return minmax source } public static observable max observable source { return minmax source } public static observable minmax observable source final long flag { return sourcereduce new func { override public t call t acc t value { if flag acccompareto value { return acc } return value } } } flag must be long as integermin_value integermin_value but we will have one multiplication for every compareto another solution is java public static observable min observable source { return minmax source true } public static observable max observable source { return minmax source false } public static observable minmax observable source final boolean ismin { return sourcereduce new func { override public t call t acc t value { if ismin { if acccompareto value { return acc } } return value } } } samuelgruetter do you have other better solution i like both of these two solutions with a slight preference for the first one nice catch with integermin_value a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue what if there are several minimal elements does min return the first of them the last of them or is it unspecified this should be documented samuelgruetter thanks for your review i used the way to implement it and also updated the document rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good looks good zsxwing and thanks samuelgruetter for the reviewsome nice use of generics in those signatures
478,1,0,1,0,0,1,1,0,implemented the operator min and minby and operator max and maxby hi this pr implemented the operator min and minby and operator max and maxby every operator has variants one for comparable another for comparator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good operationmin and operationmax are exactly the same except that are swapped cant you implement one in terms of the other or create a general one which takes or to know whether we want is the following solution ok java public static observable min observable source { return minmax source } public static observable max observable source { return minmax source } public static observable minmax observable source final long flag { return sourcereduce new func { override public t call t acc t value { if flag acccompareto value { return acc } return value } } } flag must be long as integermin_value integermin_value but we will have one multiplication for every compareto another solution is java public static observable min observable source { return minmax source true } public static observable max observable source { return minmax source false } public static observable minmax observable source final boolean ismin { return sourcereduce new func { override public t call t acc t value { if ismin { if acccompareto value { return acc } } return value } } } samuelgruetter do you have other better solution i like both of these two solutions with a slight preference for the first one nice catch with integermin_value a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue what if there are several minimal elements does min return the first of them the last of them or is it unspecified this should be documented samuelgruetter thanks for your review i used the way to implement it and also updated the document rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good looks good zsxwing and thanks samuelgruetter for the reviewsome nice use of generics in those signatures
478,1,0,0,1,1,1,1,1,implemented the operator min and minby and operator max and maxby hi this pr implemented the operator min and minby and operator max and maxby every operator has variants one for comparable another for comparator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good operationmin and operationmax are exactly the same except that are swapped cant you implement one in terms of the other or create a general one which takes or to know whether we want is the following solution ok java public static observable min observable source { return minmax source } public static observable max observable source { return minmax source } public static observable minmax observable source final long flag { return sourcereduce new func { override public t call t acc t value { if flag acccompareto value { return acc } return value } } } flag must be long as integermin_value integermin_value but we will have one multiplication for every compareto another solution is java public static observable min observable source { return minmax source true } public static observable max observable source { return minmax source false } public static observable minmax observable source final boolean ismin { return sourcereduce new func { override public t call t acc t value { if ismin { if acccompareto value { return acc } } return value } } } samuelgruetter do you have other better solution i like both of these two solutions with a slight preference for the first one nice catch with integermin_value a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue what if there are several minimal elements does min return the first of them the last of them or is it unspecified this should be documented samuelgruetter thanks for your review i used the way to implement it and also updated the document rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good looks good zsxwing and thanks samuelgruetter for the reviewsome nice use of generics in those signatures
480,1,0,0,0,0,0,1,0,bugfix emit an illegalargumentexception instead of arithmeticexception if the observable is empty this pr fixed the average issue in if an observable is empty average will emit an illegalargumentexception instead of arithmeticexception thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
480,1,0,0,1,1,1,1,1,bugfix emit an illegalargumentexception instead of arithmeticexception if the observable is empty this pr fixed the average issue in if an observable is empty average will emit an illegalargumentexception instead of arithmeticexception thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
480,1,0,0,0,0,0,1,0,bugfix emit an illegalargumentexception instead of arithmeticexception if the observable is empty this pr fixed the average issue in if an observable is empty average will emit an illegalargumentexception instead of arithmeticexception thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
481,1,0,0,0,0,0,1,0,implement the using operator hi this pr implemented the using operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good interesting operator hadnt really ever looked at this onethank you zsxwing for the implementation
481,1,0,0,1,1,1,1,1,implement the using operator hi this pr implemented the using operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good interesting operator hadnt really ever looked at this onethank you zsxwing for the implementation
481,1,0,0,0,1,1,1,1,implement the using operator hi this pr implemented the using operator please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good interesting operator hadnt really ever looked at this onethank you zsxwing for the implementation
492,1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
492,1,0,0,1,1,1,1,1,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
492,1,0,1,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
492,1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
492,1,0,0,1,1,1,1,1,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
492,1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
492,1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
492,1,0,0,1,1,1,1,1,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
492,1,0,0,0,1,1,1,1,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range from startwith please take a look thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this conflicts and cant merge can you rebase and update the pr please i have updated the pr rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks
496,1,0,0,0,0,0,1,0,add contravariant for min and max hi this pr added contravariant for min and max mentioned in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
496,1,0,1,0,0,0,1,0,add contravariant for min and max hi this pr added contravariant for min and max mentioned in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
496,1,1,0,1,1,1,1,1,add contravariant for min and max hi this pr added contravariant for min and max mentioned in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
506,1,0,0,0,0,0,1,0,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
506,1,1,0,1,1,1,1,1,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
506,1,0,0,0,1,1,1,1,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
506,1,0,0,0,0,0,1,0,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
506,1,0,0,1,1,1,1,1,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
506,1,0,0,0,1,1,1,1,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
506,1,0,0,0,0,0,1,0,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
506,1,0,0,1,1,1,1,1,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
506,1,0,0,0,1,1,1,1,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of https githubcom netflix rxjava issues issuecomment the operationgroupbytest test issue has not be fixed yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
513,1,0,0,0,0,0,1,0,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
513,1,0,0,1,1,1,1,1,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
513,1,0,1,0,0,0,1,0,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
513,1,0,0,0,0,0,1,0,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
513,1,1,0,1,1,1,1,1,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
513,1,0,0,0,1,1,1,1,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
560,1,0,0,0,0,0,1,0,add type variances for dooneach actions this fixes the use of contravariant actions issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good lgtm
560,1,0,1,1,0,1,1,0,add type variances for dooneach actions this fixes the use of contravariant actions issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good lgtm
560,1,1,0,1,1,1,1,1,add type variances for dooneach actions this fixes the use of contravariant actions issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good lgtm
563,1,0,0,0,0,0,1,0,operation groupbyuntil issue rebased rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
563,1,1,0,1,1,1,1,1,operation groupbyuntil issue rebased rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
563,1,0,0,0,1,1,1,1,operation groupbyuntil issue rebased rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
565,1,0,0,0,0,0,1,0,operator groupjoin v issue rebasedstill headinthebox while writing the test for the operator ive noticed that when both duration selectors are never rxnet never calls oncompleted on the group subjects even though the left and right sources oncomplete i havent seen rxnet test for this scenario this comes into play when i want to emulate join with groupjoin the outer merge never oncompletes if i understand the behavior corretly when both left and right sources get depleted there is no way a new group or new group value would arrive and all the open groups and the main observer can be oncompleted this is somewhat similar to join and groupbyuntil behavior rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
565,1,1,0,1,1,1,1,1,operator groupjoin v issue rebasedstill headinthebox while writing the test for the operator ive noticed that when both duration selectors are never rxnet never calls oncompleted on the group subjects even though the left and right sources oncomplete i havent seen rxnet test for this scenario this comes into play when i want to emulate join with groupjoin the outer merge never oncompletes if i understand the behavior corretly when both left and right sources get depleted there is no way a new group or new group value would arrive and all the open groups and the main observer can be oncompleted this is somewhat similar to join and groupbyuntil behavior rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
565,1,0,1,0,0,0,1,0,operator groupjoin v issue rebasedstill headinthebox while writing the test for the operator ive noticed that when both duration selectors are never rxnet never calls oncompleted on the group subjects even though the left and right sources oncomplete i havent seen rxnet test for this scenario this comes into play when i want to emulate join with groupjoin the outer merge never oncompletes if i understand the behavior corretly when both left and right sources get depleted there is no way a new group or new group value would arrive and all the open groups and the main observer can be oncompleted this is somewhat similar to join and groupbyuntil behavior rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
571,1,0,0,0,0,0,1,0,operation sample with observable v issue sample will terminate if either the source or the sampler terminates or throws an error the sampler now emits values only in its onnext method therefore if the sampler completes and there is a sampled value available valuetaken false it wont emit the value before terminating rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
571,1,1,1,0,0,0,1,0,operation sample with observable v issue sample will terminate if either the source or the sampler terminates or throws an error the sampler now emits values only in its onnext method therefore if the sampler completes and there is a sampled value available valuetaken false it wont emit the value before terminating rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
571,1,0,0,0,0,0,1,0,operation sample with observable v issue sample will terminate if either the source or the sampler terminates or throws an error the sampler now emits values only in its onnext method therefore if the sampler completes and there is a sampled value available valuetaken false it wont emit the value before terminating rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
575,1,0,0,0,0,0,1,0,reimplement the sequenceequal operator hi this pr reimplemented the sequenceequal operator and should fix the issue the wiki page https githubcom netflix rxjava wiki observable utility operatorssequenceequal still needs to be updated davidmgross could you help update the marble diagram of sequenceequal thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good okay i think ive got it corrected it only covers one condition so mightbenefit from having some more examples but itll do for nowon fri dec at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment david m grossplp consulting davidmgross looks cool thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good job just a few things you are using gate to ensure concurrency and you access the firstdone and seconddone while synchronizing over gate i believe these two can be simple boolean fields instead of atomicbooleans you are setting the firstvalues and secondvalues in the init method into a volatile fields i believe these can be moved into the constructor and set to a regular private final list type and accessor optional you might want to call clear on both firstvalues and secondvalues if there was a termination condition so they dont hold onto queued values until the client observer disappears i really think that sequenceequal should be implemented in terms of other operators dont reinvent the wheel with every operator you add in scala id do it like this scaladef sequenceequal t o observable t o observable t observable boolean { val obs observable option t o map some _ observable none is concat val obs observable option t o map some _ observable none if different length comparing the none of the shorter with some element of the longer will return false obs zip obs forall pair pair_ pair_ } samuelgruetter great idea really thanks i overrode the previous commit as their is no option in java i use notification instead rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i also have a question about notificationhasvalue java retrieves a value indicating whether this notification has a value return a value indicating whether this notification has a value public boolean hasvalue { return isonnext && value null } here it checks if value is not null but i think value can be nulli also checked the rxnet codes here http rxcodeplexcom sourcecontrol latestrxnet source systemreactivecore reactive notificationcs c returns true public override bool hasvalue { get { return true } } it returns true directly in onnextnotification if notificationhasvalue has the same meaning in rxjava and rxnet i think && value null needs to be removed rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good much nicer now regarding hasvalue i dont know what is it good for if its the same as isonnext and why would one need the current version imho it could just be removedsomething else regarding null values and sequenceequal with default equality i think you shouldnt call onerror nullpointerexception but just onnext true or onnext false samuelgruetter thanks for reminding me the null issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
575,1,0,0,1,1,1,1,1,reimplement the sequenceequal operator hi this pr reimplemented the sequenceequal operator and should fix the issue the wiki page https githubcom netflix rxjava wiki observable utility operatorssequenceequal still needs to be updated davidmgross could you help update the marble diagram of sequenceequal thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good okay i think ive got it corrected it only covers one condition so mightbenefit from having some more examples but itll do for nowon fri dec at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment david m grossplp consulting davidmgross looks cool thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good job just a few things you are using gate to ensure concurrency and you access the firstdone and seconddone while synchronizing over gate i believe these two can be simple boolean fields instead of atomicbooleans you are setting the firstvalues and secondvalues in the init method into a volatile fields i believe these can be moved into the constructor and set to a regular private final list type and accessor optional you might want to call clear on both firstvalues and secondvalues if there was a termination condition so they dont hold onto queued values until the client observer disappears i really think that sequenceequal should be implemented in terms of other operators dont reinvent the wheel with every operator you add in scala id do it like this scaladef sequenceequal t o observable t o observable t observable boolean { val obs observable option t o map some _ observable none is concat val obs observable option t o map some _ observable none if different length comparing the none of the shorter with some element of the longer will return false obs zip obs forall pair pair_ pair_ } samuelgruetter great idea really thanks i overrode the previous commit as their is no option in java i use notification instead rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i also have a question about notificationhasvalue java retrieves a value indicating whether this notification has a value return a value indicating whether this notification has a value public boolean hasvalue { return isonnext && value null } here it checks if value is not null but i think value can be nulli also checked the rxnet codes here http rxcodeplexcom sourcecontrol latestrxnet source systemreactivecore reactive notificationcs c returns true public override bool hasvalue { get { return true } } it returns true directly in onnextnotification if notificationhasvalue has the same meaning in rxjava and rxnet i think && value null needs to be removed rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good much nicer now regarding hasvalue i dont know what is it good for if its the same as isonnext and why would one need the current version imho it could just be removedsomething else regarding null values and sequenceequal with default equality i think you shouldnt call onerror nullpointerexception but just onnext true or onnext false samuelgruetter thanks for reminding me the null issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
575,1,0,1,0,0,0,1,0,reimplement the sequenceequal operator hi this pr reimplemented the sequenceequal operator and should fix the issue the wiki page https githubcom netflix rxjava wiki observable utility operatorssequenceequal still needs to be updated davidmgross could you help update the marble diagram of sequenceequal thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good okay i think ive got it corrected it only covers one condition so mightbenefit from having some more examples but itll do for nowon fri dec at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment david m grossplp consulting davidmgross looks cool thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good job just a few things you are using gate to ensure concurrency and you access the firstdone and seconddone while synchronizing over gate i believe these two can be simple boolean fields instead of atomicbooleans you are setting the firstvalues and secondvalues in the init method into a volatile fields i believe these can be moved into the constructor and set to a regular private final list type and accessor optional you might want to call clear on both firstvalues and secondvalues if there was a termination condition so they dont hold onto queued values until the client observer disappears i really think that sequenceequal should be implemented in terms of other operators dont reinvent the wheel with every operator you add in scala id do it like this scaladef sequenceequal t o observable t o observable t observable boolean { val obs observable option t o map some _ observable none is concat val obs observable option t o map some _ observable none if different length comparing the none of the shorter with some element of the longer will return false obs zip obs forall pair pair_ pair_ } samuelgruetter great idea really thanks i overrode the previous commit as their is no option in java i use notification instead rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i also have a question about notificationhasvalue java retrieves a value indicating whether this notification has a value return a value indicating whether this notification has a value public boolean hasvalue { return isonnext && value null } here it checks if value is not null but i think value can be nulli also checked the rxnet codes here http rxcodeplexcom sourcecontrol latestrxnet source systemreactivecore reactive notificationcs c returns true public override bool hasvalue { get { return true } } it returns true directly in onnextnotification if notificationhasvalue has the same meaning in rxjava and rxnet i think && value null needs to be removed rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good much nicer now regarding hasvalue i dont know what is it good for if its the same as isonnext and why would one need the current version imho it could just be removedsomething else regarding null values and sequenceequal with default equality i think you shouldnt call onerror nullpointerexception but just onnext true or onnext false samuelgruetter thanks for reminding me the null issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
575,1,0,0,0,0,0,1,0,reimplement the sequenceequal operator hi this pr reimplemented the sequenceequal operator and should fix the issue the wiki page https githubcom netflix rxjava wiki observable utility operatorssequenceequal still needs to be updated davidmgross could you help update the marble diagram of sequenceequal thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good okay i think ive got it corrected it only covers one condition so mightbenefit from having some more examples but itll do for nowon fri dec at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment david m grossplp consulting davidmgross looks cool thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good job just a few things you are using gate to ensure concurrency and you access the firstdone and seconddone while synchronizing over gate i believe these two can be simple boolean fields instead of atomicbooleans you are setting the firstvalues and secondvalues in the init method into a volatile fields i believe these can be moved into the constructor and set to a regular private final list type and accessor optional you might want to call clear on both firstvalues and secondvalues if there was a termination condition so they dont hold onto queued values until the client observer disappears i really think that sequenceequal should be implemented in terms of other operators dont reinvent the wheel with every operator you add in scala id do it like this scaladef sequenceequal t o observable t o observable t observable boolean { val obs observable option t o map some _ observable none is concat val obs observable option t o map some _ observable none if different length comparing the none of the shorter with some element of the longer will return false obs zip obs forall pair pair_ pair_ } samuelgruetter great idea really thanks i overrode the previous commit as their is no option in java i use notification instead rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i also have a question about notificationhasvalue java retrieves a value indicating whether this notification has a value return a value indicating whether this notification has a value public boolean hasvalue { return isonnext && value null } here it checks if value is not null but i think value can be nulli also checked the rxnet codes here http rxcodeplexcom sourcecontrol latestrxnet source systemreactivecore reactive notificationcs c returns true public override bool hasvalue { get { return true } } it returns true directly in onnextnotification if notificationhasvalue has the same meaning in rxjava and rxnet i think && value null needs to be removed rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good much nicer now regarding hasvalue i dont know what is it good for if its the same as isonnext and why would one need the current version imho it could just be removedsomething else regarding null values and sequenceequal with default equality i think you shouldnt call onerror nullpointerexception but just onnext true or onnext false samuelgruetter thanks for reminding me the null issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
575,1,1,0,1,1,1,1,1,reimplement the sequenceequal operator hi this pr reimplemented the sequenceequal operator and should fix the issue the wiki page https githubcom netflix rxjava wiki observable utility operatorssequenceequal still needs to be updated davidmgross could you help update the marble diagram of sequenceequal thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good okay i think ive got it corrected it only covers one condition so mightbenefit from having some more examples but itll do for nowon fri dec at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment david m grossplp consulting davidmgross looks cool thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good job just a few things you are using gate to ensure concurrency and you access the firstdone and seconddone while synchronizing over gate i believe these two can be simple boolean fields instead of atomicbooleans you are setting the firstvalues and secondvalues in the init method into a volatile fields i believe these can be moved into the constructor and set to a regular private final list type and accessor optional you might want to call clear on both firstvalues and secondvalues if there was a termination condition so they dont hold onto queued values until the client observer disappears i really think that sequenceequal should be implemented in terms of other operators dont reinvent the wheel with every operator you add in scala id do it like this scaladef sequenceequal t o observable t o observable t observable boolean { val obs observable option t o map some _ observable none is concat val obs observable option t o map some _ observable none if different length comparing the none of the shorter with some element of the longer will return false obs zip obs forall pair pair_ pair_ } samuelgruetter great idea really thanks i overrode the previous commit as their is no option in java i use notification instead rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i also have a question about notificationhasvalue java retrieves a value indicating whether this notification has a value return a value indicating whether this notification has a value public boolean hasvalue { return isonnext && value null } here it checks if value is not null but i think value can be nulli also checked the rxnet codes here http rxcodeplexcom sourcecontrol latestrxnet source systemreactivecore reactive notificationcs c returns true public override bool hasvalue { get { return true } } it returns true directly in onnextnotification if notificationhasvalue has the same meaning in rxjava and rxnet i think && value null needs to be removed rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good much nicer now regarding hasvalue i dont know what is it good for if its the same as isonnext and why would one need the current version imho it could just be removedsomething else regarding null values and sequenceequal with default equality i think you shouldnt call onerror nullpointerexception but just onnext true or onnext false samuelgruetter thanks for reminding me the null issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
575,1,0,0,0,0,0,1,0,reimplement the sequenceequal operator hi this pr reimplemented the sequenceequal operator and should fix the issue the wiki page https githubcom netflix rxjava wiki observable utility operatorssequenceequal still needs to be updated davidmgross could you help update the marble diagram of sequenceequal thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good okay i think ive got it corrected it only covers one condition so mightbenefit from having some more examples but itll do for nowon fri dec at am cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment david m grossplp consulting davidmgross looks cool thanks rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good job just a few things you are using gate to ensure concurrency and you access the firstdone and seconddone while synchronizing over gate i believe these two can be simple boolean fields instead of atomicbooleans you are setting the firstvalues and secondvalues in the init method into a volatile fields i believe these can be moved into the constructor and set to a regular private final list type and accessor optional you might want to call clear on both firstvalues and secondvalues if there was a termination condition so they dont hold onto queued values until the client observer disappears i really think that sequenceequal should be implemented in terms of other operators dont reinvent the wheel with every operator you add in scala id do it like this scaladef sequenceequal t o observable t o observable t observable boolean { val obs observable option t o map some _ observable none is concat val obs observable option t o map some _ observable none if different length comparing the none of the shorter with some element of the longer will return false obs zip obs forall pair pair_ pair_ } samuelgruetter great idea really thanks i overrode the previous commit as their is no option in java i use notification instead rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i also have a question about notificationhasvalue java retrieves a value indicating whether this notification has a value return a value indicating whether this notification has a value public boolean hasvalue { return isonnext && value null } here it checks if value is not null but i think value can be nulli also checked the rxnet codes here http rxcodeplexcom sourcecontrol latestrxnet source systemreactivecore reactive notificationcs c returns true public override bool hasvalue { get { return true } } it returns true directly in onnextnotification if notificationhasvalue has the same meaning in rxjava and rxnet i think && value null needs to be removed rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good much nicer now regarding hasvalue i dont know what is it good for if its the same as isonnext and why would one need the current version imho it could just be removedsomething else regarding null values and sequenceequal with default equality i think you shouldnt call onerror nullpointerexception but just onnext true or onnext false samuelgruetter thanks for reminding me the null issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
587,1,0,0,0,0,0,1,0,operation longcount issue straightforward version of the regular count however i would have implemented it differently so the constant boxing unboxing could be avoided rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
587,1,0,0,1,1,1,1,1,operation longcount issue straightforward version of the regular count however i would have implemented it differently so the constant boxing unboxing could be avoided rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
593,1,0,0,0,0,0,1,0,lock free subscriptions uniform naming of inner components issue lock free approach to avoid deadlocks issue serialsubscriptionisunsubscribe added issue remarks imo an unsubscribed single serial multiple subscription return subscriptionsempty instead of null so unless the user put a null in there he she shouldnt worry about null there was a concurrency bug in jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal mutate transitions it cannot return subscriptionsempty since the rx contract is to return null also returning empty when unsubscribed is ambiguous has it been unsubscribed or has empty been set by the client code rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good that you fixed the race condition in multipleassignementsubscription as well as the contract it was unsubscribing the previous subscription although it shouldnt ive checked the rxnet sources singleassignmentdisposable returns defaultdisposableinstance serialdisposabe returns null refcountdisposable returns disposableempty scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why isunsubscribed is to be used to check the state it cannot return subscriptionsempty since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real state is is isunsubscribed and the properties might as well be write only i think the disposable subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the least astonishment principle
593,1,0,0,0,1,1,1,1,lock free subscriptions uniform naming of inner components issue lock free approach to avoid deadlocks issue serialsubscriptionisunsubscribe added issue remarks imo an unsubscribed single serial multiple subscription return subscriptionsempty instead of null so unless the user put a null in there he she shouldnt worry about null there was a concurrency bug in jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal mutate transitions it cannot return subscriptionsempty since the rx contract is to return null also returning empty when unsubscribed is ambiguous has it been unsubscribed or has empty been set by the client code rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good that you fixed the race condition in multipleassignementsubscription as well as the contract it was unsubscribing the previous subscription although it shouldnt ive checked the rxnet sources singleassignmentdisposable returns defaultdisposableinstance serialdisposabe returns null refcountdisposable returns disposableempty scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why isunsubscribed is to be used to check the state it cannot return subscriptionsempty since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real state is is isunsubscribed and the properties might as well be write only i think the disposable subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the least astonishment principle
593,1,0,0,0,0,0,1,0,lock free subscriptions uniform naming of inner components issue lock free approach to avoid deadlocks issue serialsubscriptionisunsubscribe added issue remarks imo an unsubscribed single serial multiple subscription return subscriptionsempty instead of null so unless the user put a null in there he she shouldnt worry about null there was a concurrency bug in jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal mutate transitions it cannot return subscriptionsempty since the rx contract is to return null also returning empty when unsubscribed is ambiguous has it been unsubscribed or has empty been set by the client code rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good that you fixed the race condition in multipleassignementsubscription as well as the contract it was unsubscribing the previous subscription although it shouldnt ive checked the rxnet sources singleassignmentdisposable returns defaultdisposableinstance serialdisposabe returns null refcountdisposable returns disposableempty scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why isunsubscribed is to be used to check the state it cannot return subscriptionsempty since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real state is is isunsubscribed and the properties might as well be write only i think the disposable subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the least astonishment principle
593,1,1,0,1,1,1,1,1,lock free subscriptions uniform naming of inner components issue lock free approach to avoid deadlocks issue serialsubscriptionisunsubscribe added issue remarks imo an unsubscribed single serial multiple subscription return subscriptionsempty instead of null so unless the user put a null in there he she shouldnt worry about null there was a concurrency bug in jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal mutate transitions it cannot return subscriptionsempty since the rx contract is to return null also returning empty when unsubscribed is ambiguous has it been unsubscribed or has empty been set by the client code rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good that you fixed the race condition in multipleassignementsubscription as well as the contract it was unsubscribing the previous subscription although it shouldnt ive checked the rxnet sources singleassignmentdisposable returns defaultdisposableinstance serialdisposabe returns null refcountdisposable returns disposableempty scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why isunsubscribed is to be used to check the state it cannot return subscriptionsempty since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real state is is isunsubscribed and the properties might as well be write only i think the disposable subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the least astonishment principle
593,1,0,0,0,0,0,1,0,lock free subscriptions uniform naming of inner components issue lock free approach to avoid deadlocks issue serialsubscriptionisunsubscribe added issue remarks imo an unsubscribed single serial multiple subscription return subscriptionsempty instead of null so unless the user put a null in there he she shouldnt worry about null there was a concurrency bug in jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal mutate transitions it cannot return subscriptionsempty since the rx contract is to return null also returning empty when unsubscribed is ambiguous has it been unsubscribed or has empty been set by the client code rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good that you fixed the race condition in multipleassignementsubscription as well as the contract it was unsubscribing the previous subscription although it shouldnt ive checked the rxnet sources singleassignmentdisposable returns defaultdisposableinstance serialdisposabe returns null refcountdisposable returns disposableempty scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why isunsubscribed is to be used to check the state it cannot return subscriptionsempty since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real state is is isunsubscribed and the properties might as well be write only i think the disposable subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the least astonishment principle
593,1,0,0,0,0,0,1,0,lock free subscriptions uniform naming of inner components issue lock free approach to avoid deadlocks issue serialsubscriptionisunsubscribe added issue remarks imo an unsubscribed single serial multiple subscription return subscriptionsempty instead of null so unless the user put a null in there he she shouldnt worry about null there was a concurrency bug in jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal mutate transitions it cannot return subscriptionsempty since the rx contract is to return null also returning empty when unsubscribed is ambiguous has it been unsubscribed or has empty been set by the client code rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good good that you fixed the race condition in multipleassignementsubscription as well as the contract it was unsubscribing the previous subscription although it shouldnt ive checked the rxnet sources singleassignmentdisposable returns defaultdisposableinstance serialdisposabe returns null refcountdisposable returns disposableempty scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why isunsubscribed is to be used to check the state it cannot return subscriptionsempty since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real state is is isunsubscribed and the properties might as well be write only i think the disposable subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the least astonishment principle
594,1,0,0,0,0,0,1,0,implement the start operator hi this pr implemented the start operator please take a look rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good nice so observablestart func might become the new way of creating futures maybe add some tests which illustrate what happens if i subscribe to observablestart before while after its calculation has terminated and what happens if there are several subscribers i think its correctly implemented but just to make everything more stable and better documented thanks samuelgruetter i added more tests is it necessary to construct a special test that subscribe and func run at the same time i think before and after are enough rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
594,1,0,1,0,0,0,1,0,implement the start operator hi this pr implemented the start operator please take a look rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good nice so observablestart func might become the new way of creating futures maybe add some tests which illustrate what happens if i subscribe to observablestart before while after its calculation has terminated and what happens if there are several subscribers i think its correctly implemented but just to make everything more stable and better documented thanks samuelgruetter i added more tests is it necessary to construct a special test that subscribe and func run at the same time i think before and after are enough rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
612,1,0,0,0,0,0,1,0,replay additional overloads issue added several overloads of the replay operator limited buffer limited time window buffer time scheduler overloads versions which perform a projection before the replay added missing multicast overload rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good could you give me an explanation of what the selector does and why itsuseful and also what the version of replay that uses a subject factory isall about the javadocs are opaque to me and the msdn docs intro to rxarent helpful eitheron thu dec at pm cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment david m grossplp consulting im not sure myself i think it allows transforming the subjects output without the danger of resubscribing to the uplink source i couldnt find any tests for them in the rxnet sources
612,1,0,1,0,0,0,1,0,replay additional overloads issue added several overloads of the replay operator limited buffer limited time window buffer time scheduler overloads versions which perform a projection before the replay added missing multicast overload rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good could you give me an explanation of what the selector does and why itsuseful and also what the version of replay that uses a subject factory isall about the javadocs are opaque to me and the msdn docs intro to rxarent helpful eitheron thu dec at pm cloudbees pull request builder plugin wrote rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests success this pull request looks good — reply to this email directly or view it on githubhttps githubcom netflix rxjava pull issuecomment david m grossplp consulting im not sure myself i think it allows transforming the subjects output without the danger of resubscribing to the uplink source i couldnt find any tests for them in the rxnet sources
635,1,0,0,0,0,0,1,0,operators switchcase case ifthen if dowhile dowhile whiledo w hile issue no msdn references available rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
635,1,0,0,1,1,1,1,1,operators switchcase case ifthen if dowhile dowhile whiledo w hile issue no msdn references available rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
657,1,0,0,0,0,0,1,0,operations aggregate average and sum with selector issue remarks i know we can combine ops to get one of the new aggregate variant but i think it might be worth having a direct version which avoids nesting several layers of observables observers and subscriptions the averageinteger and suminteger and the other types are handy if we want to use chained operation invocations with less overhead javaobservablefrom a bb ccc suminteger s slength toblockingobservable single instead of javaobservablesumintegers observablefrom a bb ccc map s slength toblockingobservable single rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this establishes or strengthens a precedent of adding a large number of helper methods for very specific cases to the already massive observable so id like to explore one of two routes move mathematical operators to a separate observable in rxobservablenumericalobservable or something like that move them into a contrib module like https githubcom netflix rxjava blob master rxjava contrib rxjava string src main java rx observables stringobservablejava id go for numericalobservable on this one as it is primarily useful out of box whereas futures may go into contrib
657,1,0,0,1,0,1,1,1,operations aggregate average and sum with selector issue remarks i know we can combine ops to get one of the new aggregate variant but i think it might be worth having a direct version which avoids nesting several layers of observables observers and subscriptions the averageinteger and suminteger and the other types are handy if we want to use chained operation invocations with less overhead javaobservablefrom a bb ccc suminteger s slength toblockingobservable single instead of javaobservablesumintegers observablefrom a bb ccc map s slength toblockingobservable single rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this establishes or strengthens a precedent of adding a large number of helper methods for very specific cases to the already massive observable so id like to explore one of two routes move mathematical operators to a separate observable in rxobservablenumericalobservable or something like that move them into a contrib module like https githubcom netflix rxjava blob master rxjava contrib rxjava string src main java rx observables stringobservablejava id go for numericalobservable on this one as it is primarily useful out of box whereas futures may go into contrib
667,1,0,0,0,0,0,1,0,operators skip skiplast take with time rebased version without the drain scheduler variant fixes issue mentioned in as well rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
667,1,0,0,0,1,1,1,1,operators skip skiplast take with time rebased version without the drain scheduler variant fixes issue mentioned in as well rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
733,1,0,0,0,0,0,1,0,buffer with observable boundary mentined in issue overload where the user can specify the capacity of the internal buffer rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
733,1,0,1,0,0,1,1,1,buffer with observable boundary mentined in issue overload where the user can specify the capacity of the internal buffer rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
734,1,0,0,0,0,0,1,0,delay with subscription and item delaying observables listed in note onerror and oncompleted events of the source are immediately propagated and will prevent emitting any pending values rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
734,1,0,1,0,0,0,1,0,delay with subscription and item delaying observables listed in note onerror and oncompleted events of the source are immediately propagated and will prevent emitting any pending values rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
735,1,0,0,0,0,0,1,0,window with observable boundary listed in issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
735,1,1,0,1,1,1,1,1,window with observable boundary listed in issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
736,1,0,0,0,0,0,1,0,mergemap with iterable and resultselector overloads listed in forgot an overload rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good looks these operators can be implemented by composing the existing operators i agree there is likely some simplification we can do on this but im going to merge as the public apis look correct and unit tests are good we can iterate on the implementation internally
736,1,0,0,0,1,1,1,1,mergemap with iterable and resultselector overloads listed in forgot an overload rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good looks these operators can be implemented by composing the existing operators i agree there is likely some simplification we can do on this but im going to merge as the public apis look correct and unit tests are good we can iterate on the implementation internally
738,1,0,0,0,0,0,1,0,publish and publishlast overloads listed in these operators use the existing multicast and subject infrastructure so i omitted any direct tests rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
738,1,0,0,0,1,1,1,1,publish and publishlast overloads listed in these operators use the existing multicast and subject infrastructure so i omitted any direct tests rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
740,1,0,0,0,0,0,1,0,timeout with selector overloads listed in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
740,1,0,0,0,0,1,1,0,timeout with selector overloads listed in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
741,1,0,0,0,0,0,1,0,zip with iterable removed old aggregator version and updated tests listed in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good these are instance methods none of our zip operators are at the instance level i would have thought wed add the zip overloads with iterable to match the existing static ones i went according to where there was zip overloads without strike through agreed on the overloads but they should be static correct no the intention was to chain them to an existing observable javaobservablefrom zip arraysaslist a b a b makes sense wasnt sure as it was different than all the other zip methods thanks for confirming
741,1,0,0,0,0,0,1,0,zip with iterable removed old aggregator version and updated tests listed in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good these are instance methods none of our zip operators are at the instance level i would have thought wed add the zip overloads with iterable to match the existing static ones i went according to where there was zip overloads without strike through agreed on the overloads but they should be static correct no the intention was to chain them to an existing observable javaobservablefrom zip arraysaslist a b a b makes sense wasnt sure as it was different than all the other zip methods thanks for confirming
825,1,0,0,0,0,0,1,0,issue commenting out the call to attachcallingthreadstack when co nstructing a compositeexception should i merge this manually into
825,1,0,0,0,1,1,1,1,issue commenting out the call to attachcallingthreadstack when co nstructing a compositeexception should i merge this manually into
860,1,0,0,0,0,0,1,0,fixing the generics for merge and lift ive tracked down to two problems the first is that lift wasnt quite right i changed the lift argument from operator to operator unfortunately java wont let us hide that away in the operator class so we have to redeclare that everywhere in the debug hooks but its still better than the alternative of having to use the full func super subscriber everywherethe second problem was in the return type of merge observable because of operators like merge observable t observable t the only thing that can be said for the return type is that it is also observable but at the moment it is returning observable this pull request changes all of them and leads to some silly return values like observable a bobservable x merge a b rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request we should avoid return types such as a rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good akarnokd you were right the return type change wasnt necessary ive reverted and rebased the branch to clean out all the mistakes rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i almost did a pr on this when i saw you now did the same thing as i but was it necessary to change the debugs as well yes there is a plugin hook inside lift that the debug plugin implements and spreads from there
860,1,0,0,0,1,1,1,1,fixing the generics for merge and lift ive tracked down to two problems the first is that lift wasnt quite right i changed the lift argument from operator to operator unfortunately java wont let us hide that away in the operator class so we have to redeclare that everywhere in the debug hooks but its still better than the alternative of having to use the full func super subscriber everywherethe second problem was in the return type of merge observable because of operators like merge observable t observable t the only thing that can be said for the return type is that it is also observable but at the moment it is returning observable this pull request changes all of them and leads to some silly return values like observable a bobservable x merge a b rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request we should avoid return types such as a rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good akarnokd you were right the return type change wasnt necessary ive reverted and rebased the branch to clean out all the mistakes rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i almost did a pr on this when i saw you now did the same thing as i but was it necessary to change the debugs as well yes there is a plugin hook inside lift that the debug plugin implements and spreads from there
955,1,0,0,1,0,1,1,1,fixed replaysubject leak fix for issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i can confirm this fixes for me thanks akarnokd this might in fact be the final nail in the coffin for any workarounds we used on android to prevent activities from leaking this is great benjchristensen do you think we could get this in for that would be fantastic it would simplify reasoning about requirements for android operators a lot since the use of cache and replay is quite common on android and some design decisions for operatorobservefromandroidcomponent were made purely due to the existence of this bug no one actually thought to question the correctness of the underlying operator back then hah
955,1,0,0,0,0,0,1,0,fixed replaysubject leak fix for issue rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i can confirm this fixes for me thanks akarnokd this might in fact be the final nail in the coffin for any workarounds we used on android to prevent activities from leaking this is great benjchristensen do you think we could get this in for that would be fantastic it would simplify reasoning about requirements for android operators a lot since the use of cache and replay is quite common on android and some design decisions for operatorobservefromandroidcomponent were made purely due to the existence of this bug no one actually thought to question the correctness of the underlying operator back then hah
964,1,0,0,1,0,1,1,1,subjectsubscriptionmanager fix fix for if an already unsubscribed subscriber is added the subscription function ends up in an infinite loop as the inner unsubscription logic changes the state to another object before the outer state machine continues the outer state machine loop now exits if unsubscription happened and doesnt attempt to modify the state the removeobserver method is changed so that if the subscription to be removed is not in the array it returns this instead of an unnecessary copy in addition copyof calls have been replaced by arraycopy to avoid reflective array creation rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request interesting bug thanks for the fixas for the test failure looks like testnumberofthreadsonscheduledmerge has become non deterministic as a result of recent changes not your commit
964,1,0,1,0,0,0,1,0,subjectsubscriptionmanager fix fix for if an already unsubscribed subscriber is added the subscription function ends up in an infinite loop as the inner unsubscription logic changes the state to another object before the outer state machine continues the outer state machine loop now exits if unsubscription happened and doesnt attempt to modify the state the removeobserver method is changed so that if the subscription to be removed is not in the array it returns this instead of an unnecessary copy in addition copyof calls have been replaced by arraycopy to avoid reflective array creation rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request interesting bug thanks for the fixas for the test failure looks like testnumberofthreadsonscheduledmerge has become non deterministic as a result of recent changes not your commit
965,0,0,0,0,0,0,1,0,bugfix chain subscription in timeoutsubscriber and serializedsubscriber this pr chains subscription in timeoutsubscriber and serializedsubscriber found by rbramw thanks for your unit tests rbramw rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i have no idea why rxoperatorsoperationparallelmergetesttestnumberofthreadsonscheduledmerge failed in my local machine it fails sometimes is it nondeterministic rebased rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you
965,1,0,0,0,1,1,1,1,bugfix chain subscription in timeoutsubscriber and serializedsubscriber this pr chains subscription in timeoutsubscriber and serializedsubscriber found by rbramw thanks for your unit tests rbramw rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i have no idea why rxoperatorsoperationparallelmergetesttestnumberofthreadsonscheduledmerge failed in my local machine it fails sometimes is it nondeterministic rebased rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you
972,1,0,0,1,0,0,1,0,fixed deadlock in subjects operatorcache fix for issue i had to rewrite operatorcache to allow testing for deadlocks in all subject types the terminationlatch was unnecessarily waiting for existing subscribers to deliver their termination events which caused deadlock with repeat treating subjects as internal implementations was not necessary to fix the problem rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i dont understand these changes yet but on first review they are very awkward as the subjectsubscriptionmanager methods now both invoke a function and return a collection true the rewritten subjects dont require an action they are fine with action the changes had to be made since the countdonwlatch logic acted as a synchronization block and emitting events while holding locks is prone to deadlocks as the associated issue demonstrates ah holding the lock is the issue we should find a way of doing that without the latches at all as it is blocking the latch has its use because once the state has been swapped to terminal state we still need to perform some tasks on any related state within the particular subject before client notifications can resume usually it is to set the last event which then will be available to newcomers i havent merged this yet as i need to spend time better understanding this and the impact on design since this has conflicts and i did some cleanup based on our discussion above ive opened https githubcom netflix rxjava pull for merging this
972,1,0,0,0,1,1,1,1,fixed deadlock in subjects operatorcache fix for issue i had to rewrite operatorcache to allow testing for deadlocks in all subject types the terminationlatch was unnecessarily waiting for existing subscribers to deliver their termination events which caused deadlock with repeat treating subjects as internal implementations was not necessary to fix the problem rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good i dont understand these changes yet but on first review they are very awkward as the subjectsubscriptionmanager methods now both invoke a function and return a collection true the rewritten subjects dont require an action they are fine with action the changes had to be made since the countdonwlatch logic acted as a synchronization block and emitting events while holding locks is prone to deadlocks as the associated issue demonstrates ah holding the lock is the issue we should find a way of doing that without the latches at all as it is blocking the latch has its use because once the state has been swapped to terminal state we still need to perform some tasks on any related state within the particular subject before client notifications can resume usually it is to set the last event which then will be available to newcomers i havent merged this yet as i need to spend time better understanding this and the impact on design since this has conflicts and i did some cleanup based on our discussion above ive opened https githubcom netflix rxjava pull for merging this
1073,1,0,0,0,0,0,1,0,operatorbuffer operator buffer split into variantsissue there are some important behavioral changes compared to the original versions when an onerror event appears from anywhere the currently accumulated chunk s are _not_ emitted before the error is propagated this conforms with rx design guideline the observable returned by the func inside the buffer func now is used as long as possible and whenever it fires an event a new buffer chunk is started the func is called only once per subscriber the original called it and subscribed to it all the time causing all increasing resubscriptions rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1073,1,0,0,1,1,1,1,1,operatorbuffer operator buffer split into variantsissue there are some important behavioral changes compared to the original versions when an onerror event appears from anywhere the currently accumulated chunk s are _not_ emitted before the error is propagated this conforms with rx design guideline the observable returned by the func inside the buffer func now is used as long as possible and whenever it fires an event a new buffer chunk is started the func is called only once per subscriber the original called it and subscribed to it all the time causing all increasing resubscriptions rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1079,1,0,0,0,0,0,1,0,operatorcombinelatest operator combinelatestissue remarks added an overload to observable which accepts any number of sources not sure why it wasnt exposed before perhaps removed relying on just the sos onnext is not enough as leaving the synchronized block allows reordering of onnext calls therefore the combinator uses the trick from serializedobserver to make sure the combination order is consistent with whe winning of the synchronization race rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1079,1,0,0,1,1,1,1,1,operatorcombinelatest operator combinelatestissue remarks added an overload to observable which accepts any number of sources not sure why it wasnt exposed before perhaps removed relying on just the sos onnext is not enough as leaving the synchronized block allows reordering of onnext calls therefore the combinator uses the trick from serializedobserver to make sure the combination order is consistent with whe winning of the synchronization race rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1083,1,0,0,0,0,0,1,0,operatordematerialize operator dematerializeissue two notes since the dematerialize is an instance method there is no correct type parametrization for the operator therefore i just used a raw version in the call the original dematerialize could send out two oncompleted or an onerror followed by an oncompleted because the materialize always adds an oncompleted after the raw events this affected operators due to unsafesubscribe this new version ensures this doesnt happen rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1083,1,0,1,0,0,0,1,0,operatordematerialize operator dematerializeissue two notes since the dematerialize is an instance method there is no correct type parametrization for the operator therefore i just used a raw version in the call the original dematerialize could send out two oncompleted or an onerror followed by an oncompleted because the materialize always adds an oncompleted after the raw events this affected operators due to unsafesubscribe this new version ensures this doesnt happen rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1084,1,0,0,0,0,0,1,0,operatordistinct operator distinctissue i didnt port the variant with the custom key comparator because it has been decided to rely on objectequals and there were not exposed anyway rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1084,1,0,0,0,1,1,1,1,operatordistinct operator distinctissue i didnt port the variant with the custom key comparator because it has been decided to rely on objectequals and there were not exposed anyway rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1085,1,0,0,0,0,0,1,0,operatordistinctuntilchanged operator distinctuntilchangedissue again i havent ported the custom comparator version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
1085,1,1,0,1,1,1,1,1,operatordistinctuntilchanged operator distinctuntilchangedissue again i havent ported the custom comparator version rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
1095,1,0,0,0,0,0,1,0,operatorgroupbyuntil operator groupbyuntilfor issue while rewriting ive noticed a common pitfall with the observation of the duration many other operators react to onnext or oncompleted but one should only expire once ill review my recent operators and post a separate pr if any rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
1095,1,0,0,0,1,1,1,1,operatorgroupbyuntil operator groupbyuntilfor issue while rewriting ive noticed a common pitfall with the observation of the duration many other operators react to onnext or oncompleted but one should only expire once ill review my recent operators and post a separate pr if any rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
1096,1,0,0,0,0,0,1,0,operatorgroupjoin operator groupjoinfor issue maybe this could be moved to the new joins rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request is this better associated with rxjava joins
1096,1,0,0,1,1,1,1,1,operatorgroupjoin operator groupjoinfor issue maybe this could be moved to the new joins rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request is this better associated with rxjava joins
1103,1,0,0,0,0,0,1,0,operatorjoin operator joinissue remark now that the clientonnext is called outside the synchronization block joint results may appear in arbitrary order in case both left and right observables emit values concurrently i suppose the strict ordering is not really expected here but someone who uses this operator can tell duncani perhaps rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxoperatorsoperatorpivottesttestconcurrencyandserialization needs some fixing rxoperatorsoperatorpivottesttestconcurrencyandserialization needs some fixing yes it does
1103,1,1,0,1,1,1,1,1,operatorjoin operator joinissue remark now that the clientonnext is called outside the synchronization block joint results may appear in arbitrary order in case both left and right observables emit values concurrently i suppose the strict ordering is not really expected here but someone who uses this operator can tell duncani perhaps rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxoperatorsoperatorpivottesttestconcurrencyandserialization needs some fixing rxoperatorsoperatorpivottesttestconcurrencyandserialization needs some fixing yes it does
1120,1,0,0,0,0,0,1,0,operatorsequenceequal operator sequenceequal lightened the operator but note that notificationlite escaping an operator may cause undesired effects in other operators relying on notificationlite as well rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1120,1,0,0,1,1,1,1,1,operatorsequenceequal operator sequenceequal lightened the operator but note that notificationlite escaping an operator may cause undesired effects in other operators relying on notificationlite as well rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1121,1,0,0,0,0,0,1,0,operatorskiptimed operator skiptimed there was an unexpected dependency in operationtaketimedtest and is surely to cause conflict when taketimed is rewritten once all operators have been merged i suggest we create a primary testexception and rewrite tests to use it instead of all those custom exception classes everywhere rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
1121,1,0,0,0,0,1,1,1,operatorskiptimed operator skiptimed there was an unexpected dependency in operationtaketimedtest and is surely to cause conflict when taketimed is rewritten once all operators have been merged i suggest we create a primary testexception and rewrite tests to use it instead of all those custom exception classes everywhere rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
1132,1,0,0,0,0,0,1,0,manual merge of several prs merging many prs that were conflictingheroic work by akarnokd and zsxwing on all unit tests are passing on my machine going to let this bake a while before a release other prs on still on their way
1132,1,0,0,0,1,1,1,1,manual merge of several prs merging many prs that were conflictingheroic work by akarnokd and zsxwing on all unit tests are passing on my machine going to let this bake a while before a release other prs on still on their way
1160,1,0,0,0,0,0,1,0,add replay and multicast variants to rxscala this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good id like someone with better scala skills that me to review this please ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good is this reviewed and ready to go it is conflicting against master so can you please rebase this is also conflicting against i would like to rebase it after is merged to master waiting until is merged already merged rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good should this wait until were ready to do i think this one can be merged since has already broken the api headinthebox samuelgruetter do you mind it go for it
1160,1,0,1,1,0,1,1,1,add replay and multicast variants to rxscala this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good id like someone with better scala skills that me to review this please ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good is this reviewed and ready to go it is conflicting against master so can you please rebase this is also conflicting against i would like to rebase it after is merged to master waiting until is merged already merged rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good should this wait until were ready to do i think this one can be merged since has already broken the api headinthebox samuelgruetter do you mind it go for it
1160,1,0,0,0,0,0,1,0,add replay and multicast variants to rxscala this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good id like someone with better scala skills that me to review this please ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good is this reviewed and ready to go it is conflicting against master so can you please rebase this is also conflicting against i would like to rebase it after is merged to master waiting until is merged already merged rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good should this wait until were ready to do i think this one can be merged since has already broken the api headinthebox samuelgruetter do you mind it go for it
1160,1,0,0,0,1,1,1,1,add replay and multicast variants to rxscala this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good id like someone with better scala skills that me to review this please ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good is this reviewed and ready to go it is conflicting against master so can you please rebase this is also conflicting against i would like to rebase it after is merged to master waiting until is merged already merged rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good should this wait until were ready to do i think this one can be merged since has already broken the api headinthebox samuelgruetter do you mind it go for it
1185,1,0,0,1,0,0,1,0,behavior subject time gap fix based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request wow this is quite the change i need fresher eyes on this one so will come back to it thank you very much for tackling this this is non trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for behaviorsubject and sharing the logic across all of the subject implsvery nice work
1185,1,0,0,0,1,1,1,1,behavior subject time gap fix based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request wow this is quite the change i need fresher eyes on this one so will come back to it thank you very much for tackling this this is non trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for behaviorsubject and sharing the logic across all of the subject implsvery nice work
1185,1,0,0,1,0,0,1,0,behavior subject time gap fix based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request wow this is quite the change i need fresher eyes on this one so will come back to it thank you very much for tackling this this is non trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for behaviorsubject and sharing the logic across all of the subject implsvery nice work
1185,1,0,0,0,1,1,1,1,behavior subject time gap fix based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request wow this is quite the change i need fresher eyes on this one so will come back to it thank you very much for tackling this this is non trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for behaviorsubject and sharing the logic across all of the subject implsvery nice work
1185,1,0,0,1,0,0,1,0,behavior subject time gap fix based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request wow this is quite the change i need fresher eyes on this one so will come back to it thank you very much for tackling this this is non trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for behaviorsubject and sharing the logic across all of the subject implsvery nice work
1185,1,0,0,1,1,1,1,1,behavior subject time gap fix based on discussions in ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue and a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request wow this is quite the change i need fresher eyes on this one so will come back to it thank you very much for tackling this this is non trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for behaviorsubject and sharing the logic across all of the subject implsvery nice work
1195,1,0,0,0,0,0,1,0,swingscheduler allow negative schedule fix for issue the new scheduleperiodic may calculate negative delay times if the next task was already due this change will allow negative timing on the swing scheduler indicating an immediate schedule rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i suggest adding some comments in the schedulerschedule and schedulescheduleperiodically about negative timing eg negative delay time should be regarded as it would be helpful for anyone who wants to implement special scheduler ive added extra comments rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
1195,1,0,0,0,0,0,1,0,swingscheduler allow negative schedule fix for issue the new scheduleperiodic may calculate negative delay times if the next task was already due this change will allow negative timing on the swing scheduler indicating an immediate schedule rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request i suggest adding some comments in the schedulerschedule and schedulescheduleperiodically about negative timing eg negative delay time should be regarded as it would be helpful for anyone who wants to implement special scheduler ive added extra comments rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request
1236,1,0,0,0,0,0,1,0,compositesubscription with atomic field updater this pr is aimed at to reduce unnecessary memory overhead in frequently used classes this change in compositesubscription saves about bytes per instancein addition the field updaters may be faster by about for small adds and removals ive changed the implementation of unsubscribe to use getandset which leverages platform intrinsics and is usually compiled to a single instruction this makes unsubscribing a tiny bit faster and thus reducing latency in benchmarks that only pass on single element around rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1236,1,0,0,1,1,1,1,1,compositesubscription with atomic field updater this pr is aimed at to reduce unnecessary memory overhead in frequently used classes this change in compositesubscription saves about bytes per instancein addition the field updaters may be faster by about for small adds and removals ive changed the implementation of unsubscribe to use getandset which leverages platform intrinsics and is usually compiled to a single instruction this makes unsubscribing a tiny bit faster and thus reducing latency in benchmarks that only pass on single element around rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1237,0,0,0,0,0,0,1,0,safesubscriber memory reduction for this saves bytes per instance rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks i think we probably should do this all over i havent merged my change to compositesubscription yet so that needs to be done as well oh you already have a pr for compositesubscription as well akarnokd benjchristensen why was there a change from boolean to int there is no atomicbooleanfieldupdater and the nearest thing is an atomicintegerfieldupdater since classes are padded to byte boundaries anyway moving from byte boolean to byte integer is no extra overhead oh i just checked you are right that explains a lot but i have no clue why they didnt add that
1237,1,0,0,1,1,1,1,1,safesubscriber memory reduction for this saves bytes per instance rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks i think we probably should do this all over i havent merged my change to compositesubscription yet so that needs to be done as well oh you already have a pr for compositesubscription as well akarnokd benjchristensen why was there a change from boolean to int there is no atomicbooleanfieldupdater and the nearest thing is an atomicintegerfieldupdater since classes are padded to byte boundaries anyway moving from byte boolean to byte integer is no extra overhead oh i just checked you are right that explains a lot but i have no clue why they didnt add that
1269,1,0,0,0,0,0,1,0,fix the bug that int overflow can bypass the range check fix the bug mentioned in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1269,1,0,0,1,1,1,1,1,fix the bug that int overflow can bypass the range check fix the bug mentioned in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1271,1,0,0,0,0,0,1,0,operator retry with predicate operator retry with predicate overload for issue the func version is simply named retry the func version is named retryif due to lack of ideas and because to avoid overload resolution issues i also had to open up the operatorretrytest classes a bit rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks for implementing this should we just keep one of those two instead of both so we dont have to deal with the naming overload issue i dont know which one to keep probably the one that includes attempts this is the advanced use case for retry so it should probably provide both attempts and error it just feels awkward to need to come up with a new name just so we can have one with attempts and one without headinthebox do you have an opinion on this agree with benjchristensen if you are using this one you should know what you are doing rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks akarnokd and headinthebox for the review
1271,1,0,1,0,0,0,1,0,operator retry with predicate operator retry with predicate overload for issue the func version is simply named retry the func version is named retryif due to lack of ideas and because to avoid overload resolution issues i also had to open up the operatorretrytest classes a bit rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks for implementing this should we just keep one of those two instead of both so we dont have to deal with the naming overload issue i dont know which one to keep probably the one that includes attempts this is the advanced use case for retry so it should probably provide both attempts and error it just feels awkward to need to come up with a new name just so we can have one with attempts and one without headinthebox do you have an opinion on this agree with benjchristensen if you are using this one you should know what you are doing rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks akarnokd and headinthebox for the review
1272,1,0,0,1,0,1,1,0,executorscheduler to wrap an executor for issue and this implementation should conform with the scheduler contract except it is not possible to avoid thread hopping dont worry the tasks execute serially but maybe not on the same physical thread few open improvement possibilities usage of mpsclinkedqueue once available a better performing subscription container for this kind of queue drain task tracking instead of compositesubscription ability to remove a subscription from a compositesubscription without it calling unsubscribe on the removed subscription á la multipleassignmentsubscriptionset rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks akarnokd for this looks good for a first cut the trade offs thread hopping are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later
1272,1,0,0,1,1,1,1,1,executorscheduler to wrap an executor for issue and this implementation should conform with the scheduler contract except it is not possible to avoid thread hopping dont worry the tasks execute serially but maybe not on the same physical thread few open improvement possibilities usage of mpsclinkedqueue once available a better performing subscription container for this kind of queue drain task tracking instead of compositesubscription ability to remove a subscription from a compositesubscription without it calling unsubscribe on the removed subscription á la multipleassignmentsubscriptionset rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks akarnokd for this looks good for a first cut the trade offs thread hopping are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later
1272,1,0,0,1,0,1,1,0,executorscheduler to wrap an executor for issue and this implementation should conform with the scheduler contract except it is not possible to avoid thread hopping dont worry the tasks execute serially but maybe not on the same physical thread few open improvement possibilities usage of mpsclinkedqueue once available a better performing subscription container for this kind of queue drain task tracking instead of compositesubscription ability to remove a subscription from a compositesubscription without it calling unsubscribe on the removed subscription á la multipleassignmentsubscriptionset rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks akarnokd for this looks good for a first cut the trade offs thread hopping are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later
1272,1,0,0,1,0,1,1,1,executorscheduler to wrap an executor for issue and this implementation should conform with the scheduler contract except it is not possible to avoid thread hopping dont worry the tasks execute serially but maybe not on the same physical thread few open improvement possibilities usage of mpsclinkedqueue once available a better performing subscription container for this kind of queue drain task tracking instead of compositesubscription ability to remove a subscription from a compositesubscription without it calling unsubscribe on the removed subscription á la multipleassignmentsubscriptionset rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thanks akarnokd for this looks good for a first cut the trade offs thread hopping are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later
1286,1,0,0,0,0,0,1,0,rename some operator classes to onsubscribe as per see discussion in issue numerous classes in the rxoperator package are not implementations of operator but are actually implementations of onsubscribe the classes have been renamed in this pull requestexcuse me not squashing commits looked complicated after doing a pull from upstream in the middle rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1286,1,0,0,1,0,1,1,1,rename some operator classes to onsubscribe as per see discussion in issue numerous classes in the rxoperator package are not implementations of operator but are actually implementations of onsubscribe the classes have been renamed in this pull requestexcuse me not squashing commits looked complicated after doing a pull from upstream in the middle rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1287,1,0,0,0,0,0,1,0,replaysubject remove replaystate chm and related subjectobserver changes for issue this change should help avoid chm garbage although boxed integers will still fly around in addition i moved the notificationlite around to make room for the index ive also removed the callback onadd in publishsubject because it was unnecessary rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good awesome ill try this against the tests i was doing this looks like it does improve performance and object allocation when using my hystrix tests i get this new run ops sec run ops sec run ops sec run ops sec run ops sec old run ops sec run ops sec run ops sec run ops sec run ops sec new run ops sec run ops sec run ops sec run ops sec run ops sec old run ops sec run ops sec run ops sec run ops sec run ops sec old old https cloudgithubusercontentcom assets f b b e e b f bddb png new new https cloudgithubusercontentcom assets f e e f a c c png now i need to go give hystrix some love too as there are some obvious things to go solve therethanks akarnokd for getting to this so quickly
1287,1,0,0,1,0,1,1,1,replaysubject remove replaystate chm and related subjectobserver changes for issue this change should help avoid chm garbage although boxed integers will still fly around in addition i moved the notificationlite around to make room for the index ive also removed the callback onadd in publishsubject because it was unnecessary rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good awesome ill try this against the tests i was doing this looks like it does improve performance and object allocation when using my hystrix tests i get this new run ops sec run ops sec run ops sec run ops sec run ops sec old run ops sec run ops sec run ops sec run ops sec run ops sec new run ops sec run ops sec run ops sec run ops sec run ops sec old run ops sec run ops sec run ops sec run ops sec run ops sec old old https cloudgithubusercontentcom assets f b b e e b f bddb png new new https cloudgithubusercontentcom assets f e e f a c c png now i need to go give hystrix some love too as there are some obvious things to go solve therethanks akarnokd for getting to this so quickly
1347,1,0,0,0,0,1,1,1,allow use of the returned subscription to cancel periodic scheduling the documentation for scheduleperiodically indicates that the returnedsubscription can be used to unsubscribe from the periodic action or tounschedule it if it has not been scheduled yet that was the case onlybefore the first action took place and it was then impossible tounsubscribe using the given subscription although unsubscribing theworker did workthis fixes rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this new version contains a fixed fix by akarnokd rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you
1347,1,0,0,0,0,0,1,0,allow use of the returned subscription to cancel periodic scheduling the documentation for scheduleperiodically indicates that the returnedsubscription can be used to unsubscribe from the periodic action or tounschedule it if it has not been scheduled yet that was the case onlybefore the first action took place and it was then impossible tounsubscribe using the given subscription although unsubscribing theworker did workthis fixes rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good this new version contains a fixed fix by akarnokd rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good thank you
1367,0,0,0,0,0,0,1,0,fix the bug that flatmap swallows onerrornotimplementedexception fixed not sure if any other place will swallow onerrornotimplementedexception or the fatal errors rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good hi allim new here so i may be missing something but im afraid that this issue should not be closed just yetindeed it looks like there is still a problem if there is more than one flatmap in the chainhere is a unit test to reproduce the bug i used the previous unit test that was added as part of this bugfix and simply added an additional flatmap stage test expected onerrornotimplementedexceptionclass public void testsubscribewithoutonerror { observablejust a b flatmap s observablejust s s flatmap s observableerror new exception test foreach systemout println } the output i get is nothing and no error eithershould i submit a new issue or can you reopen this onethanks think the issue still exists there needs to be clear functionality by which exception can be cleanly trapped and rethrown if needed user preference to upper layersthanks
1367,1,0,0,0,0,0,1,0,fix the bug that flatmap swallows onerrornotimplementedexception fixed not sure if any other place will swallow onerrornotimplementedexception or the fatal errors rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good hi allim new here so i may be missing something but im afraid that this issue should not be closed just yetindeed it looks like there is still a problem if there is more than one flatmap in the chainhere is a unit test to reproduce the bug i used the previous unit test that was added as part of this bugfix and simply added an additional flatmap stage test expected onerrornotimplementedexceptionclass public void testsubscribewithoutonerror { observablejust a b flatmap s observablejust s s flatmap s observableerror new exception test foreach systemout println } the output i get is nothing and no error eithershould i submit a new issue or can you reopen this onethanks think the issue still exists there needs to be clear functionality by which exception can be cleanly trapped and rethrown if needed user preference to upper layersthanks
1393,1,0,0,0,0,0,1,0,add cache int capacity to observable proposed patch for rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1393,1,1,0,1,1,1,1,1,add cache int capacity to observable proposed patch for rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1422,1,0,1,0,0,0,1,0,concurrency fixes for rxringbuffer & merge possible fix for i was unable to exactly reproduce the issue but was able to create a possibly related one this fixes itit also simplifies the logic and code somewhat at a possible small performance cost for these rooperatormergeperfmerge syncstreamofn thrpt ops srooperatormergeperfmerge syncstreamofn thrpt ops srooperatormergeperfmergensyncstreamsofn thrpt ops s
1422,1,0,0,1,1,1,1,1,concurrency fixes for rxringbuffer & merge possible fix for i was unable to exactly reproduce the issue but was able to create a possibly related one this fixes itit also simplifies the logic and code somewhat at a possible small performance cost for these rooperatormergeperfmerge syncstreamofn thrpt ops srooperatormergeperfmerge syncstreamofn thrpt ops srooperatormergeperfmergensyncstreamsofn thrpt ops s
1431,1,0,0,0,0,1,1,0,compositeexception fix for android fixes revert changes from f ae aa remove duplicated causes in stack trace chain rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request this will take a while to review as those changes were done for good reason maybe i should provide some explanation about what was wrong with the previous implementationheres how most of java programmers will rethrow an exception if not handled observablecreate subscriber subscriber subscriberonerror new runtimeexception ex observeon androidschedulersmainthread subscribeon schedulersio subscribe object { } error { handle some exceptions rethrow unhandled throw new runtimeexception ex error } now we have compositeexception with two nested exceptions ex ex which cause is ex the previous implementation will create a loop in this situation onerrorfailedexception compositeexception ex ex ex ex ive provided test for this scenario and additional method to remove throwables which are causes of another throwable it means ex will not be attached as a cause of the compositeexception because it is a cause of ex so it will be automatically attached with ex and printed in the stack trace output onerrorfailedexception compositeexception ex ex cc mattrjacobs matt can you get involved here now that youre back since you have the most recent history and context in this code discussion at https githubcom netflix rxjava issues given the new constraint that android does something unexpected to me anyway with the set of printstacktrace methods its probably preferable to modify the structure of compositeexception so that any arbitrary output of a compositeexception is correct relying on the implementation details of precisely how android does the printstacktrace doesnt protect us from any other edge cases so i generally think the sort of change proposed by tomrozb is good im validating what the output looks like in our prod env now thanks tomrozb for the pr im merging this now thanks for the clear explanation and fix with a test tomrozb thanks mattrjacobs and tomrozb
1431,1,0,0,0,1,1,1,1,compositeexception fix for android fixes revert changes from f ae aa remove duplicated causes in stack trace chain rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests failurelooks like theres a problem with this pull request this will take a while to review as those changes were done for good reason maybe i should provide some explanation about what was wrong with the previous implementationheres how most of java programmers will rethrow an exception if not handled observablecreate subscriber subscriber subscriberonerror new runtimeexception ex observeon androidschedulersmainthread subscribeon schedulersio subscribe object { } error { handle some exceptions rethrow unhandled throw new runtimeexception ex error } now we have compositeexception with two nested exceptions ex ex which cause is ex the previous implementation will create a loop in this situation onerrorfailedexception compositeexception ex ex ex ex ive provided test for this scenario and additional method to remove throwables which are causes of another throwable it means ex will not be attached as a cause of the compositeexception because it is a cause of ex so it will be automatically attached with ex and printed in the stack trace output onerrorfailedexception compositeexception ex ex cc mattrjacobs matt can you get involved here now that youre back since you have the most recent history and context in this code discussion at https githubcom netflix rxjava issues given the new constraint that android does something unexpected to me anyway with the set of printstacktrace methods its probably preferable to modify the structure of compositeexception so that any arbitrary output of a compositeexception is correct relying on the implementation details of precisely how android does the printstacktrace doesnt protect us from any other edge cases so i generally think the sort of change proposed by tomrozb is good im validating what the output looks like in our prod env now thanks tomrozb for the pr im merging this now thanks for the clear explanation and fix with a test tomrozb thanks mattrjacobs and tomrozb
1559,1,0,0,1,0,0,1,0,more consistent hooks for scheduler plugins this is a rework of deprecated rxjavadefaultschedulers and rxjavadefaultschedulersdefault i think these names are confusing added rxjavaschedulershook ability to override entire schedulers from scratch ability to decorate action before submission to schedulerthe main change from is the decoration of action instead of runnable action is an improvement as all schedulers must handle these whereas not all schedulers handle runnables rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good reviewed with benjchristensen and merging
1559,1,0,0,0,1,1,1,1,more consistent hooks for scheduler plugins this is a rework of deprecated rxjavadefaultschedulers and rxjavadefaultschedulersdefault i think these names are confusing added rxjavaschedulershook ability to override entire schedulers from scratch ability to decorate action before submission to schedulerthe main change from is the decoration of action instead of runnable action is an improvement as all schedulers must handle these whereas not all schedulers handle runnables rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good reviewed with benjchristensen and merging
1602,1,0,0,0,0,0,1,0,make retrywhen the same with the scheduler as the retrywhen without the scheduler came up in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1602,1,0,0,0,1,1,1,1,make retrywhen the same with the scheduler as the retrywhen without the scheduler came up in rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good rxjava pull requests https netflixosscicloudbeescom job rxjava pull requests successthis pull request looks good
1705,0,0,0,0,0,1,1,0,issue fix null emitting combinelatest benjchristensen lgtm thanks for fixing this stupid bug on my partit should have been javabuffergetvalue o orbufferaccept o child your fix does the same thing benjchristensen just saw that this didnt make it into do i need to do something to make sure it gets into cant tell how you guys are managing the various release branches this was merged into x and is in the releases it was in rc https githubcom reactivex rxjava releases tag v rc if you want it also in the x releases go ahead and submit another pr against that branch x is where most of the focus is as we work towards the final release scheduled for november th ah i tried switching us over to rc but one of our dependencies uses the comnetflix packaging and android wont let us include both in our apk dex complains about duplicate classes https githubcom reactivex rxjava pull one of our dependencies uses the comnetflix packagingyes its going to be a painful one time migration to get onto once we hit final ill encourage everyone to do so
1705,1,0,0,0,1,1,1,1,issue fix null emitting combinelatest benjchristensen lgtm thanks for fixing this stupid bug on my partit should have been javabuffergetvalue o orbufferaccept o child your fix does the same thing benjchristensen just saw that this didnt make it into do i need to do something to make sure it gets into cant tell how you guys are managing the various release branches this was merged into x and is in the releases it was in rc https githubcom reactivex rxjava releases tag v rc if you want it also in the x releases go ahead and submit another pr against that branch x is where most of the focus is as we work towards the final release scheduled for november th ah i tried switching us over to rc but one of our dependencies uses the comnetflix packaging and android wont let us include both in our apk dex complains about duplicate classes https githubcom reactivex rxjava pull one of our dependencies uses the comnetflix packagingyes its going to be a painful one time migration to get onto once we hit final ill encourage everyone to do so
1742,1,0,0,0,0,1,1,1,emptyobserver and testobserver remove emptyobserver as it was confusing compared to observersempty fixes make testobserver not throw onerrornotimplemented if a delegate is not provided fixes
1742,1,0,0,0,1,1,1,1,emptyobserver and testobserver remove emptyobserver as it was confusing compared to observersempty fixes make testobserver not throw onerrornotimplemented if a delegate is not provided fixes
1742,1,0,0,0,0,1,1,1,emptyobserver and testobserver remove emptyobserver as it was confusing compared to observersempty fixes make testobserver not throw onerrornotimplemented if a delegate is not provided fixes
1761,0,0,0,0,0,1,1,0,issue fix null emitting combinelatest same as https githubcom reactivex rxjava pull but for the \ folks
1767,1,0,0,1,0,1,1,0,executorscheduler delivers uncaught exceptions instead of swallowing unhandled errors executorscheduler delivers themto the executing threads uncaughtexceptionhandlerthis addresses the same issue as reactivex rxjava but forexecutorscheduler which does not used scheduledaction
1777,1,0,0,1,0,1,1,0,excluding things from the javadoc for one of the sub issues in exclude rxinternalexclude rxjavaerrorhandlerdefault by deleting it
1784,1,0,0,0,0,0,1,0,publish with backpressure implementation of publish with backpressure https githubcom reactivex rxjava issues this moves away from using the multicast operator and publishsubject as per discussion in and
1802,1,0,0,1,0,1,1,1,add hasobservers method to subjects as per https githubcom reactivex rxjava issues serializedsubject now keeps track of the actual subjectbufferuntilsubscriber synchronizes on the state guard looks good thanks simonbasle
1866,1,0,0,1,0,0,1,0,fix memory leak in bounded replaysubject due to retaining the node index indefinitely once the subscriber caught upfor issue this test failed both times rxinternaloperatorsoperatormergedelayerrortest testerrorinparentobservabledelayed failed orgmockitoexceptionsverificationtoolittleactualinvocations stringobserveronnext hello wanted times at rxinternaloperatorsoperatormergedelayerrortesttesterrorinparentobservabledelayed operatormergedelayerrortestjava but was time at rxobserverstestobserveronnext testobserverjava at rxinternaloperatorsoperatormergedelayerrortesttesterrorinparentobservabledelayed operatormergedelayerrortestjava no idea why or if its related but id like to understand before merging this i dont think mergedelayerror uses replaysubject i dont fully understand the operatormerge but it contains a lot of mutable variables and synchronized blocks and im not sure but i found some anomalies in https githubcom reactivex rxjava blob x src main java rx internal operators operatormergejaval it synchronizes on the mergeproducers this but reads the mergesubscribers wip field which generally is accessed through the mergesubscribers this same seems to be true for the scalarvaluequeue ive tested things locally and its working for me i opened an issue to track the issue you brought up regarding merge https githubcom reactivex rxjava issues
1884,1,0,0,0,0,0,1,0,fix scan reduce collect factory ambiguity this puts the seed factory on collect and removes it from scan and reduce due to ambiguitysee https githubcom reactivex rxjava pull and https githubcom reactivex rxjava issues the collect api was already very close so this fixes it to use a seed factory so the signature is now javapublic final observable collect func statefactory final action collector { i remove the factory overloads for scan and reduce due to the issue in related to generics type erasure and lambdas causing ambiguity and compilation failureswe may want to add at least a scan impl in the future with a seed factory but it will need a different name if we do such as scanto i dont want to do that now for so well need to revisit that for with more time to think about it this code is now possible java observablerange collect new arraylist list i { listadd i } foreach systemout println this will no longer compile java observablerange scan new arraylist list i { listadd i return list } foreach systemout println
1922,1,0,0,0,0,0,1,0,set removeoncancelpolicy on the threadpool if supported this should solve the task retention problem of unused timeout tasks mentioned in i know java scheduledthreadpoolexecutor has the setremoveoncancelpolicy and i remember seeing it in android although i cant tell from which api versionin java this cant be solved without rewriting the entire scheduler or using a backported executor akarnokd cool thanks for whipping this up so quickly since rxjava supports java we need to fix that too right i looked at the packages of jsr _ but couldnt find one that ports this flag back to java benjchristensen are there plans to fix this for java too since we technically support it or do we mark it as a limitation and people that are hit by this need to go to java im asking because we have lots of users on java and some of the requests have s timeouts im open to a fix that works for java if someone can suggest what to do and or submit a pr i personally dont have the time to tackle this anytime soon but would accept the change if it solves the problem without breaking anything else including performance for java benjchristensen okay thanks for the info ill tackle it if customers start to complain for now i also think its not as high priority since technically jdk is eol anyway yes the strongest reason actually that rxjava supports java rather than as the minimum is for android support if it becomes an issue for your customers and you want to tackle this ill happily review discuss and merge youd need to backport the java scheduledthreadpoolexecutor and a bunch of helper classes i looked for a backport on doug leas site but no luck how about calling scheduledthreadpoolexecutorremove runnable task in unsubscribe for java although its a o n action while its o log n in java its better than oom that doesnt work on submit tasks because they are wrapped maybe a better option is to have purge be called periodically that doesnt work on submit tasks because they are wrappedthe returned scheduledfuture is exactly the object in the workqueue
1973,1,0,0,0,0,1,1,0,fixed test issuing non serialized messages to the subject should resolve the test failure of when the main part of the test succeded an oncompleted was sent out from the main thread which was not serialized in respect to the onnext issued from the worker thread therefore two replay was attempted sometimes at first the caughtup was seen false the replay was entered but the next instruction cleared the index causing the illegalstateexception failed in https travis ciorg reactivex rxjava builds rxsubjectsreplaysubjectboundedconcurrencytest testreplaysubjectemissionsubscriptionrace failed javalangnullpointerexception at rxsubjectsreplaysubject$boundedstatereplayobserverfromindex replaysubjectjava at rxsubjectsreplaysubject$boundedstatereplayobserver replaysubjectjava at rxsubjectsreplaysubjectcaughtup replaysubjectjava at rxsubjectsreplaysubjectoncompleted replaysubjectjava at rxsubjectsreplaysubjectboundedconcurrencytesttestreplaysubjectemissionsubscriptionrace replaysubjectboundedconcurrencytestjava thanks forgot about the other test class
2465,1,0,0,0,0,1,1,0,scheduledexecutorservice call purge periodically on jdk to avoid cancelled task retentionfirst debated in see also we may want to discuss the naming of system parameters i chose these so rxjava specific properties may be trivially separated ioreactivexrxjavaschedulerjdk purge frequency millis specifies the purge frequency in milliseconds default is ioreactivexrxjavaschedulerjdk purge force forces the use of the purge if set to true even if the setremoveoncancelpolicy is supported the benefit is that removing cancelled tasks now runs on a different thread so the main pool thread doesnt waste time on them the drawback is the retention window can be still to largedo we have a wiki page where such parameters are listed i did run the unit test by forcing a jdk runtime and seems to work merging to allow progress on schedulers
2470,1,0,0,1,0,0,1,0,subject state information methods & bounded replaysubject termination fixthis pr aims to support the requests in and by adding methods to the final subject classes that let developers access in flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code and we will be careful with our observable in the future notificationlite is now extended with two missing value checks isnull and isnext each subject has hascompleted hasthrowable and getthrowable methods however i cant add them to subject because that would be an incompatible api change where applicable getvalue and getthrowable return null instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand there was a chaining bug in the bounded replaysubject because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value since replaysubject can have multiple values ive added size hasanyvalue isempty is taken and getvalues methods to make a snapshot of the current buffer contents whether or not the replaysubject has terminated the usual tolist would wait until the subject has terminated the unrelated operatormergetesttestconcurrency hangs for me for some reason without activity either a buffer bug or a merge bug is in play there ive added a timeout so it doesnt stop the other tests im merging this changes are either internal or annotated with experimental on final classes
2470,1,0,0,1,0,0,1,0,subject state information methods & bounded replaysubject termination fixthis pr aims to support the requests in and by adding methods to the final subject classes that let developers access in flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code and we will be careful with our observable in the future notificationlite is now extended with two missing value checks isnull and isnext each subject has hascompleted hasthrowable and getthrowable methods however i cant add them to subject because that would be an incompatible api change where applicable getvalue and getthrowable return null instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand there was a chaining bug in the bounded replaysubject because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value since replaysubject can have multiple values ive added size hasanyvalue isempty is taken and getvalues methods to make a snapshot of the current buffer contents whether or not the replaysubject has terminated the usual tolist would wait until the subject has terminated the unrelated operatormergetesttestconcurrency hangs for me for some reason without activity either a buffer bug or a merge bug is in play there ive added a timeout so it doesnt stop the other tests im merging this changes are either internal or annotated with experimental on final classes
2471,1,0,0,0,0,0,1,0,fixes npes reported in reactivex by synchronizing queue also adds a unit test for regressionit appears there is a potential race condition if something adds to removes from the pq while its _inside_ the poll operation which is where the exceptions in seem to have actually come from therefore the initial null check didnt really address the original problem the test here seems to reliably recreate those conditionsi considered using a priorityblockingqueue instead of synchronized but since the isempty and poll calls should not allow something to interleave between them and access the queue a synchronized block seemed wiser here almost good two things since we only use offer poll you can use the unbounded priorityblockingqueue now could you move counter and counter_updater into the innercurrentthreadscheduler class both non static fields we are using atomicfieldupdaters to save on the instance cost of atomicinteger s could you change the counter to use atomiclongfieldupdater done on a related but side note do you know if these field updaters are proguard safe for obfuscation they reflect on field name for sure it might be worth looking into the fix would probably be implementing the abstract setters and getters which would obviously be a bit more boilerplate and kinda less fun but might be worth it if it reduces custom proguard rules required to use rx thanks for the changes looks good to me i dont know about proguard looks like per the proguard manual it does indeed recognize fieldupdater declarations so this should be fine wow i did not expect that how uncharacteristically useful of them good to know for the future http proguardsourceforgenet manual introductionhtmlsee the reflection section no anchor link that lists the basic reflection methods it automatically detects
2493,1,0,0,0,0,0,1,0,operator takeuntil with predicate take values and check the condition after the value is emittedfor enhancement request thanks for adding this not convinced on the name though the do prefix is used to represent side effects everywhere else i think the prefix should still be take something the question then remains should it stop if predicate turns into false or should it stop if predicate turns into true because classically do { } while true and repeat until false pascal i like it how its currently implemented do until trueit fits the takeuntil term take until a value predicate java systemoutprintln observablejust dooneach systemout println takeuntil i i foreach systemout println systemoutprintln observablejust dooneach systemout println takewhile i i foreach systemout println that code shows the difference with takewhile and it works well we emit and then stop rxnotification cd onnext rxnotification cd a onnext rxnotification cd b onnext rxnotification cd onnext rxnotification cd a onnext rxnotification cd b onnext rxnotification cd c onnext
2548,1,0,1,0,0,1,1,1,subscriberrequest should throw exception if negative request made as per discussion in and making a call to subscriberrequest n with negative n should throw an illegalargumentexception includes unit test i think the iae should be mentioned in requests javadoc javadoc added great
2548,1,0,1,0,0,1,1,1,subscriberrequest should throw exception if negative request made as per discussion in and making a call to subscriberrequest n with negative n should throw an illegalargumentexception includes unit test i think the iae should be mentioned in requests javadoc javadoc added great
2550,1,0,1,0,0,1,1,1,subscriberonstart requests should be additive and check for overflow as per discussion in looks good thanks that looks helpful thanks davidmoten
2553,1,0,0,0,0,0,1,0,rxringbuffer with synchronization changed rxringbuffer to use synchronized blocks for correctness we are relying here upon biased locking and lock elision it gets pretty close to the baselinebenchmark benchmark size x pr this syncstreamofn syncstreamofn syncstreamofn nasyncstreamsofn nasyncstreamsofn nsyncstreamsof nsyncstreamsof nsyncstreamsof nsyncstreamsofn nsyncstreamsofn twoasyncstreamsofn twoasyncstreamsofn reamofnthatmergesin reamofnthatmergesin reamofnthatmergesin changes in respect of x using spscarrayqueue removed look ahead and null check using peek to check for emptyness in certain positions using short as possible synchronization blocks here is my perf comparison building on what i did at https githubcom reactivex rxjava pull issuecomment x x branch as of jan ndpr pr after rebasing onto x jan nd pr pr after rebasing onto x jan nd pr pr on x as of jan benchmark size mode samples x pr pr pr rooperatormergeperfmerge syncstreamofn thrpt rooperatormergeperfmerge syncstreamofn thrpt rooperatormergeperfmerge syncstreamofn thrpt rooperatormergeperfmergenasyncstreamsofn thrpt rooperatormergeperfmergenasyncstreamsofn thrpt rooperatormergeperfmergensyncstreamsof thrpt rooperatormergeperfmergensyncstreamsof thrpt rooperatormergeperfmergensyncstreamsof thrpt rooperatormergeperfmergensyncstreamsofn thrpt rooperatormergeperfmergensyncstreamsofn thrpt rooperatormergeperfmergetwoasyncstreamsofn thrpt rooperatormergeperfmergetwoasyncstreamsofn thrpt rooperatormergeperfonestreamofnthatmergesin thrpt rooperatormergeperfonestreamofnthatmergesin thrpt rooperatormergeperfonestreamofnthatmergesin thrpt the degradations of this are incremental and i think worth the correctnesscrazy to me that we cant find a non blocking approach that performs better than the jvm doing lock elisioni suggest we move forward with this after cleaning up the comments in the code that are no longer valid i suggest we move forward with this after cleaning up the comments in the code that are no longer validokay if you feel ready you can merge it at your will ill take care of
2585,1,0,0,0,0,0,1,0,operator switchifempty changes to thanks akarnokd for fixing up and merging
2622,1,0,0,0,0,0,1,0,changed observableempty into a stateless constant observable empty was always stateless so creating a new instance all the time especially through a from iterable is wasteful besides oncompleted events dont have to be backpressuredshould enable identity based optimizations discussed in
2627,1,0,0,0,0,0,1,0,flatmap overloads with maximum concurrency parameter for issue there is no point in adding maxconcurrent to flatmapiterable because each iterable is subscribed to sequentially and run to completion there is no point in adding maxconcurrent to flatmapiterable because each iterable is subscribed to sequentially and run to completioni was wrong with this statement depending on the request pattern reordering may still happen and the downstream may be still slower unboundedness of flatmapiterable may still cause excessive source iterable generation that fills in the tracking arrays inside flatmap having the maxconcurrency parameter is valuable and prevents buffer bloat
2630,1,0,0,0,0,0,1,0,cast back observer to subscriber if passed to subscribe observer rebased
2648,1,0,1,0,0,0,1,0,takewhile dont unsubscribe downstream fixes issue with takewhile
2759,1,0,0,0,0,0,1,0,observableusing should use unsafesubscribe and enable eager disposal see where it was discovered that observableusing used subscribe instead of unsafesubscribe which provoked a race condition leading to an illegalargumentexception from the merge operatorthis pr uses unsafesubscribe and adds an overload for using to optionally dispose of resources eagerly just before completion or error the use case for this is a _synchronous_ observable where a downstream operation wants to reuse a resource but because the observable is synchronous the resource cannot get disposed till the downstream completes unit tests included thanks akarnokd ive made the change and squashed commits replaced tabs with spaces added experimental annotation to new overload and fixed typo in javadoc squashed commits this seems reasonable to me i dont use using so trust the conversation youve had to address the necessary functionality reading through the other pr this does seem necessary and i agree that unsafesubscribe is appropriate for this
2762,1,0,0,0,0,0,1,0,optimized isunsubscribed check extracted isunsubscribed optimization from benchmark size mode samples x rscomputationschedulerperfobserveon thrpt rscomputationschedulerperfobserveon thrpt rscomputationschedulerperfobserveon thrpt rscomputationschedulerperfobserveon thrpt rscomputationschedulerperfobserveon thrpt rscomputationschedulerperfobserveon thrpt rscomputationschedulerperfobserveon thrpt rscomputationschedulerperfsubscribeon thrpt rscomputationschedulerperfsubscribeon thrpt rscomputationschedulerperfsubscribeon thrpt rscomputationschedulerperfsubscribeon thrpt rscomputationschedulerperfsubscribeon thrpt rscomputationschedulerperfsubscribeon thrpt rscomputationschedulerperfsubscribeon thrpt nice improvement
2767,1,0,0,0,0,0,1,0,optimized scalar observeon subscribeon redone run on i ghz windows x jdk u benchmark size this score error x score errorobserveon observeon observeon observeon observeon observeon observeon observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon note that since the tests create a lot of garbage some perf numbers have quite some error margin some appear to be faster with this pr while others appear to be slower even if they are not affected by the changes am i reading it correctly that this should really only benefit this case benchmark size this score error x score errorobserveon yes it optimizes for the scalar observing of a value i assume this is a common enough case to warrant an optimized code path this is exactly the case i need code looks good all internal changes thanks akarnokd
2804,1,0,0,0,0,0,1,0,observeon throughput enhancements squashed commits of further optimizations to observeon using spscarrayqueue directly in observeon instead of ringbuffer to avoid the synchronization block split tracking structure to serial subscriptionlist and timed compositesubscription in eventloopsscheduler which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark i window x java u x s warmup x s iteration benchmark size x x error this pr this errorobserveon observeon observeon observeon observeon observeon observeon observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon notes at size the throughput varies in a range on each run and since the changes dont touch the scalar optimization there is no real improvement there at size my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on at size and size the throughput doubles if i introduce some extra delay ie via sleep or some extra work the benchmark generates a lot of garbage due to boxing switching to a constant emitter increases the throughput subscribeon from to since it conflicts with anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
2804,1,0,0,0,0,0,1,0,observeon throughput enhancements squashed commits of further optimizations to observeon using spscarrayqueue directly in observeon instead of ringbuffer to avoid the synchronization block split tracking structure to serial subscriptionlist and timed compositesubscription in eventloopsscheduler which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark i window x java u x s warmup x s iteration benchmark size x x error this pr this errorobserveon observeon observeon observeon observeon observeon observeon observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon notes at size the throughput varies in a range on each run and since the changes dont touch the scalar optimization there is no real improvement there at size my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on at size and size the throughput doubles if i introduce some extra delay ie via sleep or some extra work the benchmark generates a lot of garbage due to boxing switching to a constant emitter increases the throughput subscribeon from to since it conflicts with anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
2883,1,0,0,1,0,1,1,0,proposal standardized subject state peeking methods this pr modifies the subject class to host the union of the state peeking methods of the various subject implementations and fixes the inconsistent behavior of replaysubjectgetvalues t the changes enable the serializedsubject to relay such state peeking method calls into the wrapped subject and allows future subject wrappers to do the same seems to make sense the additions to subject all should be non breaking due to the experimental marking of these im being a little less stringent in discussing the addition to public apis but it seems to me that the precedent set on the behaviorsubject shows the value of these methods additionally subjects are the stateful side effecting types and these methods seem to make sense for them
2969,1,0,0,0,0,0,1,0,operator cache now supports backpressure ive removed the controversial features and made the backing cachedobservable internalrelated issue does it really need to be returning a new type of observable it seems the methods isconnected hasobservers and cachedeventcount are only used by the unit tests yes otherwise one would need ugly reflection magic to get inside the state of this observable i checked out the branch and took a shot at making it an onsubscribe function againhttps githubcom abersnaze rxjava tree operatorcacherewrite cache had originally more functionality ie the ability to terminate it manually like a disconnect but was downwoted i forgot about the tocached methods which are just relics and ill update this protherwise i dont really see why i shouldnt extend observable especially if one day there will be a real need to support disconnection of cache ive rebased it and im going to merge this if there has concern about it being implemented as a observable a pr can always be submitted with the suggested changes
2970,1,0,0,0,0,0,1,0,deprecated onbackpressureblock see for reasons to deprecate
2972,1,0,0,0,0,0,1,0,fixed window time to work properly with unsubscription added backpressure support to window size skip see
2983,1,0,0,0,0,0,1,0,fixed multiple calls to onstart started investigating multiple calls to onstart based on and found a bunch but since onstart can be overridden i might have missed cases in addition ive found a single place where a producer is set twice on a subscriber but again many other places may exist i know that is easy to complain wink this decorator strategy is not very memory friendly you have this annoying gwt compatibility perspective atomicxxxfieldupdater in a lot of places to reduce memory usage and you end up adding this decorators to only disable one method callwhat do you think thanks to solve the problem anyway smile yikes theres a lot of stuffed up backpressure fixed here im hoping we can release soon
3048,1,0,0,0,0,1,1,0,compositeexception extra npe protection compositeexception wont crash if it received null by some means a null collection or null collection item is replaced by a nullpointerexception instancesee also
3049,1,0,0,0,0,0,1,0,single add tosingle method to observable closes reactivex rxjava this method allows an observable which is guaranteed to return exactly one item to be converted to a single note the semantics of this function are very similar to that of single ie errors are passed through more than one item results in an illegalargumentexception completion without emission results in a nosuchelementexception and exactly one item is passed through the onsuccess method of singlesubscriber would appreciate feedback since this is my first contribution to rxjava yes looks good can you add the license headers to the files please the block of code to add is shown here https githubcom reactivex rxjava blob x contributingmd have done so would you mind rebasing to a single commit also done thank you tilal for the contribution and responsiveness on changes glad to contributeim planning to look into more tricky issues soon so hopefully this is not the last youll see of me
3081,1,0,0,0,0,0,1,0,revert of cache replay i did revert commit of the pr that added back pressure support to the cache operator and ran a canary our production systems seem stable now even with the new merge thats good news not sure what time akarnokd has for reviewing cache backpressure work if we cant fix this short term would be nice too see a fix for go in if backpressure doesnt make it quick summary is in cache emits nothing until source has completed can you create an unit test based on the usage pattern it would be also interesting to verify replay autoconnect since it ought to be functionally equivalent to cache i have no clue at the moment what the actual code path is causing the lockup itll take awhile for me to instrument code to narrow which usage pattern is causing the problem i believe the issue were seeing comes from use of cache in hystrix https githubcom netflix hystrix blob e ba b d d e d ade a hystrix core src main java com netflix hystrix abstractcommandjaval we use hystrix at very high volume and cache will be used by a large percentage of those calls this explains why this impacted our canary so significantly ive reverted both the cache and revert related commits the tests and the canary seem to do fine so far
3118,1,0,1,0,0,0,1,0,implementing the synconsubscribe this is useful for creating an observable that reads from a data source in a synchronous manner this is a rewrite of the abstractonsubscribe experimental class based on the ideas in you cant delete abstractonsubscribe because it is part of the public api and even though marked as experimental such components can be deleted only at a major release such as experimental apis can be removed or change at any time as per the readme experimental apis marked with the experimental annotation at the class or method level will almost certainly change they can be modified in any way or even removed at any time you should not use or rely on them in any production code they are purely to allow broad testing and feedback i would have expected to make such apis deprecated for a few releases before completely removing it besides this pr just gives an alternative to another experimental class and could live side by side then users could decide vote which to keep at the next major release akarnokd you have a good point that the efficacy of both implementations should be compared however i do not think that we should expose multiple alternatives in the public api this ambiguous api leads to confusion and questions about the unexplained differences between one or the other implementation the pull request should not be the place for debate either since this should be about issues with this implementation this comparison and debate was what i was hoping to get out of opening issue would you like to open a separate issue for comparing the implementations the latest commit adds work stealing to manage unsubscribe to avoid concurrent modification of state while running onunsubscribe concurrently with next and a test to exercise fixes issues with tabs spaces and adds javadocs the latest commit makes a few changes added the abstractonsubscribe back into the code base the experimental annotation states clearly that either of these implementations can be removed at any time so its not necessary for anything to be removed now it is up to the consumer when they chose to use a potentially unstable api added jmh tests to compare performance against onsubscribefromiterable the performance is impacted in astounding ways by the additional complexity of a cleanup function this requires object initialization which the onsubscribefromiterable does not require general optimizations removing a volatile and reorganizing the request loop stealthcode can you give us more detail on the jmh comparison sure sorry for leaving that out heres the jmh report output $ gradlew clean benchmarks pjmh f tu s bm thrpt wi i r synconsubscribeperf benchmark size mode samples score score error unitsrosynconsubscribeperfbenchabstractonsubscribe thrpt ops srosynconsubscribeperfbenchabstractonsubscribe thrpt ops srosynconsubscribeperfbenchabstractonsubscribe thrpt ops srosynconsubscribeperfbenchabstractonsubscribe thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops s under flight recorder analysis both the aos and sos suffer from the cost of creating a subscriptionlist and allocating memory where as a the onsubscribefromiterable does not require adding an unsubscribe action so doesnt need to allocate i plan on testing some changes to get around this bottle neck will submit a pull request soon hopefully this upcoming change will be a private change and not have to wait until x here are the updated benchmarks this paints a very different picture than last time the performance of the synconsubscribe is now slower than onsubscribefromiterable for small iterators and slower for large iterators the bottle neck seems to be in the synconsubscribe$subscriptionproducerrequest long method run complete total time benchmark size mode samples score score error unitsrosynconsubscribeperfbenchabstractonsubscribe thrpt ops srosynconsubscribeperfbenchabstractonsubscribe thrpt ops srosynconsubscribeperfbenchabstractonsubscribe thrpt ops srosynconsubscribeperfbenchabstractonsubscribe thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops s here is a version where the integer stream is freshly created image https cloudgithubusercontentcom assets e dae a d e df b cfpng i k windows x java u abstractonsubscribe aos has the highest overhead because of resource checks on each emissionabstractproducer ap from offers amortized resource check overhead due to the inner loop but this loop was not particularly optimized with fast path and or amortized request accountingfromiterable fi doesnt care about resources and has fast pathsynconsubscribe so in this pr is close but behind fi ive made some optimizations https gistgithubcom akarnokd a to the fast path and got a much better result for longer sources ops s ops s ops s one must be careful around volatile reads because it forces the re read of instance variables after them nice im merging your gist this optimization makes the fast path on par with fromiterable in the long tail still however slower in the s s range i spoke too soon in running the unit tests there are now problems with the diff applied ill try to incorporate what i can and test to make sure the changes are more performant sorry i didnt run any test so my changes were only valid for the perf usage and not general here is https gistgithubcom akarnokd dffd a d a version which passes the tests and has the following performance characteristics benchmark size mode samples score score error unitsbenchsynconsubscribe fresh thrpt ops sbenchsynconsubscribe fresh thrpt ops sbenchsynconsubscribe fresh thrpt ops s for size i think the extra allocation of the facade subscriber makes it twice the overhead the onnext safeguard also costs benchmark size mode samples score score error unitsbenchsynconsubscribe fresh thrpt ops sbenchsynconsubscribe fresh thrpt ops sbenchsynconsubscribe fresh thrpt ops s edit if i change the api to observer and saving the facade allocation i get this benchmark size mode samples score score error unitsbenchsynconsubscribe fresh thrpt ops sbenchsynconsubscribe fresh thrpt ops sbenchsynconsubscribe fresh thrpt ops s the m case becomes quite varying perhaps due to the huge amount of integer garbage or the change in what the jit inlines akarnokd your changes are pretty solid i cant argue with results here are the benchmarks for your changes alone benchmark size mode samples score score error unitsrosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops s i implemented a small api change to expose a setter on an unsubscribe action with this change we can check if theres no unsubscribe and avoid a subscriptionlist allocation benchmark size mode samples score score error unitsrosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchfromiterable thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops srosynconsubscribeperfbenchsynconsubscribe thrpt ops s with this change we are now faster than onsubscribefromiterable in the short and long cases assuming we dont have to cleanup with unsubscribe with this change we are now faster than onsubscribefromiterablesee highlights of the recent changes includes removing the weird onunsubscribe action method on synconsubscribe added new tests and fixed generics issues not enough s added blackholeconsumecpu to perf tests in order to force the micro benchmarks to artificially reduce volatile write contentionim now happy with this pull request and believe its ready to be merged looks good to me now although i dont see how one could implement never with it or a source that stops emitting but doesnt terminate there is a test that implements never behavior however it does not terminate where as the observablenever instance would simply terminate without setting a producer javadocs need some work here but i think thats the only thing remaining this test times out java test timeout public void testnever { onsubscribe os synconsubscribecreatestateless new action { override public void call observer subscriber { }} observablecreate os subscribe } yes it does and i think that it should remain this way it should be documented in the contract of using the synconsubscribe that your next function will not terminate if you do not eventually call the observeroncompleted or observeronerror e its similar to an observablecreate call with an onsubscribe that synchronously loops over each n for all requeqst n this would only terminate when the consumer is done request the producer declares that its done via terminal event an error occurs or subscription is otherwise unsubscribed take you could also extend the api and use some observerex that implements observer plus a stop method then document that if you whish to not emit any further items but dont want to terminate the stream call stop i cannot see a valid use case of observablenever aside from merging in with an asynchronous hot observable such as observablecombinelatest somefuncthatmayreturnnever foo hotobs it seems like a tool to force merging observables in ways that obviate the need to merge at all are there use cases that i am missingthat said i would rather not corrupt the api with a one off concept of stop without good reason its important that we get the api correct even in experimental javadoc is now updated reviewed the code looks good
3121,1,0,0,0,0,0,1,0,improve performance of newthreadworker disable search for setremoveoncancelpolicy on android api resolves this pr adds methods for detecting android api version and disables newthreadworkertryenablecancelpolicy on android api which has significant performance cost on androidpr also improves performance of newthreadworkertryenablecancelpolicy via caching reflection checked on jvm java android api android api fixed all comments removed test with reflection added more javadoc and comments tests are now compilable on jdk didnt check but they should work fine akarnokd jakewharton ptal great thanks
3129,1,0,0,0,0,0,1,0,fix retry with predicate ignoring backpressure apparently we forgot about this operator the backpressure handling is a trivial case with producerarbiter ive also fixed some apparent code indentation errororiginally reported in with a test case which i didnt include due to its lengthy nature however i did run the test manually and both passed after the fix
3147,1,0,0,0,0,0,1,0,remove unnecessary static modifier ps benjchristensen akarnokd sorry for large amount of simple pull requests im doing full code review of rxjava sources http artemzincom blog rxjava code review part and ill create prs and issues during this reviewill try to group changes by themes so it will be easy to review them looks like this adventure is going to be part of if it were only me id accept cosmetic changes such as this but history tells me not to akarnokd why sad that javac is not strict enough and allows such things we can add checkstyle with only java lang rules and remove all these things from the code but last time i suggested to add checkstyle benjchristensen was not very happy…i understand that rxjava is not my project and i cant just come and force you to use my codestyle which is actually just standard java codestyle so if you dont want to accept such changes — its okay ill stop doing such prs and will report only major issues i like this pr too much im going to merge it i like this pr too much im going to merge it
3149,1,0,0,0,0,1,1,0,scheduler shutdown capability repost of we still need to decide on the reset vs shutdown distinction https githubcom reactivex rxjava pull issuecomment what is your perspective do you have a strong opinion one way or another with start shutdown there is a clear intention to stop everybody with reset any running code could respawn the threads and the new threads will resume leaking i prefer start shutdown agree it will be great to have ability to stop schedulers and prevent new workers from scheduling for apps that run in servlets and other similar containers which can be stopped externally im happy with the start shutdown pair which seems to support my primary use cases resource release on webapp shutdown in container resource release on completion of programs run by a framework that looked for unreleased threads maven on ad hoc basis ensuring schedulers are not running in the background on entry into a unit test when running a suite thanks akarnokd the start shutdown semantic looks good to me more explicit best enforcement of shutdown cop and good compatibility with items mentioned by davidmoten which are pretty much our use cases as well ok_hand ill following this thread to be notified when its merged thanks akarnokd benjchristensen do you consider we have consensus on naming after that itd be showtime clapper joy up because so many customers from us run into this daschl i would like a bit more context on what the goal is for the scheduler shutdown capability davidmoten and any others please respond thanks resource release on webapp shutdown in containerwhat resources exactly need to be freed shutting down the schedulers would prevent new workers from being scheduled and would free up threads from the executor is this the desired behavior or is there some side effect that you are looking for resource release on completion of programs run by a framework that looked for unreleased threads maven could anyone name a framework thats impacted is the concern that open threads keep the framework from properly terminating on ad hoc basis ensuring schedulers are not running in the background on entry into a unit test when running a suite would the testscheduler solve this problem for you this doesnt rely on singleton values and can be used to precisely test scheduling behavior stealthcode i can answer the question i hope it help you could anyone name a framework thats impacted is the concern that open threads keep the framework from properly terminating couchbase java sdkcb sdk are not able to finish some of they own threads because it is referring rxcomputationthreadpool threads who cant be finishedyou can see more details about how this issue are affecting this framework herehttps forumscouchbasecom t the v of the java client leaks rxjava threads on shutdown stealthcode i can give you the answer to your questions tooid like to use rxjava in the container eg id like to use jersey rx client on tomcat unfortunately it is impossible to shutdown _rxcomputationthreadpool _ threads and container has memory leaks that causes that rxjava is inapplicable for my purposes and in my case regarding question yes shutting down all schedulers permanently is a desired behaviour and testscheduler is not a solution so im really looking forward to seeing this pr accepted and released mjakubowski similar case here mjakubowski understood regarding the testscheduler this is meant for use in tests and highly recommended when it comes to a container you would definitely want to use a real scheduler so what i hear is that there is no desire to resume the scheduler once it is shut down my concern is that by offering a schedulerlifecyclestart method we are inviting non deterministic behavior in the case that someone wants to use this to teardown and then resume in integration tests for example would it be acceptable to remove the start method from the public interface and rename shutdown to teardown to more accurately describe the intent i dont have strong opinion between shutdown teardown teardown makes the intent clearer but shutdown is more idiomatic in the context of java executor otherwise the code lgtm another thing if we want to be more java idiomatic maybe hiding the start is the right thing to doit will also have the benefit of avoiding bug by misusage of the library calling start after a shutdown i can make schedulersstart package private so the tests can use it but i the scheduler implementations have to keep their start public please do i believe that would be better done akarnokd stevegury folks do you think its possible to get this into akarnokd thanks i think this is fine do you guys have a plan date to merge it akarnokd i think its appropriate that you merge this pr since you are most familiar with this code if you think you are happy with it then feel free oh sorry didnt recount the number of likes merging where can i get the latest build with this fix maven central is still at chiangh you can clone the project and build it from master good luck rxjava uses bintray for binaries and also publishes snapshots in jfrogs oss artifactory so you can add the following repository to your pomxml xml snapshots libs snapshot http ossjfrogorg artifactory libs snapshot after that you should be able to depend on rxjava snapshot
3150,1,0,0,0,0,1,1,0,window operators now support backpressure in the inner observable repost of do we need to maintain both bufferuntilsubscriber v and v at the same time bufferuntilsubscriber does some black backpressure magic inside groupby which i wasnt able to figure out and the v doesnt pass unit tests with it it seems like bufferuntilsubscriber is being used as a special case buffer for operatorgroupby while bufferuntilsubscriberv is custom for the windowing operators if they cannot be reconciled to work for both cases then could you please move them into the operators as static nested classesalso since groupbys back pressure is being patched maybe itd be a good idea to revisit this pull request with those changes to try to combine the two bufferuntilsubscriber s these are internal classes and can live in their own files the groupby in no longer uses it and once merged this bufferuntilsubscriberv can be renamed or better yet promoted to a standard api unicastsubject i dont think we should be so eager to combine things such combinations end up in monstrous classes which are then sources of misunderstanding and complexity bufferuntilsubscriber was a proposed as a solution to the time gap problem in group by so because bufferuntilsubscriberv doesnt work to solve this problem for group by leads me to question its naming is it built to handle the same problem or a different problem are you proposing to rename v to unicastsubject i dont think we should be so eager to combine things such combinations end up in monstrous classes which are then sources of misunderstanding and complexityim proposing to hide away internal functionality from the public api neither of these are public api since they reside in the internal package hiding them further away seems to be unnecessary in addition bufferuntilsubscriberv is effectively turned into the official unicastsubject in xhistorically bufferuntilsubscriber started out to solve the time gap problem for the non backpressured groupby and window when the backpressure was introduced groupby had to support backpressure but bufferuntilsubscriber wasnt enhanced instead bufferuntilsubscriber is used as a middle man and the subscription process is hijacked to inject a producer that attempts to coordinate requests apparently this didnt cover all request pattern hence the original bug due to this very specific hijacking adding backpressure to bufferuntilsubscriber directly didnt work out as it conflicted with the request coordination in a way i couldnt resolve therefore i decided to have a separate class that does backpressure but doesnt have to be involved in request coordination for window which i believe cant be established with a reasonable strategy all im asking for is a rename from v in x maybe i missed it but whats the name youd like ive renamed the class to unicastsubject and combined the state with the onsubscribebus class im going to sleep now its midnight here so if you only have concerns about naming location and visibility i suggest merging this pr then posting a separate pr with your changes and merge it if you can get somebody else to like it in the meantime akarnokd would you mind rebasing this done
3155,1,0,0,0,0,1,1,1,safesubscriber report oncompleted unsubscribe error to rxjavaplugin discussed in when an observable emits oncompleted but unsubscribe in safesubscriber throws then the error should be reported to the rxjavaplugin error handler and if that fails a stack trace is written to systemerr there are a lot of repeated try catch blocks calling the rxjavaplugins error handler so ive made a rxjavapluginutils class it will also be called from the using fix which i will submit once this pr has been accepted one of the tests fails im going to ponder the issue of throwing after reporting to the error handler a bit ive been looking for a bit of guidance about what to do when unsubscribe throws in safesubscriber _rx design guidelines_ doesnt really cover it _reactive streams jvm_ does touch upon it saying calling subscriptioncancel must return normally the only legal way to signal failure to a subscriber is via the onerror methodi think given that the contract has been breached it is fair to throw an exception and i think a new wrapper unsubscribefailureexception would be appropriateid also like to address the case when oncompleted throws _reactive streams jvm_ has this to say calling onsubscribe onnext onerror or oncomplete must return normally except when any provided parameter is null in which case it must throw a javalangnullpointerexception to the caller for all other situations the only legal way for a subscriber to signal failure is by cancelling its subscription in the case that this rule is violated any associated subscription to the subscriber must be considered as cancelled and the caller must raise this error condition in a fashion that is adequate for the runtime environmentso in the existing code if in safesubscriber an onerror call to the downstream subscriber throws then the rxjavaplugin error handler is called _and_ an onerrorfailedexception is thrown comments in the method say this is ok because the contract has been broken and this is probably consistent with the advice in and the caller must raise this error condition in a fashion that is adequate for the runtime environmentin the existing code if in safesubscriber an oncompleted call to the downstream subscriber throws then the consequent call to _onerror tries to signal onerror to the downstream subscriber im worried that calling onerror after calling oncompleted is a strong enough breach of the contract that the possible side effects could be worse than just a throw shouldnt we throw only and notify the plugin error handler of course ive submitted code that matches my thinking above it still fails because i havent amended the existing unit tests associated with throwing ill do that after another round of review if accepted the failing test is a coverage test for a behavior no longer present i suggest removing it and rerunning the jacoco to see if all current code path is covered akarnokd yep thats right are you happy that a throwing oncompleted call should not induce an onerror call if so ill clean up and update the pr ive fixed the unit tests and added more so that safesubscriber gets coverage looks good to mesince this adds public api classes it requires further approval otherwise it shouldnt affect programs other than those that badly fail therefore the merge policy would allow me to merge it lgtm it would be better if you can fix the indent for unsubscribefailureexception its a pity that we cannot change onerrorfailedexception s that should have been unsubscribefailureexception now since its a break change thanks for review akarnokd and zsxwing ive fixed indent in test and squashed commits great thanks
3169,1,0,1,0,0,0,1,0,merge can now operate in horizontally unbounded mode resolves note that since the default merge operation is unbounded this change could lead to an excessive memory usage when flatmapping fast sources note that the pre version did this albeit on a slighty slower paththe change also affects the scalar optimization as well pre implicitly limited the concurrency level to rxringbuffersize when scalars were received this version now fills the queue up to the concurrency levelfor i suggest having a bounded behavior by default and require the developer to specify integermax_value to go for the unbounded behavior so he she knows about the consequences ill have to allocate some time to review this later as it is somewhat detailed thank you for tackling this pre implicitly limited the concurrency level to rxringbuffersize when scalars were receivedthat was done by design since scalars behave as onnext and we can limit the number of observable s being merged if we have scalars queued up for deliverythe reason we cant limit the number of async observable s is because we dont know if they will emit or not and thus risk deadlock ill rebase this rebased lets get this finally in thanks
3286,1,0,0,0,0,1,1,1,implements blockingsingle adds blockingsingle issue the blocking version of rxsingleblockingsingle has the following methods from single factory method for creating a blockingsingle from a single value returns the value emitted from the single tofuture returns a javautilconcurrentfuture couldnt actually think of any other useful operations to perform on blockingsingle in comparison to blockingobservable theres not much to this class at the moment hmmmgot a test failure that i cant reproduce locally fixed by rxobservablessynconsubscribetest testsubscribeon failed javalangassertionerror expected but was at orgjunitassertfail assertjava at orgjunitassertfailnotequals assertjava at orgjunitassertassertequals assertjava at orgjunitassertassertequals assertjava at orgjunitassertassertequals assertjava at rxobservablessynconsubscribetesttestsubscribeon synconsubscribetestjava this test failure should be resolved now hyleung is this ready to be reviewed merged abersnaze not quite yet there are a couple of things from artem zinnatullins pr that i want to pull in splitting out a separate blockingutils class to hold awaitcomplete for example also im going to rebase it against head of x since its been about a month abersnaze the pr is ready for review btw ill keep the commits separate as i incorporate the feedback and squash it down at the end maybe move blockingsingle from rxobservables to rxsingles artem zinnatullin re rxsingles that would be a new package then dont have a particular option either way tbh anybody else ah i see what youre getting atmoved to rxsingles which other operators are you thinking of adding to single btw lgtm just a few nits left im ready to merge this as long as we can add the necessary experimental annotations and rebase onto x stealthcode done thanks for contributing
3352,1,0,1,0,0,0,1,0,perf checks for flatmap and merge ported the two perf tests to evaluate x throughput image https cloudgithubusercontentcom assets a c c e e c b e d png my primary suspect for the extra overhead are the atomics of queue drain the x uses a synchronized based emitter loop which is elided by the jit compiler but atomics cant be elided as i mentioned before synchronized works better for light to none asynchronous use whereas atomics work better for asynchronous usealso quote from exceptions that do not require a would be javadoc changes unit test additions or refactoring perf test additions fixes or refactoring grammatical and presentation fixes to readme contributing and other such metadata files
3357,1,0,0,0,0,0,1,0,eager concatmap related discussion in thanks a lot for contributing this one akarnokd ive had one look through and no problems jump out at me but i will review further this will be useful thanks for the review davidmoten usually i use one letter variables because i find it easier to parse the code and instead of long variable names i use newlines to separate logical blocks this way i dont have to type that many letters and i dont have to wait while eclipse returns with the content assist which is blocking by the way and may take hundreds of milliseconds even on my i ssd i took the time and renamed variables as you asked for and added some more unit tests that check the code paths that being said i dont plan to do such renames in my contributions very often in the future and encourage anybody to post their prs with their proposed cleanups renames thanks for the feedback ive updated the method names to concatmapeager and concateager added the experimental tags some javadoc and a missing test for a parameter concateager overload updated with a capacity fix for the spsclinkedarrayqueue i reviewed in details in the code and i believe it is correctbut i wonder if subscribing to the sources in a unbounded mode is the right thing to doat the expense of complexifying the code i believe it could be possible to split the request n between the sources maybe requesting to all the m sources expect the first one which we request n m and so onthe devil is in the details and i believe this would significantly complexify the code but i would like to know what you are thinking about this stevegury this operator consumes source observables in order and doesnt make sense to split any request from downstream if the downstream requests n and the first is requested n count that would hang the sequence because only the first is allowed to emit and it wont emit enough to trigger a new requestit is possible to use a bounded buffer per source so while they are not consumed they dont grow indefinitely however it means that each of them can produce only rxringbuffersize elements before stopping and thus the operator wouldnt be eager anymore akarnokd sorry i wasnt very clear but what i proposed was roughly what you described replacing rxringbuffersize by my main concern here is the use of unbounded buffer which i think could be avoided davidmoten what do you think about the bounded buffering and the fact that such sources would act more like a delayed source id be happy to see bounded buffering rxringbuffersize sounds a better default size than to me and would be consistent with the request eagerness of other operators like merge for instance could we add an overload to allow the specification of buffer size as wellif this is significant rework im content to see this unbounded version documented with its buffering characteristics merged and we can defer the bounding work to another pr done great thanks akarnokd lightning quick as always lgtm the three of you seem happy with it so im merging it
3382,1,0,0,0,0,0,1,0,fix spsclinkedarrayqueue leaves slot null just before growing discovered while debugging confirmed with jctools in https githubcom jctools jctools pull
3417,1,0,0,0,0,1,1,1,add singledoonsuccess closes artem zinnatullin rebase please abersnaze rebased
3444,1,0,0,0,0,1,1,1,completable class to support valueless event composition tests this is a backport of looks good should we annotate experimental on all the public methods and operators now the class annotation should indicate all methods are experimental if individual methods get promoted we can add direct annotations then sounds good on sat dec david karnok notifications githubcom wrote now the class annotation should indicate all methods are experimental if individual methods get promoted we can add direct annotations then — reply to this email directly or view it on github https githubcom reactivex rxjava pull issuecomment since this adds to the api surface id like to get another like before merging awesome thanks
3447,1,0,0,0,0,0,1,0,delaysubscription with a plain other observable requested in this is an efficient implementation as it avoids allocating the lifter object doesnt require a function wrapper and doesnt use producer arbitration bonus points to those who can recognize the similarities with any thoughts about this
3447,1,0,0,0,0,0,1,0,delaysubscription with a plain other observable requested in this is an efficient implementation as it avoids allocating the lifter object doesnt require a function wrapper and doesnt use producer arbitration bonus points to those who can recognize the similarities with any thoughts about this
3467,1,0,0,0,0,1,1,0,compensation for significant clock drifts in scheduleperiodically there is a problem reported in and in which if the system clock drifts the periodic calculation inside schedulerworker gets off and either taking a longer time for the next invocation of the task or doing catching up with all the lost invocationsthe solution checks the wall clock difference between the last run and the current run and if it went back or forward significantly it rebases the timer period and schedules the next execution relative to nowif the clock goes back the original code scheduled the next invocation way into the future this pr will schedule it after the periodif the clock goes forward the original code scheduled executions for all the missed time between the last run and the new time immediately yielding a bunch of delays this pr will simply schedule the next invocation after the periodthe algorithm for both cases is the same make sure the next invocation is scheduled relative to now and recalculate the start timestamp as if the whole sequence run under the new drifted clock all along the subsequent invocations will be scheduled at a fixed rate againive added the system parameter rxschedulerdrift tolerance unit minutes default minutes which is used to determine if the clock drifted too far between invocations of the periodic task time drift is pretty nasty we spent a lot of time on this in rxnet http blogsmsdncom b rxteam archive reactive extensions v release candidate available nowaspx ive updated the code with the suggestion of stealthcode lgtm do you need additional changes if not feel free to merge this pr yay this was important issueso i did test similar to javaobservable interval seconds subscribe along loggerd interval d along and then changed system clock to hours at runtime of the app before fix as expected computation scheduler gone crazy and fired about events during one second after fix everything was just fine no incorrect events no cpu consuming so i think and can be closed nowthanks akarnokd
3467,1,0,0,0,0,1,1,0,compensation for significant clock drifts in scheduleperiodically there is a problem reported in and in which if the system clock drifts the periodic calculation inside schedulerworker gets off and either taking a longer time for the next invocation of the task or doing catching up with all the lost invocationsthe solution checks the wall clock difference between the last run and the current run and if it went back or forward significantly it rebases the timer period and schedules the next execution relative to nowif the clock goes back the original code scheduled the next invocation way into the future this pr will schedule it after the periodif the clock goes forward the original code scheduled executions for all the missed time between the last run and the new time immediately yielding a bunch of delays this pr will simply schedule the next invocation after the periodthe algorithm for both cases is the same make sure the next invocation is scheduled relative to now and recalculate the start timestamp as if the whole sequence run under the new drifted clock all along the subsequent invocations will be scheduled at a fixed rate againive added the system parameter rxschedulerdrift tolerance unit minutes default minutes which is used to determine if the clock drifted too far between invocations of the periodic task time drift is pretty nasty we spent a lot of time on this in rxnet http blogsmsdncom b rxteam archive reactive extensions v release candidate available nowaspx ive updated the code with the suggestion of stealthcode lgtm do you need additional changes if not feel free to merge this pr yay this was important issueso i did test similar to javaobservable interval seconds subscribe along loggerd interval d along and then changed system clock to hours at runtime of the app before fix as expected computation scheduler gone crazy and fired about events during one second after fix everything was just fine no incorrect events no cpu consuming so i think and can be closed nowthanks akarnokd
3470,0,0,0,0,0,1,1,0,replay request coordination reduce overhead reported in this change will make sure whenever a new subscriber arrives therequest coordination doesnt scan every other subscriber unnecessary they will trigger a managerequests individually anyway unfortunately i cant make the subscription registration constant via a hashset because that would slow down the dispatching loop which is quite expensive to for each over compared to a plain array note also that this will likely conflict with i get the following numbers with the program in subscribingsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secunsubscribingunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per sec ive updated the code to have o subscription unsubscription cost as well the program from now produces stunning results subscribingsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secsubscribed so far took ms to subscribe last at rate per secunsubscribingunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per secunsubscribed so far took ms to unsubscribe last at rate per sec the numbers could be actually higher but windows timer resolution is about ms at best ive updated the code to avoid the synchronized block on each replay attempt in case the cached version of the innerproducers is still the same as the sets version i havent reviewed the changes in detail yet but i do notice that openhashset doesnt have any dedicated unit tests ive added a unit test for openhashset strangely the test doesnt crash with java must be some difference between what type for each extracts akarnokd needs rebase on latest x thanks working on it rebased i like this a lot and the results are really impressive code looks good to me cleaner than the previous implementation too 👍 i finally find some time to review this one sorry for the delay👍
3512,0,0,0,0,0,0,1,0,fix safesubscriber documentation regarding unsubscribe the documentation was wrong in two points unsubscription doesnt call oncompleted and unsubscription doesnt directly prevent delivery of onxxx events since the implementation doesnt even check isunsubscribed it is the responsibility of the upstream to do that related issue
3513,1,0,0,1,0,1,1,0,add shorter rxjavaplugin class lookup approach this adds a new pattern and lookup method that lets the developer specify the custom plugins with shorter system property keys android is quite restrictive and allows only charactersthe new pattern splits the target simple class name and its implementation into two separate system properties rxjavaplugin classsimpleclassnamerxjavaplugin implpathtoimplclass the index tag can be any string of your chosing rxjavapluginmykeyclasssimpleclassnamerxjavapluginmykeyimplpathtoimplclass but make sure they are paired otherwise nothing will happenif there are multiple class entries with the same simpleclassname one of them will be chosen depending on the walk order in javautilproperties related issue updated made strings local constants and using length ˙instead of magic numbers plus if the default keying matches the properties is not traversed for an alternate specification an alternative pattern could be this rxjavaplugin simpleclassnameorgpackagenamingactualclass i agree that if the plugin cannot be found we should crash the app updated the code to crash if the plugin implementation is missing thanks
3524,1,0,0,0,0,0,1,0,fix subscribe javadoc fix for javadoc issue thanks
3584,1,0,0,0,0,0,1,0,clarify behaviour of groupby in javadoc as discussed in some clarification of the behaviour of groupby looks necessary re its behaviour when the groupedobservable terminates early for example has first applied to it see also i also took the liberty of recommending ignoreelements instead of take for the section in the javadoc that recommends how to ignore emissions because the take approach would have more overhead every emission from source would prompt the emission of a new groupedobservable than the ignoreelements approachonce this is accepted ill look to submit a pr with groupbyonce mentioned in corrected the documentation that said resubscription occurs when it is rather a new groupedobservable is emittted for a group incorporated akarnokd suggestion i also took the liberty of recommending ignoreelements instead of take for the section in the javadoc that recommends how to ignore emissions because the take approach would have more overhead every emission from source would prompt the emission of a new groupedobservable than the ignoreelements approachby the way ignoreelements has a drawback it keeps all group observable s in memory even some of them wont emit items
3584,1,0,0,0,0,0,1,0,clarify behaviour of groupby in javadoc as discussed in some clarification of the behaviour of groupby looks necessary re its behaviour when the groupedobservable terminates early for example has first applied to it see also i also took the liberty of recommending ignoreelements instead of take for the section in the javadoc that recommends how to ignore emissions because the take approach would have more overhead every emission from source would prompt the emission of a new groupedobservable than the ignoreelements approachonce this is accepted ill look to submit a pr with groupbyonce mentioned in corrected the documentation that said resubscription occurs when it is rather a new groupedobservable is emittted for a group incorporated akarnokd suggestion i also took the liberty of recommending ignoreelements instead of take for the section in the javadoc that recommends how to ignore emissions because the take approach would have more overhead every emission from source would prompt the emission of a new groupedobservable than the ignoreelements approachby the way ignoreelements has a drawback it keeps all group observable s in memory even some of them wont emit items
3614,1,0,0,0,0,0,1,0,just now supports backpressure related fixes changes updated just to fully support backpressurethis is a repost of due to merge and rebase problems we were waiting to hear from benjchristensen on this one i think any news for correctness despite my hesitance due to perf impact
3655,1,0,0,0,0,1,1,1,add singleonerrorresumenext single part of will submit a pr for onerrorresumenext func later akarnokd changed to implements singleonsubscribe ptal zsxwing ptal
3661,1,0,0,0,0,0,1,0,combinelatest now supports any number of sources this pr is a backport of the x combinelatest with null support and lets the programmer combine more than sources at once note that x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment i kept these in case such features are required by x some daythe original had this limit due to using a single and non parametric rxringbuffer to store values from sources in addition the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the bufferthis pr uses an unbounded linked spsc queue which can now hold as many elements as there are sources times the default ring buffer size this is not preallocated and grows shrinks as necessary the algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream that source subscriber gets the request replenishment call that generated the rowin addition ive added an iterator overload from as well thanks
3682,1,0,0,0,0,0,1,0,fix observeon resource handling add delayerror capability this pr fixes the messing around reported in and adds an overload to observeon that allows delaying errors without the need for wrapping see and maybe there are other reports in addition this pr adds a proper override of the isempty method to simply compare the two indexes for emptiness directly instead of size to avoid looping multi reading and castingbenchmark comparison i windows x java u image https cloudgithubusercontentcom assets f f a e b c cef a bb png note that the benchmark is generally quite noisy yielding hectic results ie firing up a thread with newthread may take quite some random microseconds for example observeonimmediate shouldnt be affected by any of the changes yet the run to run variance is im fine with the results of the benchmark
3682,1,0,0,0,0,0,1,0,fix observeon resource handling add delayerror capability this pr fixes the messing around reported in and adds an overload to observeon that allows delaying errors without the need for wrapping see and maybe there are other reports in addition this pr adds a proper override of the isempty method to simply compare the two indexes for emptiness directly instead of size to avoid looping multi reading and castingbenchmark comparison i windows x java u image https cloudgithubusercontentcom assets f f a e b c cef a bb png note that the benchmark is generally quite noisy yielding hectic results ie firing up a thread with newthread may take quite some random microseconds for example observeonimmediate shouldnt be affected by any of the changes yet the run to run variance is im fine with the results of the benchmark
3689,1,0,0,0,0,0,1,0,unified onerrorx and onexceptionresumenext and fixed backpressure the operators didnt honor backpressure when they switched over to the other observablethis pr also includes the fix there was a test failure in backpressureteststestmergeasync run before any of the changes of this pr and shouldnt have any effect overloaded servers
3696,1,0,0,1,0,1,1,1,added single execution hooks resolves would you also apply these plugin methods in single onsubscribestart onsubscribereturn onsubscribeerror onlift below hooks are already called i replaced previous calls of rxjavaobservableexecutionhook by rxjavasingleexecutionhook calls onsubscribereturn onsubscribeerror onlifthowever there is problem with onsubscribestart this hook should be called in onsubscribe and unsafesubscribe unfortunately in single onsubscribe and unsafesubscribe methods get subscriber type as parameter instead of singlesubscriber i will make a commit to cover it soon there is something wrong a bunch of single test failed as far i see that failing test is not related with my changes is rxschedulerscachedthreadschedulertest testunsubscribeforscheduler some kind of flaky test more tests would be appreciated but otherwise lgtm could you squash the commits and rebase this pr after you rebase squash the commits
3701,1,0,0,0,0,1,1,1,add completabledooncompleted and deprecate completabledooncomplete closes wait what i thought you wanted to add completabledooncompleted i see no reason to change the established naming of observabledooncompleted in fact for consistency id rather prefer adding completabledooncompleted that makes sense the only reason i did it this way is because on the x branch both observable https githubcom reactivex rxjava blob x src main java io reactivex observablejaval and completable https githubcom reactivex rxjava blob x src main java io reactivex completablejaval use dooncomplete yes those follow the reactive streams convention and completable started out as a x addition in the meantime ill fix that test failure changed completable instead updated tests to match zach klippenstein thanks just updated the title
3712,1,0,0,0,0,1,1,1,add takeuntil support in single as discussed in this adds takeuntil observable and takeuntil single support in single it was mostly just adapting the logic from the existing operatortakeuntil and adjusting it for accepting a single and sending a cancelattionexception in the event of a submission from other prior to a terminal event in the source single any feedback is appreciated it this is my first time contributing an implementation to this project particularly wondering if its worth keeping both overloads or if the user should just coerce their other to one type or ther other also particularly looking for feedback on what information to include in the cancellationexception just noticed my ide swapped the wildcard imports for explicit ones let me know if i should revert that yes please just style issues otherwise lgtm cc akarnokd artem zinnatullin for the tests most of them are adapted from operatortakeuntiltest it looks like these tests have two different styles one with testobservable and the other with subject i reused both of them here but would we maybe want to stick with one or the other especially with single i think some now overlapalso if we stick with one style here should we update the style in operatortakeuntiltest as well to match im not too keen on how the tests are named or what test framework objects you useplease squash your commits squashed zsxwing stevegury any input need another collaborator reviewmain points im wondering about should we only support one overload if we support more than one should it support all three including completable should takeuntil test styles formalized looks like there are two styles right now judging by operatortakeuntiltest subject based and testobservable based yes i think it makes sense to had an override for completable regarding test styles i dont think its a big deal the best thing to do slowly convert all the tests to the new convention ideally in separated commits that dont change the behavior sending a cancelattionexception in the event of a submission from other prior to a terminal event in the source singlethis behavior is really confusing why not be same as observable am i missing anything akarnokd and i discussed it in single currently emits a nosuchelementexception if the stream is terminated prior to any event emission by signaling a cancellationexception we can at least signal to the subscriber if the error was due to takeuntil unsubscribing it or normal missing emissions hzsweers thanks for clarifying however i would expect singletakeuntil returns something that contains or item how about returning observable instead then the semantics of singletakeuntil is onnext{ } oncompleted onerror which is consistent with observabletakeuntil onnext{ n} oncompleted onerror the operators should stay in the same type as long as they can and there are operators that simply cant behave the same as their counterpart in other reactive types if one wishes the observabletakeuntil behavior one can use toobservable takeuntil and get that behavior the operators should stay in the same type as long as they can and there are operators that simply cant behave the same as their counterpart in other reactive types if one wishes the observabletakeuntil behavior one can use toobservable takeuntil and get that behaviorif so i vote for nosuchelementexception as cancellationexception seems counterintuitive to me cancellationexception looks some codes cancel single eg i call unsubscribe in some place but here the error is that singletakeuntil returns something that is not single hence i would expect nosuchelementexception thats fair but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved i was of the impression that onerror was primarily for serious unexpected errors whereas this seems like not unexpected or seriousconsider the followingwith nosuchelementexception javapublishsubject source publishsubjectcreate publishsubject until publishsubjectcreate sourcetake tosingle takeuntil untiltake tosingle subscribe new action { override public void call integer integer { systemoutprintln success } } new action { override public void call throwable throwable { systemoutprintln i dont know if it was due to unsubscribing or the source is misbehaving } } untilonnext vs with cancellationexception javapublishsubject source publishsubjectcreate publishsubject until publishsubjectcreate sourcetake tosingle takeuntil untiltake tosingle subscribe new action { override public void call integer integer { systemoutprintln success } } new action { override public void call throwable throwable { if throwable instanceof cancellationexception { systemoutprintln it was canceled } else { systemoutprintln source didnt emit } } } untilonnext the example i gave in the issue is probably the best example for me we use something similar to this for lifecycle binding in android when the lifecycle ends it might unsubscribe this in the middle for a normal error we might show a generic an error occurred message in the event that its just the lifecycle ending we dont want to react that way and rather likely just want to do nothing at all or clean up resources im fine with not using cancellationexception but i think it would be useful to add a means of being able to differentiate between unsubscription reasons i thought about just specifying a message but felt that akarnokds cancellationexception suggestion made it more clear ill add an overload for completable as well and remove the old test style in the new tests here for now stevegury just to be clear the new style would be the subject based approach right hzsweers i actually typed its a big deal but i was willing to say its not a big deal i corrected my previous comment i prefer the subject based approach but i am not strongly opinionated about thati still on the current implementation thats fair but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehavedmy point here is if singletakeuntil returns a single that emits nothing it should be misbehaved rather than unsubscribed i think cancellationexception is the clearer reaction here remember the problems around the observablesingle and how it is a source of problem to find out exactly who didnt signal here you know that if takeuntil is tripped and not some upstream machinery ends up being empty i think cancellationexception is the clearer reaction here remember the problems around the observablesingle and how it is a source of problem to find out exactly who didnt signal here you know that if takeuntil is tripped and not some upstream machinery ends up being emptywhat if we want to add other operator that may return something doesnt signal if it also emits cancellationexception then we still cannot find out exactly who didnt signal so why not use nosuchelementexception to indicate all cases that didnt signal what about a subclass of nosuchelementexception a cancelednosuchelementexception so to speak wouldnt break the downstream apis but still allows for the subscriber to differentiate what about a subclass of nosuchelementexception a cancelednosuchelementexception so to speak wouldnt break the downstream apis but still allows for the subscriber to differentiatemaybe a more general question should we add special exceptions for different operators or we just use a general exception to indicate the same error i think people should be aware of the implications of operators they use would compositeexception possibly be precedent for this i think people should be aware of the implications of operators they use would compositeexception possibly be precedent for thiscompositeexception is fine and clear it indicates there are multiple errors thrown all classes in rxexceptions are well defined and its very easy to connect them with the bad cases i can just read the exception name and tell what my codes violate but for cancellationexception its hard to connect it with takeuntil especially people use some library that calls takeuntil internally in addition imo if i see cancellationexception my first thought is futurecancel is called somewhereif we can define clearly that when should throw cancellationexception cancelednosuchelementexception or whatever you propose when should throw nosuchelementexception i wont be against that for now the confusing thing for me is that if a single doesnt signal i may receive cancellationexception or nosuchelementexception im fine with either i think we could be clear in the documentation and subclassing would still allow downstream subscribers to treat it as a nosuchelementexception akarnokd stevegury thoughts added takeuntil completable support and standardized tests updated with a separate commit for easier reviewing let me know if you want me to squash againping akarnokd stevegury
3714,1,0,0,0,0,0,1,0,add maxconcurrent parameter to concatmapeager relevant issue will you update this pr yes on it i submitted a commit with your proposed changes sorry for the delay feel free to give me more comments changes also i can squash if needed dont squash this time github has now a new feature for the merge button where it offers squashing id like to test if it really squashes everything and the main just gets commit nothing critical akarnokd squashing on github works and it works especially great when author of the pr just commits on top of previous commits because github now remembers what code youve checked and what not and you can continue reviewing from previous point doesnt work for me when pr is always squashed i have updated the pr do pr commits trigger github notifications should i comment after i do an update unfortunately no notification 👍
3722,1,0,0,0,0,0,1,0,add maxconcurrent parameter to flatmapiterable refs should these new overloaded functions be annotated with beta the failing test testnomorerequestsafterunsubscribe seems unrelated all tests pass locally if you could add one unit test for each method that verifies maxconcurrent is honored that would be great while writing the test i figured you might have been right when commenting on issue if i am not mistaken all the observables created with operatormappairconvertselector use the same scheduler there is no way to subscribe them to different schedulers and thus are run sequentially and until completion would adding a scheduler parameter make sense there is no scheduler involved here so no as it is now
3733,1,0,0,0,1,1,1,1,avoid swallowing errors in completable instead deliver them up to the threads uncaught exception handlerfixes reactivex rxjava what happened to completabletest akarnokd sorry ij formatted it will clean up and push again just a nit about timeout in tests otherwise removed timeouts
3741,1,0,0,0,0,1,1,1,add doonsubscribe for single ref i didnt write much unit tests for doonsubscribe because it internally uses operatordoonsubscribe which is well covered thanks aaronhe
3752,1,0,0,0,0,1,1,1,singleusing this pr adds the factory method using overload to single as requested in for convenience ive also added singlesubscribe observer lgtm
3756,1,0,0,0,0,0,1,0,clarify join groupjoin no ordering guarantees original issue
3766,1,0,0,0,0,1,1,1,add singleonerrorresumenext func closes closes closes whoa issues at a time akarnokd fixed your comments btw should i add experimental to these operators yes and copy over the experimental and since tags into the javadoc there is this new like option but do you get a notification for them noon mon mar pm david karnok notifications githubcom wrote image there is this new like option but do you get a notification for them — you are receiving this because you are subscribed to this thread reply to this email directly or view it on github https githubcom reactivex rxjava pull issuecomment
3766,1,0,0,0,0,1,1,1,add singleonerrorresumenext func closes closes closes whoa issues at a time akarnokd fixed your comments btw should i add experimental to these operators yes and copy over the experimental and since tags into the javadoc there is this new like option but do you get a notification for them noon mon mar pm david karnok notifications githubcom wrote image there is this new like option but do you get a notification for them — you are receiving this because you are subscribed to this thread reply to this email directly or view it on github https githubcom reactivex rxjava pull issuecomment
3766,1,0,0,0,0,1,1,1,add singleonerrorresumenext func closes closes closes whoa issues at a time akarnokd fixed your comments btw should i add experimental to these operators yes and copy over the experimental and since tags into the javadoc there is this new like option but do you get a notification for them noon mon mar pm david karnok notifications githubcom wrote image there is this new like option but do you get a notification for them — you are receiving this because you are subscribed to this thread reply to this email directly or view it on github https githubcom reactivex rxjava pull issuecomment
3777,1,0,0,0,0,0,1,0,observeon allow configurable buffer size the observeon operator is backed by a small queue of slots that mayoverflow quickly on slow producers this could only be avoided byadding a backpressure operator before the observeon not onlyinconvenient but also taking a perf hit as it forces hops between twoqueues this patch allows modifying the default queue size on the observeonoperatorfixes signed off by galo navarro anglorvaroa gmailcom though id leave old test for default buffer size and just add a new one rebased fixed the javadoc link and a spelling mistake artem zinnatullin i reused this one to avoid redundancy as the code path is virtually the same and there are tests the ones referenced in the link which use the default size let me know if you still prefer the cases and ill fix that yeah i understand just afraid that one may change linked tests and we wont cover overload one day well setup code coverage i hope agh thanks akarnokd i didnt notice i changed computers so i was back on the st patch and lost the overload resubmitted based on the one with all overloads and added the extra test instead of rewriting it hopefully fine now ive seen some failures on the test locally and there is also a bug in the test the loop should start at not i cant look into it right now but will take a look asap im merging this the changes are algorithmically solid so im not sure what failures you see locally thanks akarnokd the failure was no error notifications emitted at random sizes but i did notice travis didnt complain ping me if it surfaces
3787,0,0,0,0,0,1,1,0,fix groupby delaying group completion till all groups were emitted in groupby was fixed to properly honor backpressure on the outer observable the change included a drain loop that emitted oncompleted to the groups only when all groupedobservable s were drained from the main queue this delayed the groups completion unnecessarily causing the concat operator to hang in some source consumer cases such as this pr fixes the behavior by signalling oncompleted to the groups the moment the main completes note however that concatenating groups is eventually prone to hangs due to the groups not completing until the source completes thus concat cant switch to the next source one should use flatmap or concatmapeager instead
3789,1,0,0,0,0,1,1,1,prevent singlezip of zero singles closes
3790,1,0,0,0,0,0,1,0,expose singlelift closes
3822,1,0,0,1,0,0,1,0,make defensive copy of the properties in rxjavaplugins possible solution to
3856,1,0,0,0,0,0,1,0,provide factories for creating the default scheduler instances unlike other hooks the rxjavaschedulershook has no access to the real scheduler instances in order to do wrapping delegation with these factory methods a hook can access what would otherwise be the instance used since there is often no other means of creating these specialized schedulersfor android this wrapping delegation use case is important for ui testing we have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when theyre empty this is easy to do currently but you cannot wrap the real instance and instead have to supply alternate implementations which might subtly alter the behavior under testthese three methods are referenced in and i think providing the defaults is useful as well as eventually adding overloads which take threadfactory instances for each please correct me if im wrong but looks like as soon as you access one of the new methods static final schedulersinstance will be instantiated which will make impossible to use rxjavaschedulershook as you described have you checked described use case maybe add such tests as example if possible we have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when theyre emptyjust wanted to say for those who may find this pr later empty non empty state of schedulers is not source of truth for ui tests you may have some background or time related periodic etc code that does not affect the ui directly and may even freeze tests you are accessing the methods from the hook which was called from the static initializer of this class on first reference to schedulersio or the like ill add a test yup but there is still potential problem if somebody will try to create schedulers using these methods outside of the hook for example in beforeclass etc or probably even just for non test needs may result in hours of trying to understand why hook is not overriding schedulers…maybe move these methods to rxjavaschedulershook that prevents package scoped methods from being used in the factory that prevents package scoped methods from being used in the factorywe can move schedulers to internalschedulers to defend from that otherwise somebody can always use reflection to break package scope and make constructors publicideal solution would be to return schedulers in rxjavaschedulershook by default instead of returning null like it does now so calling supergetsomescheduler will give original instance that you can wrap etc as you wish though well have to handle null as default too sorry im very tired and want to sleep so i may come to wrong conclusions the factories were moved to the hook now but let me ask again what about this ideal solution would be to return schedulers in rxjavaschedulershook by default instead of returning null like it does now so calling supergetsomescheduler will give original instance that you can wrap etc as you wish though well have to handle null as default toono need for new methods no need to fight with instantiation order and package scope visibility yes user wont be able to instantiate new scheduler of required type outside of the hook but its not possible at the moment so nobody loses nothing 👍
3866,1,0,0,0,0,1,1,1,add singletocompletable closes 👍 seems github doesnt add the pr description to the commit message automatically when squashing a pr i added it manually
3879,1,0,0,0,0,1,1,0,expose scheduler factories which accept thread factories this allows hooks to create schedulers whose threads have different prioritiescloses 👍 thankson fri apr at pm david karnok notifications githubcomwrote merged https githubcom reactivex rxjava pull — you are receiving this because you authored the thread reply to this email directly or view it on github https githubcom reactivex rxjava pull event
3883,1,0,0,0,0,1,1,0,fix multiple chained singledoafterterminate not calling actions resolves the bug is caused by the impedance mismatch between observable s subscriber and single s singlesubscriber the original code called onnext which immediately signalled an onsuccess but also caused an unsubscription preventing a delivery of oncompleted in the inner singlethe fix keeps onsuccess onerror rails intact throughout the chain 👍
3886,1,0,0,0,0,1,1,0,throwiffatal now throws oncompletedfailedexception otherwise if theres an error in oncompleted the exception isswallowed and unreportedfixes 👍
3907,1,0,0,0,0,0,1,0,doonunsubscribe javadoc clarifications see 👍
3941,1,0,0,0,0,1,1,1,fix singleflatmap not composing subscription through see 👍
3942,1,0,0,1,0,0,1,0,add completablesafesubscribe option rxjavaplugins hook support add option to safely subscribe a completablesubscriber regular subscriber and handle onxxx failuressee also naming and whether or not the safe wrapping should be the default is open to discussion in my opinion safe wrapping should be the default as its the default in observable and single at least the should behave the same way when using them one should expect them to have a difference in their essential semantics and not in these kind of things should the tests about error handling plugin in be here or we leave it in that pr bryant your pr has a test failure rxpluginsrxjavapluginstest testonerrorwhenusingcompletable failed javalangassertionerror expected but was at orgjunitassertfail assertjava at orgjunitassertfailnotequals assertjava at orgjunitassertassertequals assertjava at orgjunitassertassertequals assertjava at rxpluginsrxjavapluginstesttestonerrorwhenusingcompletable rxjavapluginstestjava fixed typo renamed methods akarnokd they fail on purpose because i made the test but didnt fix the problem completable is not calling the error handling plugin the methods should be the other way around following single and observable there should be a single unsafesubscribe method which accepts a parameter of type completablesubscriber and subscribe should be present in the following ways subscribe subscribe action subscribe action action subscribe subscriber and subscribe completablesubscriber the subscribe methods wrap with safecomletablesubscriber similar to how observablesubscribe wraps with safesubscriber subscribe subscriber is there to allow conversion and cross type apis to bypass the safety overhead updated with plugin support can you cherry pick the commit that adds tests for the error handling plugn in completable and single https githubcom bryant rxjava commit cc dcce d e ce ff b b from sure done the comment todo plugin wrapping onsubscribe in completablecreate can be deleted as the constructor is already calling the hook now removed comment changed to reuse methods added onstart call please add the missing experimental otherwise 👍 added missing annotations 👍
3948,1,0,0,0,0,1,1,1,add completableandthen completable deprecate endwith see please update unit tests that use these deprecated methods done 👍 but id either duplicate tests or make universal test functions and test both endwith and andthen to make sure that we dont break old behavior of public api the question is also since completable is still experimental we could if this is wanted go the hard way and remove the deprecated methods and make everyone force to use the standard new methods since there are already quite a few deprecated duplicated methods 👍 but id either duplicate tests or make universal test functions and test both endwith and andthen to make sure that we dont break old behavior of public api artem zinnatullin im not against it but this is really minor as andthen just calls endwith im going to merge this feel free to add tests in a separate pr if you wish
3966,1,0,0,0,0,0,1,0,add multi other withlatestfrom operators add withlatestfrom operator version that can take to n other sources and combine them with the main sourcerelated 👍
3971,1,0,0,0,0,0,1,0,request rebatch operator this is a follow up on but with a separate operator on observable 👍 abersnaze stealthcode you had some use cases for this any objections the reuse of the observeon is interesting but couldnt it be done without the allocation of a queue if the downstream request is unbounded and the downstream has caught up then the queue can be skipped in this case observeon cant be reused anymore and a custom drain logic has to be implementedotherwise the upstream emissions have to be stored temporarily for an underrequesting downstream 👍 i know that abersnaze still had reservations about this i think that this should not be using observeon my concern is this if abersnaze implemented the batching functionality then why wouldnt we use that the queue in observeon scheduling creates a layer of indirection that seems unnecessary remember this started out as a change to observeon to not ignore the immediate scheduler but people wanted this behavior exposed behind a proper name thanks for reminding me of the context of this work it seems like we have implementations for the same functionality i think abersnaze and i agree that the features of request batching and request valve type functionality could be composed however i think that using observeon for this functionality is not necessarily the best way to accomplish this i personally would be okay with either implementation i think observeon is a nice choice because of the request management but would prefer it more if there wasnt a queue but realistically i think the choice is fine also its interesting to note that users are gravitating more and more to taking direct control over the requester producer interactions for example this pr does something similar but exactly n could be modified to have optional and without a queue
3974,1,0,0,0,0,0,1,0,add terminal clarification to switchmap operators see 👍
3977,1,0,0,0,0,1,1,0,use the correct throwable to set the cause for compositeexception the cause of is we use a wrong throwable its cause has been set to set the cause and initcause will throw an exception hence the cause chain is not created correctly in this pr it searches the root cause which doesnt have a cause and use it to call initcause 👍
3981,1,0,0,0,0,0,1,0,document zip eagerness see and 👍 👍
3981,1,0,0,0,0,0,1,0,document zip eagerness see and 👍 👍
3986,1,0,0,0,0,0,1,0,add schedulersreset for better testing resolves this adds a reset method to schedulers with the main benefit being improved testing support this does slightly tweak the internal api of schedulers to use a getinstance approach to allow lazy init this way we dont have to replace the singleton instance during reset and allow it to lazily re evaluate upon next usage otherwise if you change your scheduler hook youd always have to make sure you set it before you call schedulersreset will run perf tests overnight in case im not sure how much of a tradeoff moving to an internal getinstance approach costs if anythingcc zsxwing i think the failing test might be flaky it doesnt fail for me locally thanks i dont suppose this could be squeezed into the requires review of could it that test doesnt fail for me locally im not really sure what do do about it any ideas ive extended the timeout in some tests in pr once it appears it was enough ill merge that and this pr should work cool ill rebase after thats merged then 👍 non need to rebase but to rerun the travis job did it for you ah i pushed the rebase as you commented oh well ¯\_ ツ _ ¯ cool looks like the timeout tweaks worked code is ok so 👍 but resetting the schedulers is dangerous during application runtime and also bad code could invoke it in the middle of an application life cycle and really break applications if not used cautiouslywhy were adding more and more apis to break things and allow people use bad practices its two and theyre largely targeted at testing i dont think having a reset is bad practice and like most code only breaks things if you make poor decisions with it i could just as easily add a bad scheduling hook or buggy global error handlerhaving to otherwise use di to inject schedulers everywhere gets tedious fast and inadvertantly discourages people from actually using the conventional static apis with this it can be wrapped up in a nice test rule and enforces a clean state before and after tests using the plugins api also allows you to control the schedulers used across modules and rd party libraries as wellfor me its a missing and much needed api i dont think requiring di everywhere you use a scheduler just to test is a scalable approach considering how ubiquitous they are could you imagine injecting say timber everywhere you wanted to use itthats my speel for why i think this is useful i wonder why people with such testing needs dont roll their own global myschedulers class which lets them easily switch scheduler types and use that like observeon myschedulersforcomputation of course this means you have to remember to use the scheduler overloaded operators everywhere i also just copied that doc from the other reset i dont know that its as dangerous though it just forces a re init if its dangerous its because resetting rx plugins is dangerous since theyre not explicitly bound i wouldnt mind making the doc warning a little less severe p rd party libraries dont use your apps global class plus that case still requires you to hook in a delegate scheduler in tests early enough were adding a global scheduler of sorts for background work and still planning to have a reset on the schedulers libraries should expose the option to customize the scheduler they run on do you know a library that doesnt allow such customization most actually they just use the built in schedulerswhatever or androidschedulersmainthread i dont see how a wrapper with static methods solves this either you still need some mechanism of resetting the underlying scheduleris there any harm in allowing reset here to facilitate just having developers go through the standard api but heres a quick example off the top of my head https githubcom mcharmas android reactivelocation otherwise i think the whole plugin system in rxjava x is getting cumbersome in x i did a much simpler and direct approach for overriding stufffor example this is how the schedulers get initialized https githubcom reactivex rxjava blob x src main java io reactivex schedulers schedulersjaval this is where they are returned https githubcom reactivex rxjava blob x src main java io reactivex schedulers schedulersjaval changing what scheduler is returned from schedulers is easy viahttps githubcom reactivex rxjava blob x src main java io reactivex plugins rxjavapluginsjaval by adding a function that can wrap or completely replace the scheduleri dont know if netflix wants at all but if so id be glad to rewrite the plugin system but heres a quick example off the top of my head https githubcom mcharmas android reactivelocationbut where does it use rxjava schedulers forcefully found one reversegeocodeobservablejava https githubcom mcharmas android reactivelocation blob a d ebfc ccd acf ef bd beb d da android reactive location src main java pl charmas android reactivelocation observables geocode reversegeocodeobservablejava they should have provided a way to customize that scheduler anyway agreed with david that should be the direction rxjava should go to teach users how to do either di for schedulers or own myschedulers classwith resetting api and teach library developers to accept schedulers fromuserotherwise well stuck in a loop like this where were adding one api thataffects different parts of the library and then we need to add another apito fix problems of previous oneon fri jun david karnok notifications githubcom wrote libraries should expose the option to customize the scheduler they run on do you know a library that doesnt allow such customization — you are receiving this because you commented reply to this email directly view it on github https githubcom reactivex rxjava pull issuecomment or mute the thread https githubcom notifications unsubscribe aa b iwb bpqqz qwzwylstczg flv nks qib igajpzm itocb not disagreeing that it would be preferable for libraries to expose a way but in practice ive seen that most do notthe x plugin approach looks nice though the lockdown bit seems like it imposed the same restrictions that x plugins have i dont know what the plans are but between having something like this now and waiting for a or x release id much rather have a necessary evil now with an eye toward the future i dont really subscribe to the slippery slope worry considering this is part of what the last one was supposed to help improveits not a matter of people not understanding di its that di is not a scalable solution for this its unnecessary tedium and boilerplate why even have the static api at all if its not going to be used are you going to add di to rx util librariesbetween getting all library developers to update waiting for x rewriting the plugin system or doing this in a safe way now and banking on x long term id rather have the last option it works for all cases now and has fairly minimal impact safety concerns well let me know what you guys want to do i feel like this is breaking down over the current plugins api which we all agree is not perfect the way i see it any myplugins approach would still face the same issue in that youd need to implement some way of internally delegating to me this is a reasonable short term solution for right now considering and x are far off and i think the framework should facilitate use of whatever patterns developers prefer rather than impose them would you be agreeable to doing this for now with the long term goal being to revamp the plugins api in the futureive updated the doc as well since its actually not that dangerous and only causes behavioral changes if the plugin hook has changed which _is_ already documented as such also zsxwing seemed in favor of this change in the issue do you want to maybe chime in here while i do agree with artem david that a better long term solution here would be to pass in scheduler objects where needed setting things up for di where developers choose it the scalability of di isnt the question here rather than relying on static methods to get them this pr seems like the best way forward for how things currently work in rx there has been lots of discussion elsewhere about how replacing a scheduler for testing is very painful if you make use of the standard schedulers static methods to get your scheduler instances and the reset methods for the plugin hook only work halfway because of the current static caching behavior because the current reset for testing functionality is fundamentally broken i strongly recommend accepting this pr to fix it and take this discussion into account for the design of upcoming versions of plugins or developer usage recommendations because the current reset for testing functionality is fundamentally broken i strongly recommend accepting this pr to fix itagreed this pr is pretty useful for unit tests 👍 for merging this one may sound crazy but what about marking reset as deprecated with explanation of better ways i think experimental with a doc explaining that the api will be revamped in the future would make more sense i dont have strong feelings for or against deprecated though and can switch to that if others want anything to help move this pr along deprecated will produce compile warning and will be visible in ide pretty sure most of the people who will use schedulersreset will copy paste from so or some blog post which will arrive as soon as we merge release this and wont even know that its experimental im not blocking pr if that matters fair point akarnokd any thoughts it seems like this has the requisite 👍s to move forward can add deprecated if you think its worthwhile do we really expect people to accidentally use this and be surpriseddeprecating the method sounds like it punishes those who want to use itid deprecate create and others long before this methodon mon jun pm zac sweers notifications githubcom wrote fair point akarnokd https githubcom akarnokd any thoughts it seems like this has the requisite 👍s to move forward can add deprecated if you think its worthwhile — you are receiving this because you are subscribed to this thread reply to this email directly view it on github https githubcom reactivex rxjava pull issuecomment or mute the thread https githubcom notifications unsubscribe aaeeeahh igqbi kuzyagrnavxgcekqwks qji wgajpzm itocb when you put it that way i think i agree dont deprecate it do we really expect people to accidentally use this and be surprisedhave seen helped people asking how to solve problems after applying scheduler hooks for testing they didnt realize mostly how it can break things create is local evil it doesnt break global state alternative solution would be to move apis like create reset and so on to rxunsafe like java rust and so on its there but use it at your own risk
3996,1,0,0,0,0,0,1,0,fix reset shutting down everything other than the schedulers the reset shut down all the main schedulers and the helper pools causing the failure in hzsweers you were right with the need for the instance shutdown method minor nit rest of the code looks good 👍 nice catch sorry for the inadvertent bug and glad it was a relatively simple fix 👍 👍
4024,1,0,0,0,0,0,1,0,update dooneach observer javadoc fixes the documentation problem reported in nice improvement
4026,1,0,0,0,0,0,1,0,expand and explain cache in more detail this pr rephrases the cache documentation a bit and adds workaround for stopping and forgetting the cached valuesrelated 👍 this obviously isnt related to that but testreplaysubjectconcurrentsubscriptions failed in ci thanks will look into it before merging this could be a bug due a pattern they share nothing obvious so far the test passes for me locally when run times will investigate it further through
4034,1,0,0,0,0,0,1,0,distinctuntilchanged with direct value comparator alternative alternative implementation to lgtm thanks jake for the review 👍
4036,1,0,0,0,0,0,1,0,added zip function with observable array as discussed in with akarnokd thanks almost forgot please also add a unit test that verifies this overload works with or a couple of sources you can add a unit test that for example loops from to generates an array with that many simple sources and checks if all source values actually zipped into the final value akarnokd sorry for the delay i just added tests for and multiple array sizes let me know if thats ok 👍
4051,1,0,0,1,0,1,1,0,fix replaysubject anomaly around caughtup by removing that optimization adding the backpressure support to replaysubject exposed a race condition around the caughtup optimizationthe problem occurs when the source thread has caught up after drain returned true but at the same time a concurrent drain starts running due to a subscribe process finishing or requesting on top of the previous longmax_value this concurrent drain may think the replay hasnt started yet by finding rpnode null or seeing that the buffer has more elements that may get double emitted the current solution is to remove this optimization until we come up with a correct optimizationrelated current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by fb f bd https codecovio gh reactivex rxjava compare fb bda ba edf c b cbfef a b f bd a ec a b d c f
4053,1,0,0,1,0,0,1,0,convert schedulersupport annotation to accept a string value closes current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by eeeb dc e https codecovio gh reactivex rxjava compare eeeb c e fce b a e cc ea cc dc e f c cc bac b c i meant to include in the pr description that i removed the single value it was unused and the javadoc didnt make it clear as to what the exact usage would be anyway no problem can be added later if necessary although singlescheduler is not planned to be a default for any operators right now
4063,1,0,0,0,0,0,1,0,scan & reduce give javadoc about unsharing the initialvalue replacement for current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by eeaca d https codecovio gh reactivex rxjava compare eeaca c b a a cb c ab c d edd b d d aa ae ac d merging this to not get in conflict with other prs targeting observable
4069,1,0,0,1,0,1,1,1,remove second type parameter from subject and flowprocessor closes
4070,1,0,0,0,0,1,1,1,merge serialdisposable and multipleassignmentdisposable closes although doesnt address the name of the class current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by f d d https codecovio gh reactivex rxjava compare f d fc c f e d ce c af dc bdfd cfc e aa ecb b excellent although doesnt address the name of the classno problem
4102,1,0,0,1,0,1,1,1,expose isdisposed method on disposable this is a fairly dumb addition theres lots of room for follow up improvement in the utilization of base helper classes and even removing some now duplicated state managementcloses there are a bunch of compilation errors https travis ciorg reactivex rxjava builds l probably missing imports i have to edit those by hand in each file so thediffs dont go wildon fri jun at am david karnok notifications githubcomwrote there are a bunch of compilation errors https travis ciorg reactivex rxjava builds l — you are receiving this because you authored the thread reply to this email directly view it on github https githubcom reactivex rxjava pull issuecomment or mute the thread https githubcom notifications unsubscribe aaeeeulxqkqjhxurrfw ao w klvogbdks qo bdgajpzm i er current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by ffed b abd a https codecovio gh reactivex rxjava compare ffed b a f d e bc eb e abd a ac f b fdd a a d de e thanks
4139,1,0,0,1,0,1,1,1,fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by df beb a https codecovio gh reactivex rxjava compare df b d d becb d ceacfeff a e eb a bfafb b f f f f
4139,1,0,0,1,0,1,1,1,fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by df beb a https codecovio gh reactivex rxjava compare df b d d becb d ceacfeff a e eb a bfafb b f f f f
4139,1,0,0,1,0,1,1,1,fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by df beb a https codecovio gh reactivex rxjava compare df b d d becb d ceacfeff a e eb a bfafb b f f f f
4140,1,0,0,0,0,1,1,1,change completablesubscribe onerror oncomplete to oncomplete onerror closes closes actually i can deprecate old one and add new one as overload it will have less impact on user code because only calls like subscribe actionsempty actionsempty will be ambiguous to the compilerthoughts current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by c da https codecovio gh reactivex rxjava compare c e b eda bc f fb f c da b d a e a fcafbea dynamic languages have trouble with the two methods lets only have method 👍
4140,1,0,0,0,0,1,1,1,change completablesubscribe onerror oncomplete to oncomplete onerror closes closes actually i can deprecate old one and add new one as overload it will have less impact on user code because only calls like subscribe actionsempty actionsempty will be ambiguous to the compilerthoughts current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last updated by c da https codecovio gh reactivex rxjava compare c e b eda bc f fb f c da b d a e a fcafbea dynamic languages have trouble with the two methods lets only have method 👍
4154,1,0,0,0,0,1,1,0,ability to create custom schedulers with behavior based on composing operators based on allows the use of operators for controlling the timing around when actions scheduled on workers are actually done this makes it possible to layer additional behavior on an existing scheduler the main parameter is a function that flattens an observable into just one completable there must be a chain of operators connecting the returned value to the source observable otherwise any work scheduled on the scheduler will not be executedwhen schedulercreateworker is invoked a completable is onnextd to the combinator to be flattened if the completable is not immediately subscribed to an calls to workerschedule are buffered once the completable is subscribed to actions are then scheduled on the actual scheduler when the worker is unsubscribed the completable emits an oncomplete and triggers any behavior in the flattening operator the observable and all completable s give to the flattening function never onerrorslowing down the rate to no more than than a second java scheduler slowsched new schedulewhen workers { use concatenate to make each worker happen one at a time return completableconcat workersmap worker { delay the starting of the next worker by second return workerdelay timeunitseconds } } schedulerscomputation limit the amount concurrency two at a time without creating a new fix size thread pool java scheduler limitsched new schedulewhen workers { use merge max concurrent to two at a time return completablemerge workers } schedulerscomputation this test changes its timing pattern when run on one of the merging customization of this scheduler java testpublic void fasttasks { final scheduler sched new schedulewhen new func completable { override public completable call observable workers { return completablemerge workers } } schedulerscomputation observablerange flatmap new func { override public observable call final integer v { return observableinterval timeunitmilliseconds sched take map new func { override public string call long u { return v refresh u } } } } timeinterval toblocking subscribe new action { override public void call timeinterval v { systemoutprintln v } } } what i get is that for the first seconds i get refresh x and refresh x in ms intervals but after thet all the refresh x and refresh x gets printed instantly timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh timeinterval intervalinmilliseconds value refresh if i understand the purpose of this scheduler especially with the merge workers case you want to limit the number of concurrently running tasks however the implementation blocks out further workers from executing anything until a previous worker is released for example given a service that accepts connections per client if i have to periodically execute or more tasks against this service via the interval above only the first two would execute periodically in addition the other would slowly pile up tasks in the internal queue and if the associated sequence uses timeout this will make it timeouti think the solution is to use a fixed thread pool instead it limits the number of concurrent tasks while allowing all workers to make progressmy second reservation is that since the schedulewhen is a self contained class unlike operators that need a method in observable this can live in any external library just like androidschedulers this isnt intended for long running observables your example is a pathological case rather than scheduling on the outer timer if flatmap and schedule on the inner observables it would not block and all three would be able to runthere are many was to misuse this but if used in a controlled setting of a service library it can be use to protect service from bursts of traffic the main point is to be able to reuse an existing scheduler with some additional behavior rather than having to create new thread pools to enforce rate limits to address your concern ive changed the api from ob comp to ob comp this is a more direct mapping of scheduler of workers of actions that give the user complete control how and when the actions are done in the example above the actions from all workers can be merged into one stream of actions and then the merge max n concurrent could be applied to the actions to better simulate running on a n threads current coverage https codecovio gh reactivex rxjava pull srcpr is merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by powered by codecov https codecoviosrcpr last updated by c e f df https codecovio gh reactivex rxjava compare c e efd c c bda a de e f dfd ba a caa f aa f srcpr akarnokd i think ive addressed all the concerns regrading this pr what can i do help get this experiment merged oh sorry was busy with something elseokay lets continue with the experiment cc zsxwing artem zinnatullin does 👍 mean the pr is merged now should we wait for a review from zsxwing and or artem zinnatullin lets wait for at least one of them 👍 for this experiment api just one comment about synchronized actionqueue very interesting api abersnaze few comments and im 👍 with it i dont know how i would draw the marble diagram for this one abersnaze if all feedback is resolved feel free to merge this pr and if you want post any short description of this addition beyond the ref to this pr thanks for the feed back as far as im concerned the feedback cycle hadnt really finished on this im hoping that api changes etc are not out of scope if i raise an issue my comment about the use of subscribe in the constructor was not addressed should be unsafesubscribe i think davidmoten if you have further concerns dont hesitate to open an issue or post a pr the file needs some javadoc tidying up anyway
4225,1,0,0,0,0,0,1,0,publishsubject fail fast when backpressured this pr modifies the publishsubject to fail fast if the child subscriber cant keep up therefore instead of some other operator failing somewhere downstream the missingbackpressureexception now points to the publishsubject instead in addition there were complaints in that cross unsubscription doesnt stop another subscriber from receiving events if it comes after the unsubscribe call in the dispatch loop since publishsubject now tracks request which is the main extra overhead it is trivial to add the necessary eager check for the unsubscribed statebenchmark comparison i windows x java u image https cloudgithubusercontentcom assets a acf ffd e ae fc d a d png as expected this adds some overhead although most noticeably for the mid range only short lived publishing is now slightly faster eveninterestingly many benchmarks behave oddly in these s range we could be hitting some jit threshold while in other benchmarks the warmup iteration numbers keep increasing as jit does its work but here it starts out quite nicely then drops and stays that way im on windows so jmh perfasm doesnt workif this direction is accepted ill update behaviorsubject timer and interval do do the same tracking current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by powered by codecov https codecoviosrcpr last update df b b b https codecovio gh reactivex rxjava compare df f fe cfc c ce c b cc b b b cf e b d fe fd e b ae srcpr 👍 im afraid that this will break some amount of user code but this has to be done… im afraid that this will break some amount of user code but this has to be done…to paraphrase godzilla _let them fail early _ 👍 the recent changes to replaysubject after v broke my unit tests not sure if caused by this pr or probably since it started after i upgraded to in my specific case i was reusing the same testsubscriber after unsubscribing and then subscribing again in this case im no longer getting events on the testsubscriber after resubscribing it this is roughly what im doing javareplaysubject subject replaysubjectcreate testsubscriber subscriber new testsubscriber subscription subscription subjectsubscribe subscriber subscriptionunsubscribe subjectonnext foo subjectoncompleted subjectsubscribe subscriber assertions below pass with v but fail with and abovesubscriberassertcompleted subscriberassertvalue foo questions is this the expected behavior or a bug if expected is there any way i can reuse the same subscriber again after it has been unsubscribedthanks alright apparently using testobserver instead of testsubscriber fixes the problem although that one is deprecated looks like youre not supposed to reuse a testsubscriber i ended up rolling my own testobserver that has the same convenience methods as testsubscriber like assertnoerrors assertcompleted etcit seems to me that testobserver should not be deprecated because it seems useful in such cases what do you think you are not supposed to reuse subscriber ever subscribe with a new testsubscriber and assert on that my reading of this change is that its no longer possible to emit on a publishsubject that has no observers yet if so isnt that a rather large behaviour api break a lot more than just failing earlythis change broke our tests but i dont see any discussion of this possibility above was it considered i dont see anything in the javadocs that suggests that emitting on an unsubscribed subject is a problem my reading of this change is that its no longer possible to emit on a publishsubject that has no observers yet publishsubject considers each of the subscribed subscribers individually and sending an onerror if that particular subscriber is not ready to receive onnext events this doesnt prevent you from emitting onnext events when there is no subscriber as these events are simply dropped by publishsubject since day this change broke our tests but i dont see any discussion of this possibility above was it considered i dont see anything in the javadocs that suggests that emitting on an unsubscribed subject is a problemwithout seeing what your unit tests did its hard to say whats wrong with them indeed my mistake sorry i got confused reading the diff and thought it was going straight from the outer onnext to the inner producer class onnext doh i guess something subscribed has missing backpressure somewhere its hard to tell from the error where the root cause is though as the exception is thrown by the publishsubject and it doesnt say much about which subscriber had problems enable assembly tracking with rxjavahooksenableassemblytracking around a unit test that fails and youll get more detailed exceptions about what failed most likely but first make sure you dont call onnext concurrently on the publishsubject
4226,1,0,0,0,0,1,1,1,singleflatmapcompletable addresses happy to receive feedback on the implementation also should i take the documentation from flatmapobservable and adjust it current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update df aad f https codecovio gh reactivex rxjava compare df f fe cfc c ce c b cc aad fffbee e f d a b dc b b srcpr the unsubscription is not properly linked the possible exception thrown by the mapper is not handledsee this https gistgithubcom akarnokd ea b ec c f also should i take the documentation from flatmapobservable and adjust ityes updated the documentation i hope the wording is okay now also im pointing to https rawgithubusercontentcom wiki reactivex rxjava images rx operators singleflatmapcompletablepng which does not exist yet but davidmgross already tracked it at https githubcom reactivex reactivexgithubio issues i hope thats okaythanks for the completableflatmapsingletocompletable i knew something was missing i also created two more tests that cover some of the previously missing behaviour would it be possible to get this one into if zsxwing or anyone from netflix approves it in time 👍
4251,1,0,0,0,0,0,1,0,tomap prevent multiple terminal events support backpressure as per discussion in if an operator maps an onnext emission to an onerror emission downstream then it needs be defensive about an oncompleted being sent from upstream even if upstream has been unsubscribedincludes three unit tests that failed on the original code the fix also has the side effect of enabling gc of map when the factory fails onerror was called on the child not this so map was not set to null i thought it supported backpressure could you rewrite it by using deferredscalarsubscription unrelated test failure rxschedulerscomputationschedulertests testhandlederrorisnotdeliveredtothreadhandler failed javalangassertionerror handler should not have received anything expected but was at orgjunitassertfail assertjava at orgjunitassertfailnotequals assertjava at orgjunitassertassertequals assertjava at rxschedulersschedulerteststesthandlederrorisnotdeliveredtothreadhandler schedulertestsjava at rxschedulerscomputationschedulerteststesthandlederrorisnotdeliveredtothreadhandler computationschedulertestsjava i thought it supported backpressure could you rewrite it by using deferredscalarsubscriptionsure what i might do is fix multiple terminal emissions in onsubscribecollect first and make necessary done changes to deferredscalarsubscriber in that pr ill follow that with the backpressure fix for operatortomap akarnokd in terms of releasing a value so can be gcd i thought to modify deferredscalarsubscriber in this method so that the field thisvalue is set to null just before the call to aonnext javaprotected final void complete r value { subscriber a actual for { int s stateget if s no_request_has_value s has_request_has_value aisunsubscribed { return } if s has_request_no_value { r v value merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b c da https codecovio gh reactivex rxjava compare b c f ae a ffeb e a f b da d a d fbd d f srcpr rebased rewrote to use deferredscalarsubscribersafe use singleton of defaultmapfactory moved to onsubscribe to save allocations added backpressure test good idea ive updated the pr
4261,1,0,0,0,0,0,1,0,concatdelayerror multiple arguments this pr adds multiple arguments to concatdelayerror operatorrelated to current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update d c d cd https codecovio gh reactivex rxjava compare d cdd e c f fc cc ae d cd fdb d c b c cff fbcb a fsrcpr cc artem zinnatullin stevegury zsxwing
4262,1,0,0,0,0,0,1,0,dooneach reduce allocations report to rxjavahooks as discussed in call rxjavahooksonerror for secondary errors reduced allocations actionsubscriber actionobserver operator onsubscribe added unit tests current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update d c d https codecovio gh reactivex rxjava compare d cdd e c f fc cc ae d c a c b e fc a dc a e srcpr fixed actionsubscriber usage and removed empty test ta
4288,1,0,0,1,1,1,1,1,move exceptions to public area exceptionhelper related the exceptionspropagate and exceptionsthrowiffatal are too useful to be hidden in an internal package so this pr moves them into the public ioreactivexexceptions package the terminal atomics related to throwable containers lives in the exceptionhelper enum current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update d c bb f https codecovio gh reactivex rxjava compare d c b d b d e a e b a ed df ab f a b b c c b e c faa srcpr lgtm
4297,1,0,1,1,0,1,1,1,rename single base interface types for consistency addresses current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update beda afa eef https codecovio gh reactivex rxjava compare beda a fac e add f a dbed c dbfa eef abd f ce ecfcc srcpr lgtm jakewharton if you want me to and you havent started yet id continue on that list and rename the other classes interfaces as well sure go for iton sun aug at pm niklas baudy notifications githubcomwrote jakewharton https githubcom jakewharton if you want me too and you havent started yet id continue on that list and rename the other classes interfaces as well — you are receiving this because you were mentioned reply to this email directly view it on github https githubcom reactivex rxjava pull issuecomment or mute the thread https githubcom notifications unsubscribe auth aaeeeddwatz v rvc goyxdwibfti cks qdhwlgajpzm jeeqo
4299,1,0,0,1,0,1,1,1,rename flowable base interface types for consistency addresses lgtm current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update ed a c d bb https codecovio gh reactivex rxjava compare ed a c b de f d d e c e cb db d bb aa f e b fc ef b d srcpr
4300,1,0,0,1,1,1,1,1,rename observable base interface types for consistency addresses there are a large amount of compilation errors rebased against x and re did the last changes looks good this time current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by powered by codecov https codecoviosrcpr last update e d f a https codecovio gh reactivex rxjava compare e d fe cebd cc c f e a fa eeac f f a b d db c fd ad a a f csrcpr
4302,1,0,0,1,0,1,1,1,rename completable base interface types for consistency addresses current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f https codecovio gh reactivex rxjava compare c ef e b bb f c f a c b aa d d e e ed csrcpr
4309,1,0,0,0,0,1,1,0,remove unused exceptions in public api as wanted in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update fe d f a https codecovio gh reactivex rxjava compare fe d f cb cd a c fed fc f a cec ddf e b d c c d srcpr cc jakewharton if the test changes are acceptable for your setup
4317,1,0,1,1,1,1,1,1,rename create to unsafecreate add safe create methods this is a proposal to solve but for x and closes built around one goal make the create methods actually usable by developerscurrently the advice given to most developers using x is avoid create unless you are absolutely sure you understand backpressure and cancellation and even then avoid it if possible this method is a trap that most new developers fall into _the method is named create after all so it must be how i create these things_ i want to make that statement not only correct but advisable at least when the still convenient from methods are not suitable such as when wrapping callback based apis because observable single and completable are backpressure free this amounts to just suppressing downstream notifications when disposed this doesnt seem too controversialthe most controversial part is that i have renamed flowablefromasync to flowablecreate thus making it the canonical way for users to create flowable s directly im much less opinionated on this change but it felt wrong to have an flowableunsafecreate with no associated create and fromasync is the safest version we have current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f c b https codecovio gh reactivex rxjava compare f a bbd f ee d d c b c b c e a ff cc ad srcpr i think its also important to point out i replaced consumer with flowablesource for parity with other safe create method parameter types the unsafe variant still takes a raw publisher however heart heart heart
4317,1,0,1,1,1,1,1,1,rename create to unsafecreate add safe create methods this is a proposal to solve but for x and closes built around one goal make the create methods actually usable by developerscurrently the advice given to most developers using x is avoid create unless you are absolutely sure you understand backpressure and cancellation and even then avoid it if possible this method is a trap that most new developers fall into _the method is named create after all so it must be how i create these things_ i want to make that statement not only correct but advisable at least when the still convenient from methods are not suitable such as when wrapping callback based apis because observable single and completable are backpressure free this amounts to just suppressing downstream notifications when disposed this doesnt seem too controversialthe most controversial part is that i have renamed flowablefromasync to flowablecreate thus making it the canonical way for users to create flowable s directly im much less opinionated on this change but it felt wrong to have an flowableunsafecreate with no associated create and fromasync is the safest version we have current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f c b https codecovio gh reactivex rxjava compare f a bbd f ee d d c b c b c e a ff cc ad srcpr i think its also important to point out i replaced consumer with flowablesource for parity with other safe create method parameter types the unsafe variant still takes a raw publisher however heart heart heart
4330,1,0,0,0,0,1,1,0,added observableconcat iterable see i also adjusted the test as it was testing the wrong thing before current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b a f fd https codecovio gh reactivex rxjava compare b a c d a a b a eb be ee f fd dde d c b ef ec c fef dsrcpr 👍 thanks
4337,1,0,0,0,0,0,1,0,move disposableobserver to public area add some javadocs move disposableobserver to ioreactivexobservers some documentationrelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update cf b b a https codecovio gh reactivex rxjava compare cf be e f ec d e a b b ae e cc e a e f b fbbe srcpr having these in the public api make it seem like asyncobserver becomes obsolete in the case where its not managing any additional resources should we rename it to resourceobserver or something and have it always manage resources sure will you do it yep
4370,1,0,0,1,0,1,1,1,remove try optional introduce notification this pr removes the try and optional classes and re introduces notification there are several ways to implement it this pr uses the abstract class private subclasses approach that saves on instance sizerelated discussion this pr uses the abstract class private subclasses approach that saves on instance sizethis seems like it would prevent a lot of inlining of the simple isers and geters because the callsites become polymorphic instead of monomorphicwhen i check the object layout having two fields in a root object doesnt increase the size because of object padding $ cat notificationjavafinal class notification { private static final object completed new object private final t value private final throwable error notification t value throwable error { thisvalue value thiserror error }}$ javac notificationjava$ java cp users jw downloads jol cli fulljar orgopenjdkjolmain internals notificationobjc class javalaunchhelper is implemented in both library java javavirtualmachines jdk _ jdk contents home bin java and library java javavirtualmachines jdk _ jdk contents home jre lib libinstrumentdylib one of the two will be used which one is undefined warning unable to attach serviceability agent you can try again with escalated privileges two options a use djoltrywithsudotrue to try with sudo b echo sudo tee proc sys kernel yama ptrace_scope running bit hotspot vm using compressed oop with bit shift using compressed klass with bit shift warning compressed references base shifts are guessed by the experiment warning therefore computed addresses are just guesses and are not reliable warning make sure to attach serviceability agent to get the reliable addresses objects are bytes aligned field sizes by type bytes array element sizes bytes vm fails to invoke the default constructor falling back to class only introspectionnotification object internals offset size type description value object header n a object notificationvalue n a throwable notificationerror n a loss due to the next object alignment instance size bytesspace losses bytes internal bytes external bytes total oops i wrote my comparison wrong and left it out of the comment youre right the individual classes are only bytes header field that said vs isnt that big of a deal to gain guaranteed monomorphism there are other ways of doing it ie single object field private wrapper for throwables bytes per onnext and bytes per onerror true ill leave it up to you though or getting at least bimorphic by having value null represent oncomplete updated now we have the smaller size but an instanceof check for every isonnext and getvalue calls current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update ec eb fcc a https codecovio gh reactivex rxjava compare ec eb f bcd a c d e c f ee fd ccc a b e e b e e d b a b srcpr looks good
4371,1,0,1,1,1,1,1,1,move blocking operators into the base classes this pr removes the blockingflowable and blockingobservable classes and moves the blocking operators into the respective reactive classes and names prefixed with blocking in addition many of the mentions of flowable has been replaced with observable in observable related current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update a bbf f https codecovio gh reactivex rxjava compare a bbf e f ac e f aa f d ffc f d cf b bfea fea df a efc db srcpr lgtm 👍
4421,1,0,0,0,0,0,1,0,fixes cleanups renames changes fix spelling mistakes more consistent parameter naming scheme based on but incomplete rc fix bugs due to wrong variable naming compact logic expressions fix completabledoafterterminate not called the right time onerrorreturnvalue renamed to onerrorreturnitem davidmgross once this pr has been merged it would be great you submitted one that has todo markers on those lines that need attention the naming scheme you suggested doesnt come intuitively to me so i may skip many of them without the markers current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update c da b aa https codecovio gh reactivex rxjava compare c da ca f c d e d c cc e ccb b aa a a eda b cca a srcpr
4422,1,0,0,0,0,1,1,0,add subscribewith to get back the subscriber observer fluently this pr adds the subscribewith methods to the base reactive types to mainly help with the x to x changeover as x subscribe subscriber return void instead of the resource cancellation unsubscription type disposable see the javadocs and the unit test for example userelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update aa b f https codecovio gh reactivex rxjava compare aa b cea aa e a f ec d a f a a fe e fd b bsrcpr
4425,1,0,0,0,0,1,1,1,remove completable prefix from nested interfaces move its subscription to top level this is only the completable part of it does not make completablesubscriber an abstract class nor create singleoperator compiler error https travis ciorg reactivex rxjava builds l current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f bf e https codecovio gh reactivex rxjava compare f b b f ed ae a a c bf e a b d d a e b srcpr looks okay what about the deprecated markers oh sure ill add them in real quick i wasnt sure on your stance on them but i think itll make migration easier yes having deprecated markers is more forgiveable than lacking the entire type i dont know how extensively completable is in use by other libraries right now beyond rxjavareactivestreams reactors converter retrofit updated https travis ciorg reactivex rxjava builds l compilation issue resolved i know still waiting for a second approval okay lets have this one can complain anytime later
4436,1,0,0,0,0,0,1,0,maybe for lazy optional in i hit on the problem of needing a lazy object that could either be zero or one value in that issue the idea of switching the return value of reduce r func from observable to single because that operator can only ever produce an observable that emits exactly one value the problem was that reduce func could not be changed to single because the source observable could be empty and therefore not produce one and only one valueto solve this problem i mentioned we could create a lazy type that represents either or no value could fill the gap between completable and single this pr is for the introduction of the maybe type you referenced java types in your code my problem with adding another base type is the increased mainte ce cost currently we have types in the major versions and it is likely adding a new operator overload or making a fix has to be done for all of them im one man armying rxjava for a considerable time now but i have my limits therefore my suggestion is that you have this maybe as a separate library that depends on rxjava but rxjava doesnt depend on it since rxjava offers fluent conversion method s it should be only a small inconvenience to convert to maybe javaflowable source flowablerange maybe mb sourceto maybereduceflowable a b a b mbfilter v false subscribe systemout println throwable printstacktrace systemoutprintln done mbtoflowable subscribe systemout println throwable printstacktrace systemoutprintln done as i mentioned my plans were to greatly increase the coupling between observable & flowable to single & maybe by having the various operators that return exactly or sometimes value to these two types current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f c d f a https codecovio gh reactivex rxjava compare f c dadcb a f f a c d df d f adcabde b bb a ec de srcpr im willing to accept maybe as the th reactive type but the class needs javadoc and unit tests that verify the most basic behavior of each operator in it cc artem zinnatullin jakewharton zsxwing how about you just contribute maybe with operators throwing unsupportedoperationexception and ill add optimized implementations and tests for them as i go also reactor has the mono https githubcom reactor reactor core blob master src main java reactor core publisher monojava type exactly for this purpose i suggest you try that first im not strictly opposed because my plans were to greatly increase the coupling between observable & flowable to single & maybe by having the various operators that return exactly or sometimes value to these two typesappeals to me but i dont have a really strong feeling without using it more okay then lets merge this and see how it works out please dont post prs targeting maybe im working on cleaning it up a bit plus a few other classes if i find something wrong the code copied from an older commit of the other types
4442,1,0,0,1,0,1,1,1,cleanup javadoc completablefromemitter add javadoc to asyncemitterbackpressuremode deprecate observablefromasync add observablefromemitter instead add completablefromemitter add missing placeholder since tags fix some generics error rxjavahooks add race helper to testutil fix javadoc warnings current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update db ff fdba ed https codecovio gh reactivex rxjava compare db ff c ad cca f d f fdba ed e fd bcd ae fb f a c csrcpr
4442,1,0,0,1,0,1,1,1,cleanup javadoc completablefromemitter add javadoc to asyncemitterbackpressuremode deprecate observablefromasync add observablefromemitter instead add completablefromemitter add missing placeholder since tags fix some generics error rxjavahooks add race helper to testutil fix javadoc warnings current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update db ff fdba ed https codecovio gh reactivex rxjava compare db ff c ad cca f d f fdba ed e fd bcd ae fb f a c csrcpr
4442,1,0,0,1,0,1,1,1,cleanup javadoc completablefromemitter add javadoc to asyncemitterbackpressuremode deprecate observablefromasync add observablefromemitter instead add completablefromemitter add missing placeholder since tags fix some generics error rxjavahooks add race helper to testutil fix javadoc warnings current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update db ff fdba ed https codecovio gh reactivex rxjava compare db ff c ad cca f d f fdba ed e fd bcd ae fb f a c csrcpr
4458,1,0,0,0,0,0,1,0,rename observable and single dooncancel to doondispose completable already used doondispose however i renamed the arguments to match observable and single the diff for observable doesnt show but the offline comparison only lists lines changes did you run some whitespace cleanup akarnokd whoops youre right sorry auto formatter seems to have changed some whitespaces ill revert that current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update dc a cb https codecovio gh reactivex rxjava compare dc c e fea d d f a eb afd dd a cba edd d c f da f srcpr this update is missing in release notes on github please remember to mention such changes in the future
4460,1,0,0,0,0,1,1,1,completable add dooneach first part of is it okay that i reused notification like thatalso are there any java generics missing it would be nice if this project was set up to target java sdk as my default seems to be java and i dont get any errors shown in the ide okay but you have generics problem https travis ciorg reactivex rxjava builds l alright its fixed now current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by powered by codecov https codecoviosrcpr last update da aaeacbf https codecovio gh reactivex rxjava compare da aa e a ead d ab c df d eacbf a f c edd baa a b fcsrcpr
4461,1,0,0,0,0,0,1,0,single add dooneach really not that happy with onnotificationcall notification createonnext t do you guys have any other way of doing this theres no way of creating a notification that has the oncompleted plus a value a new one could be introduced there though also the dooneachsuccess test feels clunkyalso why does single when using the do methods does the job by using an observable and later converting it back to a single again is it due to the way single was implemented in x with completable there is no converting of back and forth neededjavadoc will follow once we sorted out the few nits herefixes current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update ae ea f https codecovio gh reactivex rxjava compare ae feb d d ba cd e f ed e ea fc f f cab a baa ac d fd srcpr ill continue this on monday and make all suggested changes exceptionstesttestonerrorexceptionisthrownfromsingledoonsuccess https githubcom reactivex rxjava blob ae feb d d ba cd e f ed e src test java rx exceptions exceptionstestjaval fails although im not quite sure what the purpose of that test is also it seems a bit off to me can you give some insights there looks like removing the toobservabletosingle no longer wraps the subscriber into a safesubscriber and the test just crashes with a different exception no exception is being thrown at all can you single step the test in the orginal dooneach it has throwiffatal an throworreport you missed btw
4466,1,0,0,0,0,0,1,0,deprecate notificationcreateoncompleted fix it might just as well shine some light into which method should be used and explain why there are current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b df https codecovio gh reactivex rxjava compare eda c c a b a c ffd cbc b df d a ecbe dac dee e f b d bsrcpr
4488,1,0,0,0,0,0,1,0,add new methods to maybe observable and single from this pr adds just the new methods from to allow a much cleaner change of return types later on current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update e af d https codecovio gh reactivex rxjava compare e f ea b cc c e a ae af dfcb b a bbaf d esrcpr updated with corrections
4503,1,0,0,0,0,0,1,0,add system properties to adjust thread priorities of schedulers this pr adds the ability to specify the default thread priorities of computation io newthread and single schedulers via system properties ive added the property names to the schedulers javadocrelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update ae cc f https codecovio gh reactivex rxjava compare ae cc caae c c ae a f dc f c cfb e a fdc bdfc e a db bdsrcpr thanks
4504,1,0,0,0,0,0,1,0,add disposable observer for maybe completable & single also any reason the dispoable is called s is it still from the subscription timefixes seems unrelated ioreactivexinternaloperatorsobservableobservablerefcounttest testrepeat failed javalangassertionerror error s present javalangillegalstateexception onsubscribe not called in proper order latch values errors completions at ioreactivexobserverstestobserverfail testobserverjava at ioreactivexobserverstestobserverassertnoerrors testobserverjava at ioreactivexinternaloperatorsobservableobservablerefcounttesttestrepeat observablerefcounttestjava caused by ioreactivexexceptionscompositeexception at ioreactivexobserverstestobserverfail testobserverjava more caused by ioreactivexexceptionscompositeexception$compositeexceptioncausalchain chain of causes for compositeexception in order received caused by javalangillegalstateexception onsubscribe not called in proper order yep ill fix that next started to become annoying to me too
4513,1,0,0,0,0,1,1,1,fix switchmap bad cancellation both switchmap implementations didnt properly cancel the current inner consumer but instead cancelled the outer connection only reported in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by powered by codecov https codecoviosrcpr last update f b f d https codecovio gh reactivex rxjava compare f b fd fdc e fa b a a e ee b f dd b ebc a ea a d f bf de srcpr
4516,1,0,0,0,0,1,1,1,fix singleusing add unit tests and coverage ive forgotten to create a branch so the first part of todays coverage work landed in x direct https githubcom reactivex rxjava commit b e cede ba c d ac baa removed unused methods from various classes compacted spscarrayqueue added null checks to spsclinkedarrayqueueoffer and mpsclinkedqueueoffer fixed resourceobserver not calling onstart added direct notificationlite emission methods to appendonlylinkedarraylist updated serializedobserver and serializedsubscriber to use it directly instead of the former indirection testobserverisdisposed now reports true if terminal events were received resourcesubscriber to use subscriptionhelper s deferred subscription requesting management added unit tests to cover disposablexobserver s serializedobserver and serializedsubscriber now have proper unit tests eachthis current pr fixes singleusing not properly managing the resource and adds unit tests to verify the behavior along with a few extra coverage improvements current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update ee https codecovio gh reactivex rxjava compare b e cede ba c d ac baa ee c aadd bae cd add dfsrcpr
4518,1,0,0,0,0,1,1,0,add missing resource observer for maybe completable & single and adjust some javadoc fixes current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f d d https codecovio gh reactivex rxjava compare f d d dad a d c fe f d d b d a ac db a f f esrcpr it might be worth considering removing the protected cancel methods as they are duplicates of dispose for resourcesubscriber i dont know because it works with subscriptioncancel but also is a disposable so dispose is there as well so should i remove the cancel method on all resource observer jakewharton your opinion on the removal im supportive of removing cancel i much prefer when theres only one way to do something
4522,1,0,0,0,0,1,1,1,observable flowable completable singledelay should always call onerror on the provided scheduler fixes current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update c e a https codecovio gh reactivex rxjava compare c dec ce f b f b e a ce abd dd d e d srcpr great job applying the changes to all of the base types
4525,1,0,0,0,0,0,1,0,fix generics t in zip & combinelatest fixes test for combinelatest fill follow current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by powered by codecov https codecoviosrcpr last update c a f https codecovio gh reactivex rxjava compare c b af d cd cdc ad dda a f ad ec d eee b bb e ab bbsrcpr this should be it now single has exactly and maybe at most item so there is only latest that can happen thus there is no difference between combinelatest and zip for these sources yup i immediately noticed it after i wrote my comment d thats also why i deleted it
4580,1,0,0,0,0,0,1,0,rename asyncemitter to emitter as per discussion in renaming asyncemitter to emitter via deprecationthere is a catch though completableemitter is correctly named now and depends on asyncemitter via the method java void setcancellation asyncemittercancellable c when can we break the api of that class current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update be d bf a https codecovio gh reactivex rxjava compare be d df cd d d b faa bf a a bfe a fc bd b c a e srcpr thanks for review akarnokd i take it we have to wait for to break the api of experimental completableemitter deleting experimental apis has to wait one patch version so will have both and can remove the asyncemitter ok ill patch again once is outon thu sep david karnok notifications githubcom wrote deleting experimental apis has to wait one patch version so will have both and can remove the asyncemitter — you are receiving this because you authored the thread reply to this email directly view it on github https githubcom reactivex rxjava pull issuecomment or mute the thread https githubcom notifications unsubscribe auth aata zur rwdcgqvuo _lrakxmjql yks qsmwmgajpzm kdwhj cc jakewharton artem zinnatullin make the cancelable interfaces extend each other as wellon thu sep pm dave moten notifications githubcom wrote _ davidmoten_ commented on this pull request in src main java rx asyncemitterjava https githubcom reactivex rxjava pull experimental deprecated public interface asyncemitter extends observer { cannot extend emitter because of two versions of cancellable would break existing asyncemitter use — you are receiving this because you were mentioned reply to this email directly view it on github https githubcom reactivex rxjava pull or mute the thread https githubcom notifications unsubscribe auth aaeeetq yk zrtnoqttagmrnbm eib ks qswjpgajpzm kdwhj make the cancelable interfaces extend each other as wellgood idea thanks um i dont think its worth it juggling with inheritance of these interfaces straight after next release im just going to delete the deprecated stuff ive added a deprecated annotation to completableemitter let me know if you guys still want the interface inheritance business forgot to move cancellable to rxfunctions thats done now thanks for working this out
4585,1,0,0,1,0,1,1,0,evaluate schedule initialization via callable this implements the solution proposed in to initialize the schedulers via a callable rather than directly via a value current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b a https codecovio gh reactivex rxjava compare b ed b ab cf ef da f a a bc d c b b f f e f c b srcpr akarnokd correct me if im wrong but in order to avoid the evaluation of the default scheduler instance when it is being overridden i still need to change the oninit singleionewcomputation handler signatures to be function scheduler as per static volatile function scheduler oninitsinglehandler otherwise the invocation of initsinglescheduler will cause the evaluation of the default value to pass it as a parameter to the overriding transforming function oninitsinglehandler yes you still need callable as the indirection but the inner class will be evaluated only if call is actually invoked ive added the remaining lazy initializationive also fairly aggressively enforced non null in the associated functions for example javapublic static scheduler initioscheduler callable defaultscheduler { objecthelperrequirenonnull defaultscheduler scheduler callable cant be null callable scheduler f oninitiohandler if f null { return callrequirenonnull defaultscheduler } return applyrequirenonnull f defaultscheduler } however to me this seems slightly out of place over the top is that enforcement necessary or should the resultant null scheduler be left unasserted and left to the eventual nullpointerexception when the scheduler is used either way im happy to keep or remove that based upon review feedback aggressive input validation is never over the top if you defer checkingthen the stacktrace tells you nothing about what actually caused the brokenstateon sun sep am peter tackage notifications githubcomwrote ive added the remaining lazy initialization ive also fairly aggressively enforced non null in the associated functions for example public static scheduler initioscheduler callable defaultscheduler { objecthelperrequirenonnull defaultscheduler scheduler callable cant be null callable scheduler f oninitiohandler if f null { return callrequirenonnull defaultscheduler } return applyrequirenonnull f defaultscheduler } however to me this seems slightly out of place over the top is that enforcement necessary or should the resultant null scheduler be left unasserted and left to the eventual nullpointerexception when the scheduler is used either way im happy to keep or remove that based upon review feedback — you are receiving this because you commented reply to this email directly view it on github https githubcom reactivex rxjava pull issuecomment or mute the thread https githubcom notifications unsubscribe auth aaeeeyulqrvk zp d xx vsnijqiam xks qtlzbgajpzm kebru akarnokd all done as far as i am concerned do i need to anything else for this to be merged i was waiting for you to settle with the implementation thanks for the contribution
4586,1,0,0,0,0,1,1,1,add error assertion with predicate to testsubscriber and testobserver added support for error assertions with to testsubscriber requested in to support custom error evaluation removes the need to implement equals and hashcode in exceptions could you do it for testobserver as well sure i will update the pr current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b fef f https codecovio gh reactivex rxjava compare b ed b ab cf ef da f a fef fd e a e a b f a b srcpr
4629,1,0,0,0,0,1,1,1,add completablefromrunnable addresses theres maybefromrunnable but completable is missing this method current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f c f https codecovio gh reactivex rxjava compare f c b fc cba f eb e f ef d e fe dc b dsrcpr thanks thanks
4636,1,1,0,1,1,1,1,1,update mockito to rc equivalent of but now for the x branch the test ioreactivexmaybemaybetest onterminatedetach seems to be failing claiming there is a memory leak i sadly have no experience with this test to fix it that test is a bit flaky maybe the new mockito increased the base memory usage ill fix that test and rerun this one current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will not change coverage diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update ac ff a bee https codecovio gh reactivex rxjava compare ac ff dc e ae e ca ef a beea a ecc ff e dbf b aa c asrcpr thanks a lot and enjoy smile fyi mockito has been released which is equivalent to rc once again thanks a lot for using mockito smile
4641,0,0,0,0,0,0,1,0,safesubscriber not to call rxjavahooks before delivering the original error before the introduction of rxjavahooks the safesubscriber_onerror called the original error handler with the exception it received which was by default an empty handler the default rxjavahooksonerror behavior however is to signal errors to the uncaught exception handler of the caller thread which leads to unnecessary logging or app crashes even though the error itself is to be handled properlythis pr restores the safesubscriber_onerror to skip the rxjavahooks and call the original handler directy so old tracking code should still get all safe error while newer hooking doesnt get calledrelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b efed a https codecovio gh reactivex rxjava compare b efee ea f a a e aca dc ed a e e a ee f fsrcpr cc dlew lgtm thanks for doing this
4645,1,0,0,1,0,1,1,0,signal npe observableamb flowableamb this pr addresses current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by powered by codecov https codecoviosrcpr last update d b c f https codecovio gh reactivex rxjava compare d bb e cddbb ba cf afbe e d a c f ff b cd d c a a srcpr
4647,1,0,0,1,0,1,1,1,merge ambarray and ambiterable into amb for single maybe and completable types this pr addresses merge singleambarray and singleambiterable operators into singleamb merge maybeambarray and maybeambiterable operators into maybeamb merge completableambarray and completableambiterable operators into completableamb current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by powered by codecov https codecoviosrcpr last update ce ecfeae https codecovio gh reactivex rxjava compare ce ecf e fedf bf ebe bb deae d b b fdd a bf f a srcpr
4651,1,0,0,1,0,1,1,0,switch maybe and single to use their transformers in compose resolves whoops forgot to update the tests will update in a sec intellij user i presume indeed does i presume 😉 eclipse do something to protect against this eclipse has an error view which doesnt obscure the project structure plus when one shows the breadcrumbs they get error icons indicating theres still something wrong also the project tree gets error icons so it is much harder to miss these kinds of errors current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update a cfccdfca https codecovio gh reactivex rxjava compare a ca f cc d c e de a a eb ffccdfcaad cd c cb a c c bd d srcpr interesting ill have to check that out
4654,1,0,0,0,0,0,1,0,upcast concurrenthashmap to map to avoid compatibility issue resovles see http stackoverflowcom a current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update ad c a a fd https codecovio gh reactivex rxjava compare ad c da a b eb c ddab b ca a fd cedfa d d e d d csrcpr
4681,1,0,0,0,0,1,1,0,fix flowable single elementat and elementatorerror operators on empty sources this will fix elementatorerror on an empty source just leaves the new single hanging without signalling onerror elementat on an empty source just leaves the maybe hanging without signalling oncomplete i also noticed that elementat with a default value on an empty source did not work either current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update e dad e ce e https codecovio gh reactivex rxjava compare e dade bcb cf a a cc aee c cad e ce e d d e c f fcd e f fb f cbsrcpr you may have to check the build and restart it a few times if it fails with jacocotestreport
4686,1,0,0,0,0,1,1,0,fix flatmapx over cancellation in case of an inner error a non delayed error set the cancellation flag and thus any subsequent drain would just quit instead of delivering the error and while im at it ill try to figure out a way to not get killed by oomkiller reported in current coverage https codecovio gh reactivex rxjava pull srcpr is diff no coverage report found for x at ba powered by codecov https codecoviosrcpr last update ba b ea https codecovio gh reactivex rxjava compare ba df cba cbd dabaa af eb b af b ea bcbe d da c e srcpr
4687,1,0,0,0,0,1,1,1,add observablerangelong & flowablerangelong will fix adds observablerangelong adds flowablerangelong both implementations are copied same for the unit testswhat should we do about the range overflow check we could use bigdecimal to check that current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f f dc d https codecovio gh reactivex rxjava compare f f c b bbd a f d a eb e dc d f de ce f ac d csrcpr
4690,1,0,0,0,0,1,1,1,basetestconsumer add assertvalueat index predicate fixes adds assertvalueat index predicate to basetestconsumer current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by powered by codecov https codecoviosrcpr last update e c f c a https codecovio gh reactivex rxjava compare e c f a cde b f a b be a c a fe a ab e ca bf b e srcpr
4710,1,0,0,1,0,1,1,0,remove checked exceptions from transformer interfaces these functions are for transforming the stream shape not doing work any operation that would throw a checked exception should happen inside the stream not when shaping itcloses current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update cb c d https codecovio gh reactivex rxjava compare c ad d fbee f d bb dbd a fb c d b fc b acdd edf dd d esrcpr
4716,1,0,0,0,0,1,1,1,fix subscribe action action to report isunsubscribed the lambda version didnt report isunsubscribed as before because of the removal of the safesubscriber wrapping this pr makes sure it reports consistently againrepored in note that there is no unsafesubscribe singlesubscriber so a regular subscribe singlesubscriber by default wont report isunsubscribed true unless the implementation of onsuccess and onerror controlled by the user doesnt call unsubscribe on itself current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by powered by codecov https codecoviosrcpr last update ac bdbd f https codecovio gh reactivex rxjava compare ac aa a f cb f cfd bdbd f ce e d e e fb d b adf esrcpr hi everyoneseems like subscribe singlesubscriber overload has the same problem because singlejust subscribe new singlesubscriber {} isunsubscribed returns false i checked version snapshot in it returns true as expected marwinxxii single has no notion of safesinglesubscriber and the internals got changed to improve performance therefore you are responsible calling unsubscribe in your implementation of onsuccess and oncompleted sorry i missed this part in pr descriptionmay be this should be added to singlesubscriber documentation or may be singlesubscribe singlesubscriber pr welcome to change the docs done
4729,1,0,0,0,0,1,1,0,merge flowableemitterbackpressuremode into backpressurestrategy this is the implementation of current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f b fbd d cb https codecovio gh reactivex rxjava compare f b fbd db ba e a ead b a a d cbad e e e b a a ecfea b e srcpr i have implemented the changes from the code commentsill keep in mind to rely on code coverage in the futureshould i reply to the review comments directly no need in this case looks good to me
4747,1,0,0,1,0,1,1,1,distinctuntilchanged to store the selected key instead of the value fix distinctuntilchanged to store the selected key instead of the input valuereported in current coverage https codecovio gh reactivex rxjava pull srcpr is diff no coverage report found for x at d b f powered by codecov https codecoviosrcpr last update d b f a db a https codecovio gh reactivex rxjava compare d b f ec d dc ff f b a a db abb b a d e ac b cdc dasrcpr
4751,1,1,0,1,1,1,1,1,fix flowableconcatmapeager hang due to bad request management flowableconcatmapeager s drain loop when encountering a finished inner jumped back to the beginning of the loop but disregarded the potentially changed request amount and just stopped emitting the fix is to use the typical request management approach of reading the current request at the beginning of the loop and then committing the emission amount before trying to leave the looprelated in addition testhelperasserterror has been changed to attach the whole unexpected exception to the assertionerror current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b c a c f https codecovio gh reactivex rxjava compare b c a fec ed e b da f cd fcdf a c f b e f c cc f d c srcpr
4757,1,0,0,0,0,0,1,0,add cache to single uses the same test as the observable one current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update e f c b b https codecovio gh reactivex rxjava compare e f c f e b d faf de ec b b f f a bd e bd dsrcpr sorry im late to the party here this seems to be rxjava x only is this going to reach x its in uupps right thanks
4767,1,0,0,0,0,1,1,0,rename backpressurestrategynone to missing as discussed in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by powered by codecov https codecoviosrcpr last update ba b e https codecovio gh reactivex rxjava compare ba b bc f ae e ef f c e e e ca ab ae c f b cf srcpr yay
4783,1,0,0,0,0,1,1,1,fix observablerepeatwhen & retrywhen not disposing the inner the observer that is subscribing to the observable returned by the handler function was not properly linked to the disposing of the end observer this pr fixes it by making that observer do async disposable management and make sure the end observer receives a disposable list with both the main and the handler disposable sthe flowable versions worked properly but added unit tests to them regardlessreported in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update d aa c https codecovio gh reactivex rxjava compare d ea c a bf d ac dc aa c f c f b c b a bsrcpr
4810,1,0,0,0,0,0,1,0,subtle change in completables documentation for retrywhen small change as discussed in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update d f aa https codecovio gh reactivex rxjava compare d a b cdd ee c e a f aaf d cb b f e d d d e srcpr
4828,1,0,0,0,0,0,1,0,changing inner classes to package private to fix issue in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f c cabd c https codecovio gh reactivex rxjava compare f c c ec d b f abd c d d e ede f b cccec f srcpr
4830,1,0,0,0,0,1,1,1,completabledoafterterminate to run after onerror as well doafterterminate was intended to call the callback after either oncompleted or onerror but somehow missed that behavior in xrelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by powered by codecov https codecoviosrcpr last update bebdec eb f fe https codecovio gh reactivex rxjava compare bebdec a ea a cebbd cb b a eb f feccc e c edfe e bc e a e fsrcpr
4858,1,0,0,0,0,1,1,0,add maybeflatmapsingleelement returning maybe this pr adds the maybeflatmapsingleelement operator that returns a maybe and completes if the source completes unlike flatmapsingle where the returned single signals nosuchelementexception related current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update aca a a https codecovio gh reactivex rxjava compare aca bed d df bdee d d adba ea ca a ab b cb e a a dea fsrcpr
4873,1,0,0,0,0,1,1,1,testobserver shouldnt clear the upstream disposable on terminated testobserver replaced the upstreams disposable with the disposed sentinel when it got a terminal event unlike testsubscriber and there seems to be a need for triggering dispose in some upstream even after that this pr changes this behavior and also updates unit tests that expect isdisposed true without actually calling dispose related current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update bde cd e e f https codecovio gh reactivex rxjava compare bde c a bb daf a ebc fc a ce d e e ff a d b b fb a a e b asrcpr
4881,0,0,0,1,0,1,1,0,add checkreturnvalue annotation first draft on thisso far i have only annotated subscribewith and test methodsi checked this against error prone and their check http errorproneinfo bugpattern checkreturnvalue is able of picking up the rxjava annotationhow do you feel if i extend basetypeannotations to test for checkreturnvalue toorelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update c ce e https codecovio gh reactivex rxjava compare c cefd b c a c a a b e e ebcf e d b f f c c srcpr i quickly checked findbugs and it does not seem like they pick up our annotation since they have their own http findbugssourceforgenet api edu umd cs findbugs annotations checkreturnvaluehtml would you manually ignore methods like disposable subscribe vanniktech see https githubcom findbugsproject findbugs blob ae baf d b d c b dcb e findbugs src java edu umd cs findbugs detect buildcheckretur notationdatabasejaval artem zinnatullin weird somehow findbugs didnt pick it up though could be a configuration error on my sideid argue that not annotating diposable subscribe is fine however i feel like disposable subscribe consumer and the others should be annotated i personally almost never use subscribewith and prefer the variations with lambdaswere on the same point that static factory methods and operators such as flatmap first last etc should be annotated right if so id apply those and then we can see which might need an annotation too akarnokd added the checkreturnvalue annotation to all public api methods of flowable maybe single observable and completable except for private methods void methods and the disposable subscribe method is that okay now yes cc jakewharton
4884,1,0,0,0,0,1,1,1,enable testscheduler with osecond periodic scheduling the default periodic scheduling code accessed the current worker time as milliseconds which prevents running microsecond and osecond scale unit tests with testscheduler as its internal osecond resolution time is always converted losing precisionthis pr introduces the internal scheduleperiodichelper class moves the default scheduling code into a static method and defines a now osupplier interface that is now implemented by testschedulerworker to return the current o time the default workerscheduleperiodically delegates to this static method and given a null no osupplier the workernow is converted to oseconds as usualrelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update fff d c https codecovio gh reactivex rxjava compare fff d f d c b fa ba f bb c ece d ff ee b be f srcpr
4911,1,0,0,0,0,1,1,1,fix & update observablerepeatwhen and retrywhen again this pr fixes the observablerepeatwhen not completing properly if the handler completes in addition the observableredo has been split to observableretrywhen and observablerepeatwhen just like their flowable counterpart and are now they use a less convoluted algorithmrelated i dont know why the travis ci push still shows up current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b d f c b ccb https codecovio gh reactivex rxjava compare b d f c e e adc fe aa a afba c b ccb a ccf a d a b b ac b srcpr
4921,1,0,0,0,0,0,1,0,fix testsubscriber observer message texts fix the wrong messages in testsubscriber and testobserver related current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update df fe c https codecovio gh reactivex rxjava compare df fae c f c aa c d be fe c a d acd da a a b eb a csrcpr
4924,1,0,0,0,0,0,1,0,change completable to completablesource changing completable to completablesource also found one other wrong spot that i fixed within this prfixes current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b https codecovio gh reactivex rxjava compare f c a f c d f d a d c d b fd a c cc f e srcpr
4927,1,0,0,0,0,1,1,1,fix timer ise due to bad resource mgmt both observabletimer and flowabletimer could report illegalstateexception because if the delayed task completed before the tasks disposable was set the setonce found a non null non terminal reference already setrelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update d a d a https codecovio gh reactivex rxjava compare d d f a a f ba b ff b a a d ae cf a e de b b e esrcpr
4932,1,0,0,0,0,1,1,0,add safeguards to generate flowablegenerate and observablegenerate lacked the safeguards that were present in x this adds those and adds extra state cleanuprelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by powered by codecov https codecoviosrcpr last update a d aeda ed https codecovio gh reactivex rxjava compare a d aac f b e fc c fe a db eda ed a b a b ab fbd d b d asrcpr
4943,1,0,0,0,0,1,1,0,fix publish function not replenishing its queue i was working on converting the monte carlo pi benchmark http swaveio usage show off monte carlo pihtml to rxjava and it turned out i forgot to replenish the internal queue of publish function in case the upstream was not sync fuseablethis pr fixes the replenishment problem for non fused and async fused sources by requesting after consumptionin addition if an inner subscriber cancelled while it was at request the other inner subscribers might not have resumed drainingive also fixed two unit tests with wrong timeout unit of measure that randomly failed the tests on a slow machine or travis current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f f c https codecovio gh reactivex rxjava compare b a f bea f f b d d ed f f c e a d f a b c c c a d c srcpr
4945,1,0,0,0,1,1,1,1,fix timeout with fallback not cancelling the main source this pr fixes the lack of dispose cancel call towards the upstream in the timed fallback timeout operator versionin addition the selector version received similar unit tests to ensure they work properly they did related current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update a f f f b b https codecovio gh reactivex rxjava compare a f f f cecf fcfc fcf fc cac d b b cd f a dbcd d cd dd bb csrcpr
4955,1,0,0,0,0,1,1,1,add sample overload that can emit the very last buffered item the sample operator in x has been changed to always emit the very last buffered item before completion for https githubcom reactivex rxjava releases tag v discussion https githubcom reactivex rxjava issues pr https githubcom reactivex rxjava pull this change has been forgotten in x because x sample was implemented several months earlier but unlike x i dont want to break existing use cases hence the introduction of overloads for each base type that lets one define the tail behaviornote that the associated marble diagrams are inconsistent with the operators implemented we need a new diagram where the timed sample also emits the last value image https cloudgithubusercontentcom assets ca a d e a e de dbpng and one new diagram where the sampler sample doesnt emit the last value image https cloudgithubusercontentcom assets b dc c d e f f png the default sampler sample should use this and the emitlast true version can use the current diagram i dont have a mac thus cant run omnigraffle related current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update fac c f d https codecovio gh reactivex rxjava compare fac ca bf e f d e bfdc db c f de dd e ebf fa db d d srcpr
4957,1,0,0,0,0,1,1,0,fix lambdaobserver calling dispose when terminating this pr changes the lambdaobserver to not dispose the upstream when it receives a terminal event the lambdasubscriber has been previoulsy updated but apparently not syncedreported in this pr fixes unit test methods of flowableignoreelements as they were not actually testing the operator discovered when the observableignoreelements initially failed after the patch to lambdaobserver current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update fac f ce https codecovio gh reactivex rxjava compare fac ca bf e f d e bfdc db f cee db bb eabb dd aeda a srcpr
4962,1,0,0,0,0,1,1,0,fix singletakeuntil other triggering twice this pr fixes the double termination of singletakeuntil publisher when the other fires an item and then completes while ignoring the cancellation in between trying to signal a cancellationexception again which is routed to the rxjavapluginsonerror and crashing on androidin addition the maybetakeuntil received a unit test verifying this doesnt also happen to itrelated current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by powered by codecov https codecoviosrcpr last update c https codecovio gh reactivex rxjava compare c d a e b ef d d e ae a caaed db d c d srcpr
4972,1,0,0,0,0,1,1,0,improve compose generics resolves i tested and built with the added tests on java and not sure if you want to keep them in before merging since theyre not really functional in nature just there to make sure they compile side note gets even better on java which removes the need for a type argument at all in those examples current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update d b da b f https codecovio gh reactivex rxjava compare d b d f f a e da c abfb a e a b f d c c e c ea f ea d srcpr thanks
4982,1,0,0,1,0,1,1,0,fix observableconcatmapeager bad logic for immediate scalars the operator observableconcatmapeager had a bad optimization targeting scalar and callable sources and emitted their values immediately even if it wasnt that particular sources turn for itthe flowable is not affected added unit tests for bothreported in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update a a cf cb https codecovio gh reactivex rxjava compare a a e bf e d b b ed c d b ce cf cb bf e ff e a f e a dd a edsrcpr
4987,1,0,0,1,0,1,1,1,make obscombinelatest consistent with flowable doc cornercase this pr fixes observablecombinelatest to be consistent with flowablecombinelatest by not subscribing to additional input sources if the operator reached a terminal state due to a valueless source that completes or errors in addition such early termination didnt properly cancel the other sources when delayerrors true ive also extended the documentation on the overloads to warn about empty sources that will terminate the operator even with combinelatestdelayerror and thus subscription side effects may not happenthere is a related issue where the operator should fully consume each input source no matter what and terminate when all terminate im still considering what would be the best way to introduce thisreported in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by powered by codecov https codecoviosrcpr last update ea a https codecovio gh reactivex rxjava compare acc a d f f e a ea a d dec a b aa d cd srcpr yaon jan pm david karnok wrote merged — you are receiving this because you are subscribed to this thread reply to this email directly view it on github or mute the thread
4987,1,0,0,1,0,1,1,1,make obscombinelatest consistent with flowable doc cornercase this pr fixes observablecombinelatest to be consistent with flowablecombinelatest by not subscribing to additional input sources if the operator reached a terminal state due to a valueless source that completes or errors in addition such early termination didnt properly cancel the other sources when delayerrors true ive also extended the documentation on the overloads to warn about empty sources that will terminate the operator even with combinelatestdelayerror and thus subscription side effects may not happenthere is a related issue where the operator should fully consume each input source no matter what and terminate when all terminate im still considering what would be the best way to introduce thisreported in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by powered by codecov https codecoviosrcpr last update ea a https codecovio gh reactivex rxjava compare acc a d f f e a ea a d dec a b aa d cd srcpr yaon jan pm david karnok wrote merged — you are receiving this because you are subscribed to this thread reply to this email directly view it on github or mute the thread
5002,1,0,1,1,0,1,1,1,add scheduler creation factories resolves this is a pretty vanilla copy from rxjava s implementation note that i had to tune newthread scheduler to not be a singleton to support thiswe had talked about borrowing from project reactors apis for different overloads let me know if you think we should add more fine grained controls through these one other thing im worried about is schedulers the best place for this rxjava had them in its rxjavahooks class my concern is that having these alongside the normal io computation etc factories will make them look overly inviting for use and accidental abuse one other thing im worried about is schedulers the best place for this rxjava had them in its rxjavahooks class my concern is that having these alongside the normal io computation etc factories will make them look overly inviting for use and accidental abuseanother problem is that people will try to override the scheduler init with these method calls for rxjavaplugins but referencing schedulers will init the default schedulers regardlessindeed rxjavaplugins sounds like a better place for the methods but keep only the threadfactory variants heading to bed right now but will update the pr in the morning with requested changes also let me know if theres anywhere i should put tests as i wasnt sure what the right place would be indeed rxjavaplugins sounds like a better place for the methods but keep only the threadfactory variantssounds good to me will do that in my updates tomorrow yes tests that verify the custom thread factory actually worked by checking a custom thread name for each case current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update c eb ae https codecovio gh reactivex rxjava compare c eb a c dc bbaf a e c ae fb c af b a c b srcpr indeed rxjavaplugins sounds like a better place for the methods b d but keep only the threadfactory variants also tweaked the naming a bit newnewthread was a little weird went with create and added scheduler suffix since were not in the schedulers class anymore yes tests that verify the custom thread factory actually worked by checking a custom thread name for each casei tried setting this up matching some of the cdl based approaches in the plugin tests but want able to get it working just hangs pushed what i had in a b any insight heading on vacation for a couple weeks but let me know what you think of getting the tests to work i should have some time here and there to update the pr ive already told you use the runnable in the factory method on the thread constructor use the runnable in the factory method on the thread constructorarent i just testing the test threadfactory implementations then and not that the schedulers are hooked up properly to power the scheduler https docsoraclecom javase docs api java lang threadhtmlhttps githubcom reactivex rxjava blob x src main java io reactivex internal schedulers rxthreadfactoryjaval whats the problem with the tests they seem to be verifying that the supplied factory was used oh you didnt pass the supplied runnable when calling new thread inside the factory oh you didnt pass the supplied runnable when calling new thread inside the factoryah this is what i was missing thanks for pointing that out ive updated tests which should now all be passing and also made them a bit more robust full integration with schedulers to simulate a more real world use case failing test looks like a flake wait no its not reprod locally will fix fixed i think i added manual shutdowns of schedulers after theyre done only io had this lifecycle issue over tests but i did the shutdown in all to be safe ok this time it seems actually flaky as the same commit passed in a different travis job against my fork https travis ciorg hzsweers rxjava builds thanks
5005,1,0,0,1,0,1,1,1,executorschedulerscheduledirect to report isdisposed on complete this pr makes the disposable returned by the executorschedulerscheduledirect report isdisposed true if the task has actually finished which should now be consistent with the worker behavior of other schedulersreported in current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update c eb dd c d https codecovio gh reactivex rxjava compare c eb a c dc bbaf a e c dd c d b cb bb aa fc e e f c srcpr
5007,1,0,0,0,0,0,1,0,update sample time diagram to indicate emission of last this pr updates the x sample time diagram to indicate the last value is emitted when the sequence completes it is the same style as for x default scheduler image https rawgithubcom wiki reactivex rxjava images rx operators sampleemitlast xpng custom scheduler image https rawgithubcom wiki reactivex rxjava images rx operators samplesemitlast xpng related current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will increase coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f a d https codecovio gh reactivex rxjava compare f a fb e a af ef f f d a d b cceb c f b fc caa srcpr
5027,1,0,0,1,0,1,1,0,dedicated singlezip implementation no dispose on all success this adds a dedicated implementation for zipping single s adapted from maybezipx routing the original zip through flowable added the usually unwanted behavior of cancelling the sources if one of them reports a completion after a row has been consumed from all when converted to flowable singleobserveronsuccess becomes subscriberonnext oncomplete since there is only onsuccess and onerror in single there is no need to dispose the sources once all signalled their only onsuccess related current coverage https codecovio gh reactivex rxjava pull srcpr is diff merging https codecovio gh reactivex rxjava pull srcpr into x https codecovio gh reactivex rxjava branch xsrcpr will decrease coverage by diff x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update d ee bddcbc b https codecovio gh reactivex rxjava compare d ee bbbb d c b c f c d addcbc be f b f b fdb b srcpr
5047,1,0,0,1,0,1,1,1,document and test amb subscription ordering refs once wording and tests are approved ill port to x as well hmm i seem to be fighting the cool documentation checker which is being a bit too clever in this instance im using the word subscription at the beginning of a sentence which it thinks means subscription the type ill figure out a wording tweak to make it end up as a lowercase subscription also with regard to signal types i figure the other tests cover those already so in these cases were just guarding against ordering changes yes lowercase it as subscription is interpreted as the reference to the type codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ccc cc ecfa a b bd cd c c f srcpr&eldesc will increase coverage by diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex completablejava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq x src main java io reactivex maybejava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq x src main java io reactivex singlejava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme x src main java io reactivex observablejava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh x src main java io reactivex flowablejava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq x ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e fsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ccc d b https codecovio gh reactivex rxjava compare ccc cc ecfa a b bd cd c c f d bb d c a e felfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5049,1,0,0,1,0,1,1,0,use bounded wildcards for errorhandler fixes adding bound wildcards for error handler fixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f ae b dd a f bbcd b c ead srcpr&eldesc will increase coverage by diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex plugins rxjavapluginsjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgx z lucy seephdmfqbhvnaw zlmphdme x vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq reactivex internal operators maybe maybeusingjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvxnpbmcuamf yq internal operators completable completableambjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme ors observable observablesamplewithobservablejava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvdpdghpynnlcnzhymxllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f aed bfc https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead d bfcea e cab c f f b f d d dbdc elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments cc davidmoten yep that looks fine i can do the others akarnokd do you want test coverage of the signature changes yes make sure the contravariant consumer now compiles jschneider can you add unit tests for this please i will add a test yes added the test looks like this got a conflict due to changes to rxjavaplugins by other prs could you rebase this onto the head yep i am on it should be good now
5051,0,0,0,1,0,0,0,0,feature nonnull annotations issue starting to add nonnull and nullable annotationsi decided to add a compileonly dependency to findbugs jsr artifactwe could also use ioreactivexannotationsnonnull which already exists but there is no ioreactivexannotationsnullable annotation which is at least as important in my experiencesince these are only annotations it is no problem when the class files are missing at compile time jls retention i have started to add annotations in the scheduler and rxjavapluginsthe test rxjavaplugins contains some invalid checks using null lines and following this pull request is work in progress and should be discussedquestions so far use jsr compileonly or existing annotation in ioreactivex if not using jsr use own nullable annotation or try to get one added to ioreactivex or skip these completely which misses the point of the static code analysis why has there been tests calling the rxjavapluginson scheduler with null arguments can these be removed securely maybe it wasnt well articulated but based on i thought we try with just the functional interfaces and come back later if it was not enough i decided to add a compileonly dependency to findbugs jsr artifactwe rather use our own annotations as most tools allow customizing what annotations to considerexpect futher comments inline thanks for the feedback i will improve the pull request further
5054,1,0,0,0,0,1,1,1,add nullable annotation to simple queue fixes as explained in https githubcom reactivex rxjava issues simplequeue might return nullto document this behavior a nullable annotation has been added codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d ee ab b c dc d c asrcpr&eldesc will increase coverage by diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rnal operators observable observablefromarrayjava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzyb bcnjhes qyxzh x rnal operators observable observablerangelongjava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjhbmdltg uzy qyxzh x perators maybe maybeflatmapiterableobservablejava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlt jzzxj ywjszs qyxzh x vex internal operators flowable flowablerangejava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumfuz uuamf yq x x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh x eactivex internal disposables emptydisposablejava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvrw wdhleaxnwb nhymxllmphdme x nal operators observable observablescalarxmapjava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnjywxhclhnyxauamf yq x internal operators flowable flowableobserveonjava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt jzzxj zu ulmphdme x internal operators flowable flowablerangelongjava https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumfuz vmb nlmphdme x and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c d f https codecovio gh reactivex rxjava compare d ee ab b c dc d c a c d f c e bf d d f f elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5055,1,0,0,0,0,1,1,0,feature more null checks i have added some more null checks to help the static code analysisi think i have also fixed one possible npe in newthreadworker codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f ae b dd a f bbcd b c ead srcpr&eldesc will increase coverage by diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators flowable flowablewithlatestfrommanyjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlv l aexhdgvzdezyb nyw lmphdme x rnal operators flowable flowablecombinelatestjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq tymluzuxhdgvzdc qyxzh x ators observable observablewithlatestfrommanyjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpdghmyxrlc rgcm ttwfues qyxzh x perators maybe maybeflatmapiterableobservablejava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlt jzzxj ywjszs qyxzh x reactivex internal schedulers newthreadworkerjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ozxduahjlywrxb jrzxiuamf yq white_check_mark ivex internal schedulers computationschedulerjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy db wdxrhdglvblnjagvkdwxlci qyxzh x rnal subscribers singlepostcompletesubscriberjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvu luz xlug zdenvbxbszxrlu vic nyawjlci qyxzh vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh reactivex internal operators maybe maybeusingjava https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvxnpbmcuamf yq and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f ae b b https codecovio gh reactivex rxjava compare f ae b dd a f bbcd b c ead b b ccc bbecb ea b b a cb elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5058,1,0,0,1,0,1,1,0,feature more generics in rxjavaplugins i widened the bounds for the functions looks good for merelated to looks like this needs rebasing im sorrry im trying to merge your prs in proper order but multiple recent prs change the same file s yeah no problem rebasing isnt too difficult fixed import and rebased looks like there is a compilation error https travis ciorg reactivex rxjava builds l with the changes uups fixed it at least i hope codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ea be b b fc fa eba b d e fsrcpr&eldesc will increase coverage by diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex plugins rxjavapluginsjava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgx z lucy seephdmfqbhvnaw zlmphdme x operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq reactivex internal operators maybe maybeusingjava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvxnpbmcuamf yq in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme ternal operators completable completableusingjava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvxnpbmcuamf yq rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ea b ae c https codecovio gh reactivex rxjava compare ea be b b fc fa eba b d e f ae c cfcadcce abb a ee b e e belfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5064,1,0,0,1,0,1,1,1,fix replay cancel dispose npe this pr fixes both flowablereplay and observablereplay throwing a nullpointerexception if the connection is disconnect before the upstream calls onsubscribe on the connection being established in practice this requires an async cancellation to happen through refcount unsubscribeon for example the validation tests simulate this by not calling onsubscribe until the synchronous connect disconnect happensreported in
5086,1,0,1,0,1,1,1,1,deprecate create add alternatives looks like create wont go away unless we get the ide mark it someway such as being deprecatedthis pr deprecates create and adds unsafecreate for internal use and deprecate renames fromemitter to create action backpressuremode there was an earlier attempt at deprecating create but it was not followed up this pr executes what i suggested in one of the comments https githubcom reactivex rxjava pull issuecomment codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a e cfeb c c d d b fe srcpr&eldesc will decrease coverage by diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java rx plugins rxjavaobservableexecutionhookjava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec wbhvnaw zl j smf yu ic vydmfibgvfegvjdxrpb ib rlmphdme x src main java rx observables asynconsubscribejava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec vynnlcnzhymxlcy bc luy uu vic nyawjllmphdme x src main java rx observables synconsubscribejava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec vynnlcnzhymxlcy tew jt tdwjzy jpymuuamf yq x src main java rx singlejava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec taw nbguuamf yq x ain java rx observables connectableobservablejava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec vynnlcnzhymxlcy db uzwn ywjszu ic vydmfibguuamf yq x in java rx internal operators operatorpublishjava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jqdwjsaxnolmphdme x a rx internal operators emptyobservableholderjava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvrw wdhlpynnlcnzhymxlsg szgvylmphdme x internal operators onsubscribeflatteniterablejava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt tdwjzy jpymvgbgf dgvusxrlcmfibguuamf yq x java rx internal operators onsubscribecreatejava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt tdwjzy jpymvdcmvhdguuamf yq rx internal util scalarsynchronousobservablejava https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe ff f c ff f c df b baa bfcbe srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl njywxhcln bmnocm ub vzt jzzxj ywjszs qyxzh x and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a e a https codecovio gh reactivex rxjava compare a e cfeb c c d d b fe a fe de eae af ca d asrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments
5087,1,0,0,1,0,0,1,0,correct marble diagram dimensions this fixes part of as requested in these changes were generated using the following script sh usr bin env bashfind name java print \ xargs grep ^\s \ \ grep op https \png \ sort u \ while read r i do echo updating ${i} gather image details data$ identify tags referencing the image find name java print \ xargs perl i p e s merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit cc e bc ba f c b dsrcpr&eldesc will increase coverage by diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java io reactivex processors replayprocessorjava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy szxbsyxlqcm jzxnzb iuamf yq x ain java io reactivex subjects publishsubjectjava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvuhvibglzafn ymply quamf yq x ernal operators flowable blockingflowablenextjava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll jsb nraw nrmxvd fibgvozxh lmphdme x src main java io reactivex flowablejava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq x main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh x ators observable blockingobservablemostrecentjava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvqmxvy tpbmdpynnlcnzhymxltw zdfjly vudc qyxzh x in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme x l operators observable blockingobservablenextjava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvqmxvy tpbmdpynnlcnzhymxltmv dc qyxzh x n java io reactivex parallel parallelflowablejava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgfyywxszwwvugfyywxszwxgbg ywjszs qyxzh x src main java io reactivex completablejava https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq x and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update cc f e https codecovio gh reactivex rxjava compare cc e bc ba f c b d f e dc db ac ce f ba ad c srcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments
5090,1,0,0,0,0,1,1,1,fix scan seed f to emit accumulated values asap for performance reasons the scan delayed the emission of accumulated items by one which worked well with sources that pushed new items frequently unfortunately if the source stopped emitting without completion the very last accumulated item was stuck and no way to get it out of scan i considered this type of use being rare but apparently i was wrongthe pr changes scan to emit accumulated items including the initial seed as soon as there is request for it the operator now uses a stable prefetch queue drain found throughout other operators such as observeon remark sadly request trickery such as capturing the first request call emitting the seed and then requesting n doesnt work because if the request call itself happens from another thread and the source is empty the onnext and oncomplete could run concurrentlyreported in
5091,1,0,0,0,0,0,1,0,create subscribeon avoid same pool deadlock this pr allows to fix the same pool deadlock that may happen with create formerly fromemitter and subscribeon as subscribeon by default schedules the requests behind a running emitter and thus the internal request amount may not get updated leading to unnecessary datalosssee in the update if subscribeon detects its upstream is onsubscribecreate it no longer reschedules requests for it for other non immediate cases a new overload allows specifying the requeston parameter that should be false if there is a create action backpressurestrategy in the sequence upstream
5092,1,0,0,0,0,1,1,1,add singlemerge obs obsflatmapsingle & flatmapcompletable this pr adds specialized operators for merging single and completable sources singlemerge observable maxconcurrency overload singlemergedelayerror observable maxconcurrency overload observableflatmapsingle func delayerrors delayerrors maxconcurrency overloads observableflatmapcompletable func delayerrors delayerrors maxconcurrency overloadsall of these return observable this replaces sidenote for some time now contributor s from certain party tend to contribute low quality or inadequate code and disappear pretty quickly i cant be sure this is just lazyness or a deliberate and elaborate scheme to extract free work out of me for their own partys benefit but it is annoying as hell codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit db e c a dab c da dsrcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx observablejava https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c srcpr&eltreediff c jjl haw vamf ys yec pynnlcnzhymxllmphdme white_check_mark src main java rx singlejava https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c srcpr&eltreediff c jjl haw vamf ys yec taw nbguuamf yq white_check_mark x internal operators onsubscribeflatmapsinglejava https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt tdwjzy jpymvgbgf twfwu luz xllmphdme ernal operators onsubscribeflatmapcompletablejava https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt tdwjzy jpymvgbgf twfwq tcgxldgfibguuamf yq ava rx internal operators operatormaterializejava https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jnyxrlcmlhbgl zs qyxzh n java rx subscriptions compositesubscriptionjava https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c srcpr&eltreediff c jjl haw vamf ys yec zdwjzy jpchrpb zl nvbxbvc l zvn ynnjcmlwdglvbi qyxzh rx internal schedulers cachedthreadschedulerjava https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl nhy hlzfrocmvhzfnjagvkdwxlci qyxzh main java rx internal operators operatormergejava https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jnzxjnzs qyxzh x and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update db cf fb https codecovio gh reactivex rxjava compare db e c a dab c da dcf fb aa ae e a ca c elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5101,1,0,0,1,0,1,1,1,fix maybeconcat subscribe after cancel verify others this pr fixes maybeconcatx subscribing to the next source when the downstream cancelled the flowable sequence from its onnext this resulted in executing the subscription side effects of the source to be immediately cancelled when it called onsubscribe on concats maybeobserver in addition tests were added to verify the other types dont have this kind of a problemrelated
5106,1,0,0,0,0,1,1,0,fix window time size not completing windows on timeout this pr fixes the operators flowablewindow time size and observablewindow time size to complete the current window if the time elapses before the size limit is reachedreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d e df cb caef b d a c b d f f srcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators flowable flowablewindowtimedjava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlv luzg vgltzwquamf yq x al operators observable observablewindowtimedjava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvd rpbwvklmphdme x a io reactivex processors serializedprocessorjava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy tzxjpywxpemvkuhjvy vzc ylmphdme rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh erators completable completableconcatiterablejava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq operators observable observableconcatmapeagerjava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhde hcevhz vylmphdme reactivex internal operators maybe maybeusingjava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvxnpbmcuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq activex internal disposables disposablehelperjava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvrglzcg zywjszuhlbhblci qyxzh internal operators completable completableambjava https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d e df cc https codecovio gh reactivex rxjava compare d e df cb caef b d a c b d f f cc ed bf ed e e c dd elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5112,1,1,1,1,1,1,1,1,flowable as a publisher to be fully rs compliant this pr performs the changes suggested in introduce flowablesubscriber with extra textual specification on its relaxed nature flowablesubscribe subscriber checks for flowablesubscriber and if not found it wraps the incoming rs subscriber into a strictsubscriber that follows the rs spec to the letter at any cost introduce flowablesubscribe flowablesubscribe that most internal operators will use change abstractflowablewithupstream to accept flowable as a source update operators some operators were useful with raw publisher input these were duplicated on their outer containing type but use the same internal flowablesubscriber removed cheat from the tck tests adjusted timeout on delay replaced most implements subscriber with implements flowablesubscriber replaced most new subscriber with new flowablesubscriber in tests the rest is required for testing the strictness itself strict is now an identity operator with suggested scheduled removalperformance impact estimation most primary use of a flowable should go through subscribe flowablesubscribe and thus no overhead change where the api mandated publisher as input providing a flowable will have an instanceof check at subscription time and routed to subscribe flowablesubscriber if the consumer is part of rxjava itself okay lets go from here in the unlikely case the spec becomes more forgiving the undo is just to remove cast wrapping from flowablesubscribe and everything works the same as flowablesubscriber is an interface
5114,1,0,0,1,0,1,1,1,fix observablecombinelatest to dispose eagerly this pr fixes observablecombinelatest to dispose the sources outside the serialization loop just like flowablecombinelatest does this allows cancellation even if the serialization loop is busy blocking inside an onnext emissionin addition a unit test was added to flowablecombinelatest as wellreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a ea a d ce e dbea ddbca c a ddab srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators observable observablecombinelatestjava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbwjpbmvmyxrlc quamf yq x operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq internal disposables arraycompositedisposablejava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvqxjyyxldb wb npdgveaxnwb nhymxllmphdme in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme rnal subscribers singlepostcompletesubscriberjava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvu luz xlug zdenvbxbszxrlu vic nyawjlci qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh x internal operators maybe maybeswitchifemptyjava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlu dpdgnoswzfbxb es qyxzh rnal operators flowable flowabletakelasttimedjava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgfrzuxhc ruaw lzc qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh and more https codecovio gh reactivex rxjava pull changessrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a ea https codecovio gh reactivex rxjava compare a ea a d ce e dbea ddbca c a ddab f b c f d eebd bsrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments
5117,1,0,0,1,0,1,1,1,add parallelflowablesequentialdelayerror this pr adds the sequentialdelayerror operator to parallelflowable that allows awaiting all rails in a parallel flow to terminate normally or with the composite exception of the failed rail s to enable this the flowableparallel operators behavior regarding rail cancellation had to be changed in v if any of the rails cancelled maybe due to a failure maybe due to an end consumer cancelling the entire parallel flow the input flowable was cancelled this pr alters this by requiring all rails to cancel before cancelling the input flowable the change permits one or multiple rails to fail and let others progress in case the new sequentialdelayerror is applied as a terminal operator the original sequential operator still cancels all rails if one of them fails triggering the cancellation of the input flowable note that this change may still drop and never process elements in the internal queues of the operators in the parallel flow because the parallel processing is not implemented with work stealing that could pick up elements from a dead queue in order to get as many elements processed as possible it is recommended to reduce the default prefetch on the runon operator to a reasonable tradeoff value between throughput and fault tolerance edit updated the pr to make sure parallel ignores cancelled rails when it dispatches itemsrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c bbb b e a f cf e fbsrcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ n java io reactivex parallel parallelflowablejava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgfyywxszwwvugfyywxszwxgbg ywjszs qyxzh white_check_mark ivex internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvssm pbi qyxzh rnal operators parallel parallelfrompublisherjava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsrnjvbvb ymxpc hlci qyxzh al operators observable observablesampletimedjava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq ex internal operators maybe maybetimeoutmaybejava https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgltzw de hewjllmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c bbff c c https codecovio gh reactivex rxjava compare c bbb b e a f cf e fbff c c c ebb a df e b fd elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5121,1,0,0,0,0,1,1,1,fix observablezip to dispose eagerly this pr fixes observablezip to dispose the sources outside the serialization loop just like flowablezip does this allows cancellation even if the serialization loop is busy blocking inside an onnext emissionin addition a unit test was added to observablezip as wellreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a fdff ee bcc f d c ad d f srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators observable observablezipjava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvppcc qyxzh x al operators observable observablesampletimedjava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme rnal subscriptions arraycompositesubscriptionjava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy bcnjheunvbxbvc l zvn ynnjcmlwdglvbi qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh main java io reactivex subjects maybesubjectjava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvtwf ymvtdwjqzwn lmphdme operators observable observableconcatmapeagerjava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhde hcevhz vylmphdme activex internal disposables disposablehelperjava https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a bsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvrglzcg zywjszuhlbhblci qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a fd b https codecovio gh reactivex rxjava compare a fdff ee bcc f d c ad d f b f d f f c b aee dd a belfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5127,1,0,0,0,0,0,1,0,update javadoc of flatmap overloads this pr rewords the javadoc of flowableflatmap overloads to correctly express their behavior regarding backpressure towards their upstream in x only merge operators are unbounded in by default flatmap s are by default bounded by buffersize or the maxconcurrency parameterin addition one of the flatmap overload still had resultselector instead of the common combiner parameter name as far as i know there are no language specific libraries targeting x yet where in the language the actual parameter names are also part of the signature and changing them counts as an incompatible changerelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a a f cb c e a edf bd c srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq x rnal subscriptions arraycompositesubscriptionjava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy bcnjheunvbxbvc l zvn ynnjcmlwdglvbi qyxzh vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh rnal subscribers singlepostcompletesubscriberjava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvu luz xlug zdenvbxbszxrlu vic nyawjlci qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh main java io reactivex subjects maybesubjectjava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvtwf ymvtdwjqzwn lmphdme vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a abbd https codecovio gh reactivex rxjava compare a a f cb c e a edf bd c abbd d ced aaef ce b f dsrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments
5133,1,0,0,0,0,1,1,1,fix flatmap not cancelling the upstream eagerly this pr fixes the lack of eager cancellation when flatmapping sources and not stopping the upstream if the inner source failsunit tests were added to verify single in case it receives a dedicated implementation one day as currently it delegates to flowable flowable and observable reported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a c cf f fc asrcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators flowable flowableflatmapjava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcc qyxzh x a io reactivex processors serializedprocessorjava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy tzxjpywxpemvkuhjvy vzc ylmphdme operators completable completableconcatarrayjava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq main java io reactivex subjects maybesubjectjava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvtwf ymvtdwjqzwn lmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme rnal operators flowable flowabletakelasttimedjava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgfrzuxhc ruaw lzc qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a c c https codecovio gh reactivex rxjava compare a c cf f fc a c f f a e a a c b e c d elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5136,1,0,0,0,0,0,1,0,fix repeatwhen and retrywhen signatures adjust the repeatwhen and retrywhen signatures to accept publisher on single and completable matching flowable s signaturereported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report exclamation no coverage uploaded for pull request base x a b e click here to learn what that means https docscodecovio docs error referencesection missing base commit the diff coverage is n a diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava compare a b e f f e fdf e cc f d bd e fcb b a fc cf ebb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq src main java io reactivex singlejava https codecovio gh reactivex rxjava compare a b e f f e fdf e cc f d bd e fcb b a fc cf ebb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme src main java io reactivex completablejava https codecovio gh reactivex rxjava compare a b e f f e fdf e cc f d bd e fcb b a fc cf ebb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a b ed bd https codecovio gh reactivex rxjava compare a b e f f e fdf e cc f d bd e fcb b a fc cf ebb elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5140,1,0,0,1,0,1,1,1,fix timed replay like components replaying outdated items the timed versions of flowablereplay replayprocessor observablereplay and replaysubject all replay outdated items to new subscribers and through the getvalues and size state peeking methods similar to issue resolved via the fix includes a node walk for new subscribers that skips old entries some unit tests werent logically considering the emission pattern ie items timed out shouldnt appear and have been fixed as wellreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a bf c e eed c eb e fd srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java io reactivex processors replayprocessorjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy szxbsyxlqcm jzxnzb iuamf yq x ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme x main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh nternal operators observable observablereplayjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh rnal subscriptions arraycompositesubscriptionjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy bcnjheunvbxbvc l zvn ynnjcmlwdglvbi qyxzh ternal operators completable completableusingjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvxnpbmcuamf yq erators completable completableconcatiterablejava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq io reactivex internal util backpressurehelperjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc cywnrchjlc n cmvizwxwzxiuamf yq internal operators completable completableambjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme reactivex internal operators single singleambjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a bf b https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edelfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5140,1,0,0,1,0,1,1,1,fix timed replay like components replaying outdated items the timed versions of flowablereplay replayprocessor observablereplay and replaysubject all replay outdated items to new subscribers and through the getvalues and size state peeking methods similar to issue resolved via the fix includes a node walk for new subscribers that skips old entries some unit tests werent logically considering the emission pattern ie items timed out shouldnt appear and have been fixed as wellreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a bf c e eed c eb e fd srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java io reactivex processors replayprocessorjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy szxbsyxlqcm jzxnzb iuamf yq x ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme x main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh nternal operators observable observablereplayjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh rnal subscriptions arraycompositesubscriptionjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy bcnjheunvbxbvc l zvn ynnjcmlwdglvbi qyxzh ternal operators completable completableusingjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvxnpbmcuamf yq erators completable completableconcatiterablejava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq io reactivex internal util backpressurehelperjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc cywnrchjlc n cmvizwxwzxiuamf yq internal operators completable completableambjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme reactivex internal operators single singleambjava https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a bf b https codecovio gh reactivex rxjava compare a bf c e eed c eb e fd b f ce c c c b c d ef edelfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5141,1,0,0,1,0,1,1,1,fix timed replay not terminating when all items timeout the timed replay operator didnt terminate a late subscriber if all the items timed out in the meantimerelated
5146,1,0,0,0,0,1,1,1,add unsubscribeon to single type resolve add unsubscribeon to single type codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a b f b ccdd bc eeef a b e c srcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx singlejava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec taw nbguuamf yq white_check_mark in java rx internal schedulers sleepingactionjava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl nszwvwaw nqwn aw ulmphdme java rx internal operators backpressureutilsjava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvqmfja byzxnzdxjlvxrpbhmuamf yq ain java rx internal schedulers schedulerwhenjava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlcldozw uamf yq ava rx internal operators operatormaterializejava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jnyxrlcmlhbgl zs qyxzh ava rx internal util backpressuredrainmanagerjava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl jhy twcmvzc vyzuryywlutwfuywdlci qyxzh in java rx internal operators operatorpublishjava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jqdwjsaxnolmphdme x rx internal schedulers cachedthreadschedulerjava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl nhy hlzfrocmvhzfnjagvkdwxlci qyxzh x n java rx subscriptions compositesubscriptionjava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec zdwjzy jpchrpb zl nvbxbvc l zvn ynnjcmlwdglvbi qyxzh white_check_mark n java rx subjects subjectsubscriptionmanagerjava https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d srcpr&eltreediff c jjl haw vamf ys yec zdwjqzwn cy tdwjqzwn u vic nyaxb aw utwfuywdlci qyxzh white_check_mark and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a be https codecovio gh reactivex rxjava compare a b f b ccdd bc eeef a b e c e a bfa c cab ebaffd f c d elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5156,0,0,0,0,0,0,1,0,add nonnull to the methods of emitter this pr is a part of this pr adds nonnull annotation to some methods of emitter so that the users of rxjava migrating from x to x can easily know passing null to the methods will cause npe sorry ive just noticed there is related to this pr codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit eff e e f ed f dbsrcpr&eldesc will increase coverage by the diff coverage is n a diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq rnal subscribers singlepostcompletesubscriberjava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvu luz xlug zdenvbxbszxrlu vic nyawjlci qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh internal operators completable completableambjava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme reactivex internal operators single singleambjava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme activex internal operators single singlecachejava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh x internal operators maybe maybeswitchifemptyjava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlu dpdgnoswzfbxb es qyxzh activex internal disposables disposablehelperjava https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvrglzcg zywjszuhlbhblci qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update eff e https codecovio gh reactivex rxjava compare eff e e f ed f db e e e b c e c e fbesrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks hkurokawa for the pr and vanniktech for the review vanniktech akarnokd thank you for your prompt merge
5161,1,0,0,0,0,1,1,1,add observableswitchmapsingle and switchmapsingledelayerror this is a new operator discussed in the issue refers to a goodly number of new operators which ill do bit by bit as my time allows and to ensure review is not too daunting updated with suggested changes unrelated ci failure ioreactivexparallelparallelflowabletest parallelismandprefetchasync failed javalangassertionerror value counts differ expected actual latch values errors completions timeout disposed at ioreactivexobserversbasetestconsumerfail basetestconsumerjava at ioreactivexobserversbasetestconsumerassertvaluecount basetestconsumerjava at ioreactivexparallelparallelflowabletestparallelismandprefetchasync parallelflowabletestjava unrelated ci failuretracking via could be due to low timeout settings and travis overload just rerun the build next time i did it just now codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d fdc fe dac e srcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators observable observableinternalhelperjava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuludgvybmfssgvscgvylmphdme white_check_mark src main java io reactivex observablejava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh white_check_mark vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq operators completable completableconcatarrayjava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh io reactivex internal util backpressurehelperjava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc cywnrchjlc n cmvizwxwzxiuamf yq ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme main java io reactivex subjects singlesubjectjava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvu luz xlu viamvjdc qyxzh ternal operators completable completableusingjava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvxnpbmcuamf yq main java io reactivex subjects maybesubjectjava https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvtwf ymvtdwjqzwn lmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fb https codecovio gh reactivex rxjava compare d fdc fe dac e fb dd a d fb d d bc e e cb elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments updated with null check on mapper call and added unit tests for null mapper and null mapper call result not proposing to duplicate all tests akarnokd what would you like dont duplicate tests when the specialized implementation happens that will ask for proper coverage by itself
5163,1,0,0,0,0,1,1,0,singlesubscribe to report isdisposed true on success error the consumersingleobserver didnt report isdisposed consistently with its statereported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b f b eabebff fbfbb b cde b srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ vex internal observers consumersingleobserverjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl nvbnn bwvyu luz xlt jzzxj zxiuamf yq x in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme rnal subscriptions arraycompositesubscriptionjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy bcnjheunvbxbvc l zvn ynnjcmlwdglvbi qyxzh operators completable completableconcatarrayjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme rnal operators flowable flowabletakelasttimedjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgfrzuxhc ruaw lzc qyxzh main java io reactivex subjects singlesubjectjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvu luz xlu viamvjdc qyxzh operators observable observableconcatmapeagerjava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhde hcevhz vylmphdme internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b f f fa https codecovio gh reactivex rxjava compare b f b eabebff fbfbb b cde b f fa acb c ae e b a srcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments
5174,1,0,0,0,0,0,1,0,wip removes anonymous inner classes this is a wip since the changes are big an incremental review and pr was recommended by akarnokd removes them from flowable observable operators issue https githubcom reactivex rxjava issues codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f ded c d d cae a c eb e b srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators flowable flowablewithlatestfrommanyjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlv l aexhdgvzdezyb nyw lmphdme x al operators observable observablesubscribeonjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn ynnjcmlizu ulmphdme x ternal operators flowable flowablebuffertimedjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqnvmzmvyvgltzwquamf yq vex internal operators single singledooneventjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgveb urxzlbnquamf yq x vex internal operators flowable flowabledelayjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrgvsyxkuamf yq x rnal operators flowable flowablecombinelatestjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq tymluzuxhdgvzdc qyxzh x x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh white_check_mark nternal operators observable observablereplayjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh x internal operators single singlezipiterablejava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvaaxbjdgvyywjszs qyxzh x internal operators observable observabledelayjava https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszurlbgf lmphdme x and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f ded ea https codecovio gh reactivex rxjava compare f ded c d d cae a c eb e b ea de f dbc bdf feeba elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments akarnokd on it great job ill merge this so the changes dont get too numerous
5177,1,0,0,0,0,0,1,0,removes all anonymous inner classes this is a what left to complete this one https githubcom reactivex rxjava pull removes all aics issue https githubcom reactivex rxjava issues sleimanjneidi whats the motivation behind making this change naturalwarren to improve stack traces and to reduce the footprint naturalwarren to improve stack traces and to reduce the footprintmakes sense thanks for filling me in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f fa c c b c e c cf srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme x main java io reactivex schedulers schedulersjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy ty hlzhvszxjzlmphdme x activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh x reactivex internal subscriptions fullarbiterjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy gdwxsqxjiaxrlci qyxzh x va io reactivex internal util exceptionhelperjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc fegnlchrpb izwxwzxiuamf yq x src main java io reactivex schedulerjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu nozwr bgvylmphdme x in java io reactivex schedulers testschedulerjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy uzxn u nozwr bgvylmphdme x io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh x ivex internal schedulers schedulerpoolfactoryjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszxjqb srmfjdg yes qyxzh x o reactivex internal schedulers schedulerwhenjava https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszxjxagvulmphdme x and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f faffecd b https codecovio gh reactivex rxjava compare f fa c c b c e c cf ffecd b b f e d d e f f elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5182,1,0,0,1,0,1,1,1,fix replay refcount leaking items between connections this pr updates observablereplay and flowablereplay for x to not leak items between reconnections when run with refcount the replay operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data only a new connect clears this data which may or may not happen since refcount ensures that there wont be any latecommers to an already completed connection because it also drops its current subscribers on termination or when reaching zero the replay can be reset to an empty staterelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c b a b b fa bac b a f a bbebasrcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq x ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme x nternal operators observable observablereplayjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme white_check_mark al operators observable observablesampletimedjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq reactivex internal operators single singleambjava https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c b c f https codecovio gh reactivex rxjava compare c b a b b fa bac b a f a bbebac f b c f f bdad ac c f cc elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5189,1,0,0,1,0,1,1,0,fix concatmapeager should accept for prefetch fixes a bug that flowableconcatmapeager mapper maxconcurrency prefetch and observableconcatmapeager mapper maxconcurrency prefetch operators will not accept and negative numbersreported in i believe a breaks the internals of the operator and has the completely opposite effect taking more memory i am sorry with the wrong fixis it only necessary to modify the document is it only necessary to modify the documentyes please modify only the javadoc thank you also i think that the test case name is wrong so i modifed it codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b b ed c f fdba be db srcpr&eldesc will decrease coverage by the diff coverage is n a diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh x src main java io reactivex flowablejava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq x al operators observable observablesampletimedjava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq operators completable completableconcatarrayjava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq rnal subscribers singlepostcompletesubscriberjava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvu luz xlug zdenvbxbszxrlu vic nyawjlci qyxzh in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme erators completable completableconcatiterablejava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq vex internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsunvut uamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b b e b https codecovio gh reactivex rxjava compare b b ed c f fdba be db e b ae e f e c afb bcf d srcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks for the contribution
5195,1,0,0,0,0,0,1,0,unicastsubject fail fast and delay error behavior this pr adds support for delay error behavior to unicastsubject with methods unicastsubject create boolean delayerror unicastsubject create int capacityhint action onterminated boolean delayerror behavior of existing factory methods was not changed and is fail fastrelates to codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f d d d ce e a a d fd d b srcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx subjects unicastsubjectjava https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b fsrcpr&eltreediff c jjl haw vamf ys yec zdwjqzwn cy vbmljyxn u viamvjdc qyxzh arrow_up ain java rx internal schedulers schedulerwhenjava https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b fsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlcldozw uamf yq n java rx subjects subjectsubscriptionmanagerjava https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b fsrcpr&eltreediff c jjl haw vamf ys yec zdwjqzwn cy tdwjqzwn u vic nyaxb aw utwfuywdlci qyxzh main java rx internal operators operatormergejava https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b fsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jnzxjnzs qyxzh arrow_down in java rx internal operators operatorpublishjava https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b fsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jqdwjsaxnolmphdme arrow_down n java rx internal operators cachedobservablejava https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b fsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvq fjagvkt jzzxj ywjszs qyxzh arrow_down java rx internal operators backpressureutilsjava https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b fsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvqmfja byzxnzdxjlvxrpbhmuamf yq arrow_up in java rx internal schedulers sleepingactionjava https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b fsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl nszwvwaw nqwn aw ulmphdme arrow_up continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f dd e cd https codecovio gh reactivex rxjava compare f d d d ce e a a d fd d b d e cd aa fa c b c f f fc dd b felfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks
5199,1,0,0,0,0,1,1,1,increase timeout on parallel & completable tests this pr increases the timeout on completabletest test methods and on parallelflowabletestparallelismandprefetchasync related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a d bd c f cb a srcpr&eldesc will decrease coverage by the diff coverage is n a diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq vex internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsunvut uamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a dd b https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments
5199,1,0,0,0,0,1,1,1,increase timeout on parallel & completable tests this pr increases the timeout on completabletest test methods and on parallelflowabletestparallelismandprefetchasync related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a d bd c f cb a srcpr&eldesc will decrease coverage by the diff coverage is n a diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq vex internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsunvut uamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a dd b https codecovio gh reactivex rxjava compare a d bd c f cb a d b ffae f f f adec b e b edbesrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments
5202,1,1,0,1,1,1,1,1,add resilient versions of parallel map filter & doonnext this pr adds new overloads to parallelflowable operators map filter and doonnext to enable per item error handling in case the main function fails with some exception javaflowablerange parallel map v v parallelfailurehandlingskip sequential test assertresult the new parallelfailurehandling has some default enumeration values to handle the common cases in addition the bifunction overload allows bounded retries and or conditional handling of failuresrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a a a e b fa ed e d ecsrcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ex internal operators parallel parallelfilterjava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsrmlsdgvylmphdme arrow_down n java io reactivex parallel parallelflowablejava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgfyywxszwwvugfyywxszwxgbg ywjszs qyxzh arrow_up io reactivex parallel parallelfailurehandlingjava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgfyywxszwwvugfyywxszwxgywlsdxjlsgfuzgxpbmcuamf yq internal operators parallel parallelfiltertryjava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsrmlsdgvyvhj lmphdme ternal operators parallel paralleldoonnexttryjava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsrg pbk lehrucnkuamf yq ex internal operators parallel parallelmaptryjava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvstwfwvhj lmphdme erators completable completableconcatiterablejava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq reactivex internal operators single singleambjava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq perators flowable flowablesequenceequalsinglejava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vxdwvuy vfcxvhbfnpbmdszs qyxzh ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a a dc https codecovio gh reactivex rxjava compare a a a e b fa ed e d ecdc cd e d ee b cf b b dfb elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments sorry if this is not the correct place for this question however its relevant to the above featurei would like to have an error handler on error callback but continue the processing or specify the number of retriescan the parallelfailurehandling enum be made into an interface instead i see the enum instances are all used in the same way in all the tryonnext methods of the operators filter map and doonnext the existing enums can maybe built in handler instances something like built ins map v v parallelfailurehandlingskip static instance some customizable built ins map v v parallelfailurehandlingretry retry times before failing user defined map v v retries err { logerror err return parrallelfailurehandlingresultskip } the return values could be skip ignore retry stop default val or error ex or perhaps this is already do able using existing api please always check the available operators first before asking for a feature http reactivexio rxjava x javadoc io reactivex parallel parallelflowablehtmlmap ioreactivexfunctionsfunction ioreactivexfunctionsbifunction the enums are just convenience implementations of the bifunction variants of the operators
5207,1,0,0,1,0,1,1,1,prevent tasks to self interrupt on the standard schedulers task wrappers of the various schedulers and modes direct & worker were able to get cancelled via interruption from the same thread they were runningrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab c d cea fef f e d ecsrcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh reactivex internal schedulers newthreadworkerjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ozxduahjlywrxb jrzxiuamf yq arrow_up ternal schedulers scheduleddirectperiodictaskjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwreaxjly rqzxjpb rpy rhc suamf yq reactivex internal schedulers singleschedulerjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy taw nbgvty hlzhvszxiuamf yq arrow_down tivex internal schedulers scheduleddirecttaskjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwreaxjly ruyxnrlmphdme ctivex internal schedulers abstractdirecttaskjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy bynn cmfjderpcmvjdfrhc suamf yq activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh arrow_up src main java io reactivex schedulerjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu nozwr bgvylmphdme al operators observable observablesampletimedjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab c dcb https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec dcb e abfb bf f ee c e f b elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5208,1,0,0,0,0,0,1,0,fix images of firstelement flattenasx flatmapiterable this pr links in the new images from for previously misleading marble diagrams of the operators codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab c d cea fef f e d ecsrcpr&eldesc will decrease coverage by the diff coverage is n a diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex maybejava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down ain java io reactivex subjects unicastsubjectjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvvw py fzdfn ymply quamf yq arrow_up src main java io reactivex flowablejava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down reactivex internal operators maybe maybeusingjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvxnpbmcuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq reactivex internal operators single singleambjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq al operators observable observablesampletimedjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab c e cd https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec e cd b a d de bd b c f f elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments plus unicastx image https rawgithubcom wiki reactivex rxjava images rx operators unicastprocessorpng image https rawgithubcom wiki reactivex rxjava images rx operators unicastsubjectpng yes the default with is set to and these new images are slightly bigger in their native form thanks for the reviews guys
5210,1,0,0,0,0,0,1,0,better documentation on the abstract consumer classes this pr improves the documentation of the abstract consumer classes such as disposablesubscriber resourcesubscriber and their counterparts for the other base reactive typesit contains a lot of copy paste so please read through all of the text in case the text was not properly adapted to the abstract class at handrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab c d cea fef f e d ecsrcpr&eldesc will increase coverage by the diff coverage is n a diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ava io reactivex observers disposableobserverjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl rpc bvc fibgvpynnlcnzlci qyxzh arrow_down o reactivex observers disposablemaybeobserverjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl rpc bvc fibgvnyxlizu ic vydmvylmphdme arrow_down io reactivex observers resourcesingleobserverjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl jlc cmnlu luz xlt jzzxj zxiuamf yq arrow_down tivex observers disposablecompletableobserverjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl rpc bvc fibgvdb wbgv ywjszu ic vydmvylmphdme arrow_down reactivex observers disposablesingleobserverjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl rpc bvc fibgvtaw nbgvpynnlcnzlci qyxzh arrow_down va io reactivex subscribers defaultsubscriberjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvrgvmyxvsdfn ynnjcmlizxiuamf yq arrow_down activex observers resourcecompletableobserverjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl jlc cmnlq tcgxldgfibgvpynnlcnzlci qyxzh arrow_down io reactivex subscribers disposablesubscriberjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvrglzcg zywjszvn ynnjcmlizxiuamf yq arrow_down java io reactivex observers resourceobserverjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl jlc cmnlt jzzxj zxiuamf yq arrow_down a io reactivex subscribers resourcesubscriberjava https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvumvzb vyy vtdwjzy jpymvylmphdme arrow_down and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab c ad e f https codecovio gh reactivex rxjava compare ab c d cea fef f e d ec ad e f bad f cb f d ba f csrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments
5213,1,0,0,0,0,1,1,0,fix window with time size emission problems the window operator overload with time and size bound didnt work correctly when some windows were terminated by the timeout and others by the size this pr fixes the case when the operator restarts the time windows when the size bound is reached leaking of the worker the item counter not reset to zero when the time bound is reached periodic window bound stopped working after the first windowrelated again codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit cd a f db e dfc ba b eaaefb fbsrcpr&eldesc will increase coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators flowable flowablewindowtimedjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlv luzg vgltzwquamf yq arrow_down al operators observable observablewindowtimedjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvd rpbwvklmphdme arrow_down operators completable completableconcatarrayjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq internal operators completable completableambjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme ternal operators completable completableusingjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvxnpbmcuamf yq reactivex internal operators single singleambjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq al operators observable observablesampletimedjava https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update cd a f cb d https codecovio gh reactivex rxjava compare cd a f db e dfc ba b eaaefb fb cb d bd de bf f a b elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5217,1,0,0,0,0,0,1,0,unicastsubject fail fast support this pr adds support for fail fast behavior to unicastsubject with methods unicastsubject create boolean delayerror unicastsubject create int capacityhint runnable onterminated boolean delayerror relates to codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e e b da c bee bc ba e f srcpr&eldesc will decrease coverage by the diff coverage is diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ain java io reactivex subjects unicastsubjectjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvvw py fzdfn ymply quamf yq in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh ctivex internal schedulers abstractdirecttaskjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy bynn cmfjderpcmvjdfrhc suamf yq rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq internal operators completable completableambjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme n java io reactivex processors asyncprocessorjava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy bc luy byb nlc nvci qyxzh activex internal operators single singlecachejava https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e efcd a https codecovio gh reactivex rxjava compare e e b da c bee bc ba e f efcd a c a b a d b c debsrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments yes will do that as separate pr thanks
5223,1,0,0,1,0,0,1,0,improve the documentation of schedulers utility class this pr improves the javadoc of the ioreactivexschedulersschedulers utility class plus adds a missing schedulersupport constant for the single schedulerlet me know if something needs further explanation or some new case needs explanation related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dc a d fea c b f e c c srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex schedulers schedulersjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy ty hlzhvszxjzlmphdme arrow_down a io reactivex processors serializedprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy tzxjpywxpemvkuhjvy vzc ylmphdme internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme activex internal operators single singlecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dc a a bfa https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5225,1,0,0,0,0,1,1,0,fix completableonerrorresumenext unsubscribe not propagated the completableonerrorresumenext did not properly propagate the downstream unsubscribe call to upstreamreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d edee a cbf db e afd srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx completablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec db wbgv ywjszs qyxzh arrow_down java rx internal util unsafe mpsclinkedqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl vuc fmzs nchnjtglua vkuxvldwuuamf yq rx internal operators operatorwindowwithtimejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jxaw kb dxaxrovgltzs qyxzh internal subscriptions sequentialsubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zdwjzy jpchrpb zl nlcxvlbnrpywxtdwjzy jpchrpb uamf yq java rx internal operators backpressureutilsjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvqmfja byzxnzdxjlvxrpbhmuamf yq src main java rx observers serializedobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec vynnlcnzlcnmvu vyawfsaxplze ic vydmvylmphdme n java rx subjects subjectsubscriptionmanagerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec zdwjqzwn cy tdwjqzwn u vic nyaxb aw utwfuywdlci qyxzh rx internal schedulers cachedthreadschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl nhy hlzfrocmvhzfnjagvkdwxlci qyxzh arrow_down a rx internal operators bufferuntilsubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvqnvmzmvyvw awxtdwjzy jpymvylmphdme arrow_up n java rx internal operators cachedobservablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvq fjagvkt jzzxj ywjszs qyxzh arrow_down and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d edee bd a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5226,1,0,0,0,0,0,1,0,unicastprocessor fail fast support this pr adds support for fail fast behavior to unicastprocessor with methods unicastprocessor create boolean delayerror unicastprocessor create int capacityhint runnable onterminated boolean delayerror relates to codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dc a d fea c b f e c c srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme a io reactivex processors serializedprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy tzxjpywxpemvkuhjvy vzc ylmphdme internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh ternal operators completable completablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq fjaguuamf yq x internal operators maybe maybeswitchifemptyjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlu dpdgnoswzfbxb es qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dc a d bb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5247,1,0,0,0,0,1,1,1,fix flowabletolist onnext cancel race this pr fixes the nullpointerexception that can happen because cancel nulls out the value and onnext simply dereferences that value in flowabletolist reported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c f f ae fffd e a de srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ex internal operators flowable flowabletolistjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvg maxn lmphdme arrow_down rnal subscriptions arraycompositesubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy bcnjheunvbxbvc l zvn ynnjcmlwdglvbi qyxzh vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq java io reactivex subjects serializedsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvu vyawfsaxplzfn ymply quamf yq in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh erators completable completableconcatiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c affef https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5258,1,0,0,0,0,1,1,1,use intellij ide friendly assertion failure message the assertitem failure message pattern in testsubscriber does not match any of the regex patterns defined by intellij to show link before https cloudgithubusercontentcom assets c f e d a jpg by changing the _expected to be_ to _expected _ the pattern is recognised by intellij and the helpful link is presented after https cloudgithubusercontentcom assets f f e b e b jpg the original idea from was to use the _expected but was _ pattern used in junit but it is not picked up on its own by intellij the assertionerror must extend from junits comparisonfailure to get it recognised this however requires dependency on junit junit https cloudgithubusercontentcom assets fefd c f e bc db jpg so in the end the fix is just a very simple change in the message codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit bc a ffd ffcc f a ef c f srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&width &tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx observers testsubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec vynnlcnzlcnmvvgvzdfn ynnjcmlizxiuamf yq arrow_down ain java rx internal operators onsubscribeambjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt tdwjzy jpymvbbwiuamf yq n java rx internal operators cachedobservablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvq fjagvkt jzzxj ywjszs qyxzh ava rx internal util backpressuredrainmanagerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl jhy twcmvzc vyzuryywlutwfuywdlci qyxzh arrow_up n java rx subscriptions compositesubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec zdwjzy jpchrpb zl nvbxbvc l zvn ynnjcmlwdglvbi qyxzh arrow_down continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update bc a c b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5277,1,0,0,0,0,1,1,0,singlesubscribe biconsumer consistent isdisposed fixes the singlesubscribe biconsumer to report isdisposed when terminatingreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d b e df b f e f daa a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal observers biconsumersingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl jpq uc vtzxjtaw nbgvpynnlcnzlci qyxzh arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh operators completable completableconcatarrayjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq reactivex internal operators maybe maybeusingjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvxnpbmcuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh al operators observable observablesampletimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal operators flowable flowablesequenceequaljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vxdwvuy vfcxvhbc qyxzh internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq activex internal disposables disposablehelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvrglzcg zywjszuhlbhblci qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d b d c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5296,1,0,0,0,0,0,1,0,improve doondispose javadoc sorry for the earlier pr this addresses the javadoc issues discussed in removes the note in observabledoondispose which claims its action would be called on terminal events slightly adjusts the javadocs of the maybe single completable variants adds throws note to some observable single maybe doondispose as it was present in the completable variant codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab f df d ab c f desrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq x internal operators maybe maybeswitchifemptyjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlu dpdgnoswzfbxb es qyxzh vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq al operators observable observablesampletimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab c c f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5296,1,0,0,0,0,0,1,0,improve doondispose javadoc sorry for the earlier pr this addresses the javadoc issues discussed in removes the note in observabledoondispose which claims its action would be called on terminal events slightly adjusts the javadocs of the maybe single completable variants adds throws note to some observable single maybe doondispose as it was present in the completable variant codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab f df d ab c f desrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq x internal operators maybe maybeswitchifemptyjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlu dpdgnoswzfbxb es qyxzh vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq al operators observable observablesampletimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab c c f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5302,1,0,0,0,0,0,1,0,add singleunsubscribeon this pr adds the singleunsubscribeon operatorrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit db e dff e b f d e c ea srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_up internal operators single singleunsubscribeonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvvbnn ynnjcmlizu ulmphdme rnal subscriptions arraycompositesubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy bcnjheunvbxbvc l zvn ynnjcmlwdglvbi qyxzh internal operators completable completableambjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme erators completable completableconcatiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq activex internal operators single singlecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh ex internal operators maybe maybetimeoutmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgltzw de hewjllmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update db d ee https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5307,1,0,0,1,0,0,1,0,apply promotions for v this pr applies the promotions listed in suggested review strategy check if the experimental annotation has been removed or turned into beta check if the history x matches the original value of the updated since x codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c e a f e f fc e de srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex subjects singlesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvu luz xlu viamvjdc qyxzh src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down java io reactivex subscribers testsubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvvgvzdfn ynnjcmlizxiuamf yq arrow_down n java io reactivex parallel parallelflowablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgfyywxszwwvugfyywxszwxgbg ywjszs qyxzh arrow_down main java io reactivex plugins rxjavapluginsjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgx z lucy seephdmfqbhvnaw zlmphdme arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down activex exceptions protocolviolationexceptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzxhjzxb aw ucy qcm b nvbfzpb xhdglvbkv y vwdglvbi qyxzh arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down java io reactivex subjects completablesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvq tcgxldgfibgvtdwjqzwn lmphdme arrow_down and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c fe d b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5318,1,0,0,0,0,0,1,0,apply api promotions for this pr applies the api promotions of note that singleunsubscribeon remainded experimental and observablefromemitter was removedwhere the experimental version was available it was moved up as history xy experimental similar to how x versioning promotions happensuggested review strategy verify experimental and beta annotations are removed from the method and from javadoc verify since is present codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit afbd f cc a f b f a b ba srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &srcpr&height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx singlejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec taw nbguuamf yq arrow_down src main java rx internal util blockingutilsjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl jsb nraw nvxrpbhmuamf yq arrow_down src main java rx schedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec ty hlzhvszxiuamf yq arrow_down src main java rx plugins rxjavaschedulershookjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec wbhvnaw zl j smf yvnjagvkdwxlcnnib rlmphdme arrow_down src main java rx observables synconsubscribejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec vynnlcnzhymxlcy tew jt tdwjzy jpymuuamf yq arrow_down src main java rx backpressureoverflowjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec cywnrchjlc n cmvpdmvyzmxvdy qyxzh arrow_down src main java rx plugins rxjavapluginsjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec wbhvnaw zl j smf yvbsdwdpbnmuamf yq arrow_down src main java rx plugins rxjavaerrorhandlerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec wbhvnaw zl j smf yuvycm ysgfuzgxlci qyxzh arrow_down x internal operators onsubscribeflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt tdwjzy jpymvgbgf twfwu luz xllmphdme arrow_down n java rx observers safecompletablesubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec vynnlcnzlcnmvu fmzunvbxbszxrhymxlu vic nyawjlci qyxzh arrow_down and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update afbd dd b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5409,1,0,0,0,0,0,1,0,corrected singledelay documentation corrected singledelay documentation that says that success or error signals will be delayed by the specified amount but in fact errors are not delayed only successes
5419,1,0,0,0,0,1,1,0,fix periodic scheduling with negative period causing iae this pr adds unit tests to verify the schedulerscheduleperiodicallydirect and schedulerworkerscheduleperiodically works with non positive period as required by the javadoc the computation and single schedulers were not working properly and the underlying scheduledexecutorservice crashed with illegalargumentexception thus these are now fixed with custom handler for the period l casesrelated
5427,1,0,0,0,0,1,1,1,fix buffer time maxsize duplicating buffers on time size race the pr fixes both the time maxsize bound buffer operators of flowable and observable the logic didnt properly mutually exclude the timer action and the onnext action resulting in probabilistic emission of the same buffer twicereported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a c d dc ff d a d f cd ee bsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ al operators observable observablebuffertimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuj zmzlclrpbwvklmphdme arrow_down ternal operators flowable flowablebuffertimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqnvmzmvyvgltzwquamf yq internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ternal operators completable completableusingjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvxnpbmcuamf yq ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh ava io reactivex internal util halfserializerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc iywxmu vyawfsaxplci qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5440,1,0,0,0,0,1,1,1,concat to report isdisposed consistently with termination this pr makes sure the disposable of a concat operator reports true when the sequence terminatesreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a b e b a deed afe dsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rnal operators observable observableconcatmapjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhde hcc qyxzh arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh operators completable completableconcatarrayjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq internal operators observable observablehidejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuhpzguuamf yq rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh io reactivex internal util backpressurehelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc cywnrchjlc n cmvizwxwzxiuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq internal operators completable completableambjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a b af f e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5447,1,0,1,0,0,0,1,0,remove nonnull annotation in consumer method parameter this fixes this should be safe to merge see the discussion in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b bcc f d e f c b faaesrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq al operators observable observablesampletimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvrpbwvklmphdme internal operators completable completableambjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme ternal operators completable completablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq fjaguuamf yq ex internal operators maybe maybetimeoutmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgltzw de hewjllmphdme main java io reactivex subjects singlesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvu luz xlu viamvjdc qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b bf e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments im curious why did the code coverage decrease because of this there are unit tests that race for a certain code path inside the operators travis ci lately has become x slower and often these code paths are no longer exercised it is sometimes if there is a generic drop unrelated to your changes there is nothing to worry about looks like this nullability thing is hitting many kotlin users now see what do you think about removing all nullability annotations from the functional types in an additional pr what do you think about removing all nullability annotations from the functional types akarnokd to add my two cents i think this is a good idea there is nothing wrong with nullability annotations as long as the code adheres to this contract meaning null should never be passed where nonnull is declared java doesnt enforce this and only java allows annotating the type arguments themselves javapublic observable doonnext consumer onnext public completable doonevent consumer onevent akarnokd id be happy to add a pr for removing them if you wishshould all annotations in the ioreactivexfunctions package be removed then looks like function is the next to be adjusted indicates its return type may be null with groupby id delay removing all annotations in case kotlin comes to senses because i doubt rxjava is the only library that has inconsistent nullability annotation usage looks like function is the next to be adjusted indicates its return type may be null with groupby id delay removing all annotations in case kotlin comes to senses because i doubt rxjava is the only library that has inconsistent nullability annotation usage akarnokd what do you mean by kotlin comes to senses this is by language design and i doubt it will change i dont understand why we have to discuss this and why its not clear that as a library developer you should not put null into an argument that is annotated by nonnull as i said before this is not a kotlin only problem and certainly will affect java developers too as here clearly the contract is broken rxjava is a java library and thus we are bound by the capabilities of java language level we are also trying to be nice with other languages but that has limits the best we can do is to remove nullability annotations from controversial functional types that come upwhat i mean by senses is it would be kotlins responsibility to work with native java libraries and provide workaround since javas type system doesnt have a primary notion of nullability i just leave off replace the annotations to satisfy some static analysis tools if necessary the fact that just by upgrading to compatiblity broke indicates there has to be work done on kotlins part im aware that java cannot check nullability constraints during compile time however this is not a language issue ides like intellij idea will analyze these annotations and give hints so as a developer you might think that the argument can never be null but in fact it can so what is the point of this annotation then see if we could support callsite nullability wed do it but we cant so either annotate for the majority uses or not annotate at all through the common functional interfaces adding removing annotations is considered binary compatible thus any other means such as alternate interfaces has to be added and accompanied by new methods which also need to be named differently to avoid lambda ambiguity ides like intellij idea will analyze these annotations and give hintsthe keyword is hints the annotations were mostly working for java android but kotlin no longer considers them as hints if there was a i take my chances type hint or you could disable the rxjava annotations being considered that would make things simpler if theyre just hints id prefer them entirely removed they should eitherbe accurate or entirely absent we have java tools which take theseannotations as being accurate and having anything less than that inactuality will cause bugson tue jun am david karnok wrote see if we could support callsite nullability wed do it but we cant so either annotate for the majority uses or not annotate at all through the common functional interfaces adding removing annotations is considered binary compatible thus any other means such as alternate interfaces has to be added and accompanied by new methods which also need to be named differently to avoid lambda ambiguity ides like intellij idea will analyze these annotations and give hints the keyword is hints the annotations were mostly working for java android but kotlin no longer considers them as hints if there was a i take my chances type hint or you could disable the rxjava annotations being considered that would make things simpler — you are receiving this because you are subscribed to this thread reply to this email directly view it on github or mute the thread afaik the problem with the non annotated interfaces was that intellij kotlin inferred all of them as nullable t and caused inconveniences non annotated types will be inferred as a platform type which hasambiguous nullability this allows the user to specify it as nullable ornon nullable with a runtime check in the latter case based on what theyknow of the data and operatoron tue jun am david karnok wrote afaik the problem with the non annotated interfaces was that intellij kotlin inferred all of them as nullable t and caused inconveniences — you are receiving this because you commented reply to this email directly view it on github or mute the thread so far these were the cases that require the removal of annotations consumer may be called with null ie doonevent biconsumer may be called with null ie subscribe function may return null in groupby s key selectorthe other functional types are never called with null and are not allowed to return null option has no pr yet akarnokd i added a pr for in thanks ansman the fact that just by upgrading to compatiblity broke indicates there has to be work done on kotlins partit just indicates that there were holes in the type system which have been fixed anyway thanks to everybody that this issue has been resolved
5449,1,0,0,0,0,0,1,0,remove the nonnull annotation from function as per per the discussion in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b f d b d a a ad f ebff srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq internal operators maybe maybetakeuntilmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglstwf ymuuamf yq ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh vex internal operators flowable flowabletimerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzxiuamf yq activex internal operators single singlecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh main java io reactivex subjects singlesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvu luz xlu viamvjdc qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b f c fea https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5466,1,0,0,0,0,0,1,0,flowabletimeouttimed replace atomicreference with mutable field as per discussion in the timer fields in the subscriber classes in flowabletimeouttimed https githubcom reactivex rxjava blob c f a bc d bcb b df src main java io reactivex internal operators flowable flowabletimeouttimedjava are atomicreference s but this is not required as the fields are accessed synchronouslythe timer field in timeouttimedothersubscriber did require an atomicreference because of the dispose call here https githubcom reactivex rxjava blob c f a bc d bcb b df src main java io reactivex internal operators flowable flowabletimeouttimedjaval but this call is not required if we just call workerdispose no unit test additionsps unit tests in rxjava x an outrageous amount of work thanks akarnokd and other contributors codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit be a dc b ee ae d srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&width &tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh ternal operators flowable flowablesampletimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu ftcgxlvgltzwquamf yq ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme internal disposables arraycompositedisposablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvqxjyyxldb wb npdgveaxnwb nhymxllmphdme ex internal subscriptions subscriptionarbiterjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy tdwjzy jpchrpb bcmjpdgvylmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update be https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5486,1,0,0,0,0,1,1,0,small note on maybedefaultifempty regarding tosingle ths pr replaces regarding the issue of because our javadoc validation did not allow that type of wording ie mentioning single when the method signature is not related to it codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ec a ded f d baf f d ebddasrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex maybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down tivex internal schedulers instantperiodictaskjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jbnn yw ugvyaw kawnuyxnrlmphdme io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ternal operators completable completablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq fjaguuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu ic vydmvpbi qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ec a f c e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5486,1,0,0,0,0,1,1,0,small note on maybedefaultifempty regarding tosingle ths pr replaces regarding the issue of because our javadoc validation did not allow that type of wording ie mentioning single when the method signature is not related to it codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ec a ded f d baf f d ebddasrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex maybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down tivex internal schedulers instantperiodictaskjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jbnn yw ugvyaw kawnuyxnrlmphdme io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh ernal operators maybe maybetakeuntilpublisherjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvgfrzvvudglsuhvibglzagvylmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ternal operators completable completablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq fjaguuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu ic vydmvpbi qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ec a f c e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5507,1,0,0,1,0,1,1,1,fix spsclaq nepotism flowablerefcounttesttestrefcountasync flaky this pr fixes the so called gc nepotism see in spsclinkedarrayqueue by not nulling out the previous buffers next pointer upon switching buffers in the peek poll methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load reported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit df a fb fea a aeb e dfb e csrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&width &height &tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ reactivex internal queue spsclinkedarrayqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy xpbmtlzefycmf uxvldwuuamf yq tivex internal schedulers instantperiodictaskjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jbnn yw ugvyaw kawnuyxnrlmphdme ternal operators flowable flowablesampletimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu ftcgxlvgltzwquamf yq activex internal operators single singlecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh rnal operators flowable flowabletakelasttimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgfrzuxhc ruaw lzc qyxzh java io reactivex subjects completablesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvq tcgxldgfibgvtdwjqzwn lmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh main java io reactivex subjects singlesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvu luz xlu viamvjdc qyxzh main java io reactivex subjects maybesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvtwf ymvtdwjqzwn lmphdme activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update df a ac https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5507,1,0,0,1,0,1,1,1,fix spsclaq nepotism flowablerefcounttesttestrefcountasync flaky this pr fixes the so called gc nepotism see in spsclinkedarrayqueue by not nulling out the previous buffers next pointer upon switching buffers in the peek poll methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load reported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit df a fb fea a aeb e dfb e csrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&width &height &tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ reactivex internal queue spsclinkedarrayqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy xpbmtlzefycmf uxvldwuuamf yq tivex internal schedulers instantperiodictaskjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jbnn yw ugvyaw kawnuyxnrlmphdme ternal operators flowable flowablesampletimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu ftcgxlvgltzwquamf yq activex internal operators single singlecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh rnal operators flowable flowabletakelasttimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgfrzuxhc ruaw lzc qyxzh java io reactivex subjects completablesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvq tcgxldgfibgvtdwjqzwn lmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh main java io reactivex subjects singlesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvu luz xlu viamvjdc qyxzh main java io reactivex subjects maybesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvtwf ymvtdwjqzwn lmphdme activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update df a ac https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5524,1,0,0,0,0,0,1,0,add update observable marbles this pr updates the marbles of the following observable operators just image https rawgithubcom wiki reactivex rxjava images rx operators justitempng by leonardortlima rangelong image https rawgithubcom wiki reactivex rxjava images rx operators rangelongpng by leonardortlima startwith image https rawgithubcom wiki reactivex rxjava images rx operators startwithitempng by leonardortlima startwitharray image https rawgithubcom wiki reactivex rxjava images rx operators startwitharraypng by leonardortlima sorted image https rawgithubcom wiki reactivex rxjava images rx operators sortedpng by leonardortlima see codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e cd e f e ce d eba ed e srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq erators completable completableconcatiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq io reactivex internal util backpressurehelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc cywnrchjlc n cmvizwxwzxiuamf yq reactivex internal operators maybe maybeusingjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvxnpbmcuamf yq rnal operators completable completabletimeoutjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgltzw dc qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh ternal operators completable completablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq fjaguuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq activex internal operators single singlecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e ccbfe b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5560,1,0,0,0,0,0,1,0,fix obscombinelatestdelayerror sync initial error not emitting this pr fixes the case reported in where a synchronous first non empty source triggered an error completion immediately instead of giving a chance to the other sources to form combinationsthe fix also includes initialization of the combineobserver s now happen in the constructor the atomicreference of the inner observers are now inlined into combineobserver cleaned up drain logic unit tests verifying flowablecombinelatest no changes required there codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fac ebe ff fa dfb b srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbwjpbmvmyxrlc quamf yq in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme tivex internal schedulers instantperiodictaskjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jbnn yw ugvyaw kawnuyxnrlmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu ic vydmvpbi qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq a io reactivex internal queue mpsclinkedqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvtxbzy xpbmtlzff zxvllmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fac fd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5568,1,0,0,0,0,1,1,1,add assertvaluesonly to basetestconsumer adds assertvaluesonly that asserts that the testobserver testsubscriber received only the specified values in the specified order without terminatingfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ea ca c c ad e d cc e srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java io reactivex observers basetestconsumerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl jhc vuzxn q uc vtzxiuamf yq arrow_up operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh operators observable observablesequenceequaljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnlcxvlbmnlrxf ywwuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ea ca cdc cd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5582,1,0,0,0,0,0,1,0,implement maybeswitchifempty single adds maybeswitchifempty single fixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit bebc b d f a a f e dsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&width &tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex maybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_up rnal operators maybe maybeswitchifemptysinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlu dpdgnoswzfbxb evnpbmdszs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme a io reactivex internal queue mpsclinkedqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvtxbzy xpbmtlzff zxvllmphdme rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update bebc dadbb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments im only convinced for the need of this overload cc vanniktech artem zinnatullin
5590,1,0,0,0,0,1,1,0,implement lambdaconsumerintrospection followup from and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default throwing one wasnt sure how youd want to do the naming can work on adding some tests if this looks good wanted to get something up for api review early the naming is fine with me codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c b a c cd b c ef bsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nternal observers callbackcompletableobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl nhbgxiywnrq tcgxldgfibgvpynnlcnzlci qyxzh arrow_up o reactivex internal observers lambdaobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl xhbwjkyu ic vydmvylmphdme arrow_up nternal operators maybe maybecallbackobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlq fsbgjhy tpynnlcnzlci qyxzh arrow_up vex internal observers consumersingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl nvbnn bwvyu luz xlt jzzxj zxiuamf yq arrow_up x internal observers emptycompletableobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl vtchr q tcgxldgfibgvpynnlcnzlci qyxzh arrow_up activex internal subscribers lambdasubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvtgftymrhu vic nyawjlci qyxzh arrow_up a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c b df https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments should i add this to other types observers too or do you want to start with this first should i add this to other types observers toothat would be great btw hzsweers you can solve this right now by overriding via reflection ioreactivexinternalfunctionsfunctionson_error_missing with consumer implementation thatll throw error instead of delivering it to the rxjavaplugins although current wip looks fine for the most part 👍 yeah id prefer something in the public api akarnokd should there be a separate hasdefaulterrorconsumer for lambdasubscriber for symmetry or just reuse just reused for now let me know if you want me to make it separatei think ive covered the other observer possibilities let me know if theres any others i should cover i agree the names could be better will update tomorrow ok ive updated the tests and the naming based on cr the only remaining bit i think is whether or not to use a global introspection interface or make one per observer for better parity thoughts use a global introspection interface or make one per observer for better parity thoughtsdepends on which level of per observer youre talking about hopefully not about all internal implementations id create an interface per rx type so you could hook into these rxjavaplugins callbacks ie maybeobserverintrospection flowablesubscriberintrospection singleobserverintrospection observableobserverintrospection completableobserverintrospection because if well decide to add introspection api for other callbacks like onnext and oncomplete in future some of them will not make sense for types like completable and single and naming wont match their callbacks if we go with same interface for all types lambdaconsumerintrospection seems too impl specific name i realise that the only way rxjava can understand that ie error handler is default one is to rely on subscribe calls that accept lambdas but name still feels kinda wrong and too specific just my satoshis yeah i meant per type i think the name is fine as a specific thing since its only applicable to composed observers like lambdaobserver lambda itself might not be best since that naming convention seems to only exist for observable and flowable i think there is no need to have versions of the same interface there is always the subscriber observer type discoverable javapublic static void errornotimplemented object target { if target instanceof lambdaconsumerintrospection { if target instanceof singleobserver { } if target instanceof subscriber { } }} that works for me i think this pr is complete then akarnokd questionable decision about types single and completable might be inconsistent with future addition of hasdefaultonnext and hasdefaultoncomplete changes in the interfaceup u of course if you want to hijack those consumer types you already know the target type and which signal types it can deliver therefore if they implement the same broad interface the impossible methods can return false or throw an unsupportedoperationexception
5600,1,0,0,0,0,0,1,0,updating javadoc with correct return types a small pr with updated javadoc mentioned in the issue thanks to roblewis for reporting it updated documentation about return types where observable was incorrectly mentioned instead of single the flowable variants are okay http reactivexio rxjava x javadoc io reactivex flowablehtmlisempty codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a a c e dc bcc a b ccb srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu ic vydmvpbi qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a a ad a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5609,1,0,0,1,0,1,1,0,fix observableconcatmapeager queueing of source items this pr fixes the wrong queue type in observableconcatmapeager to be the spsclinkedarrayqueue instead of the spscarrayqueue the latter basically ignored items from the main source when it got full a rem t from its bounded flowable cousin unit tests added that ensure both flowable and observable variants work properlyreported in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c d d f d aa c dc c ff a ec srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators observable observableconcatmapeagerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhde hcevhz vylmphdme arrow_down erators flowable flowableonbackpressurelatestjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt cywnrchjlc n cmvmyxrlc quamf yq internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme operators observable observablesequenceequaljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnlcxvlbmnlrxf ywwuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c d d c ae https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5616,1,0,0,1,0,1,1,0,add singledelay overload that delays errors much like i discovered when trying to fake a slow flaky backend that singledelay doesnt delay errorsthis pr adds an overload that does bringing singledelay in line with observabledelay it also corrects the javadoc for existing overloads only updated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e dff b fa f c a b f srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ activex internal operators single singledelayjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvezwxhes qyxzh arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_up operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5637,1,0,0,1,0,0,1,0,fixing javadoc warnings minor fixes for warnings reported by javadoc tool mentioned in nice could you also fix this javadoc home travis build reactivex rxjava src main java io reactivex observers resourcemaybeobserverjava error bad use of subscribewith new resourcemaybeobserver&ltinteger { sure amended codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b d d e c f e c a de ba efcsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme arrow_down io reactivex subscribers disposablesubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvrglzcg zywjszvn ynnjcmlizxiuamf yq arrow_down a io reactivex subscribers resourcesubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvumvzb vyy vtdwjzy jpymvylmphdme arrow_down o reactivex observers disposablemaybeobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl rpc bvc fibgvnyxlizu ic vydmvylmphdme arrow_down ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh arrow_down ava io reactivex observers disposableobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl rpc bvc fibgvpynnlcnzlci qyxzh arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down ain java io reactivex subjects publishsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvuhvibglzafn ymply quamf yq arrow_down io reactivex observers resourcesingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl jlc cmnlu luz xlt jzzxj zxiuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5647,1,0,0,0,0,0,1,0,fix subscribewith documentation examples this pr improves a documentation of subscribewith functions in single maybe completable by making sure examples are compilable by using classes which implement disposable this should fix issue in that issue akarnokd approved my idea to use disposablemaybeobserver in the example but as i looked in other classes i noticed that observablesubscribewith documentation uses a resourceobserver which implements disposable so i thought that this is the way to go in all other top classesif you think that this is not the case and instead all of them should be switched to use disposable observer in their examples let me know i will do it in this way theni think that all those example should use similar classes resourcexobserver is generally not necessary so disposablexobserver should be in the docs codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fb f b d d c fde a f bsrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fb ac https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments got it will update soon is it ok to force push into pr branches pr branches are in your own repo so yes
5649,1,0,0,0,0,0,1,0,add concatmapcompletable to observable add concatmapcompletable to observable as discussed in i didnt think it made sense in other reactive typescode is mostly a copy of observableconcatmap let me know if there is a better style of code to base this off instead it also does not have the option to delay errors as concatmap does not sure if that is needed codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fb f b d d c fde a f bsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &srcpr&height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up ors observable observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhde hcenvbxbszxrhymxllmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme rnal operators flowable flowableintervalrangejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywxsyw nzs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fb aab https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments added to for the diagram
5660,1,0,0,0,0,0,1,0,fix timeout timed selector unsubscribe bug this pr fixes an unsubscribe bug somewhere in the timed timeout operator reported in by implementing it in a algorithmically fresh manner codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit cdc c d a d a ea srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pynnlcnzhymxllmphdme arrow_up rators onsubscribetimeoutselectorwithfallbackjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt tdwjzy jpymvuaw lb v u vszwn b jxaxrormfsbgjhy suamf yq operators onsubscribetimeouttimedwithfallbackjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt tdwjzy jpymvuaw lb v vgltzwrxaxrormfsbgjhy suamf yq rx internal util atomic mpsclinkedatomicqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl f b pyy nchnjtglua vkqxrvbwljuxvldwuuamf yq java rx internal util unsafe mpsclinkedqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl vuc fmzs nchnjtglua vkuxvldwuuamf yq java rx internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme ternal operators operatoronbackpressurelatestjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jpbkjhy twcmvzc vyzuxhdgvzdc qyxzh src main java rx observers serializedobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec vynnlcnzlcnmvu vyawfsaxplze ic vydmvylmphdme x internal operators deferredscalarsubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvrgvmzxjyzwrty fsyxjtdwjzy jpymvylmphdme in java rx internal operators operatorpublishjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jqdwjsaxnolmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update cdab https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments posted fix for the selector version as well thanks were using the new operators in our code base and they are working as expected great
5669,1,0,0,0,0,1,1,1,fix publishprocessor cancel emission overflow bug this pr should fix the bug that caused the test failure in the bug manifested itself when a cancellation was happening the same time a request was being fulfilled since the same request accounting was used for cancellation indicator if the cancel happened between the onnext s get check and decrementandget this decrementandget decremented longmin_value unconditionally which lead to a state that would appear the subscriber still can receive events a concurrent offer which saves the current array of registered subscriber s then would emit an item and overflow the subscriber the fix is to use the cancellation aware backpressurehelperproducedcancel utilityunit test were added to verify the correct behavior on both publishprocessor and behaviorprocessor the latter uses different cancellation mechanism via a dedicated field codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit cd bc c bf faea cd c e cedd f c srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh rnal operators flowable flowabletakelasttimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgfrzuxhc ruaw lzc qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlrmxvd fibguuamf yq ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update cd bc c f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5677,1,0,0,0,0,1,1,0,make parallel a fusion async boundary the parallel supports front fusion but since the operator is almost always followed by the separate runon operator the parallel version of the observeon operator such front fusion should be considered a boundary type fusion just like with observeon a requestfusion with boundary tells the upstream operator s that when fused their actions would be executed behind an async boundary and possibly on an unwanted thread operators such as map and doonnext who are generally expected to be thread confined can then refuse to fuse restoring the traditional queue hopping behavior source queue op queue op queue consumer reported in cc smaldini & simonbasle codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ad e a ecfbf d d d casrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rnal operators parallel parallelfrompublisherjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsrnjvbvb ymxpc hlci qyxzh in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq java io reactivex subjects completablesubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvq tcgxldgfibgvtdwjqzwn lmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ad a ca https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5696,1,0,0,0,0,1,1,0,fix completableconcat to use replace dont dispose old fixes the same bug as with the x completableandthen and completableconcat see & codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b e b c faf ac f d ff asrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ l operators completableonsubscribeconcatarrayjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvq tcgxldgfibgvpbln ynnjcmlizunvbmnhdefycmf lmphdme arrow_down perators completableonsubscribeconcatiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvq tcgxldgfibgvpbln ynnjcmlizunvbmnhdel zxjhymxllmphdme arrow_down java rx internal util unsafe mpsclinkedqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl vuc fmzs nchnjtglua vkuxvldwuuamf yq rx internal util atomic mpsclinkedatomicqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl f b pyy nchnjtglua vkqxrvbwljuxvldwuuamf yq java rx internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme n java rx subscriptions compositesubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec zdwjzy jpchrpb zl nvbxbvc l zvn ynnjcmlwdglvbi qyxzh n java rx subjects subjectsubscriptionmanagerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec zdwjqzwn cy tdwjqzwn u vic nyaxb aw utwfuywdlci qyxzh in java rx internal operators operatorgroupbyjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jhcm cej lmphdme main java rx internal operators operatormergejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jnzxjnzs qyxzh src main java rx completablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec db wbgv ywjszs qyxzh arrow_up and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5705,1,0,0,0,1,1,1,1,moved tests to fromcallabletest from fromcompletabletest fixes there was a test class named observablefromcompletabletest which actually was targeting observablefromcallabletest this was most likely just a naming issue copied all tests from observablefromcompletabletest to observablefromcallabletest and deleted the former class codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ee bc be c f d b srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &tokenwtcc htjm &width &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme vex internal subscribers queuedrainsubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvuxvldwvecmfpbln ynnjcmlizxiuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh reactivex internal queue spsclinkedarrayqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy xpbmtlzefycmf uxvldwuuamf yq operators flowable flowablewithlatestfrommanyjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlv l aexhdgvzdezyb nyw lmphdme x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh ain java io reactivex subjects unicastsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvvw py fzdfn ymply quamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ee bc b c c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5718,1,0,0,0,0,0,1,0,add a sentence to documentation of take operator codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit da afe b b b a cfda a srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ain java io reactivex subjects unicastsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvvw py fzdfn ymply quamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update da fe https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5719,1,0,0,0,0,0,1,0,add a sentence to documentation of take operator codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b c ee f fff e c b srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pynnlcnzhymxllmphdme arrow_down rx internal util atomic mpsclinkedatomicqueuejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc dglsl f b pyy nchnjtglua vkqxrvbwljuxvldwuuamf yq ternal operators operatoronbackpressurelatestjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jpbkjhy twcmvzc vyzuxhdgvzdc qyxzh x internal operators deferredscalarsubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvrgvmzxjyzwrty fsyxjtdwjzy jpymvylmphdme in java rx internal operators operatorgroupbyjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jhcm cej lmphdme n java rx internal operators cachedobservablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvq fjagvkt jzzxj ywjszs qyxzh arrow_down main java rx internal operators operatormergejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jnzxjnzs qyxzh arrow_down ternal operators operatoronbackpressurebufferjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jpbkjhy twcmvzc vyzuj zmzlci qyxzh arrow_down n java rx subscriptions compositesubscriptionjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec zdwjzy jpchrpb zl nvbxbvc l zvn ynnjcmlwdglvbi qyxzh arrow_down n java rx subjects subjectsubscriptionmanagerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys yec zdwjqzwn cy tdwjqzwn u vic nyaxb aw utwfuywdlci qyxzh arrow_up and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b c bb ca https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5729,1,0,0,0,0,1,1,1,implement as this implement as support as discussed in i took the opportunity to try to standardize the docs and tests for it which vary a little bit across implementations of to related let me know if you want to add more tests some usages of to were mixed in other tests and wasnt sure if they were specifically targeting testing it im not sure i understand the remaining ci errors as the parameters have the nonnull annotation some style checks failed https travis ciorg reactivex rxjava builds l please add as to parallelflowable please add a unit test that has a converter class which combines all interfaces and is applied to the types of sources could you explain what the style checks fix is i didnt quite understand the message in the log parallelflowable adb started on more converter tests in convertertest in c f ee composite converter test is in there only thing im stuck on is the genericssignaturetest tests borrowed from transformerstest currently they dont compile but im not sure what the goal is or if it even makes sense to match the checks transformerstest does let me know what you think you have to extend the paramvalidationcheckertest with instances of your new converter types put something like the following into l javadefaultvaluesput observableconverterclass new observableconverter { override public object apply observable o { return o }} as for these https travis ciorg reactivex rxjava builds l you are using the wrong generic types observableconverter b is applied to observable in the test where integer is unrelated to a i overlooked the test using a ill check code locally the wildcard definition in those compile errors and the wrong parameter confuses the compiler i suggest going raw types with these converters and using suppresswarnings {unchecked rawtypes} on the problematic tests posted a patch https githubcom hzsweers rxjava pull for your pr codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c f c f ec b fbfe b c f dsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up src main java io reactivex singlejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_up src main java io reactivex maybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_up src main java io reactivex completablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_up n java io reactivex parallel parallelflowablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcgfyywxszwwvugfyywxszwxgbg ywjszs qyxzh arrow_up in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ex internal subscribers innerqueuedsubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvsw uzxjrdwv zwrtdwjzy jpymvylmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e d f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments out of curiosity would this be a candidate for beta in since its so close or would it stay experimental for a time period after is a bit in the future as id like to have finished before it an experimental component can be promoted to stable regardless cool thanks
5740,1,0,0,0,0,0,1,0,marbles for observable all frompublisher ziparray this pr adds a marble diagram to frompublisher and updates the marbles of all and ziparray inside observable the images can be seen in this comment https githubcom reactivex rxjava issues issuecomment of codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ed cd bb bf bcec c e aae d d e a srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu ic vydmvpbi qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq internal operators completable completableambjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme tors observable observablesequenceequalsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnlcxvlbmnlrxf ywxtaw nbguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ed cd bbb bf f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5743,1,0,0,0,1,1,1,1,check isdisposed before emitting in singlefromcallable previously singlefromcallable did not check if the subscriber wasunsubscribed before emitting onsuccess or onerror this fixes thatbehavior and adds tests to singlefromcallable completablefromcallableand maybefromcallablefixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e be c f e f fa dcd cc bdsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators single singlefromcallablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgcm tq fsbgfibguuamf yq arrow_up io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e be c da b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments could you please restore the code coverage of singlefromcallable the new logic introduced a bunch of code paths that need testing sounds good i added a few tests by copying the logic from observablefromcallable
5745,1,0,0,0,0,0,1,0,add update observable marbles this pr adds or updates mable diagrams of observable blockingfirst https rawgithubcom wiki reactivex rxjava images rx operators blockingfirstopng blockingfirst with default https rawgithubcom wiki reactivex rxjava images rx operators blockingfirstodefaultpng tofuture https rawgithubcom wiki reactivex rxjava images rx operators tofutureopng blockingsubscribe no arguments https rawgithubcom wiki reactivex rxjava images rx operators blockingsubscribeo png blockingsubscribe with argument https rawgithubcom wiki reactivex rxjava images rx operators blockingsubscribeo png blockingsubscribe with arguments https rawgithubcom wiki reactivex rxjava images rx operators blockingsubscribeo png blockingsubscribe with arguments https rawgithubcom wiki reactivex rxjava images rx operators blockingsubscribeopng collectinto https rawgithubcom wiki reactivex rxjava images rx operators collectintoopng dooncomplete https rawgithubcom wiki reactivex rxjava images rx operators dooncompleteopng doonerror https rawgithubcom wiki reactivex rxjava images rx operators doonerroropng doonlifecycle https rawgithubcom wiki reactivex rxjava images rx operators doonlifecycleopng doonnext https rawgithubcom wiki reactivex rxjava images rx operators doonnextopng doondispose https rawgithubcom wiki reactivex rxjava images rx operators doondisposepng related comment https githubcom reactivex rxjava issues issuecomment codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f be a deda dd cdf a f srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators completable completableconcatarrayjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq erators completable completableconcatiterablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh ex internal subscribers innerqueuedsubscriberjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvsw uzxjrdwv zwrtdwjzy jpymvylmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh vex internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsunvut uamf yq vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull srcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq and more https codecovio gh reactivex rxjava pull srcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f b eff https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments the different colored stars in doonlifecycle werent obvious to me but the rest seems good
5755,1,0,0,0,0,0,1,0,add marbles for observable this pr adds some missing marbles to observable concatmapcompletable https rawgithubcom wiki reactivex rxjava images rx operators concatmapcompletableopng concatmapdelayerror https rawgithubcom wiki reactivex rxjava images rx operators concatmapdelayerroropng concatmapeager https rawgithubcom wiki reactivex rxjava images rx operators concatmapeageropng concatmapeagerdelayerror https rawgithubcom wiki reactivex rxjava images rx operators concatmapeagerdelayerroropng concatmapiterable https rawgithubcom wiki reactivex rxjava images rx operators concatmapiterableopng doafternext https rawgithubcom wiki reactivex rxjava images rx operators doafternextopng dofinally https rawgithubcom wiki reactivex rxjava images rx operators dofinallyopng tracked in images in comment https githubcom reactivex rxjava issues issuecomment codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d a f ca c cd ad c f f adsrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down operators completable completableconcatarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq ex internal subscriptions subscriptionarbiterjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy tdwjzy jpchrpb bcmjpdgvylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d a ea c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5766,0,0,0,0,0,0,1,0,rename interface parameters signed off by shaishavgandhi codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ba a e aeee ab e e fec e srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh a io reactivex internal queue mpsclinkedqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvtxbzy xpbmtlzff zxvllmphdme internal operators completable completableambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme nal operators flowable flowableconcatmapeagerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f twfwrwfnzxiuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh ivex internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvssm pbi qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ba a e f ce https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments good work
5773,1,0,0,0,0,0,1,0,improve javadoc of retrywhen operators this pr improves the javadoc of the retrywhen operators in the base classes adds example to handling an asynchronous source with delay where an early oncomplete may cause unexpected terminations otherwiserelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f bb cbfa eeadfbd f ea f c srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq ex internal subscribers innerqueuedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvsw uzxjrdwv zwrtdwjzy jpymvylmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments spotted a few other mistakes in there just noticed in the takewhile e countergetandincrement statements in the examples that should probably be indeed updated the pr and fixed the blockingx calls in there as well
5781,1,0,0,0,0,0,1,0,describe merge error handling this pr adds some clarifications about how merge handles multiple errors in a new error handling section in its javadoc entrythere exist several dozen variants of merge in the various base classes that could also include such javadoc addition once the wording has been reviewed the other places will receive a separate prrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e f e e ecb f e e d a desrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &srcpr&tokenwtcc htjm &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme erators completable completableconcatiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ain java io reactivex subjects publishsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvuhvibglzafn ymply quamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e f c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments no this acts as a testbed for the wording i hope artem zinnatulin can have a look at it too before i copy the text all over the place
5781,1,0,0,0,0,0,1,0,describe merge error handling this pr adds some clarifications about how merge handles multiple errors in a new error handling section in its javadoc entrythere exist several dozen variants of merge in the various base classes that could also include such javadoc addition once the wording has been reviewed the other places will receive a separate prrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e f e e ecb f e e d a desrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &srcpr&tokenwtcc htjm &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme erators completable completableconcatiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f sxrlcmfibguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ain java io reactivex subjects publishsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvuhvibglzafn ymply quamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e f c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments no this acts as a testbed for the wording i hope artem zinnatulin can have a look at it too before i copy the text all over the place
5783,1,0,0,0,0,0,1,0,fix javadoc wording of onterminatedetach a missing nulls word from flowableonterminatedetach and observableonterminatedetach javadoc the other types have this word alreadyrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e f e e ecb f e e d a desrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq ex internal subscribers innerqueuedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvsw uzxjrdwv zwrtdwjzy jpymvylmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e f ac d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5792,1,0,0,0,0,1,1,0,fix flatmap inner fused poll crash not cancelling the upstream this pr fixes the lack of upstream cancel call when an inner fused sources queuepoll crashes in a non delayed error modeunit tests were added to verify observableflatmap flowableflatmapiterable and observableflatmapiterable as well fixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ccd c f ed dda c ced srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators flowable flowableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcc qyxzh arrow_down in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq main java io reactivex subjects maybesubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvtwf ymvtdwjqzwn lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ccd b b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5805,1,0,0,0,0,0,1,0,final planned observable marble additions fixes this is the final part of the observable marble fixes and additions as planned in tolist callable https rawgithubcom wiki reactivex rxjava images rx operators tolistocpng toflowable buffer https rawgithubcom wiki reactivex rxjava images rx operators toflowableobufferpng toflowable drop https rawgithubcom wiki reactivex rxjava images rx operators toflowableodroppng toflowable latest https rawgithubcom wiki reactivex rxjava images rx operators toflowableolatestpng toflowable error https rawgithubcom wiki reactivex rxjava images rx operators toflowableoerrorpng toflowable missing https rawgithubcom wiki reactivex rxjava images rx operators toflowableomissingpng unsubscribeon https rawgithubcom wiki reactivex rxjava images rx operators unsubscribeonopng fixed position and spacing of the marbles in the zipwith overloads no image change images in https githubcom reactivex rxjava issues issuecomment codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab f bd b d ae f d ba f fac srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down tivex internal schedulers instantperiodictaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jbnn yw ugvyaw kawnuyxnrlmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh activex internal operators single singlecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvdywnozs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab a c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5811,1,0,0,0,0,1,1,1,fix buffer open close not disposing indicators properly the pr fixes the resource management in the buffer operator that uses other reactive sources to indicate when a buffer starts and ends both flowable and observable implementations had to be fixedfixes akarnokd let me know if i understand the spirit of this pr on flowablebufferboundary avoids keeping reference to tracking buffers in subscribers other than the main cancel source on open subscriber completion if it completes and the last buffers close publisher has completed subscribers will have size and we can safely cancel upstream as no new buffer will open at this point in main distinguish a open subscriber error from a close subscriber error due to the later needs associated buffer cleanup is that correct exhaustive avoids keeping reference to tracking buffers in subscribers other than the mainyes cancel source on open subscriber completion if it completes and the last buffers close publisher has completed subscribers will have size and we can safely cancel upstream as no new buffer will open at this pointyes in main distinguish a open subscriber error from a close subscriber error due to the later needs associated buffer cleanupno if the openerror or closeerror is fired both should cancel the main source cancel the subscribers other than themselves clean the buffer and then report the error they could be converted into a common method of boundserror disposable d throwable ex codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit aa dc cae aae abdbba dae srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators flowable flowablebufferboundaryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqnvmzmvyqm bmrhcnkuamf yq arrow_down operators observable observablebufferboundaryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuj zmzlckjvdw kyxj lmphdme arrow_down operators completable completableconcatarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ain java io reactivex subjects publishsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvuhvibglzafn ymply quamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq ex internal subscribers innerqueuedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvsw uzxjrdwv zwrtdwjzy jpymvylmphdme ternal operators flowable flowablesampletimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu ftcgxlvgltzwquamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update aa ce https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5820,1,0,0,1,0,1,1,0,plugin lookup workaround for systemproperties access restrictions the pr adds a try catch around the system property lookup inside the rxjavaplugins in case a security manager prevents reading arbitrary property entriesthis mainly affects the rxjavaplugin index class lookup which were introduced due to the character key limit on androidhowever when running in a container such as tomcat a security manager may prevent reading these type of prefixed entries where index cant be known upfront crashing the initialization update the systemgetproperties can also fail therefore retrieving the properties has been factored out into a separate method that returns an empty propertiesfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fb f e da c e esrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java rx plugins rxjavapluginsjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec wbhvnaw zl j smf yvbsdwdpbnmuamf yq arrow_up ain java rx internal schedulers schedulerwhenjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlcldozw uamf yq src main java rx observers serializedobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec vynnlcnzlcnmvu vyawfsaxplze ic vydmvylmphdme rx internal schedulers cachedthreadschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc zy hlzhvszxjzl nhy hlzfrocmvhzfnjagvkdwxlci qyxzh c main java rx observables blockingobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec vynnlcnzhymxlcy cbg ja luz ic vydmfibguuamf yq ternal operators operatoronbackpressurebufferjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jpbkjhy twcmvzc vyzuj zmzlci qyxzh n java rx internal operators cachedobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvq fjagvkt jzzxj ywjszs qyxzh rx internal operators operatorwindowwithtimejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jxaw kb dxaxrovgltzs qyxzh arrow_down ain java rx internal operators operatorreplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec pbnrlcm hbc vcgvyyxrvcnmvt blcmf b jszxbsyxkuamf yq arrow_down src main java rx subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys yec zdwjqzwn cy szxbsyxltdwjqzwn lmphdme arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fb a c c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5828,1,0,0,1,0,0,1,0,document replay n emission retention caveat adds javadocs indicating a caveat regarding size bounded replay operators subjects and processors see for details codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b e f dcacfedefec e e ed asrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh java io reactivex processors replayprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy szxbsyxlqcm jzxnzb iuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh internal disposables arraycompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvqxjyyxldb wb npdgveaxnwb nhymxllmphdme vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b e dfb f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5833,1,0,0,0,0,1,1,1,fix observableswitchmap main onerror not disposing the current inner source the observableswitchmap had bad logic in its main onerror handler which didnt dispose the current inner observable the flowable version didnt have this logic error both variants received an unit test to verify the correct behaviorfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fbc fb ec f cc a dc cf d esrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh arrow_down operators completable completableconcatarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fbc fcfa ae https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5845,1,0,0,0,0,0,1,0,add efficient concatwith singlemaybecompletable overloads this pr adds specialized overloads to the concatwith operator in flowable and observable if accepted the marbles will be updated in a separate prrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f c fcc df d ffd c c srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rators flowable flowableconcatwithcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f v l aenvbxbszxrhymxllmphdme src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up rs observable observableconcatwithcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhdfdpdghdb wbgv ywjszs qyxzh perators observable observableconcatwithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhdfdpdghnyxlizs qyxzh erators observable observableconcatwithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhdfdpdghtaw nbguuamf yq al operators flowable flowableconcatwithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f v l ae hewjllmphdme l operators flowable flowableconcatwithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f v l afnpbmdszs qyxzh src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5847,1,0,0,1,0,1,1,0,add efficient mergewith singlemaybecompletable overloads this pr adds specialized overloads to the mergewith operator in flowable and observable if accepted the marbles will be updated in a separate prrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c e b fc ebc dd a c srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators flowable flowablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxltwvyz vxaxrotwf ymuuamf yq src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up al operators flowable flowablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxltwvyz vxaxrou luz xllmphdme perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh ors observable observablemergewithcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l aenvbxbszxrhymxllmphdme erators flowable flowablemergewithcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxltwvyz vxaxroq tcgxldgfibguuamf yq operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme operators completable completableconcatarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlq uy f qxjyyxkuamf yq operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c e bd c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments conflict resolved there was an expected merge conflict with the concatwith pr as they both touched the same test file
5860,1,0,0,0,0,1,1,1,flowablegroupby add overload with evicting map factory as per discussion in this pr adds an overload for flowablegroupby that specifies an evictingmapfactory an example of usage taken from the new javadoc javafunction map evictingmapfactory notify cachebuilder newbuilder maximumsize removallistener entry { try { emit the value not the key notifyaccept entrygetvalue } catch exception e { throw new runtimeexception e } } build asmap emit items but ensure that the internal map never has more than items in it flowable range note that number of keys is groupby x x x x true evictingmapfactory flatmap g g foreach systemout println note that i based this operator on the x version which i think may have a bug that goes as far as the signature of that method the eviction consumer should not be given a key but rather the value from the map ill pursue the x issue after dealing with this codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f c fb f c b f c ebcc srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh arrow_up src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh a io reactivex internal queue mpsclinkedqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvtxbzy xpbmtlzff zxvllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f efdb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks akarnokd ive addressed your comments and also added beta and since ive updated the guava dependency to jre updated the cachebuilder link to point to guava javadoc set the since version to added that missing space to javadoc x x and squashed commits thanks for the review vanniktech
5863,1,0,0,0,0,0,1,0,expand the documentation of the flowablelift operator this pr expands the documentation of the flowablelift operator used for inserting custom operators into flows in a functional and fluent fashionthe other reactive base classes feature similar lift operators for which the text can be adapted and contributed in a separate pr once the content of this pr is stabilized by review feedbackrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f cdff fcf caefb c c f d d fb srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq ivex internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjltwvyz vbcnjhes qyxzh ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f b f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thank you i found the documentation much improved and was able to use it to build a working example operator i may post it as a gist if anyone is interested
5870,1,0,0,0,0,1,1,0,add flowableswitchmapcompletable{delayerror} operator this pr adds the flowableswitchmapcompletable and flowableswitchmapcompletabledelayerror operators as requested by the associated new marbles are switchmapcompletable https rawgithubcom wiki reactivex rxjava images rx operators switchmapcompletablefpng switchmapcompletabledelayerror https rawgithubcom wiki reactivex rxjava images rx operators switchmapcompletabledelayerrorfpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a f f f f f dcbe b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &srcpr&height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments rebased and refactored due to concatmapcompletable introducing the internalmixed package
5871,1,0,0,0,0,1,1,0,add flowableconcatmapcompletable{delayerror} operator this pr adds the flowableconcatmapcompletable and flowableconcatmapcompletabledelayerror operators as requested by the marbles will be updated in a separate pr codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b d e da f e ea d e dsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh internal operators completable completableambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ece c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5872,1,0,0,0,0,0,1,0,add flowableconcatmap{maybesingle}{delayerror} operators this pr adds operators that allow concatenating a mapped sequence of maybe s or single s with or without delaying their errors concatmapmaybe overload with prefetch concatmapmaybedelayerror overloads with error mode and prefetch concatmapsingle overload with prefetch concatmapsingledelayerror overloads with error mode and prefetch they are in the same pr as the single variants implementation is practically the maybe implementation minus the oncomplete casetheir marbles will be updated in a separate proriginally requested in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a f f f f f dcbe b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up ternal operators mixed flowableconcatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwtwf ymuuamf yq ernal operators mixed flowableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwu luz xllmphdme io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh internal operators flowable flowableintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxj ywwuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme a io reactivex internal queue mpsclinkedqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvtxbzy xpbmtlzff zxvllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a e a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5873,1,0,0,0,0,1,1,0,add flowableswitchmap{maybesingle}{delayerror} operators this pr adds flowable operators that allow switching between a mapped sequence of maybe s or single s with or without delaying their errors switchmapmaybe switchmapmaybedelayerror switchmapsingle switchmapsingledelayerror they are in the same pr as the single variants implementation is practically the maybe implementation minus the oncomplete casetheir marbles will be updated in a separate proriginally requested in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fb cd dfbc e e a cafac bsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &srcpr&tokenwtcc htjm &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up ernal operators mixed flowableswitchmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwu luz xllmphdme ternal operators mixed flowableswitchmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwtwf ymuuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh ex internal subscribers innerqueuedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvsw uzxjrdwv zwrtdwjzy jpymvylmphdme rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fb cdbd c b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments observableconcatmapcompletabledelayerror observableconcatmapmaybe observableconcatmapmaybedelayerror observableconcatmapsingle observableconcatmapsingledelayerror observableswitchmapcompletable observableswitchmapcompletabledelayerror observableswitchmapmaybe observableswitchmapmaybedelayerror observableswitchmapsingle dedicated implementation observableswitchmapsingledelayerror dedicated implementationthese can be derived easily from their flowable counterparts
5875,1,0,0,0,0,1,1,0,add observable switchmapx and concatmapx operators this pr ports the various switchmapx and concatmapx operators from and to observable concatmapcompletable replaced by the common implementation concatmapcompletabledelayerror concatmapmaybe concatmapmaybedelayerror concatmapsingle concatmapsingledelayerror switchmapcompletable switchmapcompletabledelayerror switchmapmaybe switchmapmaybedelayerror switchmapsingle dedicated implementation switchmapsingledelayerror dedicated implementation this pr concludes the requested set of operators in marbles will be updated adjusted in a separate pr codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d ed d d b ed f aec a d a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&width &tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators observable observableinternalhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuludgvybmfssgvscgvylmphdme rnal operators mixed observableconcatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbnyxlizs qyxzh nal operators mixed observableswitchmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbtaw nbguuamf yq perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh ernal operators mixed flowableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwu luz xllmphdme arrow_down nal operators mixed observableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbtaw nbguuamf yq perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up ernal operators mixed flowableswitchmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwu luz xllmphdme arrow_down rnal operators mixed observableswitchmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbnyxlizs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d ed e be https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments reopening due to the travis github service problems the build succeeded but the pr doesnt seem to pick up that state
5886,1,0,0,0,1,1,1,1,upgrade the algorithm of observabletimeout timeselector operators this pr improves the algorithms of the observabletimeout time and observabletimeout selector operators to match their flowable counterparts implemented in in addition coverage of the flowable counterparts have been improved by synchronizing the unit testsnote that they were the last users of observerfullarbiter and fullarbiterobserver which are now removedcloses codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ea c d abd bab a dcdb a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators observable observabletimeoutjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvrpbwvvdxquamf yq arrow_down l operators observable observabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvrpbwvvdxruaw lzc qyxzh arrow_down io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq ernal operators observable observableintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuludgvydmfslmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ea c e dcd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5887,1,0,0,0,0,1,1,1,fix window observablecallable upstream handling this pr fixes the upstream handling in observablewindow observablesource and observablewindow callable operators to make sure if both the main output and the inner windows have been disposed the upstream is also disposedfixes remark there are a couple of w null checks showing up as partially covered in theory with the right interleaving w can become null but unfortunately the usual testhelperrace testing is unlikely to trigger that case there would be a higher chance with threads one disposing one completing the main and one completing the inner window but the current ci is effectively cores threads that tend to not produce a thorough interleaving codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a d efdfe b b af ba d fe asrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ s observable observablewindowboundarysupplierjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvd jvdw kyxj u vwcgxpzxiuamf yq arrow_down operators observable observablewindowboundaryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvd jvdw kyxj lmphdme arrow_down ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a d e e d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments the issue will get closed once this pr is merged but i dont see the flowable implementation here the issue refers to window observable thus the observable variants ill post a separate pr once i checked the flowable variants yes flowablewindow publisher is also incorrect
5888,1,0,0,0,0,1,1,1,fix flowablewindow publishercallable upstream handling this pr fixes the upstream handling in flowablewindow publisher and flowablewindow callable operators to make sure if both the main output and the inner windows have been cancelled the upstream is also cancelledrelated in addition the jacoco code coverage has been updated to mainly due to the automatic filtering of difficult to impossible code paths https githubcom jacoco jacoco releases tag v codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e f aa ebc d c cc cbf srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ators flowable flowablewindowboundarysupplierjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlv luzg qm bmrhcnltdxbwbgllci qyxzh arrow_down nal operators flowable flowablewindowboundaryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlv luzg qm bmrhcnkuamf yq arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b de d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5895,1,0,0,0,0,0,1,0,fix buffer documentation to correctly describe onerror behaviour fixes i just copied the sentence from the fixed docs in x and updated to use observablesource publisher naming codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit cb a c ebb b e f e a edsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq in java io reactivex subjects behaviorsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvqmvoyxzpb jtdwjqzwn lmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu ic vydmvpbi qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update cb a e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5904,1,0,0,0,0,1,1,1,fix flowablesingleorerror toflowable not signalling nosuchelementexception when a singleorerror is followed by toflowable the assembly process switches the flowable single operator into a flowable flowable operator implementing the singleorerror behavior saving the back and forth type conversion the backing implementation was shared with singleelement and as such did not properly handle the orerror case for an empty source the pr fixes the lack of nosuchelementexception in this casefixes the observable variant doesnt have such optimization but the test has been converted to make sure observable is verified for this aspect in case the optimization is implemented with it in the future codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e d a aa b ef dddf c da cc srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ernal operators flowable flowablesinglesinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu luz xlu luz xllmphdme arrow_down ex internal operators flowable flowablesinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu luz xllmphdme arrow_down ternal operators flowable flowablesinglemaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu luz xltwf ymuuamf yq arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh internal operators observable observablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunhy hllmphdme ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlrmxvd fibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e d a f d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5906,1,0,0,0,0,0,1,0,add public constructor for testscheduler that takes the time adds a time constructor to testscheduler should i make it experimental or will it just be stablefixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a be f a dca srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ in java io reactivex schedulers testschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy uzxn u nozwr bgvylmphdme arrow_down ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5923,1,0,0,0,0,0,1,0,fix javadoc warnings of buffer publishercallable text is not allowed between and its child tagsfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a bf fc a f c c ca be ca d srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq io reactivex subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvu vyawfsaxplzfn ynnjcmlizxiuamf yq operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a bf a d e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5924,1,0,0,0,0,0,1,0,update singleflatmappublisher marble renamed the operator in the box for flatmappublisher https rawgithubcom wiki reactivex rxjava images rx operators singleflatmappublisherpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a c e b b f b fd b srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a c d bb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5928,1,0,0,0,0,1,1,0,fix concatmapsingle & concatmapmaybe dispose cleanup crash this pr fixes the accidental logical mistake in the cancel dispose logic of the new concatmapsingle and concatmapmaybe operators of both flowable and observable where the internal queue cleanup should happen in a serialized fashion only which is the state when the work in progress counter changes from to ensured by a checkfixes this is severe enough to release as a hotfix version asap although the mistakes are in the newly introduced operators ive done a quick search for this pattern and doesnt happen in older code luckily also this is on the dispose path and doesnt really the performance in the normal operation mode ie when data is allowed to flow through till the end without cancellation codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c f c ceeb d f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators mixed flowableconcatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwtwf ymuuamf yq arrow_down rnal operators mixed observableconcatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbnyxlizs qyxzh arrow_down nal operators mixed observableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbtaw nbguuamf yq arrow_down ernal operators mixed flowableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwu luz xllmphdme arrow_down io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c ffc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5947,1,0,0,0,0,1,1,1,fix groupby cancellation with evicting map factory fixes when the outer stream is cancelled there may be evicted groups present in the queue to be completedive added code to complete the evicted groups in the cancel method as suggested by akarnokd to protect against a race condition where the evictionaction is called just after the evicted groups are completed in cancel ive added a cancelled check to evictionaction however i am concerned about a race that ill place in the comments on the code below codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ceedf c e c f da b c srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlrmxvd fibguuamf yq vex internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsunvut uamf yq main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh al operators observable observablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvd rpbwvklmphdme ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq arrow_down va io reactivex processors multicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy ndwx awnhc rqcm jzxnzb iuamf yq arrow_up and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ceedfbd a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments fixed imports im thinking now that we need to complete evicted groups in the onerror and oncomplete methods as well and deal with late arrivals to evictedgroups ive added a bit more code to complete evicted groups in the onerror and oncomplete methods as well ill keep pondering it a bit excuse the delay busy times ill return to this soonish can close the pr and reopen later if desired having a look now ive redone this pr the test failure submitted in arose because groupcount needs to be decremented when groups are evicted from the map im doing it when we complete evicted groups which happens before checking groupcount is for the purpose of cancelling the source we also needed to complete evictions when cancel is called as akarnokd pointed outive also included a perf improvement without stats where a volatile boolean done served both as post terminal event protection and as a memory barrier in the drain method splitting those two functions into boolean done and volatile boolean finished means particularly that every source onnext emission will do one less volatile read for post terminal event protection and oncomplete and onerror benefit too theres a slight allocation cost i suppose
5948,1,0,0,0,0,0,1,0,fix observable javadoc replace dooncancel by doondispose in observable javadocthank you for contributing to rxjava before pressing the create pull request button please consider the following points x please give a description about what and why you are contributing even if its trivialreplace dooncancel by doondispose in observable javadoc x please include the issue list number s or other pr numbers in the description if you are contributing in response to those x please include a reasonable set of unit tests if you contribute new code or change an existing one if you contribute an operator if applicable please make sure you have tests for working with an empty just range of values as well as an error source with and or without backpressure and see if unsubscription cancellation propagates correctlyjavadoc only codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e dd ee f af c daa d c bsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&width &tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e dc e b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5972,1,0,0,0,0,1,1,0,fix observableconcatmapsingle dropping upstream items the internal queue of observableconcatmapsingle was incorrectly the bounded one from its flowable counterpart causing it to drop upstream items if the current single was delayed the right queue for observable s is the spsclinkedarrayqueue added unit tests to both concatmapsingle and concatmapmaybe to verify the correct behaviorfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ae b bc ec c cbdf b besrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators mixed observableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbtaw nbguuamf yq arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ae fd d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
5979,1,0,0,1,0,1,1,1,add throttlelatest operator this pr adds the throttlelatest operator to observable and flowable also known as conflate it is a combination of throttlefirst and sample whereby frequent items are sampled but the first item outside the sampling window will be emitted immediately throttlelatest https rawgithubcom wiki reactivex rxjava images rx operators throttlelatestpng throttlelatest https rawgithubcom wiki reactivex rxjava images rx operators throttlelatestsepng resolves replaces codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dc f abdc c c e d csrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up operators observable observablethrottlelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvrocm dgxltgf zxn lmphdme src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up nal operators flowable flowablethrottlelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvghyb r bgvmyxrlc quamf yq reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dc f f d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6014,1,0,0,0,0,1,1,0,fix & prevent null checks on primitives this pr removes the accidental null checks on primitives in two observable methods and adds a trap method to objecthelper to both highlight and fail the tests in case the null checks are still attempted the method is marked as deprecated so it will also show up in eclipses problems windowreplaces resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f ce a a bfae d b ac eb srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &srcpr&height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh arrow_up io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f ce fe https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6014,1,0,0,0,0,1,1,0,fix & prevent null checks on primitives this pr removes the accidental null checks on primitives in two observable methods and adds a trap method to objecthelper to both highlight and fail the tests in case the null checks are still attempted the method is marked as deprecated so it will also show up in eclipses problems windowreplaces resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f ce a a bfae d b ac eb srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &srcpr&height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down io reactivex internal functions objecthelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl iamvjdehlbhblci qyxzh arrow_up io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy ezwzlcnjlzfnjywxhcln ynnjcmlwdglvbi qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f ce fe https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6019,1,0,0,0,0,1,1,1,fix singletakeuntil maybetakeuntil dispose behavior fix the dispose behavior of the singletakeuntil and maybetakeuntil operatorstests were also added to the other takeuntil variants for completable it is delegated to amb fixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b f ef b cb d d fb ebf ed srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b f ef cd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6021,1,0,0,0,0,1,1,0,singleflatmappublisher full implementation see discussion in resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d bfbd e e de e aaea b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d bfbd b e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments ive made those changes
6021,1,0,0,0,0,1,1,0,singleflatmappublisher full implementation see discussion in resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d bfbd e e de e aaea b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d bfbd b e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments ive made those changes
6026,1,0,1,0,0,1,1,0,fix flowableblockingsubscribe is unbounded and can lead to oome create and bound new blockingsubscribe overloads to buffersize create new overloads with buffersize create a boundedconsumer create a boundedsubsciber close codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f c c cf c c d ac fd srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ava io reactivex internal functions functionsjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvznvuy rpb zl z bmn aw ucy qyxzh arrow_up src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ctivex internal subscribers boundedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvqm bmrlzfn ynnjcmlizxiuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f c bd b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments also it would be great if you copied the unit tests that crash the callbacks so that the coverage on the new class gets very high https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyawjlcnmvqm bmrlzfn ynnjcmlizxiuamf yq i created a boundedsubscribertestjava to trigger consumer and action exceptions but the code coverage remains unchanged did i miss a test
6036,1,0,0,0,0,1,1,0,fix disposed lambdaobserver onerror to route to global error handler fix the behaviour of lambdaobserver when disposed to route to the global error handlerfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f c c cf c c d ac fd srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ o reactivex internal observers lambdaobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl xhbwjkyu ic vydmvylmphdme arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f c cd e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6049,1,0,0,0,0,0,1,0,make it explicit that throttlewithtimout is an alias of debounce the documentation implies that these two methods are somewhat different fixing that confusion as discussed in made the descriptions of these methods the same mentioned that it is an alias in the first paragraphs of throttlewithtimeout javadoc comments removed the links to third party websites build warnings please avoid dangling tags https travis ciorg reactivex rxjava builds l codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c d d eb bc a ee b c srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c dc b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6052,1,0,0,0,0,0,1,0,made subscribeactual protected proposalchanged subscribeactual from public to protected as described in how i testedran tests locally please let me know if i missed part of the contributing guidelines 👼 fixes cc vanniktech artem zinnatullin davidmoten strictly speaking this is technically a breaking change on something that shouldnt be in use at all by external developers im fine with this change for codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b d c d d e af c f a srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ain java io reactivex subjects publishsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvuhvibglzafn ymply quamf yq arrow_down java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme arrow_down tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b dc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6053,1,0,0,0,0,0,1,0,add maybe marble diagrams a resolved the following diagrams of amb missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeambpng ambarray missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeambarraypng concat iterable missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatipng concat publisher missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatppng concat publisher int missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatpnpng concatarray missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatarraypng concatarraydelayerror indicate error delayed marble per source image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatarraydelayerrorpng concatarrayeager missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatarrayeagerpng concatdelayerror iterable missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatdelayerroripng concatdelayerror publisher missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatdelayerrorppng concateager iterable missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateageripng concateager publisher missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerppng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit cc bc de a a b db cfdb c f fsrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update cc bc fa d c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6060,1,0,0,0,0,1,1,0,fix concatmap{singlemaybe} null emission on dispose race this pr fixes a bug in all specialized concatmap implementation that allows null to be emitted when the success signal of the inner source races with the dispose signal of the sequencelikely fixes a very similar thing happened in just after a release but this bug was there between and codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c aaefa f bd d d bf fa srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators mixed flowableconcatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwtwf ymuuamf yq arrow_down ernal operators mixed flowableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwu luz xllmphdme arrow_down nal operators mixed observableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbtaw nbguuamf yq arrow_down rnal operators mixed observableconcatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbnyxlizs qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c aa e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6074,1,0,0,0,0,0,1,0,add marble diagram to the singlenever method first of all im extremely grateful to open my first pr for rxjava i hope that ill be able to tick more of the marbles from but for now this should tick off the never operatorplease let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a f f acc d de b df e srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ain java io reactivex subjects unicastsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvvw py fzdfn ymply quamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a cb e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments https rawgithubcom wiki reactivex rxjava images rx operators singleneverpng thank you pr is updated
6075,1,0,0,0,0,0,1,0,add marble diagram to the singlefilter method hopefully this should tick off the filter operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i had a doubt and wanted to double check operator filter returns maybe which essentially will call onsuccess or oncomplete by running junit tests i could observe that this is a behavior but if i use testobserver then both assertvalue and assertcomplete are invoked when there are elements that satisfy filter condition codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b b d da e ff a srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b b fa a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments https rawgithubcom wiki reactivex rxjava images rx operators singlefilterpng testobserver implements multiple consumer types and an onsuccess is translated into onnext oncomplete for an easier verification pr is updated thanks for explanation 👍
6076,1,0,0,0,0,0,1,0,add marble diagrams to the singledelay method here are marbles for delay operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c a ee d acce bdb a e ccf ccsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c a af https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments pr is updated with representation of error events ive updated colors please take a look when you have time thanks https rawgithubcom wiki reactivex rxjava images rx operators singledelaypnghttps rawgithubcom wiki reactivex rxjava images rx operators singledelayepnghttps rawgithubcom wiki reactivex rxjava images rx operators singledelayspnghttps rawgithubcom wiki reactivex rxjava images rx operators singledelaysepng thanks updated
6077,1,0,0,0,0,0,1,0,add marble diagram for singlehide operator this should complete hide operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i wasnt sure if i should represent somehow that disposable is hidden as well if so can you please tell me how to represent that on marble codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c a ee d acce bdb a e ccf ccsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c a c ae https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i dont get it why is ci failing ive run tests locally and i dont get that error which ci is reporting sometimes ci is a bit noisy and some of our millisecond level tests can fail ive restarted the build
6079,1,0,0,0,0,1,1,0,add completabletakeuntil completable operator this pr adds the missing dedicated takeuntil operator to completable image https rawgithubcom wiki reactivex rxjava images rx operators completabletakeuntilcpng previously the same effect could be achieved via the ambwith but there are two benefits of a dedicated operator easier to discover based on the takeuntil operator in other types more direct implementation unlike ambwith which is built upon an n ary amb operator with additional overheadthere was a feature request in some time ago but apparently the issue got closed off after singletakeuntil was implemented codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fd dc e d da f d afdf b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ s completable completabletakeuntilcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvgfrzvvudglsq tcgxldgfibguuamf yq src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_up l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fd a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments shouldnt there be a completabletakeuntil publisher operator too single has overloads for both publisher and completablesource sailorpsy pr welcome
6081,1,0,0,0,0,0,1,0,add marble diagrams for singlerepeat operators here are marbles for repeat repeat times and repeatwhen operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pri intentionally added two diagrams for repeatwhen as i would say its interesting case that people should be aware of edit here are marbles repeat operator repeat https rawgithubusercontentcom umfsimke rxjava images images repeatpng repeat count operator repeat with count https rawgithubusercontentcom umfsimke rxjava images images repeatcountpng repeatwhen operator repeatwhen https rawgithubusercontentcom umfsimke rxjava images images repeatwhenpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab e f b a f a ac srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab a b ec https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i see few errors timeline for flowables should end with error complete event and should not continue beyond them ill update that tomorrow it would be great if you linked the diagrams in the pr text could you also add shadows to the marbles and x updated images and pr comment https rawgithubcom wiki reactivex rxjava images rx operators singlerepeatpng https rawgithubcom wiki reactivex rxjava images rx operators singlerepeatnpng https rawgithubcom wiki reactivex rxjava images rx operators singlerepeatwhenpng thanks pr is now updated
6083,1,0,0,0,0,0,1,0,add completable marble diagrams a this pr adds the following marble diagrams to completable operators amb ambarray image https rawgithubcom wiki reactivex rxjava images rx operators completableambarraypng image https rawgithubcom wiki reactivex rxjava images rx operators completableambpng complete image https rawgithubcom wiki reactivex rxjava images rx operators completablecompletepng concatarray concat image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatarraypng image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatpng image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatppng image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatpnpng defer image https rawgithubcom wiki reactivex rxjava images rx operators completabledeferpng error image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorfpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab e f b a f a ac srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &srcpr&height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh vex internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsunvut uamf yq main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab ada ad https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6084,1,0,0,0,0,0,1,0,add marble diagram for singlerepeatuntil operator here is marble for repeatuntil operator in repeatuntil https rawgithubusercontentcom umfsimke rxjava images images repeatuntilpng please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr https rawgithubcom wiki reactivex rxjava images rx operators singlerepeatuntilpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dd fcb c e b ecb d aa f c srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme io reactivex subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvu vyawfsaxplzfn ynnjcmlizxiuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dd f d ea https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks updated
6085,1,0,0,0,0,1,1,0,more completable marbles add completablefrommaybe this pr adds marble diagrams to the following operators as well as adds the missing completablefrommaybe operator fromx of other types were already there uses existing maybeignoreelement s underlying implementation fromaction image https rawgithubcom wiki reactivex rxjava images rx operators completablefromactionpng fromcallable image https rawgithubcom wiki reactivex rxjava images rx operators completablefromcallablepng fromfuture image https rawgithubcom wiki reactivex rxjava images rx operators completablefromfuturepng frommaybe image https rawgithubcom wiki reactivex rxjava images rx operators completablefrommaybepng fromobservable image https rawgithubcom wiki reactivex rxjava images rx operators completablefromobservablepng frompublisher image https rawgithubcom wiki reactivex rxjava images rx operators completablefrompublisherpng fromsingle image https rawgithubcom wiki reactivex rxjava images rx operators completablefromsinglepng mergearray & mergearraydelayerror image https rawgithubcom wiki reactivex rxjava images rx operators completablemergearraypng image https rawgithubcom wiki reactivex rxjava images rx operators completablemergearraydelayerrorpng merge both iterable and publisher variants image https rawgithubcom wiki reactivex rxjava images rx operators completablemergepng image https rawgithubcom wiki reactivex rxjava images rx operators completablemergeppng image https rawgithubcom wiki reactivex rxjava images rx operators completablemergepnpng mergedelayerror both iterable and publisher variants image https rawgithubcom wiki reactivex rxjava images rx operators completablemergedelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators completablemergedelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators completablemergedelayerrorpnpng never image https rawgithubcom wiki reactivex rxjava images rx operators completableneverpng timer image https rawgithubcom wiki reactivex rxjava images rx operators completabletimerpng image https rawgithubcom wiki reactivex rxjava images rx operators completabletimerspng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dd fcb c e b ecb d aa f c srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_up ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq io reactivex subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvu vyawfsaxplzfn ynnjcmlizxiuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dd f f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6086,1,0,0,0,0,0,1,0,single error operators marbles here are marbles for for error callable errorcallable https rawgithubusercontentcom umfsimke rxjava images images errorcallablepng for error throwable only added error event to be red errorthrowable https rawgithubusercontentcom umfsimke rxjava images images errorpng for onerrorreturn onerrorreturn https rawgithubusercontentcom umfsimke rxjava images images onerrorreturnpng for onerrorreturnitem onerrorreturnitem https rawgithubusercontentcom umfsimke rxjava images images onerrorreturnitempng for onerrorresumenext singlesource onerrorresumenext https rawgithubusercontentcom umfsimke rxjava images images onerrorresumenextpng for onerrorresumenext function onerrorresumenextfn https rawgithubusercontentcom umfsimke rxjava images images onerrorresumenextwithfnpng for the onerrorx please indicate the normal case via different marble ie the usual split diagram btw you can save yourself a commit if you follow the following naming in the javadocs https rawgithubcom wiki reactivex rxjava images rx operators singlexxxxpng where xxxx is the name of the operator such as error and may contain argument indicator letters s is for scheduler s or single t is for timed n is for some numerical value f is for function or flowable c is for callable or completable p is for publisher m is for maybe or some other numerical valuethus the image naming of this pr will look like this https rawgithubcom wiki reactivex rxjava images rx operators singleerrorcpng https rawgithubcom wiki reactivex rxjava images rx operators singleerrorpng https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorreturnpng https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorreturnitempng https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorresumenextpng https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorresumenextfpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ebd c ba d b d ff be ae srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &srcpr&tokenwtcc htjm &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ebd c d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments images are now updated and pr as well with proper urls thanks for detailed explanation
6087,1,0,0,0,0,0,1,0,add marbles for singlefrom operators here are marbles for fromcallable frompublisher and fromobservable operators from marble for fromcallable fromcallable https rawgithubusercontentcom umfsimke rxjava images images fromcallablepng marble for frompublisher frompublisher https rawgithubusercontentcom umfsimke rxjava images images frompublisherpng marble for fromobservable fromobservable https rawgithubusercontentcom umfsimke rxjava images images fromobservablepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ebd c ba d b d ff be ae srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ebd cb e c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6091,1,0,0,0,0,0,1,0,add marbles for singleamb operators here are operators for amb and ambarray from marble for amb amb https rawgithubusercontentcom umfsimke rxjava images images ambpng marble for ambarray ambarray https rawgithubusercontentcom umfsimke rxjava images images ambarraypng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a e cea e f c bc e b b srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme io reactivex subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvu vyawfsaxplzfn ynnjcmlizxiuamf yq ivex internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjltwvyz vbcnjhes qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6095,1,0,0,0,0,0,1,0,add marbles for singletimer singledefer and singletoxxx operators here are marbles for defer timer delay unit timer delay unit scheduler toflowable tomaybe tofuture operators in marble for defer defer https rawgithubusercontentcom umfsimke rxjava images images deferpng marble for timer delay unit timer https rawgithubusercontentcom umfsimke rxjava images images timerpng marble for timer delay unit scheduler timerscheduler https rawgithubusercontentcom umfsimke rxjava images images timerschedulerpng marble for tofuture although for this one i believe we should add case when there is no event sent from single as there will be timeout exception thrown tofuture https rawgithubusercontentcom umfsimke rxjava images images tofuturepng marble for tomaybe tomaybe https rawgithubusercontentcom umfsimke rxjava images images tomaybepng marble for toflowable although here i didnt figured out what will happen if we request more than event from flowable toflowable https rawgithubusercontentcom umfsimke rxjava images images toflowablepng defer i would have drawn it with a curly brace listing the options below each other please add the subscribe indicators as welltofuture i indicate future with a sided shape and indicate get call and a return see completablefromfuture for an exampletoflowable simply indicate request n any positive n has the same effect with this operator however an error is always pushed through even without a request just remove the request from that side of the diagram codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit aeac ae c f d e de a f eb a srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ex internal subscriptions subscriptionarbiterjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy tdwjzy jpchrpb bcmjpdgvylmphdme va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq o reactivex internal schedulers schedulerwhenjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszxjxagvulmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update aeac d e b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments umfsimke are you still around yes i have in plan to wrap it up today sorry for delay i was on vacation akarnokd are these ok nowim a bit confused by what you exactly had in mind for defer and tofuture please update me if they are fine as i do need to update image sizes in javadoc tofuture https user imagesgithubusercontentcom fcf c e c a d e fa e cpng toflowable https user imagesgithubusercontentcom d c e f png defer https user imagesgithubusercontentcom efa e c e e cb d a png yes these are okay thanks updated javadoc
6097,1,0,0,0,0,0,1,0,add missing completable marbles a this pr add even more missing marbles to completable tracked by delay image https rawgithubcom wiki reactivex rxjava images rx operators completabledelaypng image https rawgithubcom wiki reactivex rxjava images rx operators completabledelayspng image https rawgithubcom wiki reactivex rxjava images rx operators completabledelaysbpng doonx image https rawgithubcom wiki reactivex rxjava images rx operators completabledooncompletepng image https rawgithubcom wiki reactivex rxjava images rx operators completabledoondisposepng image https rawgithubcom wiki reactivex rxjava images rx operators completabledooneventpng image https rawgithubcom wiki reactivex rxjava images rx operators completabledoonsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators completabledoonterminatepng image https rawgithubcom wiki reactivex rxjava images rx operators completabledoonerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators completabledoafterterminatepng dofinally image https rawgithubcom wiki reactivex rxjava images rx operators completabledofinallypng onerrorcomplete image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorcompletefpng onerrorresumenext image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorresumenextpng onterminatedetach image https rawgithubcom wiki reactivex rxjava images rx operators completableonterminatedetachpng mergewith image https rawgithubcom wiki reactivex rxjava images rx operators completablemergewithpng concatwith image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatwithpng observeon image https rawgithubcom wiki reactivex rxjava images rx operators completableobserveonpng hide image https rawgithubcom wiki reactivex rxjava images rx operators completablehidepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c b a c aed e ee e a bbed srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &width &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme l operators observable observabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvrpbwvvdxruaw lzc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c b c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6098,1,0,0,0,0,0,1,0,several more completable marbles b this pr adds a couple of more marble diagrams to completable subscribeon image https rawgithubcom wiki reactivex rxjava images rx operators completablesubscribeonpng unsubscribeon image https rawgithubcom wiki reactivex rxjava images rx operators completableunsubscribeonpng tosingle tosingledefault image https rawgithubcom wiki reactivex rxjava images rx operators completabletosinglepng image https rawgithubcom wiki reactivex rxjava images rx operators completabletosingledefaultpng toflowable image https rawgithubcom wiki reactivex rxjava images rx operators completabletoflowablepng tomaybe image https rawgithubcom wiki reactivex rxjava images rx operators completabletomaybepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b f d dac b f b f srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b f b c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6101,1,0,0,0,0,0,1,0,final set of missing completable marbles this pr contains the final set of missing completable marbles repeat image https rawgithubcom wiki reactivex rxjava images rx operators completablerepeatpng image https rawgithubcom wiki reactivex rxjava images rx operators completablerepeatnpng repeatuntil image https rawgithubcom wiki reactivex rxjava images rx operators completablerepeatuntilpng repeatwhen image https rawgithubcom wiki reactivex rxjava images rx operators completablerepeatwhenpng retry image https rawgithubcom wiki reactivex rxjava images rx operators completableretrypng image https rawgithubcom wiki reactivex rxjava images rx operators completableretrynpng image https rawgithubcom wiki reactivex rxjava images rx operators completableretryfpng image https rawgithubcom wiki reactivex rxjava images rx operators completableretryffpng image https rawgithubcom wiki reactivex rxjava images rx operators completableretrynfpng retrywhen image https rawgithubcom wiki reactivex rxjava images rx operators completableretrywhenpng startwith image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithopng image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithppng timeout image https rawgithubcom wiki reactivex rxjava images rx operators completabletimeoutpng image https rawgithubcom wiki reactivex rxjava images rx operators completabletimeoutspng image https rawgithubcom wiki reactivex rxjava images rx operators completabletimeoutcpng image https rawgithubcom wiki reactivex rxjava images rx operators completabletimeoutscpng create image https rawgithubcom wiki reactivex rxjava images rx operators completablecreatepng unsafecreate image https rawgithubcom wiki reactivex rxjava images rx operators completableunsafecreatepng lift image https rawgithubcom wiki reactivex rxjava images rx operators completableliftpng subscribe image https rawgithubcom wiki reactivex rxjava images rx operators completablesubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators completablesubscribefpng image https rawgithubcom wiki reactivex rxjava images rx operators completablesubscribeffpng subscribewith image https rawgithubcom wiki reactivex rxjava images rx operators completablesubscribewithpng test image https rawgithubcom wiki reactivex rxjava images rx operators completabletestpng image https rawgithubcom wiki reactivex rxjava images rx operators completabletestbpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ca cde b d d c f f b c srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ca c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6137,1,0,0,0,0,0,1,0,add marbles for singleconcat operator here are marbles for concat iterable concat publisher concat publisher prefetch concat observable concat source source concat source source source concat source source source source and concatarray operators that should close them at marble for concat iterable concatiterable https rawgithubusercontentcom umfsimke rxjava images images concatiterablepng marble for concat publisher concatpublisher https rawgithubusercontentcom umfsimke rxjava images images concatpublisherpng marble for concat publisher prefetch concatpublishern https rawgithubusercontentcom umfsimke rxjava images images concatpublisherprefetchpng marble for concat observable concatobservable https rawgithubusercontentcom umfsimke rxjava images images concatobservablepng marble for concat source source concat https rawgithubusercontentcom umfsimke rxjava images images concattwopng marble for concat source source source concat https rawgithubusercontentcom umfsimke rxjava images images concatthreepng marble for concat source source source source concat https rawgithubusercontentcom umfsimke rxjava images images concatfourpng marble for concatarray concatarray https rawgithubusercontentcom umfsimke rxjava images images concatarraypng please pay attention to file names in javadoc as i was not sure how to name concat iterable so ive added at the end i for concat observable ive added o for concat source source source and concat source source source source ive used n and m as they are numerical valuesalso is there an error in concat publisher and concat publisher prefetch with request commands i did used as a reference completableconcat publisher marble but i do not understand why do we have request after first event as we already requested prefetching of multiple ones is it because others are still not producedthanks codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c e caf b c ec d c srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&height &width https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlrmxvd fibguuamf yq ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme x internal operators flowable flowableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c f b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments please color the marbles in the sequences differently to each other since some inputs and outputs are observable s and flowable s their terminal event idicator is a pass throug arrow and x please update these diagrams accordingly use singleconcato png and singleconcato png the x in the middle of the left side of concat publisher prefetch is misaligned multiple requests are there to reinforce those are flowable s and thus more requests may come even if there was some initial request before keep them in the diagram thanks for explanationmarbles are now updated per comments the concat publisher and concat publisher int diagrams input side and inside the box are still based on a comment i thought that only observable s and flowable s should be updated those images are now updated with
6141,1,0,0,0,0,0,1,0,add marble diagrams for various single operators here are marble diagrams for various single operators that will close some of the marble for concateager publisher concateeagerp https rawgithubusercontentcom umfsimke rxjava images images concateagerpublisherpng marble for concateager iterable concateeageri https rawgithubusercontentcom umfsimke rxjava images images concateageriterablepng marble for create create https rawgithubusercontentcom umfsimke rxjava images images createpng marble for ambwith ambwith https rawgithubusercontentcom umfsimke rxjava images images ambwithpng marble for equals equals https rawgithubusercontentcom umfsimke rxjava images images equalspng marble for merge source source merge https rawgithubusercontentcom umfsimke rxjava images images mergetwopng marble for merge source source source mergethree https rawgithubusercontentcom umfsimke rxjava images images mergethreepng marble for merge source source source source mergefour https rawgithubusercontentcom umfsimke rxjava images images mergefourpng marble for merge singlesource mergesinglesource https rawgithubusercontentcom umfsimke rxjava images images mergesinglesourcepng marble for mergewith mergewith https rawgithubusercontentcom umfsimke rxjava images images mergewithpng marble for doafterterminate doafterterminate https rawgithubusercontentcom umfsimke rxjava images images doafterterminatepng marble for to to https rawgithubusercontentcom umfsimke rxjava images images topng marble for as as https rawgithubusercontentcom umfsimke rxjava images images aspng marble for compose compose https rawgithubusercontentcom umfsimke rxjava images images composepng marble for doaftersuccess doaftersuccess https rawgithubusercontentcom umfsimke rxjava images images doaftersuccesspng marble for merge publisher mergepublisher https rawgithubusercontentcom umfsimke rxjava images images mergepublisherpng marble for merge iterable mergeiterable https rawgithubusercontentcom umfsimke rxjava images images mergeiterablepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e dc b a baf cdca d a srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &srcpr&tokenwtcc htjm &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh vex internal operators single singletakeuntiljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuywtlvw awwuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e d a b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments akarnokd create marble is not valid i havent pushed correct version to the repo sorry for thishere is proper create create https rawgithubusercontentcom umfsimke rxjava a d b f f fb d ba b d images createpng thanks updated the image in the repo http reactivexio rxjava x javadoc snapshot io reactivex singlehtmlcreate ioreactivexsingleonsubscribe
6143,1,0,0,0,0,0,1,0,add concatarrayeagerdelayerror operator expose feature this pr exposes the existing delayerror capability of the concatmapeager operator as concatarrayeagerdelayerror for both flowable and observable in addition the concatarrayeager and these new methods receive marble diagrams observable image https rawgithubcom wiki reactivex rxjava images rx operators concatarrayeagerpng image https rawgithubcom wiki reactivex rxjava images rx operators concatarrayeagernnpng image https rawgithubcom wiki reactivex rxjava images rx operators concatarrayeagerdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators concatarrayeagerdelayerrornnpng flowable image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcatarrayeagerpng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcatarrayeagernnpng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcatarrayeagerdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcatarrayeagerdelayerrornnpng resolves sidenote one of the validators had to be adjusted due to false positive it produced codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dfc d efa de a b f b fb srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgheight &width &tokenwtcc htjm &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dfc b a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6145,1,0,0,0,0,1,1,0,fix boundary fusion of concatmap and publish operator this pr fixes the lack of boundary fusion marker in the concatmap and publish operators that can break the thread confinement expectation when using observeon upstream and a thread sensitive operator javasourceobserveon scheduler map some thread sensitive operation publish or concatmap by default these operators may call poll from any of the participating threads which would otherwise dequeue observeon and execute map on that threadthe fix adds the necessary flag to both operators onsubscribe logic for a temporary workaround one should use hide before such operators to make sure fusion doesnt happenfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ad b f ebb cabe c b f b srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgtokenwtcc htjm &srcpr&width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh arrow_down internal operators flowable flowableconcatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f twfwlmphdme arrow_down internal operators flowable flowabledooneachjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrg pbkvhy guamf yq rnal operators flowable flowablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq tymluzuxhdgvzdc qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ad b f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6152,1,0,0,0,0,0,1,0,clarify testobserverassertvalueset in docs and via tests clarify that {testobservertestsubscriber}assertvalueset checks for all received items to be in the provided set but that set can contain additional elements that could have been received unit tests have been added to demonstrate the expected behaviorresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b eaa f cac ef a bfbd b b srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java io reactivex observers basetestconsumerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl jhc vuzxn q uc vtzxiuamf yq arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b ea dd b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6155,1,0,0,0,0,0,1,0,fix marble of maybeflatmap events to maybesource fix the marble diagram of the event mapping maybeflatmap http reactivexio rxjava x javadoc io reactivex maybehtmlflatmap ioreactivexfunctionsfunction ioreactivexfunctionsfunction javautilconcurrentcallable operator image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapmmmpng tracked in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a f fa dc ed a b e b c e d e srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a f fcee b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6167,1,0,0,0,0,1,1,0,make observeon not let workerdispose called prematurely some operators may call dispose cancel from onerror oncomplete which could trigger a permature call to workerdispose that was about to happen anyway this pr prevents this by moving the operator into its disposed cancelled state before signaling the terminal event thus a downstream cancel dispose call wont trigger this premature cleanupsuch premature cleanups may cause unwanted schedulersio reuse in some scenariosrelated there are x tests that were relying on a race that the previous behavior always allowed ive updated those tests to avoid the inherent termination cancel race in them codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b dd d fe d de e f desrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgsrcpr&tokenwtcc htjm &width &height https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators flowable flowableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt jzzxj zu ulmphdme operators completable completablefromcallablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlrnjvbunhbgxhymxllmphdme arrow_down rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu ic vydmvpbi qyxzh arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b be d d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments for me the situation in is an anti pattern having more than one blocking subscribe in a flowable chain so i hope to avoid it entirely having said that i understand that this pr helps the situation described in akarnokd would you say the window of opportunity for unwanted schedulersio reuse has been narrowed or completely closed with the changes in this pr it is definitely narrowed but i cant prove it is eliminated or that we arent back to state where excess io creation happens it is better to confine blocking to its own io scheduler via subscribeon so that such oncomplete blocking doesnt elongate the schedulers life and also doesnt keep the previous operators stack
6175,1,0,0,0,0,1,1,0,explain null observer subscriber error reports in detail from rxjavaplugins this pr is related to issue https githubcom reactivex rxjava issues with these changes all reactive types will emit detailed error message when onsubscribe hook installed using rxjavaplugins returns null observer subscriber observable the rxjavapluginsonsubscribe hook returned a null observer please check the handler provided to rxjavapluginssetonobservablesubscribe for invalid null returns further reading https githubcom reactivex rxjava wiki plugins flowable the rxjavapluginsonsubscribe hook returned a null flowablesubscriber please check the handler provided to rxjavapluginssetonflowablesubscribe for invalid null returns further reading https githubcom reactivex rxjava wiki plugins single the rxjavapluginsonsubscribe hook returned a null singleobserver please check the handler provided to rxjavapluginssetonsinglesubscribe for invalid null returns further reading https githubcom reactivex rxjava wiki plugins maybe the rxjavapluginsonsubscribe hook returned a null maybeobserver please check the handler provided to rxjavapluginssetonmaybesubscribe for invalid null returns further reading https githubcom reactivex rxjava wiki plugins completable the rxjavapluginsonsubscribe hook returned a null completableobserver please check the handler provided to rxjavapluginssetoncompletablesubscribe for invalid null returns further reading https githubcom reactivex rxjava wiki plugins note there was no null check on observer returned from rxjavapluginsonsubscribe this observer method call in completable s subscribe method so ive added it in this pr is that fine codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ba bbb d a a e f b b bf cadfbsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ba bbb bb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6187,1,0,0,0,0,0,1,0,fix refcount termination reconnect race this pr modifies the refcount operator in both flowable and observable types to avoid certain termination reconnection racesthe original race could happen when the refcounted source terminated at the same time as new observers arrived leaving those new observers hanging as they practically joined a dying connection and got possibly undercut by the dispose callthe change involve a new internal interface resettableconnection that will allow resetting the connection object inside the connectable source if it is equal to the connection object known by the initiator of the original connect callfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e fbc e de cf d e bfb e csrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme arrow_down nternal operators observable observablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh arrow_down ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme arrow_up internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq arrow_up operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e fb ac d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks for the fix akarnokd and the report bernhardreu a release in the next couple of weeks with this change would be very welcome share is a critical path for me cc superevensteven philipgroom davidmoten sure akarnokd this seems to fix the issue for replay refcount but im seeing the same test fail intermittently with publish refcount aka share test fun test refcount race conditions { for i in until _ { val observable observablejust publish refcount val observer observable subscribeon schedulersio test val observer observable subscribeon schedulersio test observer withtag observer $i awaitdone timeunitseconds assertresult observer withtag observer $i awaitdone timeunitseconds assertresult } } the actual failure is obviously unpredictable due to the race conditions but it usually fails pretty early in this case it failed at i javalangassertionerror value count differs expected but was latch values errors completions timeout disposed tag observer expected actual latch values errors completions timeout disposed tag observer jhansche it is possible one of the observers connect right between onnext and oncomplete thus it may not receive the value however they should both complete no timeout i put in a fresh issue and will investigate further tomorrow
6193,1,0,0,0,0,0,1,0,add error handling java docs section to from callable & co resolves added javadocs describing the regular and canceled disposed behavior for observablefromcallable singlefromcallable maybefromaction completablefromcallable completablefromaction flowablefromcallable did not alter maybefromcallable because the existing javadoc appears to be adequate codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c d c ef f d a c aeb srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c d c c eeb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i noticed that theres quite a bit more of the cancellation language in the other areas for example singlejava and all other source { code singlesource}s are cancelled completablejava param onfinally the action called when this completable terminates or gets cancelled should this be added to post a separate pr for those should i create a separate issue as well also is there anything else you need from me to get this pr merged unsure of the process at this point no need to open an issue for thatwe are waiting for another approval and this will be merged
6197,1,0,0,0,0,0,1,0,fix flowablereduce bifunction javadoc empty source does not signal nosuchelementexceptionresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c d c ef f d a c aeb srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlrmxvd fibguuamf yq ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c d c d f ca https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6199,1,0,0,0,0,0,1,0,fix terminology of cancel dispose in the javadocs resolves changing terminology from cancel dispose wherever appropriate in the following classes observablejava singlejava maybejava completablejava areas where i did _not_ change from cancel disposal include where the cancellation was in reference to a flowable publisher or a future test methods where the testobserver returned actually has a cancel method codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b f eb e b c b b a caa e fsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b eaba a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6200,1,0,0,0,0,0,1,0,fix tofuture marbles and descriptions this pr fixes the marble diagrams of flowabletofuture and observabletofuture to indicate multi valued sources signal indexoutofboundsexception source has to be finite for the future to terminate image https githubcom reactivex rxjava wiki images rx operators flowabletofuturepng image https githubcom reactivex rxjava wiki images rx operators tofutureopng resolves also fixes the diagram for codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b f eb e b c b b a caa e fsrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6232,1,0,0,0,0,1,1,1,cleanup observableflatmap drain logic cleanup the drain logic of observableflatmap by removing unnecessary loops and fixing the index management in case of a fused failure in one of the sources triggering another round over the same source unnecessarilyresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fd d bf b e a asrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh internal operators flowable flowablefromarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbufycmf lmphdme ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq ivex internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjltwvyz vbcnjhes qyxzh l operators observable observabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvrpbwvvdxruaw lzc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fd d de f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6254,1,0,0,0,0,1,1,1,fix flaky sample backpressure test improve coverage use processors to trigger the missingbackpressureexception case instead of the timer which could fire prematurely and stop the sequence before the first item was sent by the behaviorprocessor also small improvements to the code coverage of flowablesample fixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f bd e d d ba aa c fce f c srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ex internal subscriptions subscriptionarbiterjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy tdwjzy jpchrpb bcmjpdgvylmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme tivex internal operators single singletimeoutjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuaw lb v lmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh l operators observable observabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvrpbwvvdxruaw lzc qyxzh internal operators flowable flowableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt jzzxj zu ulmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f bd ff cbe https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6258,1,0,0,1,0,1,1,1,fix cancel dispose upon upstream switch for some operators this pr extends the subscriptionarbiter to optionally allow or disallow cancelling the current subscription if it is replaced by a new one some operators do not need to cancel the current subscription concat concatmap repeat repeatwhen retry and retrywhen in addition repeatwhen and retrywhen were cancelling when the handler sequence itself terminated the code has been updated to disconnect the upstream upon the completion failure but before signaling the handlerthe reactive streams specification also disallows synchronous cancellation after the terminal event anywayothers may actually need to cancel such as timeout observable s dont have a specific arbiter they use the disposablehelper methods and the relevant ones were changed to replace instead of the disposing set callsome tests actually checking if the dispose cancel happens and had to be updatedthe flowabledelaysubscription publisher also used subscriptionarbiter but it was unnecessary the code has been replaced with a more apt deferred requesting scheme as the downstream requests need to be delayed until the main subscription happens the other publisher is always consumed unboundedresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit be cc fbb a f f f ba f e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators flowable flowableretrypredicatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumv cnlqcmvkawnhdguuamf yq arrow_down l operators flowable flowableretrybipredicatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumv cnlcavbyzwrpy f zs qyxzh arrow_down nternal operators flowable flowablerepeatwhenjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwzwf v hlbi qyxzh arrow_down ternal operators flowable flowablerepeatuntiljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwzwf vw awwuamf yq arrow_down ex internal subscriptions subscriptionarbiterjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy tdwjzy jpchrpb bcmjpdgvylmphdme arrow_up ternal operators flowable flowableonerrornextjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt fcnjvck lehquamf yq arrow_down nal operators observable observablerepeatwhenjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgvhdfdozw uamf yq arrow_down ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme arrow_down internal operators flowable flowableconcatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f twfwlmphdme rnal operators observable observableretrywhenjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjldhj v hlbi qyxzh arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update be c daea https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments david can you please allow days window for review on this one im smashed by work but would really like to check this pr carefully sure artem
6269,1,0,0,1,0,1,1,1,call the doon{disposecancel} handler at most once this pr makes sure the doondispose dooncancel and doonlifecycle execute their cancellation handler onceresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c d de bbf ced b acfc a dd srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down x internal observers disposablelambdaobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl rpc bvc fibgvmyw izgfpynnlcnzlci qyxzh arrow_up rnal operators flowable flowabledoonlifecyclejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrg pbkxpzmvjewnszs qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh tivex internal operators single singletimeoutjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuaw lb v lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c d ddf https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6275,1,0,0,0,0,1,1,1,improve the observable flowable cache operators this pr rewrites the observablecache and flowablecache operators to allocate less and be more up to date algorithmicallyive also added comments to help understand its inner workings in case someone is interestedresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fba b b f f e ed e f b c eb eab srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down internal operators observable observablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunhy hllmphdme arrow_up vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme va io reactivex internal util linkedarraylistjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc maw rzwrbcnjheuxpc quamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fba b dc be https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6278,1,0,0,0,0,1,1,0,add materialize and dematerialize this pr adds the materialize operator to maybe single and completable to turn their signals into the corresponding notification object this operator has been available for observable s and flowable s from the beginning of the rx api the methods return single to complement the dematerialize operator is only defined for single and results in a maybe if accepted ill draw the correct marble diagrams for them in a separate prresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c cfb ac a e e d fdd dd c f f srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators mixed materializesingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl hdgvyawfsaxplu luz xlt jzzxj zxiuamf yq operators completable completablematerializejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwf zxjpywxpemuuamf yq vex internal operators maybe maybematerializejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjltwf zxjpywxpemuuamf yq src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_up x internal operators single singlematerializejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvnyxrlcmlhbgl zs qyxzh src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_up internal operators single singledematerializejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvezw hdgvyawfsaxpllmphdme src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_up ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c cfb a ffb d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments cc artem zinnatullin davidmoten
6287,1,0,0,0,0,0,1,0,expose the keep alive value of the io scheduler as system property configuring keep alive through system propertyresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b c e c f ab ec b e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex schedulers schedulersjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy ty hlzhvszxjzlmphdme arrow_down io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh arrow_down va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b fb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6287,1,0,0,0,0,0,1,0,expose the keep alive value of the io scheduler as system property configuring keep alive through system propertyresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b c e c f ab ec b e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex schedulers schedulersjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy ty hlzhvszxjzlmphdme arrow_down io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh arrow_down va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b fb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6297,1,0,0,1,0,1,1,1,fix refcount eager disconnect not resetting the connection this pr fixes the case when an observer subscriber disposes cancels immediately upon subscribing to a refcount operator before it establishes the connection and ends up with a disposed but non reset connection preventing further interactions with the connectable sourcethe fix is to detect this case and reset the connection when the connect method signals the dispose handlerboth connectableflowablerefcount and connectableflowablerefcount is affectedfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit acd c da d c c e bda efsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme arrow_up internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq arrow_up operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update acd f c f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6303,1,0,0,0,0,0,1,0,javadoc fix incorrect image placement add before image elements in javadocresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f bb a c c fe f bc bsrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f bb cdc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6305,1,0,0,0,0,0,1,0,javadoc explain explicitly about using emitter interface methods synchronously add note in javadoc explicitly explaining about using emitter interface methods synchronously add notes for generate methods in observable and flowable plus add the similar note to emitter interfaceresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit afd b d c ae f f dc b e c b eesrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh io reactivex subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvu vyawfsaxplzfn ynnjcmlizxiuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update afd b b d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6308,1,0,0,0,0,0,1,0,javadoc updates for rxjava issue updates to ioreactivexflowable javadocs as per updated docs for all flowablegroupby methods codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b edf e ed a c d f af f srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b e d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6311,1,0,0,0,0,1,1,1,javadoc explain that distinctuntilchanged requires non mutating data to work as expected add note in javadoc for all distinctuntilchanged methods in flowable and observable class explaining about unexpected results to expect when using mutable data sources like mutable charsequence or lists resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b edf e ed a c d f af f srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh io reactivex subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvu vyawfsaxplzfn ynnjcmlizxiuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b e b e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6313,1,0,0,0,0,0,1,0,adding nonnull annotations to observable & single adding nonnull annotations in factory methods for improved code compilationresolves akarnokd can you pls take a look at this and review thanks for contributing a few points you dont have to keep the welcome text of the pr thats for telling contributors what to do see the updated text for future reference didnt you mean to add nonnull to the arguments rather than to the return value codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ae a acef df b srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ae ac ad c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments non null by default came up in but not sure what happened id think it was a jsr annotation instead of just a convention thus the ides simply wouldnt have supported them freakomonk did you also want to add these to maybe flowable and completable static methods vanniktech can you elaborate nonnull by default akarnokd thanks for the suggestions will keep in mind henceforth i added the nonnull annotation to methods with objecthelperrequirenonnull check in them as the input params are being checked for null i am checking for the return valuei have updated the flowable static methods but do not see any maybe completable that do not have already have this annotation non null by default came up in but not sure what happened id think it was a jsr annotation instead of just a convention thus the ides simply wouldnt have supported themthis freakomonk im not sure though which annotations works where and what needs to be enabled disabled or not either we look into this or we just use rxjavas nonnull annotation which does the job akarnokd hi david is there something else to do to get this pr merged freakomonk i was waiting for you to add them to the other reactive base classes akarnokd added annotation to further methods now can you pls check akarnokd is this now okay to be merged your review pls
6321,1,0,0,0,0,0,1,0,fix flowabletoobservable backpressure support resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ac b b b abf c c ff d e d srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ac b b e f f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6359,1,0,0,0,0,1,1,1,fix the error race in observablerepeatwhen due to flooding repeat signal this pr fixes a race condition in the observablerepeatwhen operator for the case when the repeat signal is not for and a new subscription may race with the clearing of the previous disposable because active is set to false too early the fix is to swap the two operations observableretrywhen and the flowable versions do not have this bug unit tests were added to all operators to verify the correct behavior regardlessfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e c b e f a cc d b eb e f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators observable observablerepeatwhenjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgvhdfdozw uamf yq arrow_down tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e c b ea https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments nice thanks akarnokd for such a quick fix i have verified that it fixes https githubcom reactivex rxjava issues locally
6364,1,0,0,0,0,1,1,0,fix publish not requesting upon client change due to a bug in the flowablepublish operator it is not requesting more if there was a change in the subscriber array during an emission run in the non fused operation modefixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d d a e e b fc ec bf e c srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ernal operators flowable flowabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvgltzw dfrpbwvklmphdme vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d d a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6370,1,0,0,0,0,1,1,0,add interruptible mode to schedulersfrom by default the schedulersfrom uses a trampoline to ensure worker tasks are executed fifo and non overlappingly on any potentially multi threaded executor this old setup didnt allow task interruption due to this disconnect between the trampoline task and the operator task in contrast the standard schedulers use single threaded executors and their future is linked and interruptible when the operator task is cancelled this pr add an interruptible mode to the schedulersfrom via a paramerer in a new overload and some internal dispatching based on this mode selector existing schedulersfrom executor users should still behave the sameresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b d ebdfbf ee f ac f f srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex schedulers schedulersjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy ty hlzhvszxjzlmphdme arrow_up activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b c bac https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6375,1,0,0,0,0,1,1,0,dont dispose the winner of {singlemaybecompletable}amb this pr fixes the singleamb maybeamb and completableamb operators to not dispose the winner source causing potential interruptions as a side effect on the current threadthe fix is to delete http reactivexio rxjava x javadoc io reactivex disposables compositedisposablehtmldelete ioreactivexdisposablesdisposable the winner from the composite before disposing the rest to avoid the interruption raceunit tests were added to verify this behavior on all amb implementations flowable and observable were already working correctlyfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b d ebdfbf ee f ac f f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators completable completableambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlqw ilmphdme arrow_down o reactivex internal operators maybe maybeambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlqw ilmphdme arrow_up reactivex internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvbbwiuamf yq arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b f dfe https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6377,1,0,0,0,0,0,1,0,expand observabledebounce and flowabledebounce javadoc mention that if the processing of a task takes too longand a newer item arrives then the previous task willget disposed interrupting a long running workfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d f efe b d b f c f asrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ex internal subscriptions subscriptionarbiterjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc vic nyaxb aw ucy tdwjzy jpchrpb bcmjpdgvylmphdme va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d f fe fc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks for the review done thanks the wording for selector based debounces is updated
6386,1,0,0,0,0,1,1,0,add doonterminate to single maybe for consistency this pr adds doonterminate operator to single and mayberesolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fbfcc c dc a c ddb f cbc srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators maybe maybedoonterminatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrg pblrlcm pbmf zs qyxzh src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_up internal operators single singledoonterminatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgveb uvgvybwluyxrllmphdme src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_up operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fbfcc e b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments all improvements and fixes have been implemented
6405,1,0,0,1,0,1,1,0,fix concateager to dispose sources & clean up properly this pr fixes the concatmapeager operator which drives the static variants as well to properly dispose and clean up the state of the operator upon cancelling disposing the sequence flowableconcatmapeager did not cancel the current active inner consumer only the ones coming after observableconcatmapeager did not dispose the main source of the inner observablesboth variants have received the same two unit tests to verify their behaviorfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e af f dcae defdcfe e ea b bsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators flowable flowableconcatmapeagerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f twfwrwfnzxiuamf yq arrow_down operators observable observableconcatmapeagerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhde hcevhz vylmphdme arrow_down io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh tivex internal operators single singletimeoutjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuaw lb v lmphdme ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e afd c f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6408,1,0,0,0,0,0,1,0,improving javadoc of flattenasflowable and flattenasobservable method improving the javadoc of the flattenasflowable and flattenasobservable methods of single and maybe classesresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a b da e c d c e c df fsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a b f a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments akarnokd the force push only involves changing my email in the previous commit apologies for the confusion im not sure why the build has failed ioreactivexinternaloperatorsflowableflowableconcatmaptest boundaryfusiondelayerror failed javalangassertionerror error s present ioreactivexexceptionsmissingbackpressureexception queue is full latch values errors completions at ioreactivexobserversbasetestconsumerfail basetestconsumerjava at ioreactivexobserversbasetestconsumerassertnoerrors basetestconsumerjava at ioreactivexobserversbasetestconsumerassertresult basetestconsumerjava at ioreactivexinternaloperatorsflowableflowableconcatmaptestboundaryfusiondelayerror flowableconcatmaptestjava caused by ioreactivexexceptionsmissingbackpressureexception queue is full akarnokd i closed and reopened the pr to enable a rebuild and this time it has passed was there any transient known build failures here thanks that test should be deterministic and not fail unless there is a bug in concatmaps backpressure management did you save the full stacktrace of the failure by any chance akarnokd actually that is all i saw as part of the failurethis was the failing build https travis ciorg reactivex rxjava builds
6432,1,0,0,0,0,0,1,0,composite disposable docs on compositedisposable add and addall methods if the param is null currently the npe error message produced by objecthelper is d is null which is not very helpfulthis is a small refactor for making the message a bit more helpfulresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a adf f ebfe e d d e srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq internal operators observable observablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunhy hllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a adfe e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks for your feedback i think i addressed all of your suggestions
6452,1,0,0,0,0,0,1,0,remove dependency of schedulers from observablerefcount resolves in the constructor of observablerefcount that takes connectableobservable source as the argument we set timeout to l in that specific use case of observablerefcount scheduler is never needed its only referenced in cancel method but if timeout is it wont be triggered at all because there is early return this commit removes the need to depend on schedulerstrampoline and instead passes null to be scheduler when the ref count is not time based similarly applies the same change to flowablerefcount the reasons for this change are the following in projects that dont depend on schedulers class if there is no reference to schedulers the whole schedulers can be stripped out of the library after optimizations eg proguard with constructor that references schedulers the optimizer cant properly strip it out in our quick test of our android app we were able to reduce the rxjava library size dependency from kb to kb after optimization but before compression by simply avoiding access to schedulers in observablerefcount in terms of modularity observablerefcount is just an operator so it by itself should probably not have dependency on what available pool of schedulers schedulers there are it should just know that there is some scheduler that could be passed to observablerefcount when observablerefcount needs it codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a cfcbf f d c ea bb fcd b esrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme arrow_down internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlrmxvd fibguuamf yq ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a cfc f e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks for the review and the approval
6458,1,0,0,1,0,1,1,1,update the javadoc of the retry operator specify that the times function parameter describes the number of timesto resubscribe if the current observable failssolves bellow is the marble with the number of retries decreased from to if the marble is correct can you upload it to the repository retry o n https user imagesgithubusercontentcom e e be e e ae d bddpng sure could you also make sure all the other counted retry operators in the other base classes have the correct wording codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d bd e cf a f b b a srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme io reactivex subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvu vyawfsaxplzfn ynnjcmlizxiuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d bd d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments surei updated every base classes also i grabbed this opportunity to update some unit tests to illustrate the javadoc wordingplease note single already has the right wording both maybe and flowable are using the default retry marble https rawgithubcom wiki reactivex rxjava images rx operators retrypng nice thanks
6461,1,0,0,0,0,0,1,0,change error message in observablefromarray changed the error message when an element at position i is null to what was suggested in could you please update these locations as well https githubcom reactivex rxjava blob x src main java io reactivex internal operators flowable flowablefromarrayjaval https githubcom reactivex rxjava blob x src main java io reactivex internal operators flowable flowablefromarrayjaval https githubcom reactivex rxjava blob x src main java io reactivex internal operators flowable flowablefromarrayjaval https githubcom reactivex rxjava blob x src main java io reactivex internal operators flowable flowablefromarrayjaval codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c cfb e f c e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators flowable flowablefromarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbufycmf lmphdme arrow_down rnal operators observable observablefromarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzyb bcnjhes qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c cfb fa abac https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments sure its done
6469,1,0,0,1,0,1,1,1,remove redundant methods from sample observable resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit deeb ac ad c b c ac be faf srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ al operators flowable flowablesamplepublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu ftcgxluhvibglzagvylmphdme arrow_down ors observable observablesamplewithobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvnhbxbszvdpdghpynnlcnzhymxllmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update deeb f d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments could you also check flowablesample flowable could you also check flowablesample flowable ill check into it done with the flowablesample
6483,1,0,0,0,0,0,1,0,correction for maybecount doc typo resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ff b bde a fa b aasrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh l operators observable observabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvrpbwvvdxruaw lzc qyxzh ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme ain java io reactivex subjects unicastsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvvw py fzdfn ymply quamf yq vex internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsunvut uamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6488,1,0,0,1,0,1,1,1,fix zip not stopping the subscription upon eager error the observablezip did not stop subscribing to the next sources if the previous one failed with an onerror flowablezip works as intendedfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ca a b df ed d a d cfeff f srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators observable observablezipjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvppcc qyxzh arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ca a ba bdaf https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6519,1,0,0,1,0,1,1,1,connectableflowable connetableobservabe redesign this pr changes the connectable api to have a specific reset method to reset a terminated connectable source as part of the official apiin x when publish terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call connect again see however replay did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin x this two corner cases have been fixed by the introduction of reset both publish and replay now remain in their terminated state until reset is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows fresh connect running oncomplete onerror terminated reset fresh fresh connect running dispose fresh fresh connect running oncomplete onerror terminated dispose fresh fresh connect running oncomplete onerror terminated connect running this does resolve the race condition with publish refcount described in in addition there are some changes to flowablepublish s behavior it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation i have no strong preference on this property and in comparison observablepublish drops items because there is no backpressure buffer in its implementation upstream errors are not reported to the rxjavapluginsonerror handler when if there are no subscribers but have to be observed via a subscriber because terminal events are available until reset now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no consumer case upon an error and still report it when reset or dispose is called resolves resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c e fd bedd b d a e be e a srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ o reactivex observables connectableobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj ywjszxmvq ubmvjdgfibgvpynnlcnzhymxllmphdme arrow_down va io reactivex flowables connectableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzmxvd fibgvzl nvbm ly rhymxlrmxvd fibguuamf yq arrow_down src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq arrow_up src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme arrow_down internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq arrow_down nternal operators observable observablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh arrow_up and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c e a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6519,1,0,0,1,0,1,1,1,connectableflowable connetableobservabe redesign this pr changes the connectable api to have a specific reset method to reset a terminated connectable source as part of the official apiin x when publish terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call connect again see however replay did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin x this two corner cases have been fixed by the introduction of reset both publish and replay now remain in their terminated state until reset is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows fresh connect running oncomplete onerror terminated reset fresh fresh connect running dispose fresh fresh connect running oncomplete onerror terminated dispose fresh fresh connect running oncomplete onerror terminated connect running this does resolve the race condition with publish refcount described in in addition there are some changes to flowablepublish s behavior it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation i have no strong preference on this property and in comparison observablepublish drops items because there is no backpressure buffer in its implementation upstream errors are not reported to the rxjavapluginsonerror handler when if there are no subscribers but have to be observed via a subscriber because terminal events are available until reset now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no consumer case upon an error and still report it when reset or dispose is called resolves resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c e fd bedd b d a e be e a srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ o reactivex observables connectableobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj ywjszxmvq ubmvjdgfibgvpynnlcnzhymxllmphdme arrow_down va io reactivex flowables connectableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzmxvd fibgvzl nvbm ly rhymxlrmxvd fibguuamf yq arrow_down src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq arrow_up src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme arrow_down internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq arrow_down nternal operators observable observablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh arrow_up and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c e a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6519,1,0,0,1,0,1,1,1,connectableflowable connetableobservabe redesign this pr changes the connectable api to have a specific reset method to reset a terminated connectable source as part of the official apiin x when publish terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call connect again see however replay did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin x this two corner cases have been fixed by the introduction of reset both publish and replay now remain in their terminated state until reset is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows fresh connect running oncomplete onerror terminated reset fresh fresh connect running dispose fresh fresh connect running oncomplete onerror terminated dispose fresh fresh connect running oncomplete onerror terminated connect running this does resolve the race condition with publish refcount described in in addition there are some changes to flowablepublish s behavior it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation i have no strong preference on this property and in comparison observablepublish drops items because there is no backpressure buffer in its implementation upstream errors are not reported to the rxjavapluginsonerror handler when if there are no subscribers but have to be observed via a subscriber because terminal events are available until reset now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no consumer case upon an error and still report it when reset or dispose is called resolves resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c e fd bedd b d a e be e a srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ o reactivex observables connectableobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj ywjszxmvq ubmvjdgfibgvpynnlcnzhymxllmphdme arrow_down va io reactivex flowables connectableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzmxvd fibgvzl nvbm ly rhymxlrmxvd fibguuamf yq arrow_down src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq arrow_up src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme arrow_down internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq arrow_down nternal operators observable observablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh arrow_up and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c e a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6522,1,0,0,0,0,1,1,0,fix concatmapdelayerror not continuing on fused inner source crash the callable fused path didnt consider the error delay settings and cut the sequence shortfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e d a c c a f db d ab cafe f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh rnal operators flowable flowableskiplasttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu tpcexhc ruaw lzc qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e d cab e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6523,1,0,0,0,0,1,1,0,fix concatmapdelayerror not continuing on fused inner source crash the supplier fused path didnt consider the error delay settings and cut the sequence shortfixes
6525,1,0,0,0,0,1,1,0,remove test from testxxx method names create a validator fix x create validator x automatically rename methods testxxx to xxx analog to fixlicenseheaders https githubcom reactivex rxjava blob x src test java io reactivex validators fixlicenseheadersjava check x rename methods codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit de ce d bfc c b bc d e srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq l operators observable observabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvrpbwvvdxruaw lzc qyxzh operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlrmxhde hcel zxjhymxlrmxvd fibguuamf yq reactivex internal queue spsclinkedarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy xpbmtlzefycmf uxvldwuuamf yq ain java io reactivex subjects unicastsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvvw py fzdfn ymply quamf yq x internal operators flowable flowableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update de ce aa f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i was doing a massive set of changes to the test files myself so it would be great you rolled back the renames kept the validator code but not fail when violations are found ill merge in then just the validator then we can enable the offline ci failure mode and fix the names in a fresh pr i added ignore annotation for now and removed a commit with the actual renamingi will open a new pr when and this one are merged
6528,1,0,0,0,0,1,1,0,rename test methods and enable the check fix codecov https codecovio gh reactivex rxjava pull srcpr&elh report exclamation no coverage uploaded for pull request base x edb f click here to learn what that means https docscodecovio docs error referencesection missing base commit the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update edb f e a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6532,1,0,0,1,0,1,1,1,add eager truncation to bounded replay to avoid item retention this pr adds the eagertruncate option to the replay operator so that the head node will lose the item reference it holds upon truncationthe bounded buffers in replay implement a linked list that when truncated moves the head reference forward along the links atomically this allows late consumers to pick up the head and follow the links between them to get items replayed however the truncation may happen concurrently with a consumer working on some prior nodes so if the truncation would null out the value the consumer reaching the same node would see null as well and fail image https user imagesgithubusercontentcom c a c e dc b e a fpng to avoid this type of retention the head node has to be refreshed with a new node still pointing to the next node in the chain but without any value image https user imagesgithubusercontentcom dbe f c e a d e f a png the reason this is not the default is that it requires an additional allocation for each new incoming value when the buffer is full which would reduce performance in cases where the excess retention is not a problemoverloads to both the direct and function variants of both flowablereplay and observablereplay have been added to avoid too many overloads only one extra overload has been added extending the signature of the longest parameterized method per each bounds mode size time time size their unit test files have been cloned so that both the non eager original behavior and the eager behavior is tested separatelyfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b a b e a a e a c cc fe asrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up nal operators flowable flowableinternalhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlsw zxjuywxizwxwzxiuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme arrow_down operators observable observableinternalhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuludgvybmfssgvscgvylmphdme arrow_down nternal operators observable observablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh activex internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ty hlzhvszwrsdw uywjszs qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e b aef f b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6534,1,0,0,0,0,1,1,1,make using resource disposal order consistent with eager mode make the resource disposal order in all using implementations are consistent with the eagerness of the operator eager dispose resource then dispose the upstream non eager dispose the upstream then dispose the resourcefixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b ac cb debf b db de e e ea e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down src main java io reactivex completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvq tcgxldgfibguuamf yq arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down src main java io reactivex singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu luz xllmphdme arrow_down src main java io reactivex maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvtwf ymuuamf yq arrow_down activex internal operators single singleusingjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvvc luzy qyxzh arrow_down reactivex internal operators maybe maybeusingjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjlvxnpbmcuamf yq arrow_down vex internal operators flowable flowableusingjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlvxnpbmcuamf yq arrow_down ternal operators completable completableusingjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxlvxnpbmcuamf yq arrow_down internal operators observable observableusingjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvvzaw nlmphdme arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b ac cdd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6538,1,0,0,1,0,1,1,1,add concatmap with scheduler guaranteeing where the mapper runs this pr adds an overload to concatmap and concatmapdelayerror in both flowable and observable which makes sure the mapper function is always executed on a dedicated schedulerby default concatmap may execute the mapper function on various threads the subscribing thread the upstream thread generating the items to be mapped or the thread where the generated inner source terminates these overloads remove this kind of uncertaintythe implementation is a copy of the original concatmap instead of an extension so that optimizations for the non scheduled variants still work without extra overheadoverloads to the concatmap{singlemaybecompletable} and concatmap{singlemaybecompletable}delayerror may be added in a separate pr laterresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ae d e f d e d d f basrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_up src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_up ators observable observableconcatmapschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbmnhde hcfnjagvkdwxlci qyxzh operators flowable flowableconcatmapschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f twfwu nozwr bgvylmphdme io reactivex internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy jb njagvkdwxlci qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh ivex internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjltwvyz vbcnjhes qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ae ce b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6544,1,0,0,0,0,0,1,0,fixing version tag on schedulersfrom executor boolean resolves updating the version tag on schedulersfrom executor boolean since it was promoted codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fb be c ee f ca f dfd dc asrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex schedulers schedulersjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy ty hlzhvszxjzlmphdme arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq tivex internal operators single singletimeoutjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuaw lb v lmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fb b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6556,1,0,0,1,0,1,1,1,rename on error resume next methods to disambiguate when calling from kotlin resolves renamed onerrorresumenext source to onerrorresumewith source for observable maybe single and flowable renamed some unit tests and their classes to reflect the method name change changed parameter type of singleonerrorresumewith from single to singlesource updated javadocs for all renamed methods removed redundant casts for unit tests deleted duplicate unit test that arose from no longer needing to cast arguments
6559,1,0,0,0,0,1,1,1,fix npe when debouncing empty source background related issue debounce with selector on the empty observable leads to npeit happens because of debounceobserverdebouncer field is set up only when onnext is called when onnext isnt called at all like when debouncing observableempty we get a null reference from debouncer and call emit on null which actually leads to npe change wrap emit call with null check both in observabledebounce and flowabledebounce test plan to check observable gradlew test tests ioreactivexinternaloperatorsobservableobservabledebouncetestdebounceonempty to check flowable gradlew test tests ioreactivexinternaloperatorsflowableflowabledebouncetestdebounceonempty codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b a b fd be d b bc edd d fac db srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators flowable flowabledebouncejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrgvib vuy uuamf yq arrow_down ernal operators observable observabledebouncejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszurlym bmnllmphdme arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh tivex internal operators single singletimeoutjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuaw lb v lmphdme perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b a c de https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6560,1,0,0,0,0,1,1,1,fix npe when debouncing empty source background related issue cherry pick of for x versiondebounce with selector on the empty observable leads to npeit happens because of debounceobserverdebouncer field is set up only when onnext is called when onnext isnt called at all like when debouncing observableempty we get a null reference from debouncer and call emit on null which actually leads to npe change wrap emit call with null check both in observabledebounce and flowabledebounce test plan to check observable gradlew test tests ioreactivexinternaloperatorsobservableobservabledebouncetestdebounceonempty to check flowable gradlew test tests ioreactivexinternaloperatorsflowableflowabledebouncetestdebounceonempty codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b cf ac e e b f b csrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators flowable flowabledebouncejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrgvib vuy uuamf yq arrow_down ernal operators observable observabledebouncejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszurlym bmnllmphdme arrow_down ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b cf c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6564,1,0,0,1,0,1,1,1,remove buffer window with supplier & onexceptionresumenext this pr removes kinds of operators that had no noticeable use bases or use cases on their own in the past years buffer supplier supplier window supplier int onexceptionresumenext resolves resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f b f cb dcb b c d cb esrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down al operators observable observableonerrornextjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu urxjyb jozxh lmphdme arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ternal operators flowable flowableonerrornextjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt fcnjvck lehquamf yq arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f caeba a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6564,1,0,0,1,0,1,1,1,remove buffer window with supplier & onexceptionresumenext this pr removes kinds of operators that had no noticeable use bases or use cases on their own in the past years buffer supplier supplier window supplier int onexceptionresumenext resolves resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f b f cb dcb b c d cb esrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down al operators observable observableonerrornextjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu urxjyb jozxh lmphdme arrow_down src main java io reactivex observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvt jzzxj ywjszs qyxzh arrow_down ternal operators flowable flowableonerrornextjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt fcnjvck lehquamf yq arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f caeba a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6577,1,0,0,0,0,0,1,0,fix issue observableblockingsubscribe compares blockingobserverterminated with wrong object fix compare with v instead of o codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a c af ae ca dc af bfbb srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a c c fdd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6589,1,0,0,0,0,1,1,1,create a base test class and have all unit tests extend it this commit creates the rxjavatest class defining a defaulttimeout to minutes an ignored test announce itself for eachrunning class extending it preventing travis ci from killing thebuildhave completable tests extend from rxjavatest have disposable tests extend from rxjavatest have exception tests extend from rxjavatest related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ab c b dfdb e ea ac dbdf d f b srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq tivex internal operators single singletimeoutjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuaw lb v lmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh internal operators flowable flowableconcatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq uy f twfwlmphdme java io reactivex processors replayprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy szxbsyxlqcm jzxnzb iuamf yq arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ab c b e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks for updating the description and the review i amended the commit to meet the new pr descriptioni will cut the issue into a few more pull requests for simple readability reasons romanwuattier do you want to do the rest of the test classes in a separate pr akarnokd yes you can merge this one when you want to thanks
6594,1,0,0,1,1,1,1,1,have unit tests extends rxjavatest this commit updates the unit tests of the following operators flowable maybe observable disposable observer parallel processors schedulersand rxjava pluginrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e a aa cb a cf aa d b srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh tivex internal operators single singletimeoutjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvuaw lb v lmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e a ee dce https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6595,1,0,0,1,1,1,1,1,have unit tests extends rxjavatest this commit updates the unit tests of the following operators single subjects subscribersand for internal operators internaldisposable internalfuctions internalobservers internalqueue interanlschedulers internalsubscribers internalsubscriptions internaloperatorcompletablerelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d a b cd acff d e f d d srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvdpbmrvdy qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl nvbxbszxrhymxll nvbxbszxrhymxltwvyz uuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d f a e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6600,1,0,0,1,1,1,1,1,have internaloperatorflowable unit tests extends rxjavatest this commit updates the unit tests for internaloperatorflowable related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e c cf e ae fddd a c f e srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvn axrjae hcc qyxzh ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq ex internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvwbgf lmphdme vex internal operators flowable flowablecachejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq fjaguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e c f b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6601,1,0,0,0,0,0,1,0,observableblockingsubscribe compares with wrong object it should compare the terminated instance with the value received from the blocking queuefixes related
6602,1,0,0,1,0,1,1,1,fix truncation bugs in replay and replaysubject processor this pr fixes several truncation bugs with the time and size bound replay operators and their hot class versions unexpected removal of the last item just added due to becoming out of date at the lowest time resolution creating a hole in the linked chain and hanging the consumer related failure https travis ciorg akarnokd rxjava _buildmatrix jobs l incorrect size accounting upon removing old entries leading to more items dropped than expectedrelated
6604,1,0,0,1,1,1,1,1,have unit tests extends rxjavatest this commit updates the unit tests of the following operators internaloperatorsmaybe internaloperatormixed internaloperatorsinglerelated
6607,1,0,0,1,1,1,1,1,have internaloperatorobservable unit tests extends rxjavatest this commit updates the unit tests for internaloperatorobservable related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit eae dc bf a d b srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme java io reactivex processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy vbmljyxn uhjvy vzc ylmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update eae e fe https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6609,1,0,0,1,0,1,1,1,fix refcount not resetting when termination triggers cross cancel this pr fixes both refcount implementation to properly reset the source when the source terminates multiple consumersin the original when the source terminated multiple sources the first termination handler cleared the connection but since the subscribercount wasnt zero the source was not reset if this termination triggered a cancel on the second consumer that path would not get the source reset either due to losing the connection object unfortunately one cant just take the first termination handler and reset there immediately either because that could disrupt the termination of the rest of the consumers it has to wait for the source to terminate all consumers or have the consumers cancel allthis affects x and will be backported in a separate prfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit eae dc bf a d b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc guamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh activex internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy fegvjdxrvclnjagvkdwxlci qyxzh internal operators flowable flowableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt jzzxj zu ulmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update eae e b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6612,1,0,0,0,0,1,1,0,fix many operators swallowing undeliverable exceptions fix many operators to emit the collected exception in case of a cancel dispose call to the plugin error handler ie becoming undeliverable excptions in addition the terminal event error delivery has been unified in many other operators so that the terminal indicator exception is never leakedthere will be a separate pr about cleaning up the addthrowable usage cases fixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e dc b d cc ebc bf f e d srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators flowable flowablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxltwvyz vxaxrotwf ymuuamf yq arrow_down nal operators mixed observableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbtaw nbguuamf yq arrow_down operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq arrow_down al operators flowable flowablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxltwvyz vxaxrou luz xllmphdme arrow_down ava io reactivex observers serializedobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl nlcmlhbgl zwrpynnlcnzlci qyxzh arrow_down ators observable observableflatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbdb wbgv ywjszs qyxzh perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh va io reactivex internal util atomicthrowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc bdg tawnuahjvd fibguuamf yq arrow_up lowable flowableflatmapcompletablecompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcenvbxbszxrhymxlq tcgxldgfibguuamf yq ternal operators mixed flowableswitchmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwtwf ymuuamf yq arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e dc d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments nice
6612,1,0,0,0,0,1,1,0,fix many operators swallowing undeliverable exceptions fix many operators to emit the collected exception in case of a cancel dispose call to the plugin error handler ie becoming undeliverable excptions in addition the terminal event error delivery has been unified in many other operators so that the terminal indicator exception is never leakedthere will be a separate pr about cleaning up the addthrowable usage cases fixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e dc b d cc ebc bf f e d srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nal operators flowable flowablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxltwvyz vxaxrotwf ymuuamf yq arrow_down nal operators mixed observableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbtaw nbguuamf yq arrow_down operators mixed flowableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwq tcgxldgfibguuamf yq arrow_down al operators flowable flowablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxltwvyz vxaxrou luz xllmphdme arrow_down ava io reactivex observers serializedobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvb jzzxj zxjzl nlcmlhbgl zwrpynnlcnzlci qyxzh arrow_down ators observable observableflatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbdb wbgv ywjszs qyxzh perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh va io reactivex internal util atomicthrowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc bdg tawnuahjvd fibguuamf yq arrow_up lowable flowableflatmapcompletablecompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcenvbxbszxrhymxlq tcgxldgfibguuamf yq ternal operators mixed flowableswitchmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlu dpdgnotwfwtwf ymuuamf yq arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e dc d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments nice
6620,1,0,0,0,0,0,1,0,elementat first constrain upstream requests as discussed in this pr constrains upstream requests for the elementat and first overloads other operators will be covered in other prs codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a d cd c c fb a fd ba srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvrmxvd fibguuamf yq arrow_down nal operators flowable flowableelementatmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrwxlbwvudef twf ymuuamf yq arrow_down al operators flowable flowableelementatsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrwxlbwvudef u luz xllmphdme arrow_down tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh io reactivex subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc vic nyawjlcnmvu vyawfsaxplzfn ynnjcmlizxiuamf yq perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a f bf https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments could you hold up your subsequent prs until the refactor of the packages could you hold up your subsequent prs until the refactor of the packagessure
6626,1,0,0,0,0,0,1,0,fix blockingiterable not unblocking when force disposed when the iterator was cast to disposable and disposed the subsequent hasnext would block indefinitely that interface is not intended to be part of the public api and iterator in general does not support any form of official cancellation unlike stream this pr makes sure that if that dispose is called it unblocks the iteratora separate pr will be posted for xrelated
6627,1,0,0,0,0,1,1,1,fix blockingiterable hang when force disposed when the iterator was cast to disposable and disposed the subsequent hasnext would block indefinitely that interface is not intended to be part of the public api and iterator in general does not support any form of official cancellation unlike stream this pr makes sure that if that dispose is called it unblocks the iteratorresolves
6629,1,0,0,1,0,1,1,1,fix refcount not resetting when cross canceled this pr fixes the issue with refcount not resetting the connection when the termination triggers cross cancellation over itfixes the fix is more involved than because how x uses two publish implementation internally due to bugfix the old classic implementation does not fail but the newer implementation fails if the fix is applied unconditionally the old classic implementation fails an older unit test verifying an error allows reconnection therefore the pr checks and applies the new code path only if refcount isnt talking to the classic publish implementationas a reminder for x has a redesigned connectable with a much more clearer reset semantics and thus the restructuring of the termination handling had no trouble passing the aforementioned error allows reconnect unit test codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a df eefacd febca c cd bee srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ernal operators observable observablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlzknvdw lmphdme internal operators flowable flowablerefcountjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlumvmq bnquamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh va io reactivex internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvcxvldwuvu bzy fycmf uxvldwuuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme nal operators observable observablepublishaltjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc hbbhquamf yq perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a df https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6635,1,0,0,1,0,1,1,1,remove vararg overloads for combinelatest in observable flowable started removing the vararg function from hmm after looking at the tests the varag variant for combinelatestdelayerror might be useful since there are no x overloads available what do you think let me guess intellij refactor the varargs is a convenience over the array variant so combinelatestdelayerror s can go codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c c d a da c a d e bsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c d dc e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6637,1,0,0,0,0,1,1,0,avoid using systemgetproperties due to security restrictions change the code in the schedulerpoolfactory to use systemgetproperty directly also fix property names to rx as now both v and v could run togetherfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c c d a da c a d e bsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ava internal schedulers computationschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl nvbxb dgf aw uu nozwr bgvylmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down xjava internal schedulers newthreadschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl ld rocmvhzfnjagvkdwxlci qyxzh arrow_down va io reactivex rxjava schedulers schedulersjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zy hlzhvszxjzl njagvkdwxlcnmuamf yq arrow_down x rxjava internal schedulers singleschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl npbmdszvnjagvkdwxlci qyxzh arrow_down tivex rxjava internal schedulers ioschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl lvu nozwr bgvylmphdme arrow_down main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ava internal schedulers schedulerpoolfactoryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlclbvb xgywn b j lmphdme arrow_up main java io reactivex rxjava core schedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll njagvkdwxlci qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c e d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments ok
6650,1,0,0,1,0,1,1,1,constrain upstream requests from take remove limit operator as per discussion in this pr constrains upstream requests from the take operator and removes the limit operatorive also added a couple of unit tests for coverage of elementat that i didnt include in codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e bbfb aa ae ec f ea cd csrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ava internal operators flowable flowabletakejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvuywtllmphdme arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme al operators flowable flowablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvnzxjnzvdpdghtaw nbguuamf yq nal operators flowable flowablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvnzxjnzvdpdghnyxlizs qyxzh va internal operators flowable flowablerangejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvsyw nzs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxluhvibglzac qyxzh nal operators flowable flowableconcatmapeagerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdb jyxrnyxbfywdlci qyxzh ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments why not simply delete take and rename limit that way the tests and documentation of limit would remain intact indeed will do copied code from limit to take and fixed javadoc
6652,1,0,0,0,0,1,1,0,fix size time bound window not creating windows properly there was a logic error in the size time bound window operator for when to close a window if timers are not restarted when the size bound is hitdue to this bug two tests were not receiving and thus accounting for empty windows that are happening when the size bound is hit followed by the periodic time bound hit x will be fixed in a separate prfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report exclamation no coverage uploaded for pull request base x a click here to learn what that means https docscodecovio docs error referencesection missing base commit the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators flowable flowablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvxaw kb duaw lzc qyxzh al operators observable observablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg vgltzwquamf yq continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a e a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6657,1,0,0,0,0,1,1,0,fix size time bound window not creating windows properly there was a logic error in the size time bound window operator for when to close a window if timers are not restarted when the size bound is hitdue to this bug two tests were not receiving and thus accounting for empty windows that are happening when the size bound is hit followed by the periodic time bound hitfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit bfcae b c e c ae a eb ddb srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down ternal operators flowable flowablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlv luzg vgltzwquamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme x internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxluhvibglzac qyxzh perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update bfcae a dfdf https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6664,1,0,0,0,0,1,1,1,fix groupby group emission in some cases this pr fixes two issues when the observablegroupby operator would abandon a newly created group before the groups only item was emitted causing dataloss when the groupby s value selector failed for a new group thus the new group would never be emitted and report the failureit should fix the first test failure of but may not be the cause for the second codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e b d ba f ddf cbe a srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme ternal operators observable observablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlr jvdxbces qyxzh arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvtd l y hnyxauamf yq a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme l operators observable observabletimeouttimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlvgltzw dfrpbwvklmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6668,1,0,0,0,0,0,1,0,add missing marble diagams to single add hopefully all remaining missing marble diagrams to single resolves image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatarrayeagerpng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singleunsafecreatepng image https rawgithubcom wiki reactivex rxjava images rx operators singleusingpng image https rawgithubcom wiki reactivex rxjava images rx operators singleusingbpng image https rawgithubcom wiki reactivex rxjava images rx operators singlewrappng image https rawgithubcom wiki reactivex rxjava images rx operators singlecachepng image https rawgithubcom wiki reactivex rxjava images rx operators singlecastpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptiontpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptiontspng image https rawgithubcom wiki reactivex rxjava images rx operators singledooneventpng image https rawgithubcom wiki reactivex rxjava images rx operators singleblockinggetpng image https rawgithubcom wiki reactivex rxjava images rx operators singleliftpng image https rawgithubcom wiki reactivex rxjava images rx operators singlecontainsfpng image https rawgithubcom wiki reactivex rxjava images rx operators singlecontainspng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonterminatedetachpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrypng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryf png image https rawgithubcom wiki reactivex rxjava images rx operators singleretrynpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryfpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrynfpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrywhenpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribecpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribeccpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribec png image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribewithpng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilcpng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilspng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilppng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutbpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutsbpng image https rawgithubcom wiki reactivex rxjava images rx operators singleunsubscribeonpng image https rawgithubcom wiki reactivex rxjava images rx operators singletestpng image https rawgithubcom wiki reactivex rxjava images rx operators singletestbpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionppng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionopng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionspng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptioncpng image https rawgithubcom wiki reactivex rxjava images rx operators singledematerializepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit cb ff a dd eca e a c b dsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh rxjava internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvuxvldwvecmfpbk ic vydmvylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq reactivex rxjava processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl vuawnhc rqcm jzxnzb iuamf yq a internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvszxbsyxkuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme internal operators flowable flowableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvpynnlcnzlt uamf yq arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update cb ff ecfedfd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6700,1,0,0,0,0,0,1,0,update javadoc for observeon to mention its eagerness update javadoc to reflect the eagerness property of observeon in flowable and observable classesresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b da fec c ce b be df f eb af srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq activex rxjava internal queue spscarrayqueuejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc xdwv zs tchnjqxjyyxlrdwv zs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b dab e a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks much appreciatedwould you like to backport the changes to the x branch
6714,1,0,0,0,0,1,1,0,fix multicastprocessor not requesting more after limit is reached after reaching the prefetch limit the updated consumed counter was not written back so the processor stopped requesting more consumed limit affects x to a separate pr will be posted for itresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e c f b e acc fe b srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ activex rxjava processors multicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl bhrpy fzdfbyb nlc nvci qyxzh arrow_down a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme rxjava internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvuxvldwvecmfpbk ic vydmvylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e c fc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6715,1,0,0,0,0,1,1,0,fix multicastprocessor not requesting more after limit is reached after reaching the prefetch limit the updated consumed counter was not written back so the processor stopped requesting more consumed limit resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dee dbcd ff f b fa fbc ebdd d bsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ va io reactivex processors multicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy ndwx awnhc rqcm jzxnzb iuamf yq arrow_up tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l ae hewjllmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh nternal operators observable observablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvjlcgxhes qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dee dd d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6720,1,0,0,0,0,1,1,1,fix parallel on grouped flowable not replenishing properly backport of fix a case when the groupedflowable is consumed by a parallel in fusion mode causing the source to stop replenishing items from the upstream hanging the whole sequenceparallel was slightly different from the usual queue consumers because it checks for isempty before trying to pull for an item this was necessary because the rails may not be ready for more and an eager pull to check for emptyness would lose that item the replenishing was done in groupedflowablepull but a call to groupedflowableisempty would not replenishthe fix is to have isempty replenish similar to when poll detects emptyness and replenishesreported in reactor reactor core codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit aeb f c a cf ca e c a cb e srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlr jvdxbces qyxzh arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlqmxvy tpbmdtdwjzy jpymuuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbtaw nbguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcfnpbmdszs qyxzh activex internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl f zxvlrhjhaw pynnlcnzlci qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh java io reactivex processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy qdwjsaxnouhjvy vzc ylmphdme perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update aeb f c b d d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6729,1,0,0,0,0,0,1,0,fix self see references some comments some see should point to the other party plain delayerror add a few see to the nearby operators comments no longer apply in blockingxmostrecent source code add a comment from to actiondisposable replaces
6729,1,0,0,0,0,0,1,0,fix self see references some comments some see should point to the other party plain delayerror add a few see to the nearby operators comments no longer apply in blockingxmostrecent source code add a comment from to actiondisposable replaces
6730,1,0,0,0,0,0,1,0,add maybe marble diagrams cases related image https rawgithubcom wiki reactivex rxjava images rx operators maybezipipng image https rawgithubcom wiki reactivex rxjava images rx operators maybezipnpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeziparraypng image https rawgithubcom wiki reactivex rxjava images rx operators maybezipwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecontainsopng image https rawgithubcom wiki reactivex rxjava images rx operators maybeunsubscribeonpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonterminatedetachpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecastpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeliftpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedooneventpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptiontpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptiontspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaysubscriptionppng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e cd d ac b e e f b ec e srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvqdwjsaxnolmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme internal operators flowable flowableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvpynnlcnzlt uamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e cd d efed f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6732,1,0,0,0,0,0,1,0,update singlezip marble diagrams cases related image https rawgithubcom wiki reactivex rxjava images rx operators singlezipipng image https rawgithubcom wiki reactivex rxjava images rx operators singlezipnpng image https rawgithubcom wiki reactivex rxjava images rx operators singleziparraypng image https rawgithubcom wiki reactivex rxjava images rx operators singlezipwithpng
6744,1,0,0,1,0,1,1,0,add fair mode overload to schedulersfrom executor the default schedulersfrom implementation uses an eager approach to execute tasks on the underlying executor which can lead to excessive thread occupation on its own even if operators use buffering prefetch of this pr introduces a new overload with a fairness option so that tasks are submitted to the executor in a non overlapping and fifo manner one by onein addition the scheduler retention tests have been cleaned up and reworked to not wait unnecessarily long for the gc to finishrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit def cee cf e a e fdfe db e f b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_up rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update def f dd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6745,1,0,0,0,0,0,1,0,make disposablecontainer public api make the internal interface disposablecontainer public as it can be one safely ive seen some rd party usage in custom containers this will make them now legit on x edit also should resolve https travis ciorg reactivex rxjava builds l the osgi private reference warningresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit def cee cf e a e fdfe db e f b srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh rxjava internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlzfj bm hymxllmphdme arrow_down tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme arrow_down x rxjava internal schedulers newthreadworkerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl ld rocmvhzfdvcmtlci qyxzh arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update def d ef https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6748,1,0,0,0,0,1,1,0,change how the cause of compositeexception is generated this pr changes how compositeexceptiongetcause creates a cause exception on demand in x and x the code tried to link up the various inner exceptions via their initcause which was in on itself fishy as well as could lead to excessive memory usageinstead the new code will present the inner exceptions as part of a formatted message which in theory should be still picked up by ide exception listings and allow navigation multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionscompositeexception exceptions occurred at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionscompositeexceptionexceptionoverview multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestnestedmultilinemessage compositeexceptiontestjava image https user imagesgithubusercontentcom a ea d b dbd e png there are a few formatting conveniences if there is only one inner exception the compositeexception s cause will be simply that exception this can happen when the very same exception is aggregated into the composite and get deduplicated if an inner exceptions message is multi lined the message and cause traces should be indented properly reoccurring causes are not expanded over and over multiple exceptions ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava ioreactivexrxjava exceptionstestexception ex at ioreactivexrxjava exceptionscompositeexceptiontestreoccurringexception compositeexceptiontestjava cause not expanded again ioreactivexrxjava exceptionstestexception ex currently only the first line of the stacktraces are shown because it can get quite long and thus memory consuming to list them all maybe a system parameter can be introduced to control the verbosityfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e e d bf f a f e c c e f srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ activex rxjava exceptions compositeexceptionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy legnlchrpb zl nvbxbvc l zuv y vwdglvbi qyxzh arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlt jzzxj zu ulmphdme perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme ternal operators observable observablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlr jvdxbces qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e ae c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6754,1,0,0,0,0,1,1,1,zip combinelatest and amb operators throw when supplied with observablesource implementation that doesnt subclass observable fixes please add unit tests so this doesnt happen again in case of any future change codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b f d a c dcadd a f b ec ff srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators observable observablezipjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvppcc qyxzh arrow_down operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunvbwjpbmvmyxrlc quamf yq x internal operators observable observableambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuftyi qyxzh arrow_down ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme tivex internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb jzzxj zxjzl z dhvyzvnpbmdszu ic vydmvylmphdme nal operators observable observablepublishaltjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszvb ymxpc hbbhquamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh io reactivex disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvzglzcg zywjszxmvq tcg zaxrlrglzcg zywjszs qyxzh ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu vic nyawjlt uamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b fb d f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments added unit tests
6756,1,0,0,1,0,1,1,1,fix observable amb combinelatest & zip arraystoreexception when using iterable of sources the initial array is the wrong type and causes arraystoreexception unit tests were added to verify the other implementationsfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ec e c b e a c abb d a aa edsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh arrow_down internal operators observable observablezipjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlwmlwlmphdme arrow_down internal operators observable observableambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlqw ilmphdme arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme rnal subscribers singlepostcompletesubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zdwjzy jpymvycy taw nbgvqb n q tcgxldgvtdwjzy jpymvylmphdme rxjava internal observers queuedrainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvuxvldwvecmfpbk ic vydmvylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ec e cdb ae b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6762,1,0,0,0,0,1,1,1,fix window boundary start end cancel and abandonment this pr fixes the window operator with boundary and start end sources so that cancelling the inner windows allows cancelling the upstream once neither the main output nor other windows are being consumed further ignoring a window still allows cancelling the upstreamfollow up to and codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit daeccff d a af fe ad a e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down operators observable observablewindowboundaryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg qm bmrhcnkuamf yq arrow_down nal operators flowable flowablewindowboundaryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvxaw kb dcb vuzgfyes qyxzh arrow_down ators flowable flowablewindowboundaryselectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvxaw kb dcb vuzgfyevnlbgvjdg ylmphdme arrow_down s observable observablewindowboundaryselectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg qm bmrhcnltzwxly rvci qyxzh arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update daeccffc cd f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6765,1,0,0,0,0,0,1,0,java upgrade to java add flowablefromx operators this pr upgrades rxjava to use and compile with java build target set to animalsniffer set to javadocs link to the official jdk set to implemented operators flowablefromoptional flowablefromcompletionstage flowablefromstream applied safevarargs to many methods created marblesrelated image https rawgithubcom wiki reactivex rxjava images rx operators fromoptionalfpng image https rawgithubcom wiki reactivex rxjava images rx operators fromcompletionstagefpng image https rawgithubcom wiki reactivex rxjava images rx operators fromstreamfpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f f c d a f fd b f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ reactivex rxjava observers basetestconsumerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy vynnlcnzlcnmvqmfzzvrlc rdb zdw lci qyxzh arrow_down main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_up va internal jdk flowablefromcompletionstagejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l zsb dhymxlrnjvbunvbxbszxrpb tdgfnzs qyxzh ivex rxjava internal jdk flowablefromstreamjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l zsb dhymxlrnjvbvn cmvhbs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f f c f d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments with this move there are many we can help should remove the usage of optionalof with optionalofnullable
6773,1,0,1,0,0,0,1,0,add functionalinterface annotations resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ba c a c d d bd c a cab fd srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme internal operators flowable flowableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvpynnlcnzlt uamf yq perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme ternal operators flowable flowablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvxaw kb duaw lzc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ba c ad b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6779,1,1,0,1,1,1,1,1,java add blockingstream & flatmapstream to flowable add java interoperation methods to flowable blockingstream essentially blockingiterable with close support concatmapstream map and concatenate streams flatmapstream map and concatenate streams inherently same as concatmapstream related marbles image https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamfipng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamfipng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamfipng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d cc eecac acc eee adcee de srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x rxjava internal jdk flowableflatmapstreamjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l zsb dhymxlrmxhde hcfn cmvhbs qyxzh main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_up ivex rxjava internal jdk flowablefromstreamjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l zsb dhymxlrnjvbvn cmvhbs qyxzh arrow_up l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d cc eb f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6780,1,0,0,0,0,0,1,0,java add autocloseable disposable conversions nicen docs add disposablesfromautocloseable and disposablestoautocloseable methods improve javadocs stylingresolves resolves you could also do javainterface disposable extends autocloseable { boolean isdisposed void dispose default void close { dispose }} codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d cc eecac acc eee adcee de srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ctivex rxjava disposables runnabledisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy sdw uywjszurpc bvc fibguuamf yq arrow_down eactivex rxjava disposables futuredisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy gdxr cmveaxnwb nhymxllmphdme arrow_down x rxjava disposables autocloseabledisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy bdxrvq xvc vhymxlrglzcg zywjszs qyxzh eactivex rxjava disposables actiondisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy by rpb eaxnwb nhymxllmphdme arrow_up io reactivex rxjava disposables disposablesjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy eaxnwb nhymxlcy qyxzh arrow_up perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d cc b e b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments ive tried disposable extends autocloseable before and ended up with hundreds of warnings about unclosed resources id rather keep them separate
6780,1,0,0,0,0,0,1,0,java add autocloseable disposable conversions nicen docs add disposablesfromautocloseable and disposablestoautocloseable methods improve javadocs stylingresolves resolves you could also do javainterface disposable extends autocloseable { boolean isdisposed void dispose default void close { dispose }} codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d cc eecac acc eee adcee de srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ctivex rxjava disposables runnabledisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy sdw uywjszurpc bvc fibguuamf yq arrow_down eactivex rxjava disposables futuredisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy gdxr cmveaxnwb nhymxllmphdme arrow_down x rxjava disposables autocloseabledisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy bdxrvq xvc vhymxlrglzcg zywjszs qyxzh eactivex rxjava disposables actiondisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy by rpb eaxnwb nhymxllmphdme arrow_up io reactivex rxjava disposables disposablesjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy eaxnwb nhymxlcy qyxzh arrow_up perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d cc b e b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments ive tried disposable extends autocloseable before and ended up with hundreds of warnings about unclosed resources id rather keep them separate
6783,1,0,0,1,0,1,1,1,java add fromopt stage mapoptional tocompletionstage to m s c add the following java operators to various reactive base classes operator maybe single completable fromoptional image https rawgithubcom wiki reactivex rxjava images checkmark_onpng fromcompletionstage image https rawgithubcom wiki reactivex rxjava images checkmark_onpng image https rawgithubcom wiki reactivex rxjava images checkmark_onpng image https rawgithubcom wiki reactivex rxjava images checkmark_onpng mapoptional image https rawgithubcom wiki reactivex rxjava images checkmark_onpng image https rawgithubcom wiki reactivex rxjava images checkmark_onpng tocompletionstage image https rawgithubcom wiki reactivex rxjava images checkmark_onpng image https rawgithubcom wiki reactivex rxjava images checkmark_onpng tocompletionstage t image https rawgithubcom wiki reactivex rxjava images checkmark_onpng image https rawgithubcom wiki reactivex rxjava images checkmark_onpng should it be implemented as optionalempty singleerror new nosuchelementexception no reason to implement always completablecomplete no value to map no value to emit thus it is better to ask the user for a completion value never empty no reason to implementrelated marbles image https rawgithubcom wiki reactivex rxjava images rx operators fromoptionalmpng image https rawgithubcom wiki reactivex rxjava images rx operators fromcompletionstagespng image https rawgithubcom wiki reactivex rxjava images rx operators fromcompletionstagecpng image https rawgithubcom wiki reactivex rxjava images rx operators mapoptionalmpng image https rawgithubcom wiki reactivex rxjava images rx operators mapoptionalspng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagempng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagemvpng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagespng image https rawgithubcom wiki reactivex rxjava images rx operators tocompletionstagecpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c eb b c bff e fedbde c b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up rxjava internal jdk completionstageconsumerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l nvbxbszxrpb tdgfnzunvbnn bwvylmphdme tivex rxjava internal jdk singlemapoptionaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l npbmdszu hce wdglvbmfslmphdme in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up xjava internal jdk maybefromcompletionstagejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l hewjlrnjvbunvbxbszxrpb tdgfnzs qyxzh ctivex rxjava internal jdk maybemapoptionaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l hewjltwfwt b aw uywwuamf yq internal jdk completablefromcompletionstagejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l nvbxbszxrhymxlrnjvbunvbxbszxrpb tdgfnzs qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c cd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6786,1,0,0,1,1,1,1,1,diamond operators in unit tests observable package hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal operators observable there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dba c d c d c a af dbsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme va internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxsdw pbi qyxzh a io reactivex rxjava subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy szxbsyxltdwjqzwn lmphdme ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcc qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme arrow_down internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme arrow_down a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq arrow_down ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq arrow_down rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dba ad https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6787,1,0,0,1,1,1,1,1,diamond operators in unit tests flowable package hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal operators flowable there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving
6788,1,0,0,1,1,1,1,1,diamond operators in tests hello in this pull request ive changed all ide marked explicit types with diamond operator affected packages is internal internal operators there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dba c d c d c a af dbsrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh ivex rxjava subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjzy jpymvycy tzxjpywxpemvku vic nyawjlci qyxzh perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme a internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvszxbsyxkuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dba fcf e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6789,1,1,0,1,1,1,1,1,diamond operators in tests small packages hello in this pull request ive changed all ide marked explicit types with diamond operator affected packages is in tests rootthere is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry javalangassertionerror expected but was at orgjunitassertfail assertjava this pr is part of issue resolving codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dba c d c d c a af dbsrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvqdwjsaxnolmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dba ee fa https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6791,1,0,0,1,0,1,1,1,add nonnull & safevarargs annotations validator this pr cleans up the main classes add missing nonnull annotations add missing safevarargs annotations add validator code that scans the sources to verify the annotations are present remove unnecessary suppresswarnings annotations fix a few type argumentsrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b c f e b edcd cfbb f d aa srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_down n java io reactivex rxjava core notificationjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll vdglmawnhdglvbi qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b c f dcda https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6797,1,0,0,1,0,1,1,1,java add observable operators cleanup add the following java operators to observable fromoptional fromcompletionstage fromstream firststage firstorerrorstage singestage singleorerrorstage laststage lastorerrorstage blockingstream mapoptional collect concatmapstream flatmapstream in addition some validators received reporting improvements such as using at so the ide can jump to the exact line of the issue consequently all local variable misnaming of unicastsubject up and unicastprocessor us have been fixed as wellrelated marbles image https rawgithubcom wiki reactivex rxjava images rx operators fromoptionalopng image https rawgithubcom wiki reactivex rxjava images rx operators fromcompletionstageopng image https rawgithubcom wiki reactivex rxjava images rx operators fromstreamopng image https rawgithubcom wiki reactivex rxjava images rx operators firststageopng image https rawgithubcom wiki reactivex rxjava images rx operators firstorerrorstageopng image https rawgithubcom wiki reactivex rxjava images rx operators singlestageopng image https rawgithubcom wiki reactivex rxjava images rx operators singleorerrorstageopng image https rawgithubcom wiki reactivex rxjava images rx operators laststageopng image https rawgithubcom wiki reactivex rxjava images rx operators lastorerrorstageopng image https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamopng image https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamoipng image https rawgithubcom wiki reactivex rxjava images rx operators mapoptionalopng image https rawgithubcom wiki reactivex rxjava images rx operators collectoropng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamopng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamopng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c d b b ef bf f d dd srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ a internal jdk observablefirststageobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvgaxjzdfn ywdlt jzzxj zxiuamf yq va internal jdk observablelaststageobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvmyxn u rhz vpynnlcnzlci qyxzh rxjava internal jdk observableflatmapstreamjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvgbgf twfwu ryzwftlmphdme ex rxjava internal jdk observablefromstreamjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvgcm tu ryzwftlmphdme x rxjava internal jdk observablemapoptionaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvnyxbpchrpb hbc qyxzh ivex rxjava internal jdk flowablefromstreamjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l zsb dhymxlrnjvbvn cmvhbs qyxzh arrow_down rxjava internal jdk observablestageobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvtdgfnzu ic vydmvylmphdme ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_up nal jdk observablecollectwithcollectorsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvdb xszwn v l aenvbgxly rvclnpbmdszs qyxzh internal jdk observablesinglestageobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvtaw nbgvtdgfnzu ic vydmvylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c b cc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6799,1,0,0,0,0,1,1,1,xprocessoroffer to throw npe immediately make offer throw a nullpointerexception immediately instead of turning it into an error signal in addition have multicastprocessoroffer throw an illegalstateexception if called when the processor is in fusion moderesolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d eb bad d aa e ad d b eba dsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme arrow_down reactivex rxjava processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl b ymxpc hqcm jzxnzb iuamf yq arrow_down activex rxjava processors multicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl bhrpy fzdfbyb nlc nvci qyxzh arrow_up nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme observable observablewindowsubscribeinterceptjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg u vic nyawjlsw zxjjzxb lmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d eb bd b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6800,1,0,0,0,0,0,1,0,add blockingforeach consumer int overload the underlying blockingiterable already supported the custom prefetch overload and this pr exposes it as a new blockingforeach overloadin addition the javadocs incorrectly stated blockingforeach operated in an unbounded in fashion it uses the usual stable prefetch with re request amountresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d eb bad d aa e ad d b eba dsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_up ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_up observable observablewindowsubscribeinterceptjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg u vic nyawjlsw zxjjzxb lmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr y vgdwxslmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxluhvibglzac qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d eb ef https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6801,1,0,0,0,0,1,1,1,add missing throwiffatal calls add missing exceptionsthrowiffatal calls in catch throwable blocks add validator that checks for the existence of these throwiffatal wraporthrow or fail calls fix autocloseabledisposable to use wraporthrow like the other disposable wrapper implementationsresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit bcd e c e c ff bbcf e b a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage ternal operators observable observablecollectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq sbgvjdc qyxzh arrow_down ternal schedulers scheduleddirectperiodictaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlzerpcmvjdfblcmlvzgljvgfzay qyxzh arrow_down nternal operators flowable flowablescalarxmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvty fsyxjytwfwlmphdme arrow_down nal operators observable observablescalarxmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu nhbgfywe hcc qyxzh arrow_down java internal schedulers instantperiodictaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl luc rhbnrqzxjpb rpy rhc suamf yq arrow_down s observable observablewindowboundaryselectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg qm bmrhcnltzwxly rvci qyxzh arrow_down ators flowable flowablewindowboundaryselectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvxaw kb dcb vuzgfyevnlbgvjdg ylmphdme arrow_down nternal operators observable observablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlumvwbgf lmphdme arrow_down operators observable observablecollectsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq sbgvjdfnpbmdszs qyxzh arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update bcd e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6805,1,0,0,0,0,1,1,0,java add flattenstreamasx to maybe single add maybeflattenstreamasflowable maybeflattenstreamasobservable singleflattenstreamasflowable singleflattenstreamasobservable related in addition adjust the validators to appreciate the new patterns marbles image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasflowablempng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasobservablempng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasflowablespng image https rawgithubcom wiki reactivex rxjava images rx operators flattenstreamasobservablespng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f e dde b aa c eaedbb daf srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down a internal jdk maybeflattenstreamasflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l hewjlrmxhdhrlbln cmvhbufzrmxvd fibguuamf yq internal jdk maybeflattenstreamasobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l hewjlrmxhdhrlbln cmvhbufzt jzzxj ywjszs qyxzh src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up internal jdk singleflattenstreamasflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l npbmdszuzsyxr zw tdhjlyw bc zsb dhymxllmphdme internal jdk singleflattenstreamasobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l npbmdszuzsyxr zw tdhjlyw bc ic vydmfibguuamf yq tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr y vgdwxslmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f e df cd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6814,1,0,0,1,0,1,1,1,remove fromfuture scheduler overloads those overloads were only applying subscribeon with no other benefitsresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c b dcaea ac d c a ebf b a srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme ivex rxjava subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjzy jpymvycy tzxjpywxpemvku vic nyawjlci qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme reactivex rxjava observers basetestconsumerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy vynnlcnzlcnmvqmfzzvrlc rdb zdw lci qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c b f f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6817,1,0,0,0,0,0,1,0,deleted functionsnaturalorder removes a duplication of the natural order comparatorresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e fa aa b d de aee e eaa c dsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvqdwjsaxnolmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e fa f b bc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6826,1,0,0,0,0,1,1,1,fix flowableflatmap not canceling the inner sources on outer error the outer onerror did not cancel the inner sources the observable variant works correctly but both received an unit test to verify the behavior x will be fixed in a separate prrelated codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c c cc d e d e e srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ internal operators flowable flowableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwlmphdme arrow_down tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcc qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq arrow_down a internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvszxbsyxkuamf yq arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c b d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6827,1,0,0,0,0,1,1,1,fix flowableflatmap not canceling the inner sources on outer error the outer onerror did not cancel the inner sources the observable variant works correctly but both received an unit test to verify the behaviorfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ea c accfdfaef a a dfacc ebsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x internal operators flowable flowableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hcc qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszunyzwf zs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrnjvbul zxjhymxllmphdme perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszu lcmdlv l afnpbmdszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlu dpdgnotwfwlmphdme ex internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlq jlyxrllmphdme arrow_down main java io reactivex subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc viamvjdhmvumvwbgf u viamvjdc qyxzh arrow_down perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ea c c caffb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6837,1,0,0,0,0,1,1,1,remove a pointless observableconcatmapiterable overload remove the concatmapiterable function int overload as there is no buffering involved with the operatorresolves
6838,1,0,0,1,0,1,1,1,rename to combinelatestarraydelayerror the operator missed a rename with x to match the combinelatestarray variantresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c fffe a c fd fb a a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh io reactivex rxjava subjects unicastsubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy vbmljyxn u viamvjdc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c f f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6839,0,0,0,0,0,1,0,0,enable javac parameter saving in class files related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c fffe a c fd fb a a srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr y vgdwxslmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme ternal operators observable observablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlr jvdxbces qyxzh reactivex rxjava processors replayprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlcgxhevbyb nlc nvci qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c f cd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6840,1,0,1,1,0,1,1,0,add nullability annotations to type arguments annotate type argument use with nonnull resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ae fa dfb e c f c add eb srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ o reactivex rxjava processors asyncprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl fzew juhjvy vzc ylmphdme arrow_down va io reactivex rxjava plugins rxjavapluginsjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wbhvnaw zl j smf yvbsdwdpbnmuamf yq arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_down reactivex rxjava processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl b ymxpc hqcm jzxnzb iuamf yq arrow_down eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme arrow_down reactivex rxjava processors replayprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlcgxhevbyb nlc nvci qyxzh arrow_down reactivex rxjava processors unicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl vuawnhc rqcm jzxnzb iuamf yq arrow_down main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down activex rxjava processors multicastprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl bhrpy fzdfbyb nlc nvci qyxzh arrow_up and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ae b fa https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6843,1,0,0,0,0,1,1,0,improve wording of operators reword sentences with modifies and instructs reword the source x to the current x reword a couple of other operator sentencesrelated resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fb dab d b fe a cf b dc dsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down java internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjlu luz xlt jzzxj zxiuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme ivex rxjava subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjzy jpymvycy tzxjpywxpemvku vic nyawjlci qyxzh ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fb dab e f c f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6843,1,0,0,0,0,1,1,0,improve wording of operators reword sentences with modifies and instructs reword the source x to the current x reword a couple of other operator sentencesrelated resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fb dab d b fe a cf b dc dsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down java internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjlu luz xlt jzzxj zxiuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme ivex rxjava subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjzy jpymvycy tzxjpywxpemvku vic nyawjlci qyxzh ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fb dab e f c f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6844,1,0,0,0,0,1,1,0,remove maybeonexceptionresumenext it was always very peculiar to let only checked exceptions resumedresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ed db da c c ab dde a faa dsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down va internal operators maybe maybeonerrornextjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvpbkvycm ytmv dc qyxzh arrow_down operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh java internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjlu luz xlt jzzxj zxiuamf yq eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ternal operators observable observablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlr jvdxbces qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ed a fa b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6847,1,0,0,0,0,1,1,0,simplify return sentences in flowable javadocs simplify the wording of return in javadocsresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fec c c ba d b efc e a bd dsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down o reactivex rxjava parallel parallelflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wyxjhbgxlbc qyxjhbgxlbezsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down java internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjlu luz xlt jzzxj zxiuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fec c bab cf https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6853,1,0,0,0,0,1,1,0,fix method argument naming across types make method argument naming consistent between the base reactive classes adjust some of the naming for allin addition the null check was missing from blockingmostrecent resolves the utility program has to be run manually to list the inconsistencies the remaining inconsistency is due to merge because its argument is sources for flowable observable but source for single maybe nested codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d b c a c f e aa b f b srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d b ed https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6856,1,0,0,0,0,0,1,0,rename singleequals to singlesequenceequal renamed singleequals to singlesequenceequal and renamed argument names for consistent namingresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c f f bd e d f csrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr y vgdwxslmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvtd l y hnyxauamf yq a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c f ce https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6857,1,0,0,1,0,0,1,0,wiki improve operator matrix with links and notes update the operatormatrixgenerator to add anchors and links to notes about why operators are not present in one or another classhttps githubcom reactivex rxjava wiki operator matrixsome operators are missing and will be added as part of resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c f f bd e d f csrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvt jzzxj ywjszunvbmnhde hcenvbxbszxrhymxllmphdme internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme a io reactivex rxjava subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy szxbsyxltdwjqzwn lmphdme ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c f a eb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6857,1,0,0,1,0,0,1,0,wiki improve operator matrix with links and notes update the operatormatrixgenerator to add anchors and links to notes about why operators are not present in one or another classhttps githubcom reactivex rxjava wiki operator matrixsome operators are missing and will be added as part of resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c f f bd e d f csrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvt jzzxj ywjszunvbmnhde hcenvbxbszxrhymxllmphdme internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme a io reactivex rxjava subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy szxbsyxltdwjqzwn lmphdme ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c f a eb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6860,1,0,0,0,0,1,1,0,add last missing throws tag to javadocs added the last missing throws tag to methods and one missing nonnull annotationi included a small program that will list javadocs without throws for future useresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e d c c c a f c f d d b srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e d c ae e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6862,1,0,0,0,0,0,1,0,add maybe single completable blockingsubscribe add the missing blockingsubscribe methods to maybe single and completable for symmetry with flowable and observable usually wed like to avoid blocking but now that project loom preview transparently turns latch based awaiting into suspension inside virtual threads they will act as free interop operators for exiting the reactive world into the continuation worldrelated marbles maybe image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockingsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockingsubscribecpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockingsubscribeccpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockingsubscribeccapng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockingsubscribeopng single image https rawgithubcom wiki reactivex rxjava images rx operators singleblockingsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators singleblockingsubscribecpng image https rawgithubcom wiki reactivex rxjava images rx operators singleblockingsubscribeccpng image https rawgithubcom wiki reactivex rxjava images rx operators singleblockingsubscribeopng completable image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeapng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeacpng image https rawgithubcom wiki reactivex rxjava images rx operators completableblockingsubscribeopng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f a d f d b e c d ad ff c bc fsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ava internal observers blockingmultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvqmxvy tpbmdndwx au ic vydmvylmphdme arrow_up src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up nal observers blockingdisposablemultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvqmxvy tpbmdeaxnwb nhymxltxvsdglpynnlcnzlci qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh java internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjlu luz xlt jzzxj zxiuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f a d ae b b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6864,1,0,0,1,0,1,1,0,adding delayerror to maybedelay resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f a d f d b e c d ad ff c bc fsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x rxjava internal operators maybe maybedelayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvezwxhes qyxzh arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr y vgdwxslmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f a d bc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6867,1,0,0,0,0,0,1,0,add onerrorcomplete to flowable observable and single add the onerrorcomplete and onerrorcomplete predicate operators to the remaining base classesalso created the missing marble for maybeonerrorcomplete related image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletefpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit da f aed a abf absrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up al operators flowable flowableonerrorcompletejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvpbkvycm yq tcgxldguuamf yq main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_up perators observable observableonerrorcompletejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlt fcnjvcknvbxbszxrllmphdme ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_up internal operators maybe maybeonerrorcompletejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvpbkvycm yq tcgxldguuamf yq arrow_down ternal operators single singleonerrorcompletejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszu urxjyb jdb wbgv zs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update da dbf a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6867,1,0,0,0,0,0,1,0,add onerrorcomplete to flowable observable and single add the onerrorcomplete and onerrorcomplete predicate operators to the remaining base classesalso created the missing marble for maybeonerrorcomplete related image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletefpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit da f aed a abf absrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up al operators flowable flowableonerrorcompletejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvpbkvycm yq tcgxldguuamf yq main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_up perators observable observableonerrorcompletejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlt fcnjvcknvbxbszxrllmphdme ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_up internal operators maybe maybeonerrorcompletejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvpbkvycm yq tcgxldguuamf yq arrow_down ternal operators single singleonerrorcompletejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszu urxjyb jdb wbgv zs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update da dbf a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6868,1,0,0,0,0,1,1,1,add completableonerrorresumewith this pr adds the missing completableonerrorresumewith present in the rest of the base classesalso marbles for maybeonerrorresumenext and maybeonerrorresumewith have been updatedrelated image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumenextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumewithpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ad b b e eeb c b b fbbac srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme al operators observable observablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg vgltzwquamf yq internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ad b ad a e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6868,1,0,0,0,0,1,1,1,add completableonerrorresumewith this pr adds the missing completableonerrorresumewith present in the rest of the base classesalso marbles for maybeonerrorresumenext and maybeonerrorresumewith have been updatedrelated image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumenextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumewithpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ad b b e eeb c b b fbbac srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme al operators observable observablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg vgltzwquamf yq internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ad b ad a e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6869,1,0,0,0,0,1,1,0,add single completable retryuntil marbles retryuntil was missing from single and completable added marble for maybe as wellrelated image https rawgithubcom wiki reactivex rxjava images rx operators completableretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryuntilpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a ec cde d bafd e a d asrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxluhvibglzac qyxzh ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvtdwjzy jpymvpbi qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvtd l y hnyxauamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a fab b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6869,1,0,0,0,0,1,1,0,add single completable retryuntil marbles retryuntil was missing from single and completable added marble for maybe as wellrelated image https rawgithubcom wiki reactivex rxjava images rx operators completableretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryuntilpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a ec cde d bafd e a d asrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxluhvibglzac qyxzh ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvtdwjzy jpymvpbi qyxzh internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvtd l y hnyxauamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a fab b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6870,1,0,0,0,0,0,1,0,add maybe single completable switchonnext & switchonnextdelayerror add the missing switchonnext and switchonnextdelayerror operators which are essentially delegated to the respective flowable switchmapx operators with identity mappingrelated image https rawgithubcom wiki reactivex rxjava images rx operators completableswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators completableswitchonnextdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators singleswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators singleswitchonnextdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchonnextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchonnextdelayerrorpng
6871,1,0,0,0,0,1,1,1,add maybedematerialize add the dematerialize operator to maybe to be in sync with the other classesrelated image https rawgithubcom wiki reactivex rxjava images rx operators maybedematerializepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ba c ccbba f d f a ab srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down internal operators maybe maybedematerializejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvezw hdgvyawfsaxpllmphdme src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ba f fb e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6873,1,0,0,1,0,1,1,1,add many fromx operators marbles add a cross section of from operators present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng fromaction https githubcom reactivex rxjava wiki operator matrixfromaction fromsingle operator f o m s c fromaction present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng notes present https rawgithubcom wiki reactivex rxjava images checkmark_onpng fromcompletable present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng notes absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng notes frommaybe present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng notes present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng fromobservable present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng notes present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng frompublisher present https rawgithubcom wiki reactivex rxjava images checkmark_onpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng fromrunnable present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng notes present https rawgithubcom wiki reactivex rxjava images checkmark_onpng fromsingle present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng notes present https rawgithubcom wiki reactivex rxjava images checkmark_onpng related image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromactionpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablebufferpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablelatestpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservabledroppng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablemissingpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromrunnablepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromactionpng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromrunnablepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators maybefrompublisherpng image https rawgithubcom wiki reactivex rxjava images rx operators maybefromobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators singlefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators singlefrommaybevpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ba c ccbba f d f a ab srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ xjava internal operators maybe maybetosinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvub npbmdszs qyxzh arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_down internal operators maybe maybefromcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgcm tq tcgxldgfibguuamf yq arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up operators completable completabletoobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvub ic vydmfibguuamf yq arrow_down l operators completable completablefromactionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvgcm tqwn aw ulmphdme arrow_up main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_up nternal operators flowable flowablefromactionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tqwn aw ulmphdme nal operators flowable flowablefromobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tt jzzxj ywjszs qyxzh arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_up and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ba f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6874,1,0,0,0,0,0,1,0,add timeinterval & timestamp to m s add timeinterval and timestamp operators overloads each to maybe and single related image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeintervalpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeintervalspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimestamppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimestampspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeintervalpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeintervalspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimestamppng image https rawgithubcom wiki reactivex rxjava images rx operators singletimestampspng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dacd f c d da ec dc ae c f srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up internal operators single singletimeintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszvrpbwvjbnrlcnzhbc qyxzh a internal operators maybe maybetimeintervaljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvuaw lsw zxj ywwuamf yq src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up in java io reactivex rxjava schedulers timedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zy hlzhvszxjzl rpbwvklmphdme arrow_down l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh java internal observers futuresingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjlu luz xlt jzzxj zxiuamf yq eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dacd f b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6875,1,0,0,0,0,0,1,0,add maybe completable tofuture add tofuture to maybe and completable related image https githubcom reactivex rxjava wiki images rx operators maybetofuturepng image https githubcom reactivex rxjava wiki images rx operators completabletofuturepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d b fd c dea fbbd d bab b cfde dsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh java internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl ryyw wb xpbmvty hlzhvszxiuamf yq perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6876,1,1,0,1,1,1,1,1,add singleoftype add oftype to single already available to the other non empty base typesrelated image https rawgithubcom wiki reactivex rxjava images rx operators singleoftypepng in addition diagrams for maybefilter and maybeoftype have been updated image https rawgithubcom wiki reactivex rxjava images rx operators maybefilterpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeoftypepng related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c f a b beeb b e dc bb aa bcd fsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c f a db https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6876,1,1,0,1,1,1,1,1,add singleoftype add oftype to single already available to the other non empty base typesrelated image https rawgithubcom wiki reactivex rxjava images rx operators singleoftypepng in addition diagrams for maybefilter and maybeoftype have been updated image https rawgithubcom wiki reactivex rxjava images rx operators maybefilterpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeoftypepng related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c f a b beeb b e dc bb aa bcd fsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c f a db https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6877,1,0,0,0,0,1,1,1,add doonlifecycle to maybe single & completable add the doonlifecycle operator to the remaining classesrelated image https rawgithubcom wiki reactivex rxjava images rx operators maybedoonlifecyclepng image https rawgithubcom wiki reactivex rxjava images rx operators singledoonlifecyclepng image https rawgithubcom wiki reactivex rxjava images rx operators completabledoonlifecyclepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit db bd bb fb cac a af b e b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up internal operators maybe maybedoonlifecyclejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymveb utglmzwn y xllmphdme internal operators single singledoonlifecyclejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszurvt mawzly ljbguuamf yq tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme operators maybe maybeflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh internal operators observable observablezipjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlwmlwlmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update db bd e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6879,1,0,0,1,0,1,1,0,add concatmapx operators aliases add the following operator aliases maybeconcatmapcompletable maybeconcatmapsingle singleconcatmapcompletable singleconcatmap singleconcatmapmaybe related image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatmapcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatmapsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatmapcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatmappng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatmapmaybepng in addition some missing or wrong maybe marbles have been fixed image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatmappng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapcompletable png image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapsingle png image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapsingleelementpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ef a bf e c daf b basrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvqdwjsaxnolmphdme internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ef f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6881,1,0,0,1,0,1,1,1,add various concatxdelayerror operators add the following concat kind of operators maybeconcatarrayeagerdelayerror maybeconcatdelayerror publisher int singleconcatarraydelayerror singleconcatarrayeagerdelayerror singleconcatdelayerror completableconcatarraydelayerror completableconcatdelayerror related image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatarrayeagerdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatdelayerrorpnpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatarraydelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatarrayeagerdelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatdelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcatdelayerrorpnpng image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatarraydelayerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatdelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatdelayerrorpnpng in addition the maybeconcatdelayerror publisher marble has been fixed image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatdelayerror ipng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit bd a a b b faa bab a a ae f srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr y vgdwxslmphdme ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme ivex rxjava subscribers serializedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjzy jpymvycy tzxjpywxpemvku vic nyawjlci qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update bd a d ad https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6882,1,0,0,0,0,0,1,0,add singlemergearray & mergearraydelayerror single was missing the mergearray and mergearraydelayerror operators already present in the other classesrelated image https rawgithubcom wiki reactivex rxjava images rx operators singlemergearraypng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergearraydelayerrorpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d a d b f ed c ed ee srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvqdwjsaxnolmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6884,1,0,0,0,0,1,1,0,add completablesequenceequal the operator was available in all other classesrelated image https rawgithubcom wiki reactivex rxjava images rx operators completablesequenceequalpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d a d b f ed c ed ee srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh ava internal operators parallel paralleljoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb lulmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update aa dc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6885,1,0,0,0,0,0,1,0,add missing startwith overloads add missing add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng startwith overloads source \ other f o m s c flowable present https rawgithubcom wiki reactivex rxjava images checkmark_onpng absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng observable absent https rawgithubcom wiki reactivex rxjava images checkmark_offpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng maybe add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng single add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng completable present https rawgithubcom wiki reactivex rxjava images checkmark_onpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng add https rawgithubcom wiki reactivex rxjava images checkmark_halfpng present https rawgithubcom wiki reactivex rxjava images checkmark_onpng related image https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators flowablestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators observablestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithppng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithopng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators maybestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithppng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithopng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithspng image https rawgithubcom wiki reactivex rxjava images rx operators singlestartwithcpng image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithmpng image https rawgithubcom wiki reactivex rxjava images rx operators completablestartwithspng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit c d a cb db d d a b c b asrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_up src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_up vex rxjava internal operators maybe maybeambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvbbwiuamf yq a io reactivex rxjava subjects singlesubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy taw nbgvtdwjqzwn lmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme a internal subscribers innerqueuedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zdwjzy jpymvycy jbm lclf zxvlzfn ynnjcmlizxiuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c d ca c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6886,1,0,0,0,0,1,1,0,add completableonerrorreturn item the operators were already available elsewhererelated image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorreturnpng image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorreturnitempng in addition the maybe variants have received updated marbles as well image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorreturnpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorreturnitempng related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f aa c ec e edea b srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down internal operators maybe maybeonerrorreturnjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvpbkvycm yumv dxjulmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up perators completable completableonerrorreturnjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvpbkvycm yumv dxjulmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f a a f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6886,1,0,0,0,0,1,1,0,add completableonerrorreturn item the operators were already available elsewhererelated image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorreturnpng image https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorreturnitempng in addition the maybe variants have received updated marbles as well image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorreturnpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorreturnitempng related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f aa c ec e edea b srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down internal operators maybe maybeonerrorreturnjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvpbkvycm yumv dxjulmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up perators completable completableonerrorreturnjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvpbkvycm yumv dxjulmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme rnal operators observable observableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlu dpdgnotwfwlmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f a a f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6887,1,0,0,1,0,1,1,1,add safesubscribe to maybe single & completable add the final missing method safesubscribe to maybe single & completable resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e ed f efeb d a aa aafd ef asrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up a internal observers safecompletableobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvu fmzunvbxbszxrhymxlt jzzxj zxiuamf yq rxjava internal observers safemaybeobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvu fmzu hewjlt jzzxj zxiuamf yq in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_up rxjava internal observers safesingleobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvu fmzvnpbmdszu ic vydmvylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e ed e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6888,1,0,0,0,0,1,1,0,use more appropriate operators when delegating to flowable ops many single and maybe operators delegate to flowable operators this pr makes sure they use the most appropriate ones since there are single and maybe specific operators on flowable for some time nowsome concatenating non delayed single operators now use the flowableconcatmapsingledelayerror functionsidentity false because an array or iterable of single s cant just throw anytime like a publisher s publisher could hence a delay error until boundary mode works the same but without the extra coordination of the more general publisher variantresolves completable didnt have any delegation required changing codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e ed f efeb d a aa aafd ef asrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nternal operators single singleinternalhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuludgvybmfssgvscgvylmphdme nal operators mixed observableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvt jzzxj ywjszunvbmnhde hcfnpbmdszs qyxzh arrow_down rators mixed flowableconcatmapsinglepublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvrmxvd fibgvdb jyxrnyxbtaw nbgvqdwjsaxnozxiuamf yq rators flowable flowableflatmapmaybepublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymvqdwjsaxnozxiuamf yq src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down ators flowable flowableflatmapsinglepublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xluhvibglzagvylmphdme rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up erators mixed flowableconcatmapmaybepublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvrmxvd fibgvdb jyxrnyxbnyxlizvb ymxpc hlci qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators flowable flowablescalarxmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvty fsyxjytwfwlmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e ed f c ef https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6890,1,1,1,0,0,0,1,0,fix marble dimensions add program that checks them resolves also added diagrams missing image https rawgithubcom wiki reactivex rxjava images rx operators switchmapmaybeopng image https rawgithubcom wiki reactivex rxjava images rx operators switchmapmaybedelayerroropng and fixed diagram wrongly exported image https rawgithubcom wiki reactivex rxjava images rx operators completableconcatarraydelayerrorpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit d e fe b ba a ef d c b asrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_down src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_down o reactivex rxjava parallel parallelflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wyxjhbgxlbc qyxjhbgxlbezsb dhymxllmphdme arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_down tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators flowable flowablescalarxmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvty fsyxjytwfwlmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update d e a e e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6891,1,0,0,0,0,1,1,0,swap maybeflatmapsingle and maybeflatmapsingleelement resolves dropped the old maybeflatmapsingle and replaced it with maybeflatmapsingleelement hmm for xflatmaptestmaybesingle if i replace flatmapsingle tosingle with tosingle flatmap then the test will pass the test checks if disposing while in the function the returned single never gets subscribed to and thus no error is signaled to the downstream or the global error handler put an ignore on it for now and ill look into the operator tomorrow codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b b fbf d fce bb de deaf f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down internal operators maybe maybeflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwu luz xllmphdme arrow_down tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh a io reactivex rxjava subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy szxbsyxltdwjqzwn lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b b ccc afb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6893,1,0,0,0,0,1,1,0,reenable xflatmaptestmaybesingle add missing single operators reenable the xflatmaptestmaybesingle and make sure all flatmap variants behave the same when the flow is cancelled disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at allresolves while adding the extra tests i noticed two flatmap variant is missing from single a combiner of the original and inner success item flatmap function bifunction a notification type mapper flatmap function function image https rawgithubcom wiki reactivex rxjava images rx operators singleflatmapcombinerpng image https rawgithubcom wiki reactivex rxjava images rx operators singleflatmapnotificationpng lastly the same combiner variant for maybe received a marble diagram too image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapcombinerpng related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f a da d cdfb ad e bdb ba bsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down internal operators maybe maybeflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwu luz xllmphdme arrow_down rnal operators maybe maybeflatmapnotificationjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwtm awzpy f aw ulmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up ernal operators single singleflatmappublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbqdwjsaxnozxiuamf yq arrow_down al operators single singleflatmapnotificationjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbob rpzmljyxrpb uamf yq rnal operators single singleflatmapbiselectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbcavnlbgvjdg ylmphdme ternal operators mixed maybeflatmapobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvtwf ymvgbgf twfwt jzzxj ywjszs qyxzh arrow_down nternal operators mixed maybeflatmappublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvtwf ymvgbgf twfwuhvibglzagvylmphdme arrow_down ernal operators mixed singleflatmapobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvu luz xlrmxhde hce ic vydmfibguuamf yq arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f a d cd dd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6893,1,0,0,0,0,1,1,0,reenable xflatmaptestmaybesingle add missing single operators reenable the xflatmaptestmaybesingle and make sure all flatmap variants behave the same when the flow is cancelled disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at allresolves while adding the extra tests i noticed two flatmap variant is missing from single a combiner of the original and inner success item flatmap function bifunction a notification type mapper flatmap function function image https rawgithubcom wiki reactivex rxjava images rx operators singleflatmapcombinerpng image https rawgithubcom wiki reactivex rxjava images rx operators singleflatmapnotificationpng lastly the same combiner variant for maybe received a marble diagram too image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapcombinerpng related codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f a da d cdfb ad e bdb ba bsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_down internal operators maybe maybeflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwu luz xllmphdme arrow_down rnal operators maybe maybeflatmapnotificationjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvgbgf twfwtm awzpy f aw ulmphdme arrow_down rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up ernal operators single singleflatmappublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbqdwjsaxnozxiuamf yq arrow_down al operators single singleflatmapnotificationjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbob rpzmljyxrpb uamf yq rnal operators single singleflatmapbiselectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbcavnlbgvjdg ylmphdme ternal operators mixed maybeflatmapobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvtwf ymvgbgf twfwt jzzxj ywjszs qyxzh arrow_down nternal operators mixed maybeflatmappublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvtwf ymvgbgf twfwuhvibglzagvylmphdme arrow_down ernal operators mixed singleflatmapobservablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvu luz xlrmxhde hce ic vydmfibguuamf yq arrow_down and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f a d cd dd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6897,1,0,0,0,0,0,1,0,add remaining maybe marbles resolves image https rawgithubcom wiki reactivex rxjava images rx operators maybeambwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockinggetpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeblockinggetvpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecachepng image https rawgithubcom wiki reactivex rxjava images rx operators maybecomposepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatwithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybecountpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedefaultifemptypng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelayppng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytbpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedelaytsbpng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoaftersuccesspng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoafterterminatepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedofinallypng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoondisposepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoonsubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators maybedoonterminatepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmappublisherpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeisemptypng image https rawgithubcom wiki reactivex rxjava images rx operators maybemergewithpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatnpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatuntilpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberepeatwhenpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetryfpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrygpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrynpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrynfpng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrypng image https rawgithubcom wiki reactivex rxjava images rx operators mayberetrywhenpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchifemptympng image https rawgithubcom wiki reactivex rxjava images rx operators maybeswitchifemptyspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetakeuntilmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetakeuntilppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutmmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutppng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeoutpmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttspng image https rawgithubcom wiki reactivex rxjava images rx operators maybetimeouttsmpng image https rawgithubcom wiki reactivex rxjava images rx operators maybetopng image https rawgithubcom wiki reactivex rxjava images rx operators maybetoflowablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybetoobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators maybetosinglepng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f a da d cdfb ad e bdb ba bsrcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme internal operators flowable flowablefromarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tqxjyyxkuamf yq ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme al operators observable observablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg vgltzwquamf yq ternal operators flowable flowablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvxaw kb duaw lzc qyxzh ternal operators observable observablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlr jvdxbces qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f a d a https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6899,1,0,0,0,0,0,1,0,add concateagerdelayerror across flowable observable maybe and single now have a concateagerdelayerror delegating to the appropriate concatmapeagerdelayerror operatorin addition maybe and single received an overload concateager iterable int to expose the maxconcurrency option already present in the rest of the typesnote that completableconcateagerdelayerror is essentially the same as mergedelayerror because there are no items to keep emitting in orderresolves the flowable and observable variant of concateager also received fresh marble diagrams related flowable image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcateageripng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcateagerinpng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcateagerppng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcateagerpnpng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcateagerdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcateagerdelayerrorinpng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcateagerdelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators flowableconcateagerdelayerrorpnpng observable image https rawgithubcom wiki reactivex rxjava images rx operators observableconcateageripng image https rawgithubcom wiki reactivex rxjava images rx operators observableconcateagerinpng image https rawgithubcom wiki reactivex rxjava images rx operators observableconcateageropng image https rawgithubcom wiki reactivex rxjava images rx operators observableconcateageronpng image https rawgithubcom wiki reactivex rxjava images rx operators observableconcateagerdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators observableconcateagerdelayerrorinpng image https rawgithubcom wiki reactivex rxjava images rx operators observableconcateagerdelayerroropng image https rawgithubcom wiki reactivex rxjava images rx operators observableconcateagerdelayerroronpng maybe image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerinpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerpnpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerdelayerrorinpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerdelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerdelayerrorpnpng single image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerinpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerpnpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorinpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorpnpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e bb b a c b a c c b fb f ba c fsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &tokenwtcc htjm &height &srcpr https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage arrow_down ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq arrow_up src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme arrow_up rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh arrow_up main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme arrow_up ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuzsyxrnyxbjdgvyywjszuzsb dhymxllmphdme operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e bb bfae https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6921,1,0,0,1,0,1,1,1,fix replay not resetting when the connection is disposed disposing a replay based connectable should reset the operator to its fresh state this was supposed to happen but the relevant code changes were not enabled the pr fixes this for both flowable and observable based implementationsthe publish based connectables work as intendedfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit dee fc b f a ee ba e efa &eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh a internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvszxbsyxkuamf yq perators observable observablemergewithsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrou luz xllmphdme ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcc qyxzh arrow_up internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme arrow_up operators flowable flowableconcatmapschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdb jyxrnyxbty hlzhvszxiuamf yq arrow_up and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update dee f dbb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6944,1,0,0,0,0,0,1,0,update image urls to non transparent version updated image urls to use non transparent ones as per resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a ae dc d b cd f b e b&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ in java io reactivex rxjava core completablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll nvbxbszxrhymxllmphdme main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme src main java io reactivex rxjava core maybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll hewjllmphdme ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq rc main java io reactivex rxjava core singlejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll npbmdszs qyxzh activex rxjava flowables connectableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy mbg ywjszxmvq ubmvjdgfibgvgbg ywjszs qyxzh operators flowable blockingflowablemostrecentjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvqmxvy tpbmdgbg ywjszu vc rszwnlbnquamf yq ernal operators flowable blockingflowablenextjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvqmxvy tpbmdgbg ywjszu lehquamf yq ators observable blockingobservablemostrecentjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs cbg ja luz ic vydmfibgvnb n umvjzw lmphdme l operators observable blockingobservablenextjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs cbg ja luz ic vydmfibgvozxh lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a ae bc https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks the new v images load in properly glad to help
6956,1,0,0,1,0,1,1,1,fix scheduled tasks fatal exception behavior fatal exceptions may be lost with scheduled direct & scheduled periodic direct tasks because futuretask simply treats them as exceptional outcomes for regular tasks scheduledrunnable https githubcom reactivex rxjava blob x src main java io reactivex rxjava internal schedulers scheduledrunnablejaval already avoids rethrowing fatal errors as it would go nowherethis pr adds this behavior to the direct runnable tasksresolves this will halt the application when stack overflow i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the scheduleperiodicallydirect should end this will halt the application when stack overflow i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the scheduleperiodicallydirect should endi am sorry i think i made a mistake when simplifies case the key point is when stackoverflowerror ocurrs calling error hander without throw may cause stack full again that is also why i selected a complex approach ill check it this will halt the application when stack overflow i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the scheduleperiodicallydirect should endhi akarnokd sorry to the above mistakepersonally i think this approach has some flaws this approach means well catch fatal exceptions instead of throwing it through the call stack but the functions on the call stack may need this exception to clean stop itself for example this change will make periodic tasks unable to stop at least on desktop or server test fail public void periodictaskshouldstoponerror throws exception { atomicinteger repeatcount new atomicinteger new computationscheduler scheduleperiodicallydirect new runnable { override public void run { repeatcountincrementandget if true { throw new outofmemoryerror } } } timeunitmilliseconds threadsleep assertequals repeatcountget } to solve the above problem we need to rethrow the exception after rxjavapluginsonerror or make rxjavapluginsonerror to throw after calling the uncaughtexceptionhandler of the thread this actullay makes some exceptions to be handled more than once and i think it will make things more and more complex as we solve those cases one by one if we are able to check exceptions in the future as mentioned and jdk has given us all we need exception handing in rxjava will be simpler and easier as we do elsewhere make rxjavapluginsonerror handle propagate the exception and continue the work or make rxjavapluginsonerror throws and exceptions go through the stack to do whatever clean stop needed and finally to the uncaughtexceptionhandler of the thread codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b e f be a a d c bccaa &eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core schedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll njagvkdwxlci qyxzh rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme java internal schedulers instantperiodictaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl luc rhbnrqzxjpb rpy rhc suamf yq ternal schedulers scheduleddirectperiodictaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlzerpcmvjdfblcmlvzgljvgfzay qyxzh java internal schedulers scheduleddirecttaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlzerpcmvjdfrhc suamf yq rxjava internal schedulers scheduledrunnablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlzfj bm hymxllmphdme tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b e bf https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments disposing the periodic task on error may be a little tricky workaround the periodic futuretask is canceled asynchronously until periodicdirecttasksetfuture is done this may cause the periodic task to run some more rounds before actually stop the following test almost cant success on my laptop test public void periodictaskshouldstoponerror throws interruptedexception { try { suppress log rxjavapluginsseterrorhandler e {} countdownlatch latch new countdownlatch atomicinteger assertcount new atomicinteger for int i i yes task wrapper behavior should be consistent acrosswould you like to do this in this pr or later great that fixed all corner cases i could seebut i wonder whether calling rxjavapluginsonerror ex calling uncaught exception handler in the middle of exception throw chain is good and intuitional a little tricky as i seeif youd have a look on the original pr it requires no more change than this one handling future related erros in one place and not calling uncaught exception handler in the middle of exception throw chain it should pass all tests in this pr as well without modification
6960,1,0,0,0,0,1,1,1,fix observableflatmap with maxconcurrency hangs just a backport to x of the fix for the scalar queue max concurrency issue already fixed for x in the code for the fix has been added and also the test for itin addition as was also done for the corresponding test for flowableflatmap has been addedresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit ca c ee c f f c a &eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxauamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsumvkdwnlrnvsbc qyxzh perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvzglzcg zywjszxmvtglzdenvbxbvc l zurpc bvc fibguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl ic vydmfibguvt jzzxj ywjszuzsyxrnyxbnyxlizs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme ivex internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl hewjll hewjltwvyz vbcnjhes qyxzh operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq perators single singleflatmapiterableflowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl npbmdszs taw nbgvgbgf twfwsxrlcmfibgvgbg ywjszs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl bhcmfsbgvsl bhcmfsbgvsu ydgvksm pbi qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update ca c fe b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6969,1,0,0,1,0,1,1,1,allow setting the drift tolerance timeunit via system property adds the new system property rx schedulerdrift tolerance unit to allow specifying a more fine grained tolerance amountresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit fbee a c c db cd de f &eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core schedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll njagvkdwxlci qyxzh nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr y vgdwxslmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme ternal operators flowable flowablesubscribeonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvtdwjzy jpymvpbi qyxzh java internal operators flowable flowablezipjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvaaxauamf yq internal operators flowable flowablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvhcm cej lmphdme a io reactivex rxjava subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy szxbsyxltdwjqzwn lmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update fbee a ac e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
6996,1,0,0,1,1,1,1,1,suppress undeliverableexception handling in tests i used a junit testrule to suppress handling of undeliverableexception for test methods annotated with suppressundeliverable this approach is coarser than the suggested approach it suppresses the handling of all undeliverableexceptions for the entire annotated test method i thought this approach was clean but i can switch to the suggested approach if preferredi added suppressundeliverable to most tests that were logging undeliverableexceptions with the test method in the stack trace this may be more suppression than was required so just let me knowfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit f be eb c d a f a e &eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme internal operators flowable flowableswitchmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvtd l y hnyxauamf yq a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq ava internal operators maybe maybemergearrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvnzxjnzufycmf lmphdme a internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvszxbsyxkuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f be https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks
7028,1,0,0,0,0,1,1,1,allow mbe in flowablegroupbytestissue runpart noevict issue https githubcom reactivex rxjava blob acac cdb d b ac bb afc bc ec fe src test java io reactivex rxjava internal operators flowable flowablegroupbytestjaval l the above test can probabilistically throw an exception thus https githubcom reactivex rxjava blob acac cdb d b ac bb afc bc ec fe src test java io reactivex rxjava internal operators flowable flowablegroupbytestjaval the above assertion would be invalid i have removed the invalid assertionfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b d c a c e a d dfbd f&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh a internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvszxbsyxkuamf yq ternal operators observable observableflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcc qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq operators flowable flowableconcatmapschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdb jyxrnyxbty hlzhvszxiuamf yq reactivex rxjava observers basetestconsumerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy vynnlcnzlcnmvqmfzzvrlc rdb zdw lci qyxzh operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b e bf https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7033,1,0,0,0,0,0,1,0,{flowableobservable}collect collector contravariant on t added super twice would resolve compilation errors task compilejava home travis build reactivex rxjava src main java io reactivex rxjava core flowablejava error cannot infer type arguments for flowablecollectwithcollectorsingle return rxjavapluginsonassembly new flowablecollectwithcollectorsingle this collector ^ reason inferred type does not conform to equality constraint s inferred cap equality constraints s cap t where t is a type variable t extends object declared in class flowable where cap is a fresh type variable cap extends object super t from capture of super t home travis build reactivex rxjava src main java io reactivex rxjava core observablejava error cannot infer type arguments for observablecollectwithcollectorsingle return rxjavapluginsonassembly new observablecollectwithcollectorsingle this collector ^ reason inferred type does not conform to equality constraint s inferred cap equality constraints s cap t where t is a type variable t extends object declared in class observable where cap is a fresh type variable cap extends object super t from capture of super t errors hehe i thought i would get away with not even compiling the sources codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit e c e dacac b a f c bf bbaeab&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq a internal jdk flowablecollectwithcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l zsb dhymxlq sbgvjdfdpdghdb xszwn b iuamf yq ernal jdk flowablecollectwithcollectorsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l zsb dhymxlq sbgvjdfdpdghdb xszwn b jtaw nbguuamf yq internal jdk observablecollectwithcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvdb xszwn v l aenvbgxly rvci qyxzh nal jdk observablecollectwithcollectorsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l ic vydmfibgvdb xszwn v l aenvbgxly rvclnpbmdszs qyxzh tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme a internal subscribers innerqueuedsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zdwjzy jpymvycy jbm lclf zxvlzfn ynnjcmlizxiuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e c e e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7040,1,0,0,0,0,1,1,1,fix map conditional chain causing npe fix the case when an async fused filter map filter chain does not handle the null indicator in its conditional path inside map fixes ❤️ wow so happy with the turnaround on this codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit be a e fbe b c b c f caf d&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ java internal operators flowable flowablemapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvnyxauamf yq tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme ctivex rxjava internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc dglsl f zxvlrhjhaw izwxwzxiuamf yq eactivex rxjava processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl jlagf aw yuhjvy vzc ylmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme rnal operators observable observableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlt jzzxj zu ulmphdme ernal operators flowable flowablefromiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tsxrlcmfibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update be a c https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7049,1,0,0,0,0,1,1,1,fix observablewindow size skip overlap dispose behavior disposing the main output of the observablewindow operator did not properly propagate the dispose call under certain circumstances such as no current active window or the window s were abandoned immediatelyfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit a fcaf bcde b ec b bfd cbf b beb c&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxluhvibglzac qyxzh a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh ternal operators observable observablegroupbyjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlr jvdxbces qyxzh operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a fcaf bf d https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7080,1,0,0,0,0,0,1,0,change a method name to make consistent with pr thank you for contributing to rxjava before pressing the create pull request button please consider the following points x please give a description about what and why you are contributing even if its trivialin a method name flowablezipiterableerror is changed to fail but its similar class observablezipiterable was not changedi changed it for consistency x please include the issue list number s or other pr numbers in the description if you are contributing in response to thosethis pr is related to please include a reasonable set of unit tests if you contribute new code or change an existing one if you contribute an operator if applicable please make sure you have tests for working with an empty just range of values as well as an error source with and or without backpressure and see if unsubscription cancellation propagates correctlythis change will not affect external behavior codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc into x https codecovio gh reactivex rxjava commit b b fdcefeca ed e c c bd f eeldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ al operators observable observablezipiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlwmlwsxrlcmfibguuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh va io reactivex rxjava subjects maybesubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy nyxlizvn ymply quamf yq internal disposables listcompositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc kaxnwb nhymxlcy maxn q tcg zaxrlrglzcg zywjszs qyxzh tivex rxjava disposables compositedisposablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy kaxnwb nhymxlcy db wb npdgveaxnwb nhymxllmphdme internal operators flowable flowablefromarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgcm tqxjyyxkuamf yq java internal operators flowable flowablezipjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvaaxauamf yq a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq operators observable observablemergewithmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxltwvyz vxaxrotwf ymuuamf yq a internal operators flowable flowablereplayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvszxbsyxkuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b d fb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7126,1,0,0,0,0,1,1,1,improve error messages in the test consumers this pr improves the error messages reported in the testobserver and testsubscriber assertvalue predicate now shows the value that didnt pass the predicate assertvalueat index t if the index is out of range the message includes the valid range the message now includes the index argument where the failure happened assertvalueat index predicate if the index is out of range the message includes the valid range shows the value at index that didnt pass the predicate the message now includes the index argument where the failure happened asserterror predicate is now worded to indicate the exception did not pass the predicatein addition the verification tests for the error messages were not actually testing the error message with assertthrows and have been updatedresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc ceb f into x https codecovio gh reactivex rxjava commit c a f f ad dd b e eldesc c a will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ reactivex rxjava observers basetestconsumerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy vynnlcnzlcnmvqmfzzvrlc rdb zdw lci qyxzh tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme x rxjava internal operators single singleambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszuftyi qyxzh xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh vex rxjava internal operators maybe maybeambjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvbbwiuamf yq nternal operators parallel parallelreducefulljava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr y vgdwxslmphdme nternal operators observable observablewindowjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlv luzg lmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme operators observable observablecombinelatestjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq tymluzuxhdgvzdc qyxzh a io reactivex rxjava subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy szxbsyxltdwjqzwn lmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c a ceb f https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7144,1,0,0,0,0,0,1,0,update marbles of amb ambarray and ambwith update the marble diagrams in flowable and observable indicating cancellation of the non winnersresolves image https rawgithubcom wiki reactivex rxjava images rx operators flowableambpng image https rawgithubcom wiki reactivex rxjava images rx operators flowableambarraypng image https rawgithubcom wiki reactivex rxjava images rx operators flowableambwithpng image https rawgithubcom wiki reactivex rxjava images rx operators observableambpng image https rawgithubcom wiki reactivex rxjava images rx operators observableambarraypng image https rawgithubcom wiki reactivex rxjava images rx operators observableambwithpng codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc f e into x https codecovio gh reactivex rxjava commit b c b c a b c ae bf e eldesc b c will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core flowablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll zsb dhymxllmphdme ain java io reactivex rxjava core observablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll ic vydmfibguuamf yq ors flowable flowableonbackpressurereducewithjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvpbkjhy twcmvzc vyzvjlzhvjzvdpdgguamf yq tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh a io reactivex rxjava subjects singlesubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy taw nbgvtdwjqzwn lmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b c f e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7163,1,0,0,0,0,1,1,1,testscheduler option to use onschedule hook the testscheduler is a bit inconsistent regarding the use of rxjavapluginsonschedule it extends scheduler so the scheduledirect methods do invoke the hook whereas the workers schedule methods dontthis pr adds a constructor flag to enable the use of the hook in the workers schedule methods as well this addition should avoid issues with existing tests not expecting the hook to be invoked all of a suddenresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc e bd into x https codecovio gh reactivex rxjava commit e e c e f f deldesc e will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ va io reactivex rxjava schedulers schedulersjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zy hlzhvszxjzl njagvkdwxlcnmuamf yq io reactivex rxjava schedulers testschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zy hlzhvszxjzl rlc rty hlzhvszxiuamf yq erators completable completableconcatiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvdb jyxrjdgvyywjszs qyxzh java internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl ryyw wb xpbmvty hlzhvszxiuamf yq operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme a internal operators flowable flowablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdcmvhdguuamf yq ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh operators flowable flowableconcatmapschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdb jyxrnyxbty hlzhvszxiuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e e bd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7164,1,0,0,0,0,0,1,0,updating documentation for scheduleactual method remove unnecessary sentence from newthreadworkerscheduleactual resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc f cb fe into x https codecovio gh reactivex rxjava commit e e c e f f deldesc e will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ x rxjava internal schedulers newthreadworkerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl ld rocmvhzfdvcmtlci qyxzh nternal operators observable observablecreatejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlq jlyxrllmphdme xjava internal observers futuremultiobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vynnlcnzlcnmvrnv dxjltxvsdglpynnlcnzlci qyxzh rnal operators flowable flowableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwu luz xllmphdme nternal operators parallel parallelsortedjoinjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb j zwrkb lulmphdme va internal operators parallel parallelrunonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxsdw pbi qyxzh internal operators flowable flowablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvqdwjsaxnolmphdme a io reactivex rxjava subjects replaysubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy szxbsyxltdwjqzwn lmphdme operators flowable flowableconcatmapschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvdb jyxrnyxbty hlzhvszxiuamf yq ternal operators flowable flowablewindowtimedjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvxaw kb duaw lzc qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e f cb fe https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments akarnokd thanks for review 👍 ready to merge 😄
7165,1,1,0,1,1,1,1,1,add fusion support to concatmap{maybesinglecompletable} this pr adds front fusion support to flowableconcatmapcompletable flowableconcatmapmaybe flowableconcatmapsingle observableconcatmapcompletable observableconcatmapmaybe observableconcatmapsingle the operators have been tidied up by factoring out common code pathsin addition the deferredscalarsubscription s fusion emission had to be fixed in async fusion mode onnext null is generally expected from the upstream but deferredscalarsubscription sent the value itself now it correctly sends null deferredscalardisposable already did this correctly resolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc d fb into x https codecovio gh reactivex rxjava commit e e c e f f deldesc e will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ternal operators mixed concatmapxmainobserverjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvq uy f twfwwe haw pynnlcnzlci qyxzh rnal operators mixed concatmapxmainsubscriberjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvq uy f twfwwe haw tdwjzy jpymvylmphdme operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvrmxvd fibgvdb jyxrnyxbdb wbgv ywjszs qyxzh ternal operators mixed flowableconcatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvrmxvd fibgvdb jyxrnyxbnyxlizs qyxzh ernal operators mixed flowableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvrmxvd fibgvdb jyxrnyxbtaw nbguuamf yq perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvt jzzxj ywjszunvbmnhde hcenvbxbszxrhymxllmphdme rnal operators mixed observableconcatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvt jzzxj ywjszunvbmnhde hce hewjllmphdme nal operators mixed observableconcatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwl zwqvt jzzxj ywjszunvbmnhde hcfnpbmdszs qyxzh rnal subscriptions deferredscalarsubscriptionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zdwjzy jpchrpb zl rlzmvycmvku nhbgfyu vic nyaxb aw ulmphdme tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update e d fb https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7170,1,0,0,1,0,1,1,1,introduce property rx scheduleruse otime fixes akarnokd i had to create a new schedulertest class because on the x branch the package did not match the package of scheduler therefore i could not access the field package private codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc c d e into x https codecovio gh reactivex rxjava commit f aed fd d edf c c d dc c eldesc f aed will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex schedulers schedulersjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvc nozwr bgvycy ty hlzhvszxjzlmphdme src main java io reactivex schedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvu nozwr bgvylmphdme tivex internal schedulers trampolineschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvc nozwr bgvycy ucmftcg saw lu nozwr bgvylmphdme ava io reactivex processors behaviorprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvchjvy vzc ycy czwhhdmlvclbyb nlc nvci qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlrmxhde hce hewjllmphdme a io reactivex internal util queuedrainhelperjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvdxrpbc rdwv zuryywlusgvscgvylmphdme perators mixed observableswitchmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvtd l y hnyxbdb wbgv ywjszs qyxzh operators mixed flowableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl zsb dhymxlq uy f twfwq tcgxldgfibguuamf yq internal operators flowable flowableobserveonjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl zsb dhymxll zsb dhymxlt jzzxj zu ulmphdme perators mixed observableconcatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvaw zxjuywwvb blcmf b jzl pegvkl ic vydmfibgvdb jyxrnyxbdb wbgv ywjszs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update f aed c d e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7191,1,0,0,1,0,1,1,0,add onsubscribe hook to parallelflowable operators parallel operators were missing an rxjavapluginsonsubscribe hookresolves codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc e ef into x https codecovio gh reactivex rxjava commit abecb aa dbeffa e d b ff d fbdebbeldesc abecb a will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ main java io reactivex rxjava core schedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll njagvkdwxlci qyxzh internal operators parallel parallelcollectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb xszwn lmphdme internal operators parallel parallelconcatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb jyxrnyxauamf yq ternal operators parallel paralleldoonnexttryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxeb utmv dfryes qyxzh a internal operators parallel parallelfilterjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx zxiuamf yq internal operators parallel parallelfiltertryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx zxjucnkuamf yq internal operators parallel parallelflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf twfwlmphdme al operators parallel parallelflatmapiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf twfwsxrlcmfibguuamf yq internal operators parallel parallelfromarrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgcm tqxjyyxkuamf yq rnal operators parallel parallelfrompublisherjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgcm tuhvibglzagvylmphdme and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update abecb ada db https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7196,1,0,0,0,0,0,1,0,allow singlezip and maybezip result to be garbage collected resolves akarnokd sorry hit re review accidentally see_no_evil codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc bcca e into x https codecovio gh reactivex rxjava commit b b b c b a bea ee a eldesc b b b will increase coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ ava internal operators single singleziparrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvc luz xll npbmdszvppcefycmf lmphdme xjava internal operators maybe maybeziparrayjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvbwf ymuvtwf ymvaaxbbcnjhes qyxzh main java io reactivex rxjava core schedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy jb jll njagvkdwxlci qyxzh internal operators parallel parallelcollectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb xszwn lmphdme internal operators parallel parallelconcatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb jyxrnyxauamf yq ternal operators parallel paralleldoonnexttryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxeb utmv dfryes qyxzh a internal operators parallel parallelfilterjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx zxiuamf yq internal operators parallel parallelfiltertryjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx zxjucnkuamf yq internal operators parallel parallelflatmapjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf twfwlmphdme al operators parallel parallelflatmapiterablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf twfwsxrlcmfibguuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update b b b cd https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7203,1,0,0,0,0,1,1,1,fix schedulersfrom to honor interruptibleworker across methods the direct scheduling methods of the executorscheduler created via schedulersfrom executor boolean did not fully honor the interruptibleworker settingsfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc e af e into x https codecovio gh reactivex rxjava commit a e d e f aec fbf be d edb beldesc a e d will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ xjava internal schedulers abstractdirecttaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl fic ryywn rglyzwn vgfzay qyxzh rxjava internal schedulers executorschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl v zwn dg yu nozwr bgvylmphdme x rxjava internal schedulers newthreadworkerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl ld rocmvhzfdvcmtlci qyxzh ternal schedulers scheduleddirectperiodictaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlzerpcmvjdfblcmlvzgljvgfzay qyxzh java internal schedulers scheduleddirecttaskjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl njagvkdwxlzerpcmvjdfrhc suamf yq x rxjava internal schedulers singleschedulerjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc zy hlzhvszxjzl npbmdszvnjagvkdwxlci qyxzh tivex rxjava internal jdk parallelcollectorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc qzgs l bhcmfsbgvsq sbgvjdg ylmphdme operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq reactivex rxjava processors publishprocessorjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy wcm jzxnzb jzl b ymxpc hqcm jzxnzb iuamf yq and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update a e d ac b https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
7212,1,0,0,0,0,0,1,0,compositeexceptionprintstacktrace to write directly into printstream printwriter i dont remember why the stacktrace it wasnt printed directly via the printstream printwriter no reason to aggregate the entire string outputfixes codecov https codecovio gh reactivex rxjava pull srcpr&elh report merging https codecovio gh reactivex rxjava pull srcpr&eldesc e into x https codecovio gh reactivex rxjava commit c ca d a aa c e e b eeldesc c ca will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh reactivex rxjava pull graphs treesvgwidth &height &srcpr&tokenwtcc htjm https codecovio gh reactivex rxjava pull srcpr&eltree diff coverage diff x coverage complexity files lines branches hits misses partials impacted files https codecovio gh reactivex rxjava pull srcpr&eltree coverage δ complexity δ activex rxjava exceptions compositeexceptionjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy legnlchrpb zl nvbxbvc l zuv y vwdglvbi qyxzh operators flowable flowableblockingsubscribejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvcbg ja luz n ynnjcmlizs qyxzh l operators observable observableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hce hewjllmphdme a io reactivex rxjava subjects singlesubjectjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy zdwjqzwn cy taw nbgvtdwjqzwn lmphdme ternal operators observable observablepublishjava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxluhvibglzac qyxzh operators observable observableflatmapsinglejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcfnpbmdszs qyxzh ernal operators flowable flowableflatmapmaybejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvzmxvd fibguvrmxvd fibgvgbgf twfwtwf ymuuamf yq vable observableflatmapcompletablecompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcenvbxbszxrhymxlq tcgxldgfibguuamf yq ators observable observableflatmapcompletablejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvb jzzxj ywjszs pynnlcnzhymxlrmxhde hcenvbxbszxrhymxllmphdme ternal operators completable completablemergejava https codecovio gh reactivex rxjava pull diffsrcpr&eltreediff c jjl haw vamf ys pby yzwfjdgl zxgvcnhqyxzhmy pbnrlcm hbc vcgvyyxrvcnmvy tcgxldgfibguvq tcgxldgfibgvnzxjnzs qyxzh and more https codecovio gh reactivex rxjava pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh reactivex rxjava pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh reactivex rxjava pull srcpr&elfooter last update c ca e https codecovio gh reactivex rxjava pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
