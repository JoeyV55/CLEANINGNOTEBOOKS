prNumber,Util,NLP,APM,Network,DB,Interpreter,Logging,DataStructure,i18n,DevOps,Logic,Microservices,Test,Search,IO,UI,Parser,Security,App,corpus
11,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,bugfix for bug "#880 pubmed import broken" found bug: pubmed/medline plain format recognized as ris formatprovided solution:    - modified ris importfilter now ris format is identified by looking for the "ty" tag (it is a mandatory tag in ris format and it is not conflictual with other filters)    - added new importfilter "medlineplain" this import filter parses medline files in plain format (not xml) the import filter has been produced referring to the official medline documentation (http://wwwnlmnihgov/bsd/mms/medlineelementshtml)    - updated the netsfjabrefcore pluginxml file in order to include the newly added medlineplain import filter  
137,1,0,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,unify and simplify gui actions - using lambdas for the simpler actions- some code cleanup- extract string commands as string constants to actionsjava and use the constants in jabrefframe basepanel and rightclickmenu- use the constants already defined in keybinds to get keystrokes for the actions (in jabrefframe basepanel entryeditor and rightclickmenu)- 8e3ad9d: remove quickfix for [sfnet bug #1277](https://sourceforgenet/p/jabref/bugs/1277/) and implement feature properly: instead of deactivating "show/hide toolbar" when no database is open the action has been move to jabrefframe and works now even if no database is opensee also #136  i propose to merge the current status into master the changes described above cover the changes possible without restructuring the whole action architecture in the gui || lgtm :+1:  || ah answered just here: https://githubcom/matthiasgeiger/jabref/commit/8e3ad9d9804be70cf47f6e20191efcaae2ddfe23#commitcomment-13044544 ||
143,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,1,0,0,1,fix sf bug #1285 restores the cursor resp "caret" position when a field is store during editingthis fixes [sfnet bug #1285](http://sourceforgenet/p/jabref/bugs/1285/)to be done: - backport to dev_211- ask for confirmation on sfnet and close the issue there why does it lose focus anyway? this makes no sense to me saving should be a background process triggered by a key event || i think a backport to dev_211 is not necessary@stefan-kolb i agree very strange that the focus is changed ||  debugging this code is hell! :scream:the new fix fixes the problem where it is caused: method `updatefield` in `entryeditortab` re-sets the textfield which causes a loss of the current caret position || this looks way better and easier to maintain :blush: ||
175,1,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,increase saving speed intended to fix #122 this pr turned into a major api change it replaces `string[]` in the return types of `bibtexentrytype` with `list<string>` this allows to return immutable lists instead of mutable arrays and improves the stability of the program additionally the rewrite allowed to replace a lot of duplicate object creation with instance variableswith respect to #122 the immutability of the new lists removes the necessity to create defensive copies and therefore avoids a lot of cloning are there further improvements to be made? otherwise this pr is ready to merge ||
187,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,[wip] fix linebreaking evaluating the usage and problems of #114what is fieldcontentparser really doing? what is jabref style formatting? the remaining code of `filecontentparserformat` is a complete mess of one-off hacks i am very much for deleting it and rewriting the parsing logic to just remove newlines for non-multiline fields and ignore tabs or spaces completely if we document that with tests at least we know what the code is doing  || 859274e54af0948108ff16fa697dabb595768c12 replaces the weird code in `fieldcontentparser` with a single (and simple) regex now the tests pass and as far as i can tell #114 and #186 are fixed could someone else please double check? (note: parsing is only done when loading the file so if you add faulty text to a field you can save it as such on restart the errors should be fixed by the parser) if something is not quite right please add the faulty behavior as a test! || thanks @stefan-kolb! the "file" field is now ignored from parsing || ok i think we are good to go you can also close all other mentioned issues for now! || works great here :+1:  || 
204,1,0,0,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,added pushing citations to texmaker implements sourceforge feature requests #318 and #582 looks good minor comments above the abstract class `abstractpushtoapplication` could be left as future work :smiley: || thanksi agree there are changes to the other pushtoxxx classes in the formbuilder pull request so i would prefer to base the `abstractpushtoapplication` on the unified source :-) (especially with my still improvable git wizardry) || ok i let this go through we will work on https://githubcom/jabref/jabref/pull/205 and possibly finally with another pr ||
219,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,ieee journal abbreviations why?- see #173 what is does:- bugfix: correct abbreviations are loaded when storing preferences through the advanced tab- ieee abbreviations are either plain (text) or in latex (code) form for each of them a separate file exist now the config option `use_ieee` loads the latex one if it is true and the plain one otherwise  
287,1,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,doaj search search for directory of open access journals quite functional but the remaining things should (probably) be done- [x] ~~help page~~- [x] decide on where the bibjsonconverter class should be positioned (input?)- [x] more fields? ~~issn?~~- [x] ~~better/more error checking~~- [x] ~~handle search results with more than 100 entries properly~~- [x] ~~fill empty methods in doajfetcher~~- [x] ~~update status bar~~- [x] add test for bibjsonconverter- [x] ~~enable stopping search~~implements what is discussed in #208 i think im done there :-) || looks good to me  || one minor thing: the current title is "doaj (directory of open source journals)" which is much longer than the rest of the fetcher titles this introduces horizontal scrollbars in the fetcher sidebar when using the default width:![doaj-screenshot](https://cloudgithubusercontentcom/assets/676652/11044339/8ff615a2-8721-11e5-9a67-f2b1ca610747png)apart from this "ready to go" from my side too || there is no such property like [text-overflow](http://wwww3schoolscom/cssref/css3_pr_text-overflowasp) in swing is it? :star2:  || i think java actually does snip too long texts - if the component has a fixed size so this does not help hereill merge the current state but a potential improvement would be to define tooltips for the combobox to show some hints what the various abbreviations actually mean || 
330,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,fix #328: added more and better information with unsaved database ![capturedialog](https://cloudgithubusercontentcom/assets/8114497/11130895/e1dd1e66-8987-11e5-85f3-e268a193c68epng)(in this case it was a new database otherwise the full path is shown) @oscargus tooltip for screenshots: [grabndrop](http://wwwscyvde/gnd/) ||
370,1,0,0,0,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0,add compatibility check for utf8 this pr attempts to fix #367we have a bit of a problem `utf8` came from these lines``` java        try (inputstreamreader reader  openfile(filetoopen suppliedencoding fallbackencoding)) {            bibtexparser bp  new bibtexparser(reader)            parserresult pr  bpparse()            prsetencoding(readergetencoding())```it is set in [this method call](https://docsoraclecom/javase/8/docs/api/java/io/inputstreamreaderhtml#getencoding--) thats the java api the `inputstreamreader` says that the proper name of the encoding is `utf8` my solution is an ugly compatibility hack in which we just insert the `-` manually ugly but works what do you think? what about replacing all string representation of encodings by [`charset`](https://docsoraclecom/javase/8/docs/api/java/nio/charset/charsethtml)? then on export `getencodingname()` returns the correct description "utf-8" || sounds like a good idea! we should give it a try || @tobiasdiez great advice! `charset` already implements the correct encoding name translation all we have to do is through it into `charset` and read it our again and we can skip the hack:``` javaprsetencoding(charsetforname(readergetencoding())name())``` || please merge master: we did a mayor overhaul of the opendatabaseaction: deleted code etc  || @lenhard glad this was helpful i think the code would even further improve if the parserresult (and maybe some other classes) doesnt hold the encoding as a string but as a `charset` ie `public charset getencoding()` and similarly for `setencoding` || @koppor done!@tobiasdiez sure but i think this should be part of a new pr since this pr just attempts to fix one particular issue || 
418,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,proxy authentication support (feature #388) this pull request enables support for proxy authentication via command line arguments (`-d`) and jabref preferences (network tab) btw: the tests in `netsfjabreflogicfetcher` and the `urldownloadtest` still fails because the authenticator is not initialized in unit tests || why is the codecov/project check marked as failed but shows passed on details? || is marked as fail as you added code which is not covered by a junit test reducing code coverage but we do not have a gui strategy yet and you added mostly gui code hence no problem there  || i forgot to create a special branch for this pr hmmm || this is not a big problem - as long as you do not start working on another issue in your master branch :wink: || hmm if i change the proxy settings a restart is required || we have other settings which upon change indicate to the user that jabref has to be restarted for the settings to be applied see the remote preferences under advancedtab maybe reuse the code from there  || hmm looking for config changes in six values looks quite ugly with `if` conditions i can create a hashmap or stringbuilder out of these values and later on just compare the hash values or do you have any other suggestion? || you just need to compute the final proxy string `username:password@hostname:port` which you can easily compare and then the two remaining boolean variables  || thats what i have implemented with a stringbuilder comparing the hashcode is much faster than comparing the string -) || okay please check my pr || thank you for the pr nice and clean implementation! we would gladly accept more prs from you ) ||
429,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,fix similar bug as #420 for the database properties dialog a similar bug as #420 happened when the encoding was changed in the database properties dialog this is now fixed in this pr sorry for introducing these bugs in the first place thanks for the fixup pr  ||
440,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,1,1,0,0,cleanup tests and latexformatter instead of #427 (easier to start all over as some files were already moved)  
452,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,revise maintable complete check and rewrite of maintable and related classesthis will fix and implement:- [x] #315 - [x] #384 - show tooltip for header columns- [x] #384 - show tooltip for contents which are too long for table columns- [x] #443 - [x] #445 - [x] add ability to drag and drop specialfield columns- ~~[ ] allow storing position of specialfield columns~~ postponed to another pr- [x] remove table column for "pdf/ps" which is obsolete (fixes #498)- [x] remove option "show one letter heading for icon columns" which is now obsolete- [x] changed default order in main table: # | all file based icons (file url/doi ) | all bibtex field based icons (bibtexkey entrytype author title ) | all special field icons- ~~[ ] #490~~ postponed- ~~[ ] think about "must be implemented "vernünftig (matthias)" "entry table -> fit table horizontally "" from the minutes~~ postponed- [x] final cleanup + changelog awesome || before i invest much time to fix it@jabref/developers **are we dropping support for the "pdf/ps" column in the main table?**in this column potential contents of the "legacy fields" `pdf` and `ps` are shown in #251 the legacy tools are already droppedand we already have the abilility to define special columns based on a filetype (eg show a column for excel files) - so it would be possible to show specific columns for pdfs (stored in the `file` field) || yes support has been dropped for pdf/ps fields all over the place we should do this as well for the main table  || :+1: for removing these legacy columnscould someone create a faq entry (in htdocs) or send me a plain faq on how to mimic that behavior with the "special columns"? || very nice pr with this we already have a 31 :) || @koppor: > q: the pdf/ps column in the main table is missing - how can i restore them?> a: as the bibtex fields `pdf` and `ps` are migrated to `file` the table column was obsolete however it is possible to define columns specifically for each file type in the preferences (see: preferences -> entry table columns -> show extra columns)> ![show-extra](https://cloudgithubusercontentcom/assets/676652/11607936/60b0f44e-9b5b-11e5-9f8f-06abf035115cpng)@simonharrer mhmm but this gui stuff is quite unnerving :wink: || and we already have issues with the pdf/ps columns which no longer seem to work correctly: #498this confirms the need for their removal || just rebased - from my point of view the current state is good enough to be merged into master || :+1: || 
459,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,use default directory when adding files to an entry see #458- the current implementation is hard to understand i dont get how these three existing folder preferences are used - also the method itself should be simplified and return a list after going through the documentation i found it jabref can have a directory per database but what if you and me have different directories? do we have to agree to one? normally its simply the directory of the bib file (meaning `` is used as database directory) but what if the users somehow share a bibliography and use different directories? then this feature comes in i can set another directory then you do both settings are serialized in the `bib` file with `-<loginname>` as suffix in the `jabref-meta` field if jabref saves a file and my loginname matches the name stored in the `bib` file it chooses that directory if no match is found it uses the "general file directory" of the bib file if that is not found it uses the one configured at "options -> preferences -> external programs" ("main file directory")here some text from the documentation and mailing lists but i think the documentation has to be improved :sunrise: when thinking of it we should offer the users a button "use current directory" next to "general file directory" and add a little help text that "" denotes that or render `` as `<directory of the bib file is used>` then hopefully the "user-specific file directory" can be dropped - i dont see any other use case why would i share a bib file and not share the pdfs? if i share the pdfs together with the bib file a relative directory can be put in "general file directory"possibly the "general file directory" should be stored _relatively_ from the current directory of the bib file## faq http://jabrefsourceforgenet/faqphp: "then at the field “general file directory” choose the directory specific for the database if you want to set a directory for you only and other users should use the default directory use the field “user-specific file directory”"## file helphttp://jabrefsourceforgenet/help/filelinksphp:"finally in the database properties dialog you can set a user-specific file directory which will be valid only when you are the one working on the bib file"## mail from the mailing list(by @thomasa)https://sourceforgenet/p/jabref/mailman/message/27008930/"as of revision 3449 jabref supports an option to specify a user- and host-specific file directory in the database properties this allows each user of a particular database to store her/his personal path setting in the database it furthermore allows the same user to specify different paths on different computers (must have different host names)" || thanks @koppor for this detailed clarification! i think we might simplify this somehow :smile:  || we need a better internal datastructure || 
472,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,show author/editor and journal/publisher in the main table by default implements #470 looks like follows:![grabbed_20151205-225839](https://cloudgithubusercontentcom/assets/1366654/11610469/bf3126ea-9ba3-11e5-8b8a-fc9b5d97a97dpng)"author/editor" is okunsure if "journal/publisher" is confusing i think `booktitle/journal` would be the right correspondence we should replace the default "journal" column by `booktitle/journal` and maybe add the `publisher` column as default columnhow often is `inbook` used? consequently `title` should become `chapter/title` but that heading is confusing || id also vote for journal/booktitle (as that is what i use dealing primarily with journal and conference papers) on the other hand a good thing with this pr is that it indicates that these things are possible and how to do it || the journal says where an article is published similarly the publisher iswell the publisher of the book so i would advocate the proposed `journal/publisher` booktitle would probably only make sense for articles in conference proceedings i think articles and books are the most common types so we should focus on them@koppor: `inbook`s also have an author and title so there shouldnt be a problem || guess it depends on scientific area i would possibly argue that in general a publisher doesnt really add any important information even for books while in the case of conference papers the booktitle is crucial (i know that the publisher is important to create a valid reference but it doesnt really add any information when browsing a database) || in my discipline (computer science) id see the correspondence as follows (bibtex fields)| inproceedings | journal || --- | --- || title | title || author | author || booktitle | journal || publisher | publisher || year | year |for instance take an elsevier article (http://wwwsciencedirectcom/science/article/pii/s0268401215000808) the publisher is elsevier but the journal is "international journal of information management" elsevier publishes more than one journali read "where something is published" as the conference and the concrete journal the conference is stored in "booktitle" whereas the concrete journal is stored in "journal" both kinds of works are published by a publisheris it different in your discipline @tobiasdiez? || i do not think @tobiasdiez disagrees with that analysis but i got theimpression that he cites more books than conference papers in that case ican probably agree that publisher is the "next" field to add (mainlybecause of lack of others)journal/booktitle/publisher? (except for the very long heading) || ok apparently the majority is for booktitle hence i changed it accordingly my reasoning was indeed based on `book`s for which the publisher is the equivalent of a journal since books occur more often in my database i thought this addition was more valuable for `inproceedings` the booktitle indeed makes more sense || i suppose `journal/booktitle/publisher` is too confusing? i really agree that the column `journal/booktitle` is empty too often if many books are in the databaseill merge it and lets see what others say :sunflower:  || 
491,1,0,0,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,add close all/others/ in database tab menu see #314 changelog is missing otherwise :+1:  ||
500,1,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,database type detection please see `bibdatabasetypedetectionjava`for reviewsome refactoring and a class for auto-detection of database types### algorithm- should we introduce a hard-coded field like encodings inside the bib file?- fast-enough?- what about false detection?### refactoring- bibtexdatabase -> bibdatabase- bibtexentry -> bibentryalso see #495 #167 the refactorings are fine from my point of viewthe detection is based on in-memory operations on collections so no need to worry about speed at the momentif i understand the algorithm correctly any database that contains a non-biblatex/non-bibtex type will be categorized as bibtex so a database with one biblatex entry and a customn entry would be detected as bibtex is that really the desired result? i would rather ignore all non-bibtex / non-biblatex types for the decision (customentry unkownentry ieeetranentry ) and do the decision solely on valid types with bibtex as the default result || @lenhard no it should always detect as biblatex if it finds one exclusive entry  || the algorithm looks good to me i would move the detection class into the logic package instead of model but that is your decisionstrangely the circleci test says there are still compilation errors due to the renamings as far as i can see locally all is fine ||
515,1,0,0,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,bibteximporter test added tests for bibteximporter depends on pr #514 (missing gradle test encoding special char ß) i had a personal discussion with @bartsch-dev that the current bibteximporter is _not_ aware of the encoding header the reading of jabrefs encoding header is implemented in `opendatabaseaction` and not somewhere in the bibtexparsertherefore there is _no_ test of different encoding strings and it can imho only handle ascii encoded files || i would let this go through and handle the usage of the open method of `opendatabaseaction` in a separate issue || note that none of the files written at https://githubcom/jabref/jabref/wiki/bibtex are tested here || fixed all the mentioned issuesthe `git` part in the file was as already mentioned the title of the book which i took as an examplei also added some examples from https://githubcom/jabref/jabref/wiki/bibtex || i think this can be merged in || as discussed in https://githubcom/jabref/jabref/issues/558#issuecomment-195430095 it is not necessary to refactor `opendatabaseaction` because of this importer ||
560,1,0,0,1,0,1,1,0,0,0,1,1,1,0,1,1,0,0,1,write all field keys in lower case write all field keys in lower case no more camel casing of field names eg `title` is written instead of `title` `howpublished` instead of `howpublished` and `doi` instead of `doi` the configuration option `use camel case for field names (eg "howpublished" instead of "howpublished")` is gonerefs #116  maybe the ui also has to display lower case values or should it use the (currently removed) camelcase functionality? i dont like the current `entryutilcapitalizefirst` solution (found in maintablecolumnjava) || in my opinion it should use lower case since we are standardizing on that id say you are free to implement what you find more beautiful :) || :+1: on lower case  ||
567,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,implements #565: highlighting matches works now also for regular expr… …essions in preview panel and entry editor  
568,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,fixed #564: cite command changes are immediately reflected in the pus… …h-to-application actions and not only after restart :+1: ||
569,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,remove field saving options as decided in #116 all field saving options should be removedthis pr purges the options from the gui and cleans up related reader and formatter classes this simplification greatly reduces the complexity of `bibentrywriter`  
594,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,solved #593 and cleaned up the oo-code a bit hopefully solved #593try it out at http://buildsjabreforg/ooreferencelist/(also cleaned up the code a bit based on pmd the actual fix is on lines 76-90 in ooutiljava) looks good is it possible that the dependency on "unoiljar" can be removed? || unoiljar was in a separate directory before (changing the default paths to be the same for unoil and the other jars where jurtjar is the one searched for was the biggest change to get it to work with the most recent versions of oo and lo) || 
605,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,1,0,0,1,change entrytype to string in bibentry this pr tries to resolve the issues discussed in #337 and #495right now the entry type is converted from a string representation (in the bibtex file) to an entrytype by the parser the problem with this approach is that the parser has to know about the bibtex vs biblatex mode the idea was to just store the string in the bibentry and only get the corresponding entrytype whenever it is really necessary oh that change surely was much effort unfortunately i find the old way more fitting even though the bibtex / biblatex mode switching was difficult why not using `entrytype` but only as "proxy" to the real type dependent on the bibtex/biblatex mode? (i currently dont know the gof pattern name for that :see_no_evil:)all entries should have a (non-abstract) `entrytype` and there should be (abstract) `bibtexentrytype` and `biblatexentrytype` all of them should implement `ientrytype` offering `hasallrequiredfields`etc `entrytype`and `*entrytype` should not be in a inheritance relation `entrytype` should proxy to the appropriate bib(la)textype depending on the mode || thanks olly for your feedback let me elaborate a little about why ive chosen to store the entry type as a string the type of the entry is per se a state-less information `@article{}` signifies an article in the bib file independent on any preferences in jabref i think it it thus a good idea to also have a state-independent representation of the same information in jabref in other words i prefer a system where the type is stored in the `bibentry` class independent on anything else (much like the `author` field is also stored as a string and not as a `authorlist` object) then in a latter step this data can be enriched by the preference-dependent information about optional and required fields this reflects more or less the impression i got from #495 that we came to the conclusion to see the `bibentry` class only as a data object without any logic now you can think about implementing such a system in java the easiest way and the one i have chosen in this pr is to store the type as a string variable one can also store the type information as an enum (as i have suggested in #501) but this feels over-engineered (especially since there is no code checking whether a entry is an article or a book) the second step is to augment this information by optional/required fields i have chosen a constructor-based approach but maybe your idea about using the proxy pattern is better i have to think about it more || regarding `string` vs `authorlist`: i would have preferred that bibentry uses `authorlist` possibly calculated on demand and not during creation of the object similar for the `files` fieldunsure whether im wrong i would pack as much "interpreted" data in bibentry and get rid of strings as much as possible maybe we then reimplement an in-memory relational database system for instance if we store the "crossref" as reference and not as string what if the referenced entry is deleted and then recreated etc || ok as requested here a short summary in bullet list form_status quo_: parser converts the string "article" to a bibtype class instance and saves this in the entry- (--) makes changing from bibtex to biblatex mode hard as the type stored in every entry has to be changed- (-) adds additional dependency in the parser (bibtypes class)- (-) the parser has to know whether we are in biblatexmode or in bibtexmode however a priori this information is not necessary to parse a bib file- (+) does not store the type information as a string_pr_: parser stores the type information as a plain string in the entry this string will be converted to bibtype class when needed- (+) changing from bibtex to biblatex mode is easier since the required/optional fields are used only in a few places - (+) makes dependencies clearer (which class needs to know the bibtype or bibtex/biblatex mode)- (+) parser does not depend on bibtype class and on biblatexmode- (0-) stores the type information as a string however this is in my opinion no real caveat the previous code also contains something like `if(entrygettype()getname()  "article") which is now replaced by`if(entrygettype()  "article")` so often the name of the bibtype is used which somehow destroys the advantage _alternative solution_: store type information as an enum in the entry and convert this enum to a bibtype when neededthis approach keeps all the advantages but does not have the "stringy problem" it feels however a little bit overengineered (mainly because there are "unknown" types which are not covered by a simple enum) || refs #551  || - typedbibentry as a wrapper around bibentry typedbibentry has high level api bibentry has low level api- typedbibentry -> bibentry bibentry -> rawbibentry || rebased (not sure why there is a merge commit) and introduced typedbibentry aka goodeasygodbibentry (is this the correct way to implement it?) todo (other pr): bibdatabasegetresolvedfield should accept optional database || 