issueNumber,prNumber,Util,NLP,APM,Network,DB,Interpreter,Logging,DataStructure,i18n,DevOps,Logic,Microservices,ML,Test,Search,IO,UI,Parser,Security,Cloud,BigData,App,GIS,corpus
99,103,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes issue returns_deep_stubs automatically tries to create serializable mocks see issue what it does is propagating the serializing mode of the parent upon each mock creation when deep stubbingbefore each mock created where made serializable by default which is not an issue when the types have a default no arg constructor but may become problematic when the type didnt have one mockito would report an error explaining that it couldnt mock this type awesome thanks brice for fixing the problem new version is already out dancer btw the release notes automation is based on the titles of the tickets in github the better the title the better the release notes https githubcom mockito mockito blob master doc release notes officialmd ok ah yeah it makes sense i may be able to update it on the phone
128,142,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fix deep stubbing with generic responses in the call chain is not working also i kind of like the original unit test in i propose you include it in this pr it could be name like orgmockitousagebugsdeepstubsdeepstubfailingwhengenricnestedasrawtypetest if you can amend the change ill merge the pr done not sure its exactly what you were asking for but i dont see other option at the moment the final diff looks good to me could you squash the commits in a single one in the same branch pr better for the history btw you should be able to do that this way bashgit reset soft head git commit messagefixes issue for deep stubs with mixed raw generics type i was off for few days i see szczepan did the job so theres noting left for me btw happy new yearcheers
155,176,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,make propertyandsetterinjection field sorting consistent is caused by calling collectionssort with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type iterable integer number it gives iterable integer and iterable number but also an inconsistent integer the only way i see that it would be possible to do using a comparator would be to first do a topological sort and then using the indexes of the objects in this sorting as keys when implementing the comparatorid be happy to add any more tests or change the style to increase confidence that its a safe implementation mmmmh ok it would definitely be better to have the comparator but that seems a bit complex as you said so i propose things then without comparator it would be better to externalize the sorting in some class instead of a method could be used like java sorted new orgmockitointernalutilreflectiontopologysorter sort thanks for the amend i propose that the proper commits starts fixes like you did in one of the previous commits github can track identify the keyword and the issue referencesorry to be nitpicky but as soon as the pr is merged there will be an automated release also tests are finethanks for the feedback and the interesting links star thanks for the modifications josephw perfect pr by the way do you have any remarks on the contributing guide missing info style guideline git stuff etc its great that youve got a contribution guide i think a couple of the things i missed are mentioned by it but i might over emphasise at least one commit message in the pr contains fixes idand suggest a template commit message clean commit historyyou could make the history rewriting explicit here something like we prefer a clean commit history rebased and squashed if necessary so that each commit clearly changes one things and there are no extraneous fix upsthanks for the feedback everything else seemed specific enough that a review was the only way to pick it up josephw ok thanks for the feedback too
200,201,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes argumentcaptorforclass is more friendly with generic types we modify the signature of argumentcaptorfromclass class to better express the type relationship between the argument and the return type there is no change to the behavior of the method this change is to allow expressions such as javaargumentcaptor captor argumentcaptorfromclass consumerclass to type check which is desirable as a convenience to users of argumentcaptor we also add two tests to document this extension to the api both of which fail to compile without this change to argumentcaptorfromclass these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile time properties of argumentcaptor not its behavior almost perfect pr maybe the contributing guide is missing something here but the exemple id should have been expended to the real gh issue number actually the commit message should be something like fixes tweak generic signature of argumentcaptorfromclass ill merge it asap thanks for the pr by the way i updated the contributing guide with an exemple if youre unsure how to rename the commit bashgit commit amendgit push force the travis build is broken in some way your code is fine thanks for the change
187,202,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,better protection against incompatible returned value of default answer and get safely mock name fixes issue the value returned by the default answer is now validated to make sure there wont be a classcastexception if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a classcastexception when reporting a verification issue build is ok but fail on travis
197,207,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes blocks ability to use negative value for timeout and after method it should fix issue if user uses mockitoafter or mockitotimeout with negative values then friendly reminder exception with details will be thrown first commit fixes the issue second one is a little bit of refactoring mostly reducing visibility and increasing encapsulation fixes refactoring removed unused field from verificationovertimeimpl and also from constructors signature improved encapsulation by removing getters from verificationovertimeimpl reduced visibility of few constructors in timeout and after classes nice pull request thank you if comments are addressed ill merge right away about timeouttest please look at it the whole point of this test is to pass timer object and do mocking verifications on it if i use public constructor for this test i will not to able to pass timer objectthis is why constructor with this signature timeout long pollingperiodmillis verificationmode delegate timer timer was introduced by author in first place should i really touch itbtw there in so such thing like aftertest oh yeah i see fair point just ignore what i said on thatignore the aftertest too i was a bit off this morning thanks for the feedback
188,211,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,argumentcaptor no longer working for varargs fixes these commits should fix issue with capturing varargs hi thanks for the pri will take a look at it soon and probably merge it in the mean time git history is fine except the merge commit can you get rid of it otherwise ill have to cherry pick relevant commits i will try to do rebase and then do force push hope it will work take a lookhm i see merge conflicts probably due your activity today commit looks good but indeed theres some conflict to narrow down ill take a look later thanks for the rebase now it should work thanks
212,221,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes add shouldhavezerointeractions as bdd version of verifyzerointeractions follow up to thanks mkordas
203,222,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes introduce bdd inorder verification follow up to
206,223,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,fix issue related to windows path problem was caused by file separator replacing hardcoded char by fileseperatorchar solves issue in the same file there is second occurence of this character but it is used with getresource path method in such case is only acceptable separator do i need to do something special in order to build with java it looks like problem with default method i create branch from master dont worry about that error ill push the fix at some point todaythanks for fixing the windows test issue
228,229,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes fixed a verify call example in captor javadoc thanks for the fix
233,234,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,cannot instantiate type with public method of a public parent class having a non public types in signature this should fix awaiting delivery of bytebuddy fix https githubcom raphw byte buddy commit f d ee b abf e abaf df d f thanks raphw actually fixed in bytebuddy in commit https githubcom raphw byte buddy commit cf c aa ef ff e f df cdfe c
220,235,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes constructor invoking methods raise npe in some recent version of mockito spy annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls unconfirmed at this point this pr aims to fix that by calling real code if interceptor is not set which can only happen if constructorinstanciator is usedthanks to raphw for his tip on this regard as well https githubcom raphw byte buddy issues issuecomment i just saw that you chose to invoke the real method instead of returning a default value that might cause problems when the invoked method expects some state then again if the constructor is called the constructor might always receive correct input valuesi added another interceptor to make the field receival a bit more convenient and runtime efficient and if you wanted to aupress the calls from the constructor might be unsuitable for spies i think i also found a better alternative for thati just send you a pull request on monday yes for constructors that made sense when spy is instantiated with constructor though i agree with you other than this scenario it shouldnt be authorized i didnt yet wrap entirely my head around this yetim not yet sure how to ensure a bit more safety there
251,252,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,migrate fest assert code to assertj fixes current coverage https codecovio github mockito mockitoref f dbe df ff ee bacc baf aa is merging into master will change coverage by by f dbe https githubcom mockito mockito commit f dbe df ff ee bacc baf aa coverage diff diff master diff files stmts branches methods hit partial missed uncovered suggestions https codecovio github mockito mockito features suggestionsref f dbe df ff ee bacc baf aa via ializationissuejava https codecovio github mockito mockito src org mockito exceptions base mockitoserializationissuejavaref f dbe df ff ee bacc baf aa via ializablemethodjava https codecovio github mockito mockito src org mockito internal invocation serializablemethodjavaref f dbe df ff ee bacc baf aa via ns pluginloaderjava https codecovio github mockito mockito src org mockito internal configuration plugins pluginloaderjavaref f dbe df ff ee bacc baf aa _ see more https codecovio github mockito mockito features suggestionsref f dbe df ff ee bacc baf aa _ powered by codecov https codecovio
260,261,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes typo in documentation very minor typo in documentation https githubcom mockito mockito issues theres an extra at in the documentationbefore it reads annotating the junit test class with a runwith mockitojunitrunnerclass after it reads annotating the junit test class with a runwith mockitojunitrunnerclass image https cloudgithubusercontentcom assets c f b e d b c f png current coverage https codecovio github mockito mockitoref c b a f e bdf c is merging into master will change coverage by by https githubcom mockito mockito commit c b a f e bdf c coverage diff diff master diff files stmts branches methods hit partial missed uncovered suggestions https codecovio github mockito mockito features suggestionsref c b a f e bdf c via ializablemethodjava https codecovio github mockito mockito src main java org mockito internal invocation serializablemethodjavaref c b a f e bdf c via lizationsupportjava https codecovio github mockito mockito src main java org mockito internal creation bytebuddy bytebuddycrossclassloaderserializationsupportjavaref c b a f e bdf c via ns pluginloaderjava https codecovio github mockito mockito src main java org mockito internal configuration plugins pluginloaderjavaref c b a f e bdf c _ see more https codecovio github mockito mockito features suggestionsref c b a f e bdf c _ powered by codecov https codecovio cool thanks for the fix
268,270,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,issue added support for generic arrays as return types solves https githubcom mockito mockito issues by explicitly checking for return types that represent a generic array and by resolving for the arrays component type current coverage https codecovio github mockito mockitoref f f d e fd c f d a b d is merging into master will increase coverage by as of f f https codecovio github mockito mockito commit f f d e fd c f d a b d diff master diff files stmts branches methods hit partial missed review entire coverage diff https codecovio github mockito mockito compare fe cbcfb a a d cc bec a eab f f f d e fd c f d a b d uncovered suggestions https codecovio github mockito mockito features suggestionsref f f d e fd c f d a b d via rningscollectorjava https codecovio github mockito mockito src main java org mockito internal debugging warningscollectorjavaref f f d e fd c f d a b d via ializablemethodjava https codecovio github mockito mockito src main java org mockito internal invocation serializablemethodjavaref f f d e fd c f d a b d via ns pluginloaderjava https codecovio github mockito mockito src main java org mockito internal configuration plugins pluginloaderjavaref f f d e fd c f d a b d _ see more https codecovio github mockito mockito features suggestionsref f f d e fd c f d a b d _ powered by codecov https codecovio
243,280,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,reintroduce null check on mockutilismock will fix null check on mockutilismock was incorrectly removed after successive refactoring this pr reintroduces null check current coverage https codecovio github mockito mockitoref e ecec ed f ef c f is merging into master will not affect coverage as of e https codecovio github mockito mockito commit e ecec ed f ef c f diff master diff files stmts branches methods hit partial missed review entire coverage diff https codecovio github mockito mockito compare f f d b e ff ed d faac f ee b e ecec ed f ef c f as of e https codecovio github mockito mockito commit e ecec ed f ef c f uncovered suggestions https codecovio github mockito mockito features suggestionsref e ecec ed f ef c f via ializablemethodjava https codecovio github mockito mockito src main java org mockito internal invocation serializablemethodjavaref e ecec ed f ef c f via ns pluginloaderjava https codecovio github mockito mockito src main java org mockito internal configuration plugins pluginloaderjavaref e ecec ed f ef c f via lizationsupportjava https codecovio github mockito mockito src main java org mockito internal creation bytebuddy bytebuddycrossclassloaderserializationsupportjavaref e ecec ed f ef c f _ see more https codecovio github mockito mockito features suggestionsref e ecec ed f ef c f _ powered by codecov https codecovio updated on successful ci builds
124,287,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,implement verificationcollector which can collect multiple verifications it will report in the end the result of multiple statements fixes current coverage https codecovio github mockito mockitoref b daeea e a b c ff ab aec is merging into master will increase coverage by as of b dae https codecovio github mockito mockito commit b daeea e a b c ff ab aec diff master diff files stmts branches methods hit partial missed review entire coverage diff https codecovio github mockito mockito compare a ac fb c dae f aa b daeea e a b c ff ab aec as of b dae https codecovio github mockito mockito commit b daeea e a b c ff ab aec uncovered suggestions https codecovio github mockito mockito features suggestionsref b daeea e a b c ff ab aec via ializablemethodjava https codecovio github mockito mockito src main java org mockito internal invocation serializablemethodjavaref b daeea e a b c ff ab aec via lizationsupportjava https codecovio github mockito mockito src main java org mockito internal creation bytebuddy bytebuddycrossclassloaderserializationsupportjavaref b daeea e a b c ff ab aec via ns pluginloaderjava https codecovio github mockito mockito src main java org mockito internal configuration plugins pluginloaderjavaref b daeea e a b c ff ab aec _ see more https codecovio github mockito mockito features suggestionsref b daeea e a b c ff ab aec _ powered by codecov https codecovio updated on successful ci builds rebased branch and changed code according to comments of bric to make the inner test test working the inner test should not end with test nice rework made the impl class package protected looks good to me thanks for the reviews hey timthanks for cool contributionswhat are your thoughts on improving the verificationcollector idea the rule would automatically validate all verify methods at the end of the test this way there would be no need to call collectorverify at all we could leave it as optional for gnarly cases szczepiq i am not really sure what you mean could you provide a code snippet with what you would like to achieve current api java rule public verificationcollector collector mockitojunitcollector test public void should_fail { imethods methods mock imethodsclass collectorverify methods bytereturningmethod collectorverify methods simplemethod } desired api java rule public mockitorule rule mockitojunitrule lazyverify just an example no strong opinion here test public void should_fail { imethods methods mock imethodsclass below just works strong opinion verify methods bytereturningmethod verify methods simplemethod } szczepiq pr is up at smile
245,293,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,remove validateserializable fixes remove serializable validation current coverage https codecovio github mockito mockitoref b d b b abc d bea ac fe ee d b is merging into master will decrease coverage by as of b d https codecovio github mockito mockito commit b d b b abc d bea ac fe ee d b diff master diff files stmts branches methods hit partial missed review entire coverage diff https codecovio github mockito mockito compare a f b ec f bf f df deb fa b d b b abc d bea ac fe ee d b as of b d https codecovio github mockito mockito commit b d b b abc d bea ac fe ee d b uncovered suggestions https codecovio github mockito mockito features suggestionsref b d b b abc d bea ac fe ee d b via ializablemethodjava https codecovio github mockito mockito src main java org mockito internal invocation serializablemethodjavaref b d b b abc d bea ac fe ee d b via ns pluginloaderjava https codecovio github mockito mockito src main java org mockito internal configuration plugins pluginloaderjavaref b d b b abc d bea ac fe ee d b via lizationsupportjava https codecovio github mockito mockito src main java org mockito internal creation bytebuddy bytebuddycrossclassloaderserializationsupportjavaref b d b b abc d bea ac fe ee d b _ see more https codecovio github mockito mockito features suggestionsref b d b b abc d bea ac fe ee d b _ powered by codecov https codecovio updated on successful ci builds
365,373,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes simplify the invocationonmock api to get a casted argument this pull request fixes by introducing t getargument int and deprecating t getargumentat intclass in type invocationonmock this improves the readabilty of custom answers this string text invocationgetargumentat stringclass can be replaced by string text invocationgetargument current coverage https codecovio github mockito mockitoref eff e b f e da be d d a is merging into master will decrease coverage by as of eff e https codecovio github mockito mockito commit eff e b f e da be d d a diff master diff files stmts branches methods hit partial missed review entire coverage diff https codecovio github mockito mockito compare ff da caa e f e d bede a eff e b f e da be d d a as of eff e https codecovio github mockito mockito commit eff e b f e da be d d a uncovered suggestions https codecovio github mockito mockito features suggestionsref eff e b f e da be d d a via rningscollectorjava https codecovio github mockito mockito src main java org mockito internal debugging warningscollectorjavaref eff e b f e da be d d a via ializablemethodjava https codecovio github mockito mockito src main java org mockito internal invocation serializablemethodjavaref eff e b f e da be d d a via lizationsupportjava https codecovio github mockito mockito src main java org mockito internal creation bytebuddy bytebuddycrossclassloaderserializationsupportjavaref eff e b f e da be d d a _ see more https codecovio github mockito mockito features suggestionsref eff e b f e da be d d a _ powered by codecov https codecovio updated on successful ci builds looks good makes implementing custom answers easier indeed
374,386,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,remove deprecated code fixes for more left though current coverage https codecovio github mockito mockitorefa a f bc dd d df e f a c a c is merging into master will increase coverage by as of a a f https codecovio github mockito mockito commit a a f bc dd d df e f a c a c diff master diff files stmts branches methods hit partial missed review entire coverage diff https codecovio github mockito mockito compare ff da caa e f e d bede aa a f bc dd d df e f a c a c as of a a f https codecovio github mockito mockito commit a a f bc dd d df e f a c a c uncovered suggestions https codecovio github mockito mockito features suggestionsrefa a f bc dd d df e f a c a c via rningscollectorjava https codecovio github mockito mockito src main java org mockito internal debugging warningscollectorjavarefa a f bc dd d df e f a c a c via ializablemethodjava https codecovio github mockito mockito src main java org mockito internal invocation serializablemethodjavarefa a f bc dd d df e f a c a c via lizationsupportjava https codecovio github mockito mockito src main java org mockito internal creation bytebuddy bytebuddycrossclassloaderserializationsupportjavarefa a f bc dd d df e f a c a c _ see more https codecovio github mockito mockito features suggestionsrefa a f bc dd d df e f a c a c _ powered by codecov https codecovio updated on successful ci builds davidkarlsen x the method mockitostubvoid https githubcom mockito mockito blob master src main java org mockito mockitojaval is deprecated but lacks the annotation deprecated can you take care of it on it ill be back the terminator christianschwarz ok added removal of stubvoid in https githubcom davidkarlsen mockito tree removestubvoid which is a fork of this pr wdyt davidkarlsen looks good there is only one reference in the javadocs that should be removed i added a note in your commit christianschwarz fixed ping szczepiq intersted in this love it thanks szczepiq what about https githubcom mockito mockito pull which is https githubcom davidkarlsen mockito tree removestubvoid if you read the thread above
374,404,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes removed deprecated classes and methods fixes removed deprecated classes and methods thanks for this pr and for fixing the formatting could you also squash all commits to a single one for better versioning thanks raphw i fixed the line ending issue is it okay to squash the commits once the review of all commits is fine the removal of some deprecated classes and methods was more than simply removing it eg mockitojunitrule if my implementation is not okay it can easily be reverted raphw do you know why the check codecov changes fail christianschwarz fixing issue and will report back shortly christianschwarz can you submit an empty commit for another rebuild i believe this issue was fixed within the last days thank you i do not currently have good internet access vacation please repush forced and see if it worksthanksfor the effort this will be merged eventually raphw and stevepeak thanks for your support current coverage https codecovio gh mockito mockito pull srcpr is merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will decrease coverage by files not in diff in ito internal handler were modified more https codecovio gh mockito mockito commit a d f b dff e f c aa b b changessrcpr f d e f a f f f d f b f f e e c f e c misses hits files not in diff in org mockito internal were modified more https codecovio gh mockito mockito commit a d f b dff e f c aa b b changessrcpr f d e f a f f f d f b f f e e c misses hits files not in diff in ain java org mockito were modified more https codecovio gh mockito mockito commit a d f b dff e f c aa b b changessrcpr f d e f a f f f d f b f misses hits file nal mockitocorejava was modified more https codecovio gh mockito mockito commit a d f b dff e f c aa b b changessrcpr f d e f a f f f d f b f f e e c f d f b f f e a misses partials hits diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr powered by codecov https codecoviosrcpr last updated by e f a d https codecovio gh mockito mockito compare e f a f f d aeef c b b a d f b dff e f c aa b b raphw szczepiq bric sorry for stressing you the people want mockito & lambda please comment and or merge this pr its a little step in the right direction ping lgtm thanks for doing the chore work
407,412,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixed vararg method call on mock object fails andreyrmg can you add your test too oh yes of course im sorry but only tomorrow current coverage https codecovio gh mockito mockito pull srcpr is merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by powered by codecov https codecoviosrcpr last updated by e f aa f https codecovio gh mockito mockito compare e f a f f d aeef c b b aa f e e a c dbea fe e fb e added test for adding unit testscan you also add your defaultanswerdemo test case to the usage tests package orgmockitousagestubbing name proposal stubbingwithdelegatevarargstest sorry for delay i added usage test case and squash commits into oneand there is need to extend from testbase for calling help method orgmockitoutiltestbaseinvocationof javalangclass javalangstring javalangobject lgtm thanks for figuring this one out and adding an extensive test suite luckily an easy fix
20,424,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,inorder timeouts fixes issue https codegooglecom archive p mockito issues updated code provided by https githubcom sirchia in pr closes could you please add tests to make sure the code is correctly behavingalso you have some unrelated changes mostly imports reordering please remove those as well i should have some time to work on the code changes this weekend timvdlippe there was already a test there i just removed the ignore tag ill add one for the exception throwing behavior as well i also removed the import reordering my ide was trying to be super helpful jazzepi sounds great the codecov status has to pass before this can be merged after the current feedback has been processed i will take another look but i think so far it is looking good jazzepi could you rebase this pr and commit your changes i would like to merge this sooner rather than later current coverage https codecovio gh mockito mockito pull srcpr is sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr https codecovio gh mockito mockito pull srcpr no coverage report found for master at e f powered by codecov https codecoviosrcpr last updated by e f a https codecovio gh mockito mockito compare e f eb ee ce fadd bdf f f c a d e a d d e timvdlippe i think it should all be in working ordering now ive been doing git force pushes to my branch no idea if thats the accepted style but github seems to be figuring out what im doing i just wish it were layering patchsets on like gerrit does christianschwarz i really puzzled over what you were looking for and could not understand how i could improve the code in the way youre describing id prefer this changeset get merged and then make whatever style changes you wanted yourself lgtm thanks
426,427,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,refactored class reporter to a static utillity fixes for class reporter this pr changes the way errors are created and thrown all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly this improves the readability and eliminates the use of hacks to satisfiy the compilerhere is a sample public list getlastvarargs { if argumentsisempty { reporter noargumentvaluewascaptured return null } else { return argumentsgetlast }} the above code snipped can be rewritten to this public list getlastvarargs { if argumentsisempty { throw noargumentvaluewascaptured } return argumentsgetlast }
426,431,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes dropped class handyreturnvalues while refactoring the class handyreturnvalues towards a static utility class i notices that it is not required at all therefore i decided to remove the type handyreturnvalues current coverage https codecovio gh mockito mockito pull srcpr is sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr https codecovio gh mockito mockito pull srcpr no coverage report found for master at cdee powered by codecov https codecoviosrcpr last updated by cdeef c b https codecovio gh mockito mockito compare cdee c f c e c a db bef c b cf a f ee c d ce e lgtm but the formatting of quite some files is still incorrect some have a space too much others are indented too much please take a close look at the diff and make sure that formatting changes are reverted functionality is fine by me timvdlippe lgtm but the formatting of quite some files is still incorrecthopefully fixed for now and ever
426,432,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes refactored invocationmarker to a static utility class refactored invocationmarker to a static utility class current coverage https codecovio gh mockito mockito pull srcpr is sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr https codecovio gh mockito mockito pull srcpr no coverage report found for master at a de a powered by codecov https codecoviosrcpr last updated by a de a ebbff https codecovio gh mockito mockito compare a de a e d f f e e c e f b ca ebbff a b d e there are some imports remaining on the invocationmarker which i think can be removed other than that lgtm how to trigger a build without the commiting squashing forced push cycle that failing tests suck not much faster but the fastest way i know of to trigger building of pull request is git commit amendgit push f lgtm
304,442,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,enable some ignored tests of bridgemethodshitagaintest and detectingf… …inalmethodstestthis worked locally so lets see if this also works on the ci serverfixes current coverage https codecovio gh mockito mockito pull srcpr is merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will not change coverage diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr powered by codecov https codecoviosrcpr last updated by f d https codecovio gh mockito mockito compare f e e b acf fe c c aa dd f ecaefd e db ebd be thanks this has fixed issue
438,444,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,add parameter elementtype to mock todo add a regression test to also show how this functionality can be used cc smoyer fixes current coverage https codecovio gh mockito mockito pull srcpr is sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr https codecovio gh mockito mockito pull srcpr no coverage report found for master at d powered by codecov https codecoviosrcpr last updated by d bd a https codecovio gh mockito mockito compare d b defa b abe f f abd a b dbb aa a fad c
433,451,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,refactored timeout and after concurrent test refactored concurrent test in order to fix the implementation now uses an executor to perform async calls instead of extending thread and doesnt extend testbase anymore i also added a stopwatch which can be used for further time dependent testing in the future i want to use this class to write more tests for after timeout can you rebase this to the latest removal of deprecated api thanks seems like something went wrong with my rebase i will look tomorrow into it current coverage https codecovio gh mockito mockito pull srcpr is sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr no coverage report found for master at c d powered by codecov https codecoviosrcpr last updated by c d e a d https codecovio gh mockito mockito compare c de a b ad ba e dfc a bde e a d a f d a d ab d cf a christianschwarz i think its preferable to rebase eg pull rebase upstream master a pull request instead of merging that hides unrelated commits and makes reviewing easier thanksedit just saw your comment above so please ignore this this lgtm but one small comment thank you again for your work okay i fixed the formatting issues lgtm i guess it would have been better to use more lenient timeouts https travis ciorg mockito mockito builds it really sucks that we only experience this flakiness on master and now when we are reviewing such pull requests i cant seem to recreate these timing issues locally either i can replicate the issues if i decrease the timeouts and run a timeout test in an endless looptravis builds have very limited cpu resources so https docstravis cicom user ci environment so failures of multi threaded tests are more likely
453,454,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,modified javadoc for argumentmatcher to fix this is the amendment to the argumentmatcher javadoc current coverage https codecovio gh mockito mockito pull srcpr is sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr no coverage report found for master at ce powered by codecov https codecoviosrcpr last updated by ce bb https codecovio gh mockito mockito compare ce a adc ccf b d d e bb c cf a f e e e afea a lgtm
390,491,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,deprecate whitebox and corresponding verboserunner and junitfailureha… a quick google showed that there are almost zero usages of this runner moreover it was relying on a very hackish implementation i think we can do a better job by creating a new runner with junit as part of therefore the intent is to deprecate these classes and remove them in mockito fixes current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size powered by codecov https codecoviosrcpr last update ce ac e https codecovio gh mockito mockito compare ce ac ea f f c e d fdf a ccb e b dfe ef a d bd dce bbsrcpr dont remove this runner a few people were relying on this it may not show up on open source projectin my opinion whitebox should be removed though so it could be possible to use other internal reflection utils like fieldgetter fieldsetter timvdlippe bric what do you think about deprecating all mockito runners in order to promote the uses of mockitorule motivation mockito should promote only one api to initialize annotated fields cause it may confuse users what to choose when runners vs rule mockitorule does the same as the runners but is more flexible cause it allows to uses other runners eg for parameterized tests which is a often requested feature i do not think we should deprecate them junit still has runners as a non deprecated feature we should deprecate the runners once they do the same a lot of people still rely on old junit versions where runners are the only option we can however add proper documentation that indicates that runners should be the second choice raphw even if i disagree at some points i accept the core team decision a lot of people still rely on old junit versions where runners are the only optioni see you point but i think that people that update to mockito x can also update there junit version also deprecating doesnt mean that it is removed in it will still be usable and indicate that a better alternative exist we can however add proper documentation that indicates that runners should be the second choicegood idea here we go the reason to deprecate this runner is because the new mockito runner is strict and is a lot more userfriendly than this runner to promote the strict runner we should deprecate this one and use the strict version imoregarding runners vs rules we can state our preference but we should keep the possibility ill tidy up the verbose runner documentation i dont think it is useful given the work on and ok deprecation sounds good to me however id remove whitebox its internal after alllets just replace the methods in junitfailurehacker at line https githubcom mockito mockito pull filesdiff a e ee d a af c c b f r and at line https githubcom mockito mockito pull filesdiff a e ee d a af c c b f r by private methods rebased and updated pull request with feedback ptal smile indeed the timeout test is picky especially with openjdk i restarted the job times verbose runner and console spamming runner are now both deprecated lets kill them in
482,492,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,revert remove deprecated method simple git revert for an accidental removal of a deprecated api since instead of xfixes current coverage https codecovio gh mockito mockito pull srcpr is sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr no coverage report found for master at dd f powered by codecov https codecoviosrcpr last updated by dd f d c https codecovio gh mockito mockito compare dd f ae f f abc b d ba ad cb b f a d cf c b c b aaef e asrcpr
401,499,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes makes the junit runner detect unused stubs fixes this is a breaking change because junit runner will now fail the test class if there is an unused stubbingfeedback is welcome sorry for working on it for a long time and big number of commits investigating the failure on travis works for me locally d i would rather not default to strict right away this will break a lot of user test suites which significantly increasing the upgrade process to mockito if we let developers know our intention is to makr the strict version default later they can slowly make the changes for each of their runners then we can change the default in mockito so developers had some time to adopt current coverage https codecovio gh mockito mockito pull srcpr is diff sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr https codecovio gh mockito mockito pull srcpr no coverage report found for master at f powered by codecov https codecoviosrcpr last update f f a https codecovio gh mockito mockito compare f cf aabe f bc abb bc cc a f a f a efd c df dc fd a srcpr yes we can change the default if thats the decisionpersonally i think we should go ahead with this change at the cost of upgrade pain why it actually helps the codebase dead code removed tests are cleaner arguably it could make the users _want_ to upgrade because they can make the codebase better its nice if the upgrade effort actually brings immediate value to the codebase because of above it could be easier to justify the upgrade to the team manager it shouldnt be that much work i doubt that users have that many unused stubs in mockito codebase huge amount of mockito tests we had just few examples not changing the default will make this feature not used by most users because most devs dont care unless forced to care pthoughts for making it the defaultcleaner test because of removed dead code are a big plus i guess it should not be much work to delete some code thanks for feedback if there is no more feedback im merging it this weekend late in the review game but nice feature
426,501,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,refactored testmethodsfinder to a static utility class current coverage https codecovio gh mockito mockito pull srcpr is diff sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr no coverage report found for master at f c powered by codecov https codecoviosrcpr last update f c https codecovio gh mockito mockito compare f c de fc a c d fff f d b b daca d cd c eb c e a e eb a srcpr lgtm
426,502,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,refactored argumentscomparator to a static utility class current coverage https codecovio gh mockito mockito pull srcpr is diff sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr no coverage report found for master at f powered by codecov https codecoviosrcpr last update f bb b https codecovio gh mockito mockito compare f cf aabe f bc abb bc cc a bb bbc b aff e ecd cde c srcpr lgtm
426,503,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,refactored nongreedynumberofinvocationsinorderchecker to a static uti… …lity class current coverage https codecovio gh mockito mockito pull srcpr is diff sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr no coverage report found for master at f powered by codecov https codecoviosrcpr last update f a fd https codecovio gh mockito mockito compare f cf aabe f bc abb bc cc a a fdaed d b fd b ea bedsrcpr
506,507,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,improved exception message fixes issue fixes current coverage https codecovio gh mockito mockito pull srcpr is diff sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size https codecovio gh mockito mockito pull srcpr no coverage report found for master at f c powered by codecov https codecoviosrcpr last update f c ead e https codecovio gh mockito mockito compare f c de fc a c d fff f d b b ead e fb edbf f e b a f d dff srcpr lgtm
194,510,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes tweaks any matchers details is i took the opportunity to replace testbaseassertthat by more powerful assertj equivalent theres still some work to be done in this class add iterable matchersbefore merging x i ponder to make anyobject not to accept null currently any is an alias of anyobject keeping the anyobjet behaviour and deprecate the method x i need to update anyint family description current coverage https codecovio gh mockito mockito pull srcpr is diff sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size no coverage report found for master at e e c powered by codecov https codecoviosrcpr last update e e c bdf https codecovio gh mockito mockito compare e e cf f c bcba c bcbe e f bdf b ef b f ee efecd srcpr heres some poll on twitter values are from the time this comment was edited fri jul cest https twittercom bricedutheil status mockito any class will check the type in mockito but should it match theres still the matcher isnull null and non null only non null votes https twittercom bricedutheil status mockito anyint and other primitive matchers should they match there is still isnull null and non null integer only non null integer votesi feel this pr is safe to merge not much voters but the poll trend ratio shouldnt change that much and those trends agrees with the changes brought by this pr votes and i merge the pr ill monitor the poll after my holidays if i understand correctly list anylistof class clazz was deprecated in favour of list anylist shouldnt the latter then be made generic when i replace one with the other i get unchecked conversion warnings idem for anyset anymap anycollection and anyiterable stephan thanks for the feedback yes it was deprecated for people that use java as documented in the javadoc and the deprecation announces removal in mockito which will be java minimum bric i am on java and did migrate as suggested i agree this is a change for the better my point is that this replaces a deprecation warning with an unchecked conversion warning the question is shouldnt the following type of change be applied to all aforementioned methods diff a src main java org mockito argumentmatchersjava b src main java org mockito argumentmatchersjava public class argumentmatchers { see isnull see isnull class public static list anylist { public static list anylist { reportmatcher new instanceof listclass return new arraylist return new arraylist } shouldnt the following type of change be applied to all aforementioned methodswhat do you mean by that this replaces a deprecation warning with an unchecked conversion warningdo you mean that ides show an unchecked conversion when using anylist shouldnt the following type of change be applied to all aforementioned methods what do you mean by that im not sure what more to explain the diff shows the addition of a generic type argument to argumentmatchersanylist i propose this change is made to said method as well as argumentmatchers{anysetanymapanycollectio yiterable} this replaces a deprecation warning with an unchecked conversion warning do you mean that ides show an unchecked conversion when using anylist my compiler does and we compile with werror sure i can suppress the warning on our side but the changes im proposing is in line with argumentmatchersany so it seems to make sense oh thanks it seems i forgot to stash these lines i thought it was in the commit im fixing that right now cool see
426,514,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,refactored mockutil to a static utility class current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will decrease coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size powered by codecov https codecoviosrcpr last update b a f bb https codecovio gh mockito mockito compare b a c bc d aff c b fd b daf bb ca e bb e becfc srcpr
426,515,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,refactored allinvocationsfinder and verifiableinvocationsfinder to st… …atic utility classes current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will decrease coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size powered by codecov https codecoviosrcpr last update b a e d https codecovio gh mockito mockito compare b a c bc d aff c b fd b dae d e b fbac e dc b srcpr pascalschumacher these classes have only one public method they can be merged into verificationfinder findverified findall what do you think christianschwarz sure
508,525,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,add regression test for as mentioned in the bug report for adds a test which would catch this issue if it happened to regress in the future current coverage https codecovio gh mockito mockito pull srcpr is diff sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr no coverage report found for master at c a powered by codecov https codecoviosrcpr last update c a https codecovio gh mockito mockito compare c a eb e a d f cae eaff aa d a c srcpr
194,528,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,missing generics info on collection matchers follow up on issue following this comment https githubcom mockito mockito pull issuecomment basically it tweaks the collection matchers with generic support it should have bee in abf
426,535,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,refactored supertypeslastsorter to a static utility class refactored supertypeslastsorter to a static utility classrelates to current coverage https codecovio gh mockito mockito pull srcpr is diff sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size no coverage report found for master at aa a powered by codecov https codecoviosrcpr last update aa a f f a https codecovio gh mockito mockito compare aa a e ea f ba b edd df f a c d c b d srcpr
426,540,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,inlined arrayutilsisempty in argumentsprocessor inlined arrayutilsisempty in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessoralso isempty was renamed to isnullorempty for clarityrelates to current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will decrease coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr powered by codecov https codecoviosrcpr last update dc fb b fa https codecovio gh mockito mockito compare dc fb b c f c e b c c fa aef f e d b faf dbcc f srcpr lgtm
426,547,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,refactored objectmethodsguru to a static utility class refactored objectmethodsguru to a static utility class removed unused methods and associated tests istostring mockitomethod method isequalsmethod method method ishashcodemethod method method renamed istostring to istostringmethod relates to current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will decrease coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr powered by codecov https codecoviosrcpr last update b dcaa c https codecovio gh mockito mockito compare b dca bd a d ea daa a c e a a c d b f srcpr lgtm
538,550,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixed changed error message in case initialization for mock injection fails fixed if a filed is annotated with injectmocks and the type of a field is an enum inner class interface or local class the error message is now _mock injection failed on field fieldname cause the type abstractcollection is an abstract class_ openjdk build failed the others gone clearwow the native world exploded buildsrc test buffer overflow detected usr lib jvm java openjdk amd bin java terminated backtrace lib x _ linux gnu libcso __fortify_fail x x fa e lib x _ linux gnu libcso x d x fa d usr lib jvm java openjdk amd jre lib amd libnetso java_java_net_inet addressimpl_getlocalhostname x a x fa c d x fa d b this seem to be an issue with travis itself https githubcom travis ci travis ci issues from their thread the workaround in the travisyml https githubcom mockito mockito blob master travisymll l doesnt work anymorecc raphw ha theres been a change a few days ago https githubcom travis ci travis ci issues issuecomment people should use the hosts addon ymladdons hosts myshorthost hostname myshorthost aside from the help removal that i dont want removed the code looks good christianschwarz you can rebase on master i may have pushed a working fix for the buffer overflow issue in bric aside from the help removal that i dont want removed the code looks goodthanks for reviewing if you dont mind i would like to have a short discussion on the error message inorder to help devs to fix the issue full error message cannot instantiate injectmocks field named configurationmanageryou havent provided the instance at field declaration so i tried to construct the instancehowever i failed because the type configurationmanager is an interfaceexamples of correct usage of injectmocks injectmocks service service new service injectmocks service service also dont forget about mockitoannotationsinitmocks and dont forget about some mocks for injection line cannot instantiate injectmocks field named fieldname okay that line was replaced with something like injectmocks failed on field f cause the type innerclass is an inner non static class so far so good line you havent provided the instance at field declaration so i tried to construct the instance i would like to remove that line the dev added injectmocks in order to construct an instance do we really need to tell him what he did line however i failed because detailsgetmessage can be removed it is now included in the first line line examples of correct usage of injectmocks hmmm i have no idea how a dev can learn from the provided examples the field declaration is not wrong in this case but the provided filed type that is hard impossible to express in an example if you have an idea i will add it line injectmocks service service new service ouch that hurts i didnt know that it works what do users expect to happen in this case big question imho mockito should fail here indicating that either injectmocks should be removed cause it have no effect or indicating that the field must be initialised with null leaved blank or is it over written after mockito set the field line injectmocks service service same as for line line also dont forget about mockitoannotationsinitmocks this line can be removed the user or rule runner didnt forget to call initmocks other wise he wont see this error message line and dont forget about some mocks for injection that is confusing we dont need mocked fields if the class has an no arg constructor current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by powered by codecov https codecoviosrcpr last update f dd a f b a https codecovio gh mockito mockito compare f dd a d d dfea d e e cfd f b a bd cba fa a a c fc asrcpr heres my comment i strongly insist on keeping a message like the current one line cannot instantiate injectmocks field named fieldname okay that line was replaced with something like injectmocks failed on field f cause the type innerclass is an inner non static class so far so goodid like to keep this introduction here the issue is the instantiation of the field not the mock injection line you havent provided the instance at field declaration so i tried to construct the instance i would like to remove that line the dev added injectmocks in order to construct an instance do we really need to tell him what he did this is debatable but a lot of users dont read the javadoc explaining what mockito has been trying allows users to give a clue how that works this is especially important for this auto injection where the behavior is different than regular di framework line however i failed because detailsgetmessage can be removed it is now included in the first lineindeed the proposed change on cause explanation looks better line examples of correct usage of injectmocks hmmm i have no idea how a dev can learn from the provided examples the field declaration is not wrong in this case but the provided filed type that is hard impossible to express in an example if you have an idea i will add itmaybe the examples can be reworked but he can compare what is good in this simple example with his code without looking at the javadoc thats the idea behind the reporter not just throwing exceptions line injectmocks service service new service ouch that hurts i didnt know that it works what do users expect to happen in this case big question imho mockito should fail here indicating that either injectmocks should be removed cause it have no effect or indicating that the field must be initialised with null leaved blank or is it over written after mockito set the fieldyes this is voluntary and necessary users may require an initialized instance and still perform mock injection after ive seen that with spring or guice constructor then other autowired fieldsfield initialization is a feature that was added after and progressively allowed constructor injection this was not the primary objective at first and thus it may break code line injectmocks service service same as for line i dont see the issue there to have this line as an example line also dont forget about mockitoannotationsinitmocks this line can be removed the user or rule runner didnt forget to call initmocks other wise he wont see this error messageagreed this line can be removed note that this is the junit code others than not use junit line and dont forget about some mocks for injection that is confusing we dont need mocked fields if the class has an no arg constructoractually some people believed that mocks where created automatically from the fields of the injected class his could be reworded though okay fixed the first line contains now the cause message the rest is the same lgtm
384,555,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,junit rules report unused stubs fixes makes junit rules detect unused stubs introduces mockitolistener api see the use case in issue recreated pr with squashed commits lets merge this today this pr is a squash of plus some code changes per code review feedback i addressed code feedback subjectively and selectively current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr powered by codecov https codecoviosrcpr last update f dd a a https codecovio gh mockito mockito compare f dd a d d dfea d e e cfd a fbe f f b d bc cbef esrcpr
527,555,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,junit rules report unused stubs fixes makes junit rules detect unused stubs introduces mockitolistener api see the use case in issue recreated pr with squashed commits lets merge this today this pr is a squash of plus some code changes per code review feedback i addressed code feedback subjectively and selectively current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr powered by codecov https codecoviosrcpr last update f dd a a https codecovio gh mockito mockito compare f dd a d d dfea d e e cfd a fbe f f b d bc cbef esrcpr
554,560,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes checkschecknotnull now throws iae instead of npe changes npe to iae see lgtm you can merge when travis passes
332,568,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes yayhighlights fixed the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs removed stubbinglistener api it could not work to the thread safety levels we support in mockito see also closes fixes current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by powered by codecov https codecoviosrcpr last update e f ca https codecovio gh mockito mockito compare e fa c fb b a b a b e a ca f efa f e b bf c d efc srcpr lgtm thanks for review how come you didnt merge yourself i still want to take a look at this pr can do this evening timvdlippe i almost merged it when i saw your reply literally i was crafting the squashed commit message anyhow if youre squashing you can use this summary fixes unused stubbing detection logic was not thread safe in mockito junit runner killed the stubbinglistener api it couldnt support thread safe scenarios mockito requires small javadoc tweaks removed my login id from javadocs deprecated few more apis connected to the runners ensured we verify correctness of mockitojunitrunnerstrict it was not used directly by any of the tests but it was well tested out great coverage waiting until eod today and merging if no other feedback if youre happy with change merge yourself
401,568,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes yayhighlights fixed the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs removed stubbinglistener api it could not work to the thread safety levels we support in mockito see also closes fixes current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by powered by codecov https codecoviosrcpr last update e f ca https codecovio gh mockito mockito compare e fa c fb b a b a b e a ca f efa f e b bf c d efc srcpr lgtm thanks for review how come you didnt merge yourself i still want to take a look at this pr can do this evening timvdlippe i almost merged it when i saw your reply literally i was crafting the squashed commit message anyhow if youre squashing you can use this summary fixes unused stubbing detection logic was not thread safe in mockito junit runner killed the stubbinglistener api it couldnt support thread safe scenarios mockito requires small javadoc tweaks removed my login id from javadocs deprecated few more apis connected to the runners ensured we verify correctness of mockitojunitrunnerstrict it was not used directly by any of the tests but it was well tested out great coverage waiting until eod today and merging if no other feedback if youre happy with change merge yourself
541,569,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,improved the public api of mockingdetails fixes highlights started exposing full mock creation information instead of just type to mock and extra interfaces changed public api but only for methods that were introduced in x so it is _not_ backwards incompatible change as far as is concerned current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsize &srcpr powered by codecov https codecoviosrcpr last update e fc ab e https codecovio gh mockito mockito compare e fa c fb b a b a b e a c ab e ffc be adc b b bab srcpr id like the comment fixed but it looks good to me waiting until eod today and merging if no other feedback if youre happy with change merge yourself i needed to merge because it was blocking me i can address bric comment later if such is the decision szczepiq nope your feedback works for me as well
552,592,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,stylesheet tweaks for openjdk aimed to fix the javadoc rendering but the assumption was that the javadoc tool of the sun jdk will render javadoc the same way as openjdk unfortunately this is not the same the javadoc rendering of openjdk is a pre work that avoid the use of table elements this making the stylesheet incompatiblethis pr aims to fix that and thus fix bonus i changed the and by in the javadoc this way we have aligned version numbers
497,615,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes returns_deep_stubs may try to mock final classes fixes with deep stubs it was possible for generic metadata to be lost unusedthrough nested invocations on non generic types this could cause returns_deep_stubs to try mocking final classes which would result in a classcastexception apparently my other pr wasnt quite enough to fully fix this problem edited by mockito team current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by powered by codecov https codecoviosrcpr last update b b f https codecovio gh mockito mockito compare b b fa b cc f c cec de ca c b bd e d eaf f srcpr assigning to bric as he did the previous review too also setting to milestone as we have a code freeze atm this looks good to me but can you amend the commit to remove final this is misleading as mockito dont mock final classes as of now _thats why im renaming the prs_ by the way thanks jeffreyfalgout
338,617,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,moves arity interfaces of java helper answers to public api the java helper interfaces have been introduced in however the public additionalanswersanswer family leak the functional interfacesthese _parameter arity_ interfaces can be public hence they are moved next to answer in the orgmockitostubbing packageim however in favor of adding the incubating annotation on those apis and related objects thoughts fixes current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will decrease coverage by diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size powered by codecov https codecoviosrcpr last update ce fb d e https codecovio gh mockito mockito compare ce fcdfa c de ab e a ba b efb d e bee a c f b dd be fc bfsrcpr some very small doc comments lgtm also with the incubating
548,619,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes from now on verification happens always call in other thre… should fix problems with and current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will not change coverage diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size powered by codecov https codecoviosrcpr last update a c ea ea https codecovio gh mockito mockito compare a c c a c b ebf b f ea cec e ea ea d cd fdc d a dd ec srcpr i am going to restart this build a couple of times to test the robustness it could take a while hopefully we have loopsin the meantime try this gist https gistgithubcom lukasz szewc f ca cece a e e b ba a f c got a failed travis job the culprit seems to be orgmockitousageverificationverificationafterdelaytest shouldverifynormallywithspecifictimes i have not touched verificationafterdelaytest in this pr yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so yup another commit with verificationafterdelaytest changes take a look great thanks will be restarting these changes a couple of times too really nice to have deterministic results now tada im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant lukasz szewc also after adding the timeunit parameter to delayedexection could rebase your commits added one missing line is not really the most expressive message i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test added timeunit to constructor reworked one of test in verificationwithtimeouttest mentioned above rebased and pushed with forcetake a look
601,619,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes from now on verification happens always call in other thre… should fix problems with and current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will not change coverage diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size powered by codecov https codecoviosrcpr last update a c ea ea https codecovio gh mockito mockito compare a c c a c b ebf b f ea cec e ea ea d cd fdc d a dd ec srcpr i am going to restart this build a couple of times to test the robustness it could take a while hopefully we have loopsin the meantime try this gist https gistgithubcom lukasz szewc f ca cece a e e b ba a f c got a failed travis job the culprit seems to be orgmockitousageverificationverificationafterdelaytest shouldverifynormallywithspecifictimes i have not touched verificationafterdelaytest in this pr yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so yup another commit with verificationafterdelaytest changes take a look great thanks will be restarting these changes a couple of times too really nice to have deterministic results now tada im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant lukasz szewc also after adding the timeunit parameter to delayedexection could rebase your commits added one missing line is not really the most expressive message i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test added timeunit to constructor reworked one of test in verificationwithtimeouttest mentioned above rebased and pushed with forcetake a look
596,623,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,updated the javadocs polishing the javadocs starting with this small pr issue updated since to instead added more docs around the verification collector current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will not change coverage diff master diff files lines methods messages branches hits misses partials sunburst https codecovio gh mockito mockito pull graphs sunburstsvgsrcpr&size powered by codecov https codecoviosrcpr last update b c https codecovio gh mockito mockito compare b c c d db e a fc fc a e c c b c e b d c e d asrcpr lgtm
439,635,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument varargs by introducing a matcherapplicationstrategy this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches arg call and an other is used to perfrom the capturing fixes argumentcaptor and argumentmatchers can now be mixed in varargs fixes no more npe when null is passed to an varargs added regression tests in varargstest are ignored cause they belong to other issues and fail currently reduced logic duplication current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at fcad powered by codecov https codecoviosrcpr last update fcad fea https codecovio gh mockito mockito compare fcad a a fc e c b faf b b e fea bef bb b bda dde e srcpr on hold as we need to address the beta release thing since these bugfixes will not be included in the rc phase should i send a new pr against release x christianschwarz yes but lets wait until is out this way nobody gets confused christianschwarz ive changed the base branch to release x lets wait until is out this way nobody gets confused mockito team now i am confused who can mockito users be confused by bugfixes in the meantime on the master branch refactorings were merged like and new features are going to be merged too but bugfixed wont be merged we wanted to freeze the release branch while waiting for the rc is a special case which originates from javaone a major selling point for mockito we dont plan to add other changes in the rc christianschwarz this thing will go in i mean it i think capturing matcher deserves an overfaul and i like the enhancement youve made but feature freeze is essential sorry for the longer rc phase but i think its for the better christianschwarz by the way could you rebase your commits on top of release x because git seems to see unrelated commits form timvdlippe bric this pr is now rebased on release x it the master now used for mockito x all if you have some time besided the numerous ci tasks please review this pr great thanks it may be delayed again due to some disagreement on the ci cdotherwise yes the master is for mockito x i should probably update the contributing guide and the template as well some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method but its a nice code improvementother improvements can be made later thanks again christianschwarz christianschwarz this is an impressive code change improving not only the behavior but also code and test coverage thanksthanks bric for reviewing and merging the pr bric some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with at first i tried to retrieve the type argument from the class but this turned out to be more complex eg when the type argument is bound in an upper class or interface or additional type arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now other improvements can be made later sounds good can you open a new ticket so i can take look mockito core can be closed now other improvements can be made later sounds good can you open a new ticket so i can take lookat the moment this works quite well so no hurry especially given your above remark on mockito on master atm we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that christianschwarz i have seen an interesting problem with varargstest fail on master which is jdk only while the same test passes on release x which is compiled and run against jdk im not sure why at the moment this behavior is different plus my dev laptop is being fixed for a few days so im limited in my debug right nowthis happened after a merge of release x to master df af b e cd bf c db ecafe i noticed that verify mock varargs isnull is compiled to invoke imethodsvarargs string string im not sure other jdks behave compile differently though one of the failing test can be fixed by adding the cast statement test public void shouldmatchvarargs_nullarrayarg { object argarray null mockvarargs argarray verify mock varargs object isnull otherwise it is linked against string } could it be that something went wrong with the merge regarding this pr christianschwarz actually the investigation continue see https githubcom mockito mockito issues issuecomment
583,635,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument varargs by introducing a matcherapplicationstrategy this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches arg call and an other is used to perfrom the capturing fixes argumentcaptor and argumentmatchers can now be mixed in varargs fixes no more npe when null is passed to an varargs added regression tests in varargstest are ignored cause they belong to other issues and fail currently reduced logic duplication current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at fcad powered by codecov https codecoviosrcpr last update fcad fea https codecovio gh mockito mockito compare fcad a a fc e c b faf b b e fea bef bb b bda dde e srcpr on hold as we need to address the beta release thing since these bugfixes will not be included in the rc phase should i send a new pr against release x christianschwarz yes but lets wait until is out this way nobody gets confused christianschwarz ive changed the base branch to release x lets wait until is out this way nobody gets confused mockito team now i am confused who can mockito users be confused by bugfixes in the meantime on the master branch refactorings were merged like and new features are going to be merged too but bugfixed wont be merged we wanted to freeze the release branch while waiting for the rc is a special case which originates from javaone a major selling point for mockito we dont plan to add other changes in the rc christianschwarz this thing will go in i mean it i think capturing matcher deserves an overfaul and i like the enhancement youve made but feature freeze is essential sorry for the longer rc phase but i think its for the better christianschwarz by the way could you rebase your commits on top of release x because git seems to see unrelated commits form timvdlippe bric this pr is now rebased on release x it the master now used for mockito x all if you have some time besided the numerous ci tasks please review this pr great thanks it may be delayed again due to some disagreement on the ci cdotherwise yes the master is for mockito x i should probably update the contributing guide and the template as well some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method but its a nice code improvementother improvements can be made later thanks again christianschwarz christianschwarz this is an impressive code change improving not only the behavior but also code and test coverage thanksthanks bric for reviewing and merging the pr bric some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with at first i tried to retrieve the type argument from the class but this turned out to be more complex eg when the type argument is bound in an upper class or interface or additional type arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now other improvements can be made later sounds good can you open a new ticket so i can take look mockito core can be closed now other improvements can be made later sounds good can you open a new ticket so i can take lookat the moment this works quite well so no hurry especially given your above remark on mockito on master atm we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that christianschwarz i have seen an interesting problem with varargstest fail on master which is jdk only while the same test passes on release x which is compiled and run against jdk im not sure why at the moment this behavior is different plus my dev laptop is being fixed for a few days so im limited in my debug right nowthis happened after a merge of release x to master df af b e cd bf c db ecafe i noticed that verify mock varargs isnull is compiled to invoke imethodsvarargs string string im not sure other jdks behave compile differently though one of the failing test can be fixed by adding the cast statement test public void shouldmatchvarargs_nullarrayarg { object argarray null mockvarargs argarray verify mock varargs object isnull otherwise it is linked against string } could it be that something went wrong with the merge regarding this pr christianschwarz actually the investigation continue see https githubcom mockito mockito issues issuecomment
520,639,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,update travis configuration to also build on oraclejdk lets see if this actually works testing for current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will increase coverage by diff master diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update f a b c https codecovio gh mockito mockito compare f a f de d e c a d f d b c b fb e d e bda ee srcpr all right for this one the htmldoclet is actually breaking the build which was apparently the issue in therefore reopening that one jdk is working but it seems they have moved some classes in jdk not sure if we can have a configuration which works for both jdks i have started the configuration to only compile certain files on a specific jdk version to at least not fail compilation on jdk however as i personally do not have jdk installed still running on jdk i cant develop a valid doclet does anyone else want to take over implementing the exclude function otherwise it lgtm one eternity later all right this took quite a while but we can actually compile on jdk now tada this required some workarounds to bugs in various versions of our dependencies i updated gradle to this release fixes an internal classcastexception when compiling groovy buildsrc code i updated jacoco to the latest snapshot release to get around several exceptions thrown in the bytecode generated by jacoco the corresponding pr is https githubcom jacoco jacoco pull i sadly had to remove the doclet for jdk because the latest release available for xenial release is build which does not expose the actual doclets and internal packages required to write a doclet this is fixed in later builds but these are only published for the development version of ubuntu cry all in all we are now compiling correctly but sadly we have failing tests https travis ciorg mockito mockito jobs l l these seem to be related to assertj failing to understand genericsi have also seen other test failures so maybe some other tests are failing still szpak could you try this branch and see if it compiles locally for you only more failure with the inline mock maker tests https travis ciorg mockito mockito jobs l l asm support for java is still in an alpha state therefore java class files are still rejected the moment asm is released this is updated optionally we can use byte buddy dep and explicitly use asm alpha i think we should keep the actual bytebuddy we could eventually disable the test with jdk using assumethat i do not think that remi will release asm before the class file format is finalized and i do neither think it is a good idea to rely on these things yet the java class files can change any day and given this it is not yet possible to rely on the inline transformer with java just yet for pure subclassing byte buddy does not need to process any java class files which is why i would suggest to add a rule to the inliner tests to not be run on java yet anything but it should work i will disable the test on jdk then thanks for the explanation ignoring the broken test on jdk this pr should now be green i would propose to merge this pr right now and fix possible incoming java issues in separate prs instead may we could detect the api level of asm not sure whats the best way to start we can detect if opcodes contains v _ or asm see branch of asm http websvnow org filedetailsphprepnameasm&path fbranches fasm_ _future fasm fsrc forg fobjectweb fasm fopcodesjava bytebuddy repackages it in netbytebuddyjarasmopcodes that way we wont forget to enable this code again also shall we update jacoco snapshot http wwweclemmaorg jacoco trunk doc changeshtml theres a new build also shall we update jacoco snapshot theres a new buildi would rather wait for the official release and upgrade to that ok fair enough shalli merge this one yes
640,646,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes warns user to upgrade if java version is to low fixes warns user to upgrade if java version is to lowalso took the opportunity to log other platform details if mock class cannot be created before merging not that automatic release system will release a rc current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into release x https codecovio gh mockito mockito branch release xsrcpr will decrease coverage by diff release x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update db ff ffff https codecovio gh mockito mockito compare db e c a d dcf c f a b feb ecff ffffe b d a c cbf d ff a d e fsrcpr some test for platform would be nice especially too see if the version number extraction works with all known formats eg feature b maintai ce _ ea b update _ b _ ea b http wwworaclecom technetwork java javase versioning naming htmlhow does it work for other jvms like jrockit j or excelsior jet ok thanks for feedback ill update the code accordingly beautiful we can push and generate new rc or use the magic incantation in the commit message to prevent release and stack this change to next rc if there is need for yet another rc christianschwarz we dont care about those as we dont have report on those only oracle openjdk although i dont know about their version scheme bea now oracle jrockit discontinued last version is java and oracle migrated features in oracle jdk ibm j excelsior jet azul zing azul zulu based on openjdk bric what i wanted to say was the update version mechanism should be aware of version schemes other than the expected the current implementation throws an indexoutofboundsexception if the jvm_version is eg b _u or an numberformatexception if the jvm_version is _ ea b christianschwarz fantastic review thanks christianschwarz yes no problem that was a valuable input i didnt want these exceptions to be thrown i updated the test case and i did some research as well for future cases like this wow really nice tests tada this lgtm
653,654,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,renamed failuredetecter to failure detector also renamed misspelled issussessful to issuccessful fixes current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will not change coverage diff master diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update bde b f ea https codecovio gh mockito mockito compare bde b f a d edd e c e e f ea f bee cb cd a aebaa srcpr thanks oliver
707,711,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes adds throwable to arity answers also improved javadoc all in the title this should fix lgtm restarted the build that was failing on an unrelated test current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at f f d powered by codecov https codecoviosrcpr last update f f d cda c https codecovio gh mockito mockito compare f f d d ea f ad da ce adacda c eab c c bcfe b bsrcpr
727,746,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,add missing copyright headers x fixes x add missing copyrights using license gradle plugin https githubcom hierynomus license gradle plugin x updated only source files test files were skipped existing copyright headers were not modified unfortunately the plug in is not compiled for java i really would like to avoid as much as possible maintaining x too long however i suppose we can change the jdk that gradle use if this is a separate task in traviswhy a separate task because if gradle runs the under the code under another jdk we may miss specific jdk runtime behavior per https githubcom hierynomus license gradle plugin issues issuecomment we can use version and make it work on jdk good point lets do that instead dmitriyzaitsev could you amend b af e e e a e b a f d f with the working version thanks in advance dmitriyzaitsev by id like to say you have done a proper pull request thats very nice current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at a f f powered by codecov https codecoviosrcpr last update a f f b a https codecovio gh mockito mockito compare a f f e b dd c d ec af f b a fc afd b ebde f c aa srcpr bric ive switched plugin version to rebased my branch and resubmitted added fixes after szczepiq review dmitriyzaitsev thanks thx dmitriyzaitsev
731,771,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes implements retry rule for flaky tests previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in to gain back stability on the build current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at fc c powered by codecov https codecoviosrcpr last update fc cb fe https codecovio gh mockito mockito compare fc cba c c d b cf d ab fe abec c bbac ec b ee c srcpr the amount of import reordering and stylistic changes is quite high sadly would be nice to prevent these for new prs the amount of import reordering and stylistic changes is quite high sadly would be nice to prevent these for new prsregarding the imports i followed the new style guide to lower this noise we can apply the style guide on the whole project also i think its possible to export import the intellij eclipse style config bric yes it is good you enforce it its that others dont p seems like a good idea to fix it once and then block prs if they change it
801,803,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,adds a warning for ibm j vms if mock generation fails related to this pr simply adds a warning for ibm j vms if the mock maker fails current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at c fa e powered by codecov https codecoviosrcpr last update c fa e cbdc https codecovio gh mockito mockito compare c fa edd fe a e ace b fcb cbdc c e ae a e cca c srcpr damn build not passing due to some certificate issue yet i think its safe to merge yes i have seen that error multiple times now it seems to be related to the release tool of szczepiq i believe its the jdk installed on travis that is not updated with new certificates of pluginsgradle bu i dont understand why atm didnt investigated either the sooner we purge jdk the better stuck_out_tongue agreed theres a few things to do on mockito still but i cant agree more
770,807,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,new opt in stubbing strictness implemented in junit rules new api for rationale see for code review history see java existing api rule public mockitorule mockito mockitojunitrule proposed improvements rule strictness strictnesslenient rule strictness strictnesswarn no coverage report found for release x at a powered by codecov https codecoviosrcpr last update a https codecovio gh mockito mockito compare ad c edcfb af fde a f fc d a c b e bb csrcpr thanks for the hint on slack about git push f i could have used it to fix the original pr for extra safety prefer git push force with lease agreed with timvdlippe its simplier if you rebase interractively on your machine then push force with lease
820,821,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fixes returnsargat to handle returning vararg as arrays attempt at fixing basically it makes the returnsargumentat answer a bit more smart about varargs but im not satisfied with the fix yet current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at c b powered by codecov https codecoviosrcpr last update c b d https codecovio gh mockito mockito compare c b d df a a b c a d bb f aa bd f e e srcpr wouldnt it a bit confusing that returnsargat returns different types for the same argument type javaint foo int input returnsargat would return an arrayint foo int input returnsargat would returns an int what about handling varargs always as array it would break the actual behaviour but i wonder if this would be an option in mockito timvdlippe not sure what _stfm_ https wwwgooglefr searchqsftm&oqsftm&aqschrome i j l j j &sourceidchrome&ieutf qdefine sftm means p christianschwarz yeah i pondered on this the use case is pretty limited though ie all following conditions have to be met for the type change to take effect vararg method wanted index have to be the index of the vararg type of the vararg have to be assignable to the return typein the end i think the new behavior makes sense java int foo int input returnsargat would return an array int foo int input returnsargat would returns an int wouldnt it a bit confusing that returnsargat returns different types for the same argument typeactually the current behavior is confusing hence the what about handling varargs always as array it would break the actual behaviour but i wonder if this would be an option in mockito im not sure what you exactly mean but what about arg index beyond the first position of the vararg javaint foo int input foo when then returnsargat as a user i wouldnt be happy without and i wouldnt be happy this behaviour changed one of the thing that displease me here is that answersvalidator knows too much about answers id like a validable answer bric im not sure what you exactly mean what i wanted to say is a bit out of scope for this pr i try keep it short mocktio should not expand varargs and treat them as regular arguments this causes also problems in various vararg captor scenarios maybe it is better to handle varargs seperate example int return type javaint foo int input foo when then returnsargat ^ throws an exception arg of type int is not compatible with return type int new api for varargswhen then returnvarargat returns example int return type javaint bar int input bar when then returnsargat return the vararg int new api for varargswhen then returnvarargat ^ throws an exception arg of type int is not compatible with return type int one of the thing that displease me here is that answersvalidator knows too much about answers id like a validable answer great idea to keep answer a sam functionalinterface an extra interface validatableanswer would be required right to keep answer a sam functionalinterface an extra interface validatableanswer would be required rightyes what i wanted to say is a bit out of scope for this pr i try keep it short mocktio should not expand varargs and treat them as regular arguments this causes also problems in various vararg captor scenarios maybe it is better to handle varargs seperate i dont know i feel mockito should handle this without requiring another answer also since there can only be one vararg in a method the position this api would be akward javaint bar char a char b int input bar a b new api for varargswhen then returnvarargat to return timvdlippe not sure what stfm means pwas a typo meant seems fine to me i still think the change is safe and predicatable from a users perspective however lets wait on rebased on top of release x its better now ill see if i can improve the code now nice work and really cool idea about validableanswer mockito should not expand varargs and treat them as regular arguments this causes also problems in various vararg captor scenariosi have high level feedback hopefully you find it useful mockito is optimized for simplicity intuitiveness readability var args look in the code as a sequence of args and mockito models it similarly in the api thats why we expand them can we solve captor vararg edge cases while keeping the api simple yeah agreed ok now the implementation seems more readable it is ready for reviewive updated the javadoc to document the behavior as well on mobile right now but implementation seems fine
818,823,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,only resolve instrumented method after validating that an instance is… this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a method instance which requires using a hashmap which causes an infitite loop upon mocking the hash map type fixes current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at c c powered by codecov https codecoviosrcpr last update c c ea a e https codecovio gh mockito mockito compare c c d e ec ed d fbf cb fea a eb bef d cb a d faeb ebcd esrcpr i agree i will look into it and make a wuggestion
820,826,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,introduce validable answers for early validation of stubbing overviewcustom answers are now more robust users can add add validation logic to the answer implementation it can validate the return type early during stubbing in test rather than fail late during execution of code under test mockito team uses this api behind the hood for all custom implementations of answer interface now advanced users can leverage this new api too javaclass mycustomanswer implements answer validableanswer { no coverage report found for release x at e f powered by codecov https codecoviosrcpr last update e f d ad https codecovio gh mockito mockito compare e f d a c ab bd c bb be ad d d ad f e cb c d d esrcpr hey from the description i dont quite get why we need additional public api what does this public api give to the users what does this public api give to the usersusers that like to write there own answers have now the opportunity to add a runtime usage validation this was not possible before the answersvalidator had the knowledge about predefined mockito answers harded coded it was not extensible from outside thats why this api is public updated since to i think this could be used for better maintainability for framework developers like mockito sugar that could add specifics regarding scala method signatures etc damn the correct version is thanks for quick turnaround really nice change added a press release to the top of this pr description szczepiq a press release szczepiq a press release by press release i mean a paragraph that describes the benefits for the users at a high level oh you meant on the mockito class pointing to this https githubcom mockito mockito pull filesdiff b b a e e f c cr i find the feature less interesting than strict stubbing for end users i think the release notes should be enough
822,830,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,improves exception message in case a matcher is used for a primitive parameter this should help for cases like npe can be raised by the jvm on the callsite of a matcher returning object like any the thing is that the jvm does several thing like to allows a type to match a signature like t any type inference with java cast and unboxing however any can only return null so the jvm raises an npe on the cast opcode of course the problem isnt new but more possible due to java flexibility thats why mockito had for a long time the primitivewhen mockito is used with the junit runner or the junit rule theres a invaliduseofmatchersexception raised after the npe with a message about misplaced matchers this exception is raised because the matchers were not consumed by the mock since the npe is raised first so this exception is correct and can help the neophyte to discover the primitive variant like anyint i love this change the description of the pr is really good i immediately was able to understand the use case mockito is great because we never stop improving the ux the exception messages and suchbig thanks
825,831,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,test clean up according to discussions for rememberinglisteners according to issue we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in that build was failing for some reason not obvious and had merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into release x https codecovio gh mockito mockito branch release xsrcpr will not change coverage diff release x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update afcda c https codecovio gh mockito mockito compare afc c f a d a e e e eda c faf d a c f e e b d e srcpr bric timvdlippe sorry for this new pr with the same code previously we were discussing in an attempt to fix the pr github lost the link and i couldnt reconnect it this pr is building and has only one commit message and no merge looks good to me thanks for the improvement
838,839,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes adds a matches pattern following discussion in it is sensible to add a mockito matcher that can take a pattern as an argumentthe usage is the same as matches string javawhen mockonearg matches patterncompile a z \\d\\d thenreturn although it allows to build more complex regex especially with regular expression flags mockito core since the pr is fairly in scope amd fairly straightforward limited ill merge it right away mockito core since the pr is fairly in scope amd fairly straightforward limited ill merge it right awayabsolutelyupdating the public api needs review from other team mates but in this case its best to move fast its an overloaded method very natural complement to the existing one thanks bric yes exactly
840,843,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,junit rule strictness can be tweaked per test method see the design and rationale at please review current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into release x https codecovio gh mockito mockito branch release xsrcpr will increase coverage by diff release x diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update cfd https codecovio gh mockito mockito compare a fd a aae f abd ad f cfd efe c e fcbd da ae f srcpr any other feedback id love to merge this change merging tomorrow morning unless theres feedback thanks timvdlippe for review
860,861,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,backport release x changes to master fix for backport release x changes to master the fix for reported also for broken inlinebytebuddymockmakertest test with java current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will decrease coverage by diff master diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update b b eae https codecovio gh mockito mockito compare b b e ca e c e ae b ff ae c c b e efeba b e e ddc f srcpr its green anyone willing to approve provide further feedback lgtm
384,865,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status x address bric feedback x getter x javadoc x review documentation for consistency x mockitosession x mockitosessionbuilder x strictness x mockitohint x potentialstubbingproblem x unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at c bd powered by codecov https codecoviosrcpr last update c bdd f https codecovio gh mockito mockito compare c bd fd a c bbcc ad f cc f afd f e e f ba d a c affc fsrcpr bit busy in this couple of weeks il give my review asap probably next week i think this api makes more sense if it is actually used in the junit rule and runner eg this api exposes the methods and implementation and the rule runner call this api accordingly thanks guys waiting for feedback timvdlippe i completely agree this api should be used by the rule runner what are your thoughts about exposing this api to the users szczepiq not sure what the benefit is for users therefore i would like this pr to implement it as internal api used in the rule and runner later we can see if we want to expose it or not timvdlippe thanks for feedback you are not sure about benefits of a strict stubbing or b strict stubbing availibility need outside of runner rule szczepiq b strict stubbing is very valuable but i am not sure what a user could do with the api outside of a runner rule i think keeping it internal is just fine for now ok what about users that cannot use our junit rule runner at this moment i am not aware of users requesting this still we can initially keep it internal and expose it later if requested im with you on being very cautious about introducing features without user feedback or request i think that this exactly the approach the core team should have to build a great librarything is that in this situation there are users needing it for example im frustrated that myself and other engineers at linkedin cannot use strict stubbing most of the tests use testng there are also usages of custom runners another use case are existing integrations like jukito https githubcom arcbees jukito springockito http wwwspringockitoorg etc users of those frameworks wont be able to take advantage of strict stubbingin general if the team chooses to implement a feature such us strict stubbing then we should make the usage of the feature easy and flexible we should not lock in users with junit for example mockito has mock annotation and offers flexible way of using that annotation with junit rule runner and without them initmocks method also keep in mind that the new api is incubating so we could potentially take it away if we dont find it valuablethoughts myself and other engineers at linkedin cannot use strict stubbingi was not aware of this usecase as no issue was created given that this is requested by user making it public is okay with me pushed changes new api is ready some todos javadoc updates in code are pending i will try to review the pushed change tonight but im a tad overwhelmed at this moment i added game plan to the pr description thanks so much for review the code will not be changed much individual commits can be reviewed anyway i just rebased and bumped minor version to this code is ready for final review and merge i dont plan to work on the code unless there is more feedbackthe remaining unfinished action item in the description is a non code change and does not block the review merge if there is no more feedback id like to merge thanks guys for comprehensive review and pointing out improvements
857,865,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status x address bric feedback x getter x javadoc x review documentation for consistency x mockitosession x mockitosessionbuilder x strictness x mockitohint x potentialstubbingproblem x unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at c bd powered by codecov https codecoviosrcpr last update c bdd f https codecovio gh mockito mockito compare c bd fd a c bbcc ad f cc f afd f e e f ba d a c affc fsrcpr bit busy in this couple of weeks il give my review asap probably next week i think this api makes more sense if it is actually used in the junit rule and runner eg this api exposes the methods and implementation and the rule runner call this api accordingly thanks guys waiting for feedback timvdlippe i completely agree this api should be used by the rule runner what are your thoughts about exposing this api to the users szczepiq not sure what the benefit is for users therefore i would like this pr to implement it as internal api used in the rule and runner later we can see if we want to expose it or not timvdlippe thanks for feedback you are not sure about benefits of a strict stubbing or b strict stubbing availibility need outside of runner rule szczepiq b strict stubbing is very valuable but i am not sure what a user could do with the api outside of a runner rule i think keeping it internal is just fine for now ok what about users that cannot use our junit rule runner at this moment i am not aware of users requesting this still we can initially keep it internal and expose it later if requested im with you on being very cautious about introducing features without user feedback or request i think that this exactly the approach the core team should have to build a great librarything is that in this situation there are users needing it for example im frustrated that myself and other engineers at linkedin cannot use strict stubbing most of the tests use testng there are also usages of custom runners another use case are existing integrations like jukito https githubcom arcbees jukito springockito http wwwspringockitoorg etc users of those frameworks wont be able to take advantage of strict stubbingin general if the team chooses to implement a feature such us strict stubbing then we should make the usage of the feature easy and flexible we should not lock in users with junit for example mockito has mock annotation and offers flexible way of using that annotation with junit rule runner and without them initmocks method also keep in mind that the new api is incubating so we could potentially take it away if we dont find it valuablethoughts myself and other engineers at linkedin cannot use strict stubbingi was not aware of this usecase as no issue was created given that this is requested by user making it public is okay with me pushed changes new api is ready some todos javadoc updates in code are pending i will try to review the pushed change tonight but im a tad overwhelmed at this moment i added game plan to the pr description thanks so much for review the code will not be changed much individual commits can be reviewed anyway i just rebased and bumped minor version to this code is ready for final review and merge i dont plan to work on the code unless there is more feedbackthe remaining unfinished action item in the description is a non code change and does not block the review merge if there is no more feedback id like to merge thanks guys for comprehensive review and pointing out improvements
898,865,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status x address bric feedback x getter x javadoc x review documentation for consistency x mockitosession x mockitosessionbuilder x strictness x mockitohint x potentialstubbingproblem x unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at c bd powered by codecov https codecoviosrcpr last update c bdd f https codecovio gh mockito mockito compare c bd fd a c bbcc ad f cc f afd f e e f ba d a c affc fsrcpr bit busy in this couple of weeks il give my review asap probably next week i think this api makes more sense if it is actually used in the junit rule and runner eg this api exposes the methods and implementation and the rule runner call this api accordingly thanks guys waiting for feedback timvdlippe i completely agree this api should be used by the rule runner what are your thoughts about exposing this api to the users szczepiq not sure what the benefit is for users therefore i would like this pr to implement it as internal api used in the rule and runner later we can see if we want to expose it or not timvdlippe thanks for feedback you are not sure about benefits of a strict stubbing or b strict stubbing availibility need outside of runner rule szczepiq b strict stubbing is very valuable but i am not sure what a user could do with the api outside of a runner rule i think keeping it internal is just fine for now ok what about users that cannot use our junit rule runner at this moment i am not aware of users requesting this still we can initially keep it internal and expose it later if requested im with you on being very cautious about introducing features without user feedback or request i think that this exactly the approach the core team should have to build a great librarything is that in this situation there are users needing it for example im frustrated that myself and other engineers at linkedin cannot use strict stubbing most of the tests use testng there are also usages of custom runners another use case are existing integrations like jukito https githubcom arcbees jukito springockito http wwwspringockitoorg etc users of those frameworks wont be able to take advantage of strict stubbingin general if the team chooses to implement a feature such us strict stubbing then we should make the usage of the feature easy and flexible we should not lock in users with junit for example mockito has mock annotation and offers flexible way of using that annotation with junit rule runner and without them initmocks method also keep in mind that the new api is incubating so we could potentially take it away if we dont find it valuablethoughts myself and other engineers at linkedin cannot use strict stubbingi was not aware of this usecase as no issue was created given that this is requested by user making it public is okay with me pushed changes new api is ready some todos javadoc updates in code are pending i will try to review the pushed change tonight but im a tad overwhelmed at this moment i added game plan to the pr description thanks so much for review the code will not be changed much individual commits can be reviewed anyway i just rebased and bumped minor version to this code is ready for final review and merge i dont plan to work on the code unless there is more feedbackthe remaining unfinished action item in the description is a non code change and does not block the review merge if there is no more feedback id like to merge thanks guys for comprehensive review and pointing out improvements
866,867,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fixes should not throw npe when custom exception fillinstacktrace returns null fixes wuwen can you rebase this commit on the latest release x also thanks for the contribution the build is failingthe reason is please export gh_token env variable first expression javalangsystemenv it values it gh_token timvdlippe that sound familiar however i believe this was fixed a couple of weeks ago
860,868,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,fixes jacaco synthetic fields are not anymore final in fixes this internal assumed jacoco fields will always be static final obviously not jacoco changed that the simple fix was to make the source field _accessible_ instead of skipping this fieldhence removing the test exclusion
879,880,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes argumentmatchers javadoc grammar improvement fixed grammar issue in argumentmatchers this implementation is due static type safety imposed by java compilershould be this implementation is due to static type safety imposed by java compilerthis pr fixes issue current coverage https codecovio gh mockito mockito pull srcpr is diff merging https codecovio gh mockito mockito pull srcpr into master https codecovio gh mockito mockito branch mastersrcpr will decrease coverage by diff master diff files lines methods messages branches hits misses partials powered by codecov https codecoviosrcpr last update c f a d https codecovio gh mockito mockito compare c f a eb d f f d a d a bea d e dff ce ab b a c e c asrcpr thanks
879,881,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixed argumentmatchers grammar fix cherry pick pr to the x branchthis pr should fix issue on this branch too
878,885,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,spy annotation reports better error message if instance creation is impossible this simple piece of code prevents the spyannotationengine to try create a spy instance for a some inner private class with different set of modifierswhile preventing execution it reports slightly better error messages before some time the cause was null this should fix current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at e acd powered by codecov https codecoviosrcpr last update e acd d a e https codecovio gh mockito mockito compare e acdef da f f d e eff d a e a dbaba f bc c c e esrcpr the diff is quite cluttered with unrelated changes https githubcom mockito mockito pull filesw makes it a bit easier but still a lot of other changes going onif i can digest the changes correctly i think they are fine timvdlippe theres some reformat and cleanup commit the most interesting is the latest commit timvdlippe theres some reformat and cleanup commit the most interesting is the latest committhis is useful information i can focus on the last commit comments addressed
874,891,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,update to byte buddy fixes bridge method resolution for generic types fixes
895,896,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,clarify documentation for consecutive stubbing fixes as of now the documentation does not clarify the difference of behaviour between chaining multiple thenreturn statements and using multiple when thenreturn statements when someone attempts to perform consecutive stubbingi added a warning clarification in the documentation with a corresponding example so that its more clear especially for new users of mockito current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at e acd powered by codecov https codecoviosrcpr last update e acd c a d https codecovio gh mockito mockito compare e acdef da f f d e eff c a deae d c adef d c d a srcpr hi dimosr thank you for the javadoc update could you rework the javadoc a bit
814,905,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes a elements were missing the name attribute meaningful links probably never worked as expectedthe a elements were missing the name attribute so the browser couldnt find the matching part of the documentfor reference navigating to a fragment identifier http wwww org html wg drafts html master browsershtmlscroll to fragid for html documents and the text html mime type the following processing model must be followed to determine what the indicated part of the document is parse the url and let fragid be the component of the url if fragid is the empty string then the indicated part of the document is the top of the document if there is an element in the dom that has an id exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here if there is an a element in the dom that has a name attribute whose value is exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here otherwise there is no indicated part of the document i am merging this one as this is very simple hm dont want a quick review i try to never self merge as it got me numerous times already the change is damn simple its just adding name attribute fixed with a simple regexp current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at de a powered by codecov https codecoviosrcpr last update de a ad d https codecovio gh mockito mockito compare de a bbc f bd fbbf cde d bb ad d cc c e b eb d afa b aed a srcpr
426,907,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,unified all number of invocations checker in numberofinvocationschecker fixes this pr unifies the functionality of nongreedynumberofinvocationschecker numberofinvocationscheckerinorder and numberofinvocationschecker in static methods of the type numberofinvocationschecker this saves lines of code and increases readability on the call sides current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at f b powered by codecov https codecoviosrcpr last update f b fe e dc https codecovio gh mockito mockito compare f b c fa c aa a b c d f affe e dc cdc fd ad a ca e casrcpr timvdlippe the unification of the classes helps to keep the code base consistent we have a similar unification of checking methods in missinginvocationchecker and atleastxnumberofinvocationschecker the call sides can now use static imports which improves the readability javachecknumberofinvocations invocations wanted wantedcount vs javanumberofinvocationschecker numberofinvocations new numberofinvocationschecker numberofinvocationscheck invocations wanted wantedcount timvdlippe can you reopen it was automatically closed sure then please alter the pr description to references instead offixeson fri jan christian schwarz wrote timvdlippe can you reopen it was automatically closed — you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread
426,908,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,simplified the creation of argumentsaredifferent exceptions relates to this pr simplifies the creation of argumentsaredifferent exceptions saving classes and lines of code codecov https codecovio gh mockito mockito pull srcpr&elh report exclamation no coverage uploaded for pull request base release x cbc f click here to learn what that means https docscodecovio docs error referencesection missing base commit the diff coverage is diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ java org mockito internal exceptions reporterjava https codecovio gh mockito mockito compare cbc f d c cd dcc b c bd a fe b d f fdac esrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme a org mockito internal junit exceptionfactoryjava https codecovio gh mockito mockito compare cbc f d c cd dcc b c bd a fe b d f fdac esrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc fegnlchrpb gywn b j lmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update cbc f a https codecovio gh mockito mockito compare cbc f d c cd dcc b c bd a fe b d f fdac esrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments szczepiq bric the tests are in place now bump why the hell it is so important to end a java file with a new line seriously why the build must break same goes for a single whitespace at the end of a line it adds a lot of more workload to fix this non issues for no benefit christianschwarz the checkstyle configuration is incubating at the moment primarily it enforces the same code style such that we as reviewers have an easier time and process pull requests faster cutting out the noise these issues you can check by running gradlew build locally so you should not rely on ci to error on them i know better provide a formatter template so it can be done by the ide doing it by hand is a stubid frustrating job christianschwarz hm i have configured my intellij to do this automatically for me so it is not bothering my workflow maybe you can configure your ide to do the same that was actually the goal of enforcing checkstyle every developer configures the ide to fix this automatically can you export your formatter and add a download link to wiki contribution guidelines finally ready to merge
426,914,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,refactored removefirstline to a static utility class relates to refactored removefirstline to a static utility classi would like to unifiy removefirstline decamelizer and stringjoiner to a new type stringutil they all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes any thoughts current coverage https codecovio gh mockito mockito pull srcpr is diff no coverage report found for release x at ef powered by codecov https codecoviosrcpr last update ef d https codecovio gh mockito mockito compare ef a cb ccbd da da a e b d d cd fb b e e f d srcpr i think refactoring these classes to stringutil makes the most sense we can do that in pr instead of separate lets see what the others think okay lets see what others say i added a commit containing the unification missing tests if requested i will remove the commit
927,933,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,support for return type void in doesnothinganswer fixes this pr allows to use donothing for methods with return type javalangvoid like void methods to solve this invocationinfoisvoid checks now the return type for the pseudo type of the keyword void or void codecov https codecovio gh mockito mockito pull srcpr&elh report exclamation no coverage uploaded for pull request base release x e a b click here to learn what that means https docscodecovio docs error referencesection missing base commit diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ kito internal stubbing answers invocationinfojava https codecovio gh mockito mockito compare e a b b dbdb e c c b c d ba e e bf f ffc f b e e b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy hbnn zxjzl ludm jyxrpb jbmzvlmphdme ava org mockito internal stubbing stubberimpljava https codecovio gh mockito mockito compare e a b b dbdb e c c b c d ba e e bf f ffc f b e e b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvysw wbc qyxzh mockito internal stubbing answers doesnothingjava https codecovio gh mockito mockito compare e a b b dbdb e c c b c d ba e e bf f ffc f b e e b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy hbnn zxjzl rvzxnob roaw nlmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e a b ba https codecovio gh mockito mockito compare e a b b dbdb e c c b c d ba e e bf f ffc f b e e b elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
685,935,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,new feature enable mocking using constructor arguments motivation and design see to quote the requirement see in depth design in we already support spying on abstract classes by allowingparameterless constructor however there is no support forconstructor parametersthis has been asked about long time ago mockito api is not robustenough if it supports mocking with constructor but not when one hasany constructor parametersthis patch enhances the mocksettingsuseconstrctor method as suggested in the alternative api comment in the issue and addsoptional ellipsis arguments that are passed to the constructorthe patch streamlines the creation of mocks via constructors to asingle flow where using a no arg constructor or an enclosing classare just private cases of this flow and dont require their ownspecial treatment wow thank you for swift contribution i will review once i have a bandwidth apologies the previous push had a couple of failing tests due to a missed file ive updated it and it should work now codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b bbeee f dc b bee fb c c dc srcpr&eldesc will increase coverage by the diff coverage is diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito compare b bbeee f dc b bee fb c c dc cdb eed ddd d ecd d a b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme x creation instance defaultinstantiatorproviderjava https codecovio gh mockito mockito compare b bbeee f dc b bee fb c c dc cdb eed ddd d ecd d a b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi pbnn yw jzs ezwzhdwx sw zdgfudglhdg yuhjvdmlkzxiuamf yq x o internal creation settings creationsettingsjava https codecovio gh mockito mockito compare b bbeee f dc b bee fb c c dc cdb eed ddd d ecd d a b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi zzxr aw ncy dcmvhdglvblnldhrpbmdzlmphdme nal creation instance constructorinstantiatorjava https codecovio gh mockito mockito compare b bbeee f dc b bee fb c c dc cdb eed ddd d ecd d a b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi pbnn yw jzs db zdhj y rvckluc rhbnrpyxrvci qyxzh white_check_mark rg mockito internal creation mocksettingsimpljava https codecovio gh mockito mockito compare b bbeee f dc b bee fb c c dc cdb eed ddd d ecd d a b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi nb nru v dgluz njbxbslmphdme white_check_mark to internal configuration spyannotationenginejava https codecovio gh mockito mockito compare b bbeee f dc b bee fb c c dc cdb eed ddd d ecd d a b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul nweufubm yxrpb fbmdpbmuuamf yq o exceptions verification wantedbutnotinvokedjava https codecovio gh mockito mockito compare b bbeee f dc b bee fb c c dc cdb eed ddd d ecd d a b srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl zlcmlmawnhdglvbi xyw zwrcdxrob rjbnzva vklmphdme white_check_mark continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b bbe a c https codecovio gh mockito mockito compare b bbeee f dc b bee fb c c dc a c a d b e ca f e elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments question this patch was built on top of master for the next release should i have built it on top of release x mureinik yes please 😄 timvdlippe doneits slightly less elegant in x as the source compatibility level is not so no stream s or optional s but the idea remains the samefeedback more than welcome christianschwarz thanks for the comments will take a look tomorrow hopefully when i have a bit more bandwidth szczepiq christianschwarz thanks for your comments i was a bit swamped last week and didnt manage to address the earlier ones will look into all of them this week hopefully tomorrow or tuesday rebased in order to apply pr so i can build locally and get the ci passing no other changes applied yet uploaded an updated patch changes since last revision in response to comments above rebased on top of current x branch so that it can build locally with java added a null check in useconstrutor allowing to clear up some other null checks added documentation javadoc and since tags added some more test casesopen issues handling ambiguity do we try to infer the consturctors argument types from the argument list if so how do we handle ambiguity or actually do we isnt it easier to throw up an exception exception messages as detailed aboveand of course any other comments are more than welcome options for ambiguity use st constructor that matches throw an exception use the constructor the compiler would choose classgetconstructor class argtypes https docsoraclecom javase docs api java lang classhtmlgetconstructor javalangclass should do the trick wrt handling ambiguity im starting to think that throwing an exception is the only viable option here to recap the suggestions use st constructor that matches classgetconstructors does not guarantee anything about the order of constructors returned making this behavior very fragile not only could adding new constructors break existing tests running the same tests from different jdks could potentially produce different results use the constructor the compiler would choose classgetconstructor class argtypes should do the trickunless ive completely misunderstood the suggestion this wont work getconstrucor class matches the static types the constructor expects since were only providing the arguments themselves all we have is the runtime types the following example should illustrate my point uploaded as a txt file due to githubs restructions just rename it to java if you want to compile and run it constructorfunjavatxt https githubcom mockito mockito files constructorfunjavatxt unless anyone has a better idea ill amend this patch to throw an exception if there are two potential constructors that match the given argument list mureinik sorry my fault it was pretty sure getconstructor would make it fyi apache commons lang has constructorutils https githubcom apache commons lang blob master src main java org apache commons lang reflect constructorutilsjaval but i guess it wont work if null arguments are involved christianschwarz constructorutils offers a slight improvement on our suggested first approach to quote the documentation first it checks if there is a constructor matching the exact signature if not then all the constructors of the class are checked to see if their signatures are assignment compatible with the parameter types the first assignment compatible matching constructor is returnedwe could implement such a behavior but imho it still suffers from all the problems i listed above ci seems to complain about this import static orgmockitointernalutilstringjoinerjoin ^ symbol class stringjoiner location package orgmockitointernalutil home travis build mockito mockito src main java org mockito internal util platformjava error static import only from classes and interfacesimport static orgmockitointernalutilstringjoinerjoin^ home travis build mockito mockito src main java org mockito internal util platformjava error cannot find symbol description join ^ symbol method join stringstringstringstringstringstringstring location class platform my patch does not contain any such codeis travis automatically rebasing itedit seems that travis is indeed rebasing submitted patches the x build is currently broken presumably by a faulty backporting of a patch from master that attempts to use stringjoiner my pr should fix it new patch includes made a decision about multiple matching constructors an exception is thrown in the discussion above we couldnt find any better idea improved error messages specifically distinguished the arg consturctor usecase looking at the discussion above i cant find any way that distinguighing an inner class would produce better messages added tests for above scenarios and beefed up existing tests once pr or something equivalent is merged and the the build passes again travis should produce coverage details on this patch if anything is missing ill add tests to cover itas always feedback more than welcome latest push was rebased on top on recent build fix in order to force ci to run and generate coverage report the travis build is done but it doesnt report back to this page what am i missing probably an issue with github travis it aint your issue 😄 timvdlippe i figured as much i wonder though if theres any way to force it to rerun id really like to see the codecov report for this patch i have restarted one of the jobs hopefully that should flush codecov travis szczepiq we kinda lost speed on this would you have the time to take a look at the revised patch mureinik thank you for your patience ive been on holidays in mexico and returned this weekend i will review by the end of tomorrow and most likely merge also can you rebase there are some conflicts thanks updated the pr with new patches as per szczepiq s review above this revision contains improved error messages note that as discussed above new patches were added to extend checks functionality while this is needed for the error messages in this patch it is not intrinsic to it and may prove useful in other future work too added missing test cases and made the existing ones more explicit rebased against relesae x and solved merge conflicts in mockitojava since tags and documentation entries were updated to refer to which this patch will hopefully be a part of instead of which has already been released reviewing
680,942,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,allow spying on interfaces so that it is convenient to work with java default methods fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ab f f c cc f a df fecbc d b d srcpr&eldesc will increase coverage by the diff coverage is n a diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ to internal configuration spyannotationenginejava https codecovio gh mockito mockito compare ab f f c cc f a df fecbc d b d e d ff a f f d a srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul nweufubm yxrpb fbmdpbmuuamf yq x continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ab f f a e https codecovio gh mockito mockito compare ab f f c cc f a df fecbc d b d f a ee fcc c b d d aec a e a ebsrcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments timvdlippe im ok with not having dedicated coverage for java in release x we dont have a way of doing it right now so i would not want to block this pr we did have some tests for java in release so it can be done but lets drop it as requirement for this pr thanks for reviewlet me know if the javadoc change looks okay to you restarted the travis ci jobs and will merge as soon as they are green
688,972,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,verifies acceptance test to prevent future regression added an acceptance test to verify this is going to fail until mockito updates to the next version of byte buddy that re fixes that contains the following commit https githubcom raphw byte buddy commit eaf b b ff f ea could you rebase on release x this test should pass now smile timvdlippe rebased on release x and tests are passing now codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit fe b e db b f c c e csrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update fe c b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thank you guys nice and clean change and makes mockito safer for our users
974,979,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes fix to get correct stubbing location with inline mocking fix stacktracefilter to support inline mocking add one test to stacktracefiltertest add stubbinglocationtest into inline subprojectthis pr fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d c e fb c f d c e e b fsrcpr&eldesc will increase coverage by the diff coverage is diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ rnal creation bytebuddy interceptedinvocationjava https codecovio gh mockito mockito compare d c e fb c f d c e e b f b e e fda c c fa c a eb srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw zxjjzxb zwrjbnzvy f aw ulmphdme arrow_down a org mockito internal debugging locationimpljava https codecovio gh mockito mockito compare d c e fb c f d c e e b f b e e fda c c fa c a eb srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc kzwj z dpbmcvtg jyxrpb jbxbslmphdme arrow_up rnal creation bytebuddy mockmethodinterceptorjava https codecovio gh mockito mockito compare d c e fb c f d c e e b f b e e fda c c fa c a eb srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzeludgvyy vwdg ylmphdme arrow_up internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito compare d c e fb c f d c e e b f b e e fda c c fa c a eb srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d c b e https codecovio gh mockito mockito compare d c e fb c f d c e e b f b e e fda c c fa c a eb srcpr&elfooter&ellastupdated read the comment docs https docscodecovio docs pull request comments to solve the issue i thought that if one stack trace element is the method frame representation of mockmethodadvicehandle the next element must be skippedsince the stacktracecleaner api cannot handle the two related elements i abandoned to move this logic into defaultstacktracecleaner can you describe how did you test this changei ran gradlew clean build with this pr and confirmed that there was no problemplease point out me if you need additional tests timvdlippe thank you for your reviewi did not know that mock maker can be switched by environmental variablestests failed with inline mock maker so im working on it ive just updatedi ran the following command on release x and this pr $ git branch logtxt$ mock_makermock maker inline gradlew dorggradleparallelfalse x removetestresources continue clean cibuild & tee a logtxt$ gradlew removetestresources on release x log https githubcom mockito mockito files release_ _xtxt tests completed failed skipped on this pr log https githubcom mockito mockito files fix_issue_ txt tests completed failed skipped the same tests failed this https githubcom mockito mockito files difftxt is difference of two logs there is no failure caused by this prin the previous code partialmockingwithspiestestshouldstacktracegetfilteredonuserexceptions failedi gave up on fixing stacktracefilter and moved the skip logic to mockmethodadvice
976,980,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes resolve ambiguous constructors with the current code introduced in mockito by commit a c calling mocksettingsuseconstructor with an argument list that would be applicable to more than one constructor would fail with an orgmockitointernalcreationinstanceinstantiationexception this behavior however is suboptimal as described in issue as it makes useconstructor less robust than the java compiler which is able to resolve such ambiguitieswith this patch mockito will attempt to match the constructor with the most specific parameter types a constructor x is considered more specific than a constructor y if they are both applicable to the given argument list constructor x has at least one parameter which is a further specialization of the corresponding parameter of constructor y ie paramxisassignablefrom paramy constructor y has no parameter which is a further specialization of the corresponding parameter of constructor x as defined aboveeg consider the following class public class someclass { someclass object o {} someclass string s {} }without this patch calling mock someclassclass withsettings useconstructor string would fail with this patch such a call would invoke the someclass string constructoras noted above this pr fixes issue codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d c e fb c f d c e e b fsrcpr&eldesc will increase coverage by the diff coverage is diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ nal creation instance constructorinstantiatorjava https codecovio gh mockito mockito compare d c e fb c f d c e e b fed e fd f f e c d aa srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi pbnn yw jzs db zdhj y rvckluc rhbnrpyxrvci qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d ced e https codecovio gh mockito mockito compare d c e fb c f d c e e b fed e fd f f e c d aa elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i wonder why codecov has no previous report to compare against do any of the maintainers have a clue mureinik because commits by the delivery drone do ci skip and therefore do not trigger a code coverage report timvdlippe that means that any pr thats rebased on top of a release wont have the benefit of a comparative codecov report i get why the delivery drone should skip ci but this is an unfortunate side effect ill bring this up on the mailing list this pr probably isnt the right place to discuss itand thanks for the explanation mureinik please see for reference szczepiq ping will you have some time to take a look at this please mureinik im very keen to review this change thank you for your submissionim allocating most of my time to https githubcom mockito mockito issues currently but i promise to review and hopefully merge by the end of this weekendthanks for patience with us rebased on top of and added creatingmockswithconstructortestcan_spy_ambiguius_constructor_with_primitive as per timvdlippes suggestion abovenote that this api does not support implicit promotions eg passing an int in useconstructors varargs will autobox it to an integer this integer cant be matched to a constructor expecting a long primitive or a long wrapper in the same fashion that the javalangreflect apis dont support it pushed updated branch change from previous push returned the error message regarding issue as per szczepiq review above fixed a freudian slip in the aforementioned error message a better join a better job added javadoc explaining the logic of orgmockitointernalcreationinstanceconstructorinstantiatorevaluateconstructor as per szczepiq review the build failure seems to be a travisci issue not an issue with the code itself as this revision introduced only minor changes added javadoc and fixed a typo compared to the previous one and some of the travis checks are passing the error no output has been received in the last m s this potentially indicates a stalled build or something wrong with the build itselfcheck the details on how to adjust your build configuration on https docstravis cicom user common build problems build times out because no output was receivedthe build has been terminated szczepiq timvdlippe is there any way to re trigger travis on this pr i have restarted the builds
982,983,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,break cyclical compile time dependency on hiderecursivecall fixes codecov https codecovio gh mockito mockito pull srcpr&elh report exclamation no coverage uploaded for pull request base release x a click here to learn what that means https docscodecovio docs error referencesection missing base commit the diff coverage is diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito compare a ec f ef fc a a c e b f b c ac ad e ed bb fb d f f c cdsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito compare a ec f ef fc a a c e b f b c ac ad e ed bb fb d f f c cdsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a c a https codecovio gh mockito mockito compare a ec f ef fc a a c e b f b c ac ad e ed bb fb d f f c cdelfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments lgtm probably a left over from the early phase when i refactored the mock makers nice merging thanks for your quick reviews raphw
929,985,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes update javadoc about the mockito inline artifact this pr fixes in the javadoc i write that the first version of mockito inline is this artifact was actually offered in version but or earlier it did not work due to the issue so i write like that codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit dfe f d ef c fabbdd b a bsrcpr&eldesc will not change coverage the diff coverage is n a diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito compare dfe f d ef c fabbdd b a b c df afd cbadaa c ac af a d eba srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme x continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update dfe c df https codecovio gh mockito mockito compare dfe f d ef c fabbdd b a b c df afd cbadaa c ac af a d eba elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
981,985,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes update javadoc about the mockito inline artifact this pr fixes in the javadoc i write that the first version of mockito inline is this artifact was actually offered in version but or earlier it did not work due to the issue so i write like that codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit dfe f d ef c fabbdd b a bsrcpr&eldesc will not change coverage the diff coverage is n a diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito compare dfe f d ef c fabbdd b a b c df afd cbadaa c ac af a d eba srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme x continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update dfe c df https codecovio gh mockito mockito compare dfe f d ef c fabbdd b a b c df afd cbadaa c ac af a d eba elfooter&srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
989,995,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,verifyzerointeractions guarantees zero interactions instead of just delegating to verifynomoreinteractions fixes verifyzerointeractions no longer delegates to verifynomoreinteractions instead it fetches the number of invocations made to the mock and checks ifthey are zero failing otherwiseim not sure if the style of my code complies with mockito please let me know what to change and where to look to make it more mockitoish you can always check if you comply with the code by running gradlew build that runs the test and checks the code style codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into master https codecovio gh mockito mockito commit a d e afb f dc f d b d eccf srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff master coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ rc main java org mockito internal mockitocorejava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nraxrvq yzs qyxzh arrow_up src main java org mockito bddmockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by crernb nraxrvlmphdme arrow_down internal verification verificationmodefactoryjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw utw kzuzhy rvcnkuamf yq arrow_up java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_up src main java org mockito mockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_up mockito internal verification nointeractionsjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vtm jbnrlcmfjdglvbnmuamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a d ef https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments ffissore looks cool can you add more tests thank you for submission i have not looked into the implementation details if nobody does picks up the review soon ill do it team is the decision to change the behavior of verifyzerointeractions this is likely a disturbing change that will impact many projects migrating to mockito v im to this change but i have to acknowledge the impact we would need to investigate the usage of this method i think it is a logical change but we have to prevent users from excessive code problems they can of course always transfer everything to verifynomoreinteractions just before they are migrating that shouldnt be a bit of a hassle christianschwarz ill add more in the coming daysabout the name pls consider using a different name verifynointeractions for example and deprecating verifyzerointeractions with an explanation as noted in support to my proposal ive changed my pr to include a new verifynointeractions and deprecated old verifyzerointeractions ive added some tests and coverage will hopefully be happier timvdlippe ive added those since and removed my initial test class applied requested modifications and squashed commits i dont know what went wrong on travis tests pass on my machine using openjdk ping me if i can help these are flaky tests so it seems fine removed try catch block
911,1018,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,enabled continuous delivery via robust mockito release tools project continuous delivery pipeline almost implemented removed tons of release logic complexity now all that is a part of general purpose mockito release tools project the new release automation should be much easier to test codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ed e a b a e fc c d srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ed caed https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments does this also implement the logic to only publish a release once every x weeks does this also implement the logic to only publish a release once every x weeksit will be simpler let me finish off the documentation so that everything is clear good question i will be merging soon readmemd contains information about the releases more documentation will be provided but it should not blocking this pr more documentation on spanking new wiki page https githubcom mockito mockito wiki continuous delivery detailscd tentatively plan to merge today really excited for this change thanks for the great work szczepiq just merged this puppy ill keep an eye on the release automation things might be bumpy for the next week or so until the dust after this change drops down and all fallout is cleaned up thank you guys for patience more documentation and improvements i will duly provide in the meantime shoot feedback szczepiq does this also close szczepiq does this also close i suggest we leave open for now so that its a place for discussion btw thank you for updating thread with the status
1071,1076,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fixed validation in returnargumentat int in case of type erasure on the parameter fixes the parameter type inference takes now the type of the actual instanceinto account to avoid type erasure issues in case the parameter isgenericsee also https githubcom mockito mockito issues issuecomment codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a d f ec dd ec f b c f easrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ o internal stubbing answers returnsargumentatjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy hbnn zxjzl jldhvybnnbcmd bwvudef lmphdme arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a d f a f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1065,1079,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixed add information about donothing method to cannotstubvo… codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit de d b eddae ab d e bdacd a besrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&height &width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update de f b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1083,1090,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,fixes interfaces only declare tostring implicitly and should t… …herefore override it explicitly from the inline mock maker
1088,1091,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes updating documentation of verify feature to correct a s… updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut pasted and run verbatimthe documentation presents the following example of the verify exact number of invocations feature using mock mockedlistadd once mockedlistadd twice mockedlistadd twice mockedlistadd three times mockedlistadd three times mockedlistadd three times following two verifications work exactly the same times is used by default verify mockedlist add once verify mockedlist times add once exact number of invocations verification verify mockedlist times add twice verify mockedlist times add three times verification using never never is an alias to times verify mockedlist never add never happened verification using atleast atmost verify mockedlist atleastonce add three times verify mockedlist atleast add five times verify mockedlist atmost add three times the last but one line says verify mockedlist atleast add five times this could be confusing to someone using these examples as it would result in a toolittleactualinvocations failure being reported by mockito this is because in the example the add method is never called with the string five times in order to have this example make sense in the way i think it should ive replaced the string five times with three times as suggested by szczepiq cheerstim cooke codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit db dbc d f d d b e f f b csrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &width &srcpr&height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down o exceptions verification wantedbutnotinvokedjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl zlcmlmawnhdglvbi xyw zwrcdxrob rjbnzva vklmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update db dbc a dc https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments rather surprised codecov reported a reduction in coverage here the total diff of this pr is a single word text replacement in a javadoc no code changes were made so wouldnt expect a change in coverageperhaps im missing something thank you
1117,1119,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,made it possible to delay the return of a mock or spy this is a useful aid in debugging race conditions and other synchronicity problems codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into master https codecovio gh mockito mockito commit db a fba ca bc ba a srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&height &width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff master coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito additionalanswersjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by bzgrpdglvbmfsqw zd vycy qyxzh arrow_up to internal stubbing answers answerswithdelayjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy hbnn zxjzl fuc dlcnnxaxrorgvsyxkuamf yq eation bytebuddy typecachingbytecodegeneratorjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvvhlwzunhy hpbmdcexrly kzudlbmvyyxrvci qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update db b ff d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments re revert no problem i was applying the boy scout method and killing off warnings but i wasnt sure if that change would be acceptable i could tell you were targeting older java versions but wasnt sure if thats important in this test tooive provided it without the java dependent changes great this looks good to me signing off on this one but want one other pair of eyes to check this pr smile imho the prs title is misleading in the first place i thought it meant delay on mockitomock mockitospy which is obviously useless just after reading the code i understood it means answers with delayid change the title to add delayed answers it will also clarify the release notes 😄 cant right now because of day job are the release notes drawn from pr titles i changed a title in it should be used to generate release notes as that pr has no labels by the way we will test a new cd mechanism notable version release thanks for your contribution myrle krantz my bad i didnt spot that pr was raised against master not x btw release notes dont look very good i created nice contribution thank you youre welcome it was my pleasure given how intensively mockito helps me every day this was the least i could dothank youmyrle
1110,1121,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,improve and develop apis required for framework integrators problemmockito does not do static mocking at the moment powermockito does powermockito uses a lot of internal mockito apis exposing the community to issues and wasted productivity on version upgrades we want mockito apis to be easily extensible by framework integrators such us powermockito without compromising api simplicity and consistencyall proposed changes are backwards compatible in accordance to mockitos compatibility contract in short limited changes to orgmockito types freedom to change orgmockitointernal public api changesthe full discussion on the use cases implementation options and decisions is in ticket new public method for creating mock creation settings object javamockitowithsettings name “my mock” build fooclass framework integrators can now provide custom mockhandler via mockmakergetmockhandler previously it we didn’t offer this capability because we didn’t have convincing use cases that it was needed public api considerations framework integrators may not provide custom implementation of invocationcontainer at this stage this part of api is accessible via public mockmakergetmockhandler getinvocationcontainer method there are no convincing use cases that exposing this new public api is needed codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f a e f dd e c edf e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down to internal stubbing stubbedinvocationmatcherjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvksw b nhdglvbk hdgnozxiuamf yq arrow_down mockito internal invocation unusedstubsfinderjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul vudxnlzfn dwjzrmluzgvylmphdme arrow_down ava org mockito internal stubbing stubberimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvysw wbc qyxzh arrow_down to internal verification verificationdataimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw urgf yultcgwuamf yq arrow_down g mockito internal handler nullresultguardianjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc oyw kbgvyl bgxszxn bhrhdwfyzglhbi qyxzh arrow_down to internal handler invocationnotifierhandlerjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc oyw kbgvyl ludm jyxrpb ob rpzmllckhhbmrszxiuamf yq arrow_down org mockito internal handler mockhandlerimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc oyw kbgvyl vy tiyw kbgvysw wbc qyxzh arrow_down ito internal stubbing invocationcontainerimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy jbnzvy f aw uq udgfpbmvysw wbc qyxzh arrow_down to internal framework defaultmockitoframeworkjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc mcmftzxdvcmsvrgvmyxvsde vy tpdg gcmftzxdvcmsuamf yq arrow_up and more https codecovio gh mockito mockito pull srcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f a e b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thank you timvdlippe for reviewing the pr is still in progress and we definitely must avoid breaking changes fyi im not far from calling this complete i dont expect much code changes rather verify powermock needs all the new public api added add missing documentation tests for public types add since tagdespite above i think the code is ready for being reviewed if you have feedback please let me know this is complete mockito developers friendly request for review for high level summary of changes to the public api see the new section added to our user guide in main mockito class yes that is a lot cleareron fri sep szczepan faber wrote szczepiq commented on this pull request in src test java org mockito staticmockingexperimenttestjava } } before public void before throws throwable { staticmethod fooclassgetdeclaredmethod staticmethod stringclass } test public void verify_static_method throws throwable { register staticmethod call on mock invocation invocation mockitoframework getinvocationfactory createinvocation mock withsettings build fooclass staticmethod realmethod some arg handlerhandle invocation verify staticmethod on mock verify mock heres the comment be b — you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread any feedback i would love to merge it in a couple of days seems like this branch has conflicts and has a failing build other than this pr is approved a lot to read but it look really good to me props to the documentation and compatibility efforts
1117,1122,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,made it possible to delay the return of a mock or spy a cherry picked version of for the x branch yup in master there are not checkstyle verification thats because the backport wasnt finished yet havent had time to dive into the failing tests there codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit cf be d cbf ed fac ccb ccf cad d asrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &srcpr&tokenmx slder &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito additionalanswersjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by bzgrpdglvbmfsqw zd vycy qyxzh arrow_up to internal stubbing answers answerswithdelayjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy hbnn zxjzl fuc dlcnnxaxrorgvsyxkuamf yq o exceptions verification wantedbutnotinvokedjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl zlcmlmawnhdglvbi xyw zwrcdxrob rjbnzva vklmphdme arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update cf bea d d d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks guys for merging the change to x
1135,1136,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes properly resolve visibility bridges resolve the method hierarchy by byte buddys method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a a d b cac ca c d a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a a f b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
86,1146,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,enable stubonly on mock annotation since issue withsettings has a api stubonly which speed up mocked stub a lotsin my case stubonly huge amount of test overhead stacktrace and avoid invocation footprint list grow too large and cause oomhowever the api is not available with mock annotationi had to move tens of mock annotation from mock foo foo into mockitomock fooclass withsetting stubonly mock stubonlytrue public foo lightweight suggest adding the above api for convenience check list x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d fc d b c d f be d ac srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &width &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d d a https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments hkdennis k good idea can you add some unit tests to ensure the implementation works ping for a high level unit test then we can land this change 😄 timvdlippe szczepiq the high level test is here annotationstestjaval https githubcom hkdennis k mockito blob d a f d ff fa b c fea src test java org mockitousage annotation annotationstestjaval ah i see i wanted a separate new test but i see that the current one already violates that principle based on that lgtm
1155,1162,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,fix for thenthrow class fix for mockitothenthrow class now fails when the given throwable type is not declared on the stubbed method the build fails for jdk seem like an ci problem execution failed for task fetchallcontributors the build fails for jdk seem like an ci problem execution failed for task fetchallcontributorsi will look into that thank you codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e de d ea ec e d b a b ffe f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ mockito internal stubbing ongoingstubbingimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy pbmdvaw nu r ymjpbmdjbxbslmphdme arrow_down ava org mockito internal stubbing stubberimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvysw wbc qyxzh va org mockito internal stubbing basestubbingjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy cyxnlu r ymjpbmcuamf yq arrow_up src main java org mockito mockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down nternal configuration mockannotationprocessorjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul vy tbbm vdgf aw uuhjvy vzc ylmphdme arrow_up java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e de c fbb https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments timvdlippe could you please remove the checkstyle rule newlineatendoffile it is _not possible_ frustrating to fix and adds zero value if you have an editor with editorconfig support it is no manual work both eclipse and intellij support it intellij even right out of the box else you can manually add the newline i think you configured your editor to revert that change somewhere in your preferencesanyways editorconfig makes sure we avoid unnecessary noise when contributing even if you are new to the project and unaware that it exists its thus more friendly to new developers and i dont want to regress in that regard the ide added a newline also i tried to add manually a newline but check style still fails i have no further time to investigated into it this pr fixes now cleans up the unfinished stubbing state in case null was passed to thenthrow class dothrow class this leaded to unpredictable results in test suites before you are fixing the wrong files it is stubbingwiththrowables test https travis ciorg mockito mockito jobs l strange when i run it locally it complains about the files of the last commit mockitocore what is the current state what is missing christianschwarz nice thanks while could seems good could you add a test could just copy the literal test from to also check that case i couldnt spot it in the added tests sure i can add more tests but what you mean by that case when mockdoit thenthrow exceptionclass eg with only a literal class passed on expecting this to fail i am not sure what you mean by only a literal class passed on expecting this to failmaybe a stubbing with an checked exception type where an other checked exception is declared like this class exceptiona extends exceptionclass exceptionb extends exceptionpublic void doit throws exceptionawhen mockdoit thenthrow exceptionbclass ^^ fails like cant throw checked exception exceptionb cause it is not declared the original report states that the following test did not fail i would like to see that literal test as a regression test in our test body java test expected mockitoexceptionclass public void using_thenthrow_class { c mock mock cclass set a checked exception that does not matche the method signature when mockdoit thenthrow exceptionclass } christianschwarz thanks for all your work
1179,1181,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,fix performance regression caused by use of method graph compiler in order to properly discover visibility bridges we have to run a full analysis of the method graph the compilation of this method graph is rather expensive and we require to cache a computed graph the caching is however non trivial as it references classes which might be unloaded in order to avoid a leak we cache classes using non strong referencesthis requires some real world experience to discover if this caching mechanism suffices codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit de f b ae e c a f f dda aba f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &height &width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update de f cfd ee https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments yes was incorrect before
1180,1186,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,compare method of graph to defined form of method fixes compare against non generic method when deciding if a method should be stubbed codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ddaca d be c a a cb a d srcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &width &tokenmx slder &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ddaca e f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1191,1192,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,added new public api for spring boot use case not intended for merging yet submitted for visibility for design and rationale see for usage see verificationstartedlistenertest classthis is still experimental so refactorings error handling javadoc is missing codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a a aaaa e f e f cd be f b asrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &height &width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ main java org mockito internal util mockutiljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl vy tvdglslmphdme arrow_down src main java org mockito mockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down rc main java org mockito internal mockitocorejava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nraxrvq yzs qyxzh arrow_down g mockito internal util defaultmockingdetailsjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl rlzmf bhrnb nraw nrgv ywlscy qyxzh arrow_up java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down ava org mockito internal stubbing stubberimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvysw wbc qyxzh arrow_down rg mockito internal creation mocksettingsimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi nb nru v dgluz njbxbslmphdme arrow_up o internal creation settings creationsettingsjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi zzxr aw ncy dcmvhdglvblnldhrpbmdzlmphdme arrow_up nternal listeners verificationstartednotifierjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc saxn zw lcnmvvmvyawzpy f aw uu rhcnrlze vdglmawvylmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a a aaab d c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments hey timvdlippe thank you for review i will work on this today what happens if multiple verificationstartedlisteners set a different mock is it last come wins that could potentially break any framework that would be relying on the fact that the mock it set is the mock that is executed onthe mock object is created only once so there is no practical possibility for different frameworks to add different listenerswe already have in our api similar listeners that are configured at mock creation we did not encounter a problem with this api the new verificationstartedlistener suggested in this pr follows an existing pattern that was already discussed in the pasthence i think its ok to allow multiple listeners to keep the api consistent and simplethank you for insightful feedback keep it coming because im finishing this feature off sorry for being vague i am okay with adding multiple listeners but my comment was regarding calling setmock multiple times if franeworks a and b both call setmock and rely on its value one of them will break depending on which one is invoked latest therefore i would like to block calling setmock twice if another framework calls it it should be an exception stating that mocks were overridden and there is an incompatibility between two dependencies wdyt if franeworks a and b both call setmock and rely on its value one of them will break depending on which one is invoked latest how can frameworks call setmock only framework can create mock and pass a listener can you describe the scenario more clearlyhappy to work out this scenario to design great api fyi im almost done with the code i would love some feedback i have some time tomorrow to write down the exampleon sun oct szczepan faber wrote fyi im almost done with the code i would love some feedback — you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread due to issues with gradle from i am unable to compile or do any work have to wait till that is resolved until i can write the example cry okay so while trying to write down the example i realized it is a bit more tricky it would essentially require to add multiple listeners on the same mockitosettings object javalist mock mock listclass mockitowithsettings verificationstartedlisteners new verificationstartedlistener { public void onverificationstarted verificationstartedevent event { this is a hack to simulate desired behavior containeradd eventgetmock eventsetmock mock } } new verificationstartedlistener { override public void onverificationstarted verificationstartedevent event { eventsetmock mock } } in this case mock will be the final mock if the first listener was added based on framework and the second one by a different one there is a discrepancy between the mock that is actually in the event and the mock the framework expects if framework is relying on the mock being mock while at the same time framework relies on the mock being mock one of them will breaki would thus like to propose that if setmock is invoked twice an exception is thrown this is very explicit to the user indicating hey you are using two framework listeners together this cant work hey timvdlippe i still dont understand the use case only one framework can construct a mock object if multiple frameworks integrate with mockito only one of those frameworks can construct given mock the other framework can use the mock of course but it cannot create it because it is already created if we need to lets discuss this further on slack id like the api to be consistent with other listeners like invocation listeners using an exception makes verification started listeners work differently than invocation listeners because it makes the st listener more important than other listeners consistent api is less surprising to users and makes it easy to use predictable adding an exception adds some complexity that we need to maintain there is no use case to support listeners just like there is no use case to support only listener supporting listeners does not seem incorrect if it is not incorrect id rather keep things simple allowing listeners is more open for experimentation and unexpected use cases using an exception is creating an arbitrary constraint without a use case if the use case presents itself for example we have a user bug report im happy to add code to address it perhaps then we add some validationfyi when designing this i had considered supporting just single listener but decided against it thats why i have added listeners_are_executed_in_sequence https githubcom mockito mockito pull filesdiff c b da e d e ac f r testgood discussion thank you for taking the time to describe what you meant do you have feedback about other parts of the api or the implementation in the heat of the argument lets not forget about the surrounding code the implementation is done would love some feedback szpak can you review theres a discussion about supporting one or many listeners but i dont think it should be blocking the prlets ship this so that spring boot can start using mockitos public api its not about one or many listeners it should be possible to add multiplelisteners however i want to limit setmock to be invoked only onceon sat oct szczepan faber wrote szpak can you review theres a discussion about supporting one or many listeners but i dont think it should be blocking the pr lets ship this so that spring boot can start using mockitos public api — you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread thank you im pushing new version soon
1198,1202,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,java ci build for mockito x summaryprovide java travis build to ensure java compatibility in at least tested use casessupport for java was improved in gradle x and that version is being used due to some issues with newer gradle versions some other configuration changes were required as well as jacoco version has been bump https travis ciorg mockito mockito jobs l l fixes check list x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a c f c c c fe f c c srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_up ito internal stubbing invocationcontainerimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy jbnzvy f aw uq udgfpbmvysw wbc qyxzh arrow_down al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq arrow_down eation bytebuddy typecachingbytecodegeneratorjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvvhlwzunhy hpbmdcexrly kzudlbmvyyxrvci qyxzh arrow_down creation bytebuddy subclassbytecodegeneratorjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrly kzudlbmvyyxrvci qyxzh arrow_down guration injection propertyandsetterinjectionjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul luamvjdglvbi qcm wzxj eufuzfnldhrlckluamvjdglvbi qyxzh arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a c e d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments rather yes one of the failing tests in is the one i fixed in addition master hasnt been built for a while and may be broken with the current java szpak i would like to revert this pr as it seems to break local development i am facing various issues like task inline testprocess gradle test executor finished with non zero exit value orggradleprocessinternalexecexception process gradle test executor finished with non zero exit value at orggradleprocessinternaldefaultexechandle$execresultimplassertnormalexitvalue defaultexechandlejava at orggradleprocessinternalworkerdefaultworkerprocessonprocessstop defaultworkerprocessjava at orggradleprocessinternalworkerdefaultworkerprocessaccess$ defaultworkerprocessjava at orggradleprocessinternalworkerdefaultworkerprocess$ executionfinished defaultworkerprocessjava at sunreflectgeneratedmethodaccessor invoke unknown source at sunreflectdelegatingmethodaccessorimplinvoke delegatingmethodaccessorimpljava at javalangreflectmethodinvoke methodjava at orggradleinternaldispatchreflectiondispatchdispatch reflectiondispatchjava at orggradleinternaldispatchreflectiondispatchdispatch reflectiondispatchjava at orggradleinternaleventabstractbroadcastdispatchdispatch abstractbroadcastdispatchjava at orggradleinternaleventbroadcastdispatch$singletondispatchdispatch broadcastdispatchjava at orggradleinternaleventbroadcastdispatch$singletondispatchdispatch broadcastdispatchjava at orggradleinternaleventlistenerbroadcastdispatch listenerbroadcastjava at orggradleinternaleventlistenerbroadcastdispatch listenerbroadcastjava at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke proxydispatchadapterjava at comsunproxy$proxy executionfinished unknown source at orggradleprocessinternaldefaultexechandlesetendstateinfo defaultexechandlejava at orggradleprocessinternaldefaultexechandlefinished defaultexechandlejava at orggradleprocessinternalexechandlerunnercompleted exechandlerunnerjava at orggradleprocessinternalexechandlerunnerrun exechandlerunnerjava at orggradleinternaloperationsbuildoperationidentifierpreservingrunnablerun buildoperationidentifierpreservingrunnablejava at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute executorpolicyjava at orggradleinternalconcurrentmanagedexecutorimpl$ run managedexecutorimpljava at javautilconcurrentthreadpoolexecutorrunworker threadpoolexecutorjava at javautilconcurrentthreadpoolexecutor$workerrun threadpoolexecutorjava at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun threadfactoryimpljava at javalangthreadrun threadjava process gradle test executor finished with non zero exit value orggradleprocessinternalexecexception process gradle test executor finished with non zero exit value at orggradleprocessinternaldefaultexechandle$execresultimplassertnormalexitvalue defaultexechandlejava at orggradleprocessinternalworkerdefaultworkerprocessonprocessstop defaultworkerprocessjava at orggradleprocessinternalworkerdefaultworkerprocessaccess$ defaultworkerprocessjava at orggradleprocessinternalworkerdefaultworkerprocess$ executionfinished defaultworkerprocessjava at sunreflectgeneratedmethodaccessor invoke unknown source at sunreflectdelegatingmethodaccessorimplinvoke delegatingmethodaccessorimpljava at javalangreflectmethodinvoke methodjava at orggradleinternaldispatchreflectiondispatchdispatch reflectiondispatchjava at orggradleinternaldispatchreflectiondispatchdispatch reflectiondispatchjava at orggradleinternaleventabstractbroadcastdispatchdispatch abstractbroadcastdispatchjava at orggradleinternaleventbroadcastdispatch$singletondispatchdispatch broadcastdispatchjava at orggradleinternaleventbroadcastdispatch$singletondispatchdispatch broadcastdispatchjava at orggradleinternaleventlistenerbroadcastdispatch listenerbroadcastjava at orggradleinternaleventlistenerbroadcastdispatch listenerbroadcastjava at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke proxydispatchadapterjava at comsunproxy$proxy executionfinished unknown source at orggradleprocessinternaldefaultexechandlesetendstateinfo defaultexechandlejava at orggradleprocessinternaldefaultexechandlefinished defaultexechandlejava at orggradleprocessinternalexechandlerunnercompleted exechandlerunnerjava at orggradleprocessinternalexechandlerunnerrun exechandlerunnerjava at orggradleinternaloperationsbuildoperationidentifierpreservingrunnablerun buildoperationidentifierpreservingrunnablejava at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute executorpolicyjava at orggradleinternalconcurrentmanagedexecutorimpl$ run managedexecutorimpljava at javautilconcurrentthreadpoolexecutorrunworker threadpoolexecutorjava at javautilconcurrentthreadpoolexecutor$workerrun threadpoolexecutorjava at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun threadfactoryimpljava at javalangthreadrun threadjava failed to execute orggradleexecutiontaskgraphdefaulttaskplanexecutor$taskexecutorworker c c javalangillegalstateexception some child operations have not yet completed at orggradleinternalworkdefaultworkerleaseservice$defaultworkerleasereleaselock defaultworkerleaseservicejava at orggradleinternalresourcesabstracttrackedresourcelockunlock abstracttrackedresourcelockjava at orggradleinternalresourcesdefaultresourcelockcoordinationservice$releaselockstransform defaultresourcelockcoordinationservicejava at orggradleinternalresourcesdefaultresourcelockcoordinationservice$releaselockstransform defaultresourcelockcoordinationservicejava at orggradleinternalresourcesdefaultresourcelockcoordinationservicewithstatelock defaultresourcelockcoordinationservicejava at orggradleexecutiontaskgraphdefaulttaskexecutionplanexecute defaulttaskexecutionplanjava at orggradleexecutiontaskgraphdefaulttaskexecutionplanexecutewithtask defaulttaskexecutionplanjava at orggradleexecutiontaskgraphdefaulttaskplanexecutor$taskexecutorworkerrun defaulttaskplanexecutorjava at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute executorpolicyjava at orggradleinternalconcurrentmanagedexecutorimpl$ run managedexecutorimpljava at javautilconcurrentthreadpoolexecutorrunworker threadpoolexecutorjava at javautilconcurrentthreadpoolexecutor$workerrun threadpoolexecutorjava at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun threadfactoryimpljava at javalangthreadrun threadjava as well as internal compilation errors with the gradle scan plugin it seems that gradle is breaking a lot of stuff while gradle is working fine are you okay with reverting for now to then investigate what is going on timvdlippe strange it works on travis as well as on my computer what command do you call what os and java version do you have i have tried with both openjdk and on ubuntu it fails on gradlew clean build on release x and also when i try to merge release x into backport fixes im not able to reproduce that issue szczepiq raphw christianschwarz are you able to execute gradlew clean build on release x without errors szpak are you using openjdk or oracljedk thats the only difference i can spot with my setup and travis openjdk on fedora openjdk version _ openjdk runtime environment build _ b openjdk bit server vm build b mixed mode i have just also tested it with oracle java which after changes in the final version seems to be reported as openjdk as well openjdk version openjdk runtime environment build openjdk bit server vm build mixed mode hm i have the latest available on ubuntu jdk version which is maybe that is an issue would be really weird that would trigger these errors i installed oraclejdk and it is working locally again probably a corrupt state of my computer which was resolved later glad it is working again relieved
1191,1203,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixed documentation issue added unit tests while working on new verification started listeners i found an instance of incorrect documentation i added unit tests and simplified the documentation currently contrary to what the javadoc said we do guarantee the order in which invocation listeners get notified some of our users might have started to depend on this behavior i added unit tests and fixed the javadoc in general it is seems useful to guarantee the order this way the api is more predictable easier to use codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c e ffebf d a eae deb cdsrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &width &tokenmx slder &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thank you for review
1211,1214,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes improve deprecated javadoc this pull request fixes by improving the deprecated javadoc of mockitodebug mockitodebugger and mockitodebuggerprintinvocations object mocks by adding the additional information on how to retrieve an actual instance of the mockitodebugger interface codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d b c e fa d d dc dfa e srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d b c e e c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1206,1216,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,adresses allow opting out from annotation copying within mocks the mocksettings now include an option to disable copying of annotations to mock classes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c caa fa bdf c c b b d srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&width &tokenmx slder &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ creation bytebuddy subclassbytebuddymockmakerjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrlqnvkzhlnb nrtwfrzxiuamf yq arrow_down kito internal creation bytebuddy mockfeaturesjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja zlyxr cmvzlmphdme arrow_down l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme arrow_down o internal creation settings creationsettingsjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi zzxr aw ncy dcmvhdglvblnldhrpbmdzlmphdme arrow_up creation bytebuddy subclassbytecodegeneratorjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrly kzudlbmvyyxrvci qyxzh arrow_up rg mockito internal creation mocksettingsimpljava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi nb nru v dgluz njbxbslmphdme arrow_up eation bytebuddy typecachingbytecodegeneratorjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvvhlwzunhy hpbmdcexrly kzudlbmvyyxrvci qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update bb c c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1183,1217,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,fixes make override check more forgiving to accomondate kotlin compile patterns the override check implies java compile patterns such that kotlin method resolutions could fail for void return types which do not fit into javas reference type only generic hierarchies this pr eases this restriction to fix this resolution for kotlini added the test case of the reported issue as a reference codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c caa fa bdf c c b b d srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
117,1219,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,add regression test for issue regression that shows the issue of i am unable to reproduce this locally lets see what travis sayscloses codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e c e c ecd b ef a b d fsrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &width &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e c f b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thank you
445,1221,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,mockitoextension for junit fixes discussion https groupsgooglecom forum topic mockito r l ag rgbqfirst of all thanks to the junit team sbrannen for that great api the implementation was straight forward and the docu is top notch not comparable to a junitrule or runner implementation one can feel the hard work the here provided mockitoextension allows to mock spy validate like the well known mockito junitrule runner this is still work in progress feel free to commentusage java extendwith mockitoextensionclass class junit test { mock private dependency mock test void checkmockcreation { when mockfoo thenreturn hello junit mockfoo verify mock foo }} possibly we need an annotation on class or method level to provide control of the strictness eg extendwith mockitoextensionclass mockitostrictness warn class junit test { mockitostrictness strict_stubs void testwithlocaldefinedstrictness { }} codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b a e d c bb c c srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&height &width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b a e f d f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments could we subclass the extension for the silent and nonsilent variant thats in line with the junit variant you mean extensions like mockitowarnextension mockitolenientextension mockitostrictstubextension current state added support for strictnessthe test class and nested test classes and methods can define the stricness by declaring strictness note the strictness level is inherited and can be overriden per context java extendwith mockitoextensionclass default strictness warnclass stricnesstest { mock predicate mock test void strictnessfromtestroot_defaultiswarn_shouldlogunnecessarystubbingexception { when mocktest thenreturn true } test strictness lenient void strictnessfromtestmethod_lenient_shouldignoreunnecessarystubbing { when mocktest thenreturn true } nested strictness warn class nestedtest{ mock predicate mock test void strictnessfromnestedtest_shouldlogunnecessarystubbing { when mocktest thenreturn true } test strictness strict_stubs void strictnessfromtestmethod_shouldthrowunnecessarystubbingexception { when mocktest thenreturn true } }} christianschwarz correct it would have the different versions againalso travis is unhappy because we are targeting java with this pr since we state mockito supports java i am not sure if we can integrate into mockito instead we maybe should include it in master and publish a beta version of mockito instead we maybe should include it in master and publish a beta version of mockito that means stable junit support will only be available when mockito final is released i guess this will not happen before q an other option is to release junit support as seperate mockito addon artefact which requires java like junit itself it can be released much earlier what do you think you mean extensions like mockitowarnextension mockitolenientextension mockitostrictstubextension correct it would have the different versions againwhat is the benefit for the user here what do you think of the annotation proposal above it allows to define strictness at method and nested test level an other option is to release junit support as seperate mockito addon artefact which requires java like junit itself it can be released much earlier what do you thinkif we can find a way to make that pass on the build i am all for that what is the benefit for the user here what do you think of the annotation proposal above it allows to define strictness at method and nested test levelyes definitely keep them they are very useful to specify exceptions for a single method nested class however to specify the default strictness on a whole test class i would like to have that incorporated in the extendwith annotation junit supports meta annotations so we could provide the following annotation java retention retentionpolicyruntime target {elementtypeannotation_type elementtypetype elementtypemethod} extendwith mockitoextensionclass public interface withmockito { strictness value default strictnessstrict_stubs} i am not sure if we should do that we would have two annotation concepts to define the strictness that is maybe confusing and inconsequent and even conflictingboth annotations strictness and withmockito are declared with target elementtypetype to be applicable to classes in junit we have kind of test classes the root test and nested test withmockito will be ignored on nested classes thats fine strictness can be placed on both but this can lead to conflicts like this java withmockito warn strictness strict_stubs class test{ } anyway the meta annotation withmockito is a good idea to avoid boilerplate code but i would like to leave out the strictness i overlook the elementtypemethod in your poposal tmurakami now i get your point one can use withmockito to init mocks and define the strictness on a root test nested and method level this violates the srp and may lead to problems down the road what do you think christianschwarz could you also add a test for and verify we can fix that issue christianschwarz sorry i didnt explain it enoughi thought that it would be better to provide an annotation like withmockito that was annotated with extendwith mockitoextensionclass instead of providing strictness the reason is to reduce boilerplate code as you said this violates the srp and may lead to problems down the road what do you thinki was lacking considerationas you say my proposal may violate the sprif mockitoextension supports meta annotation i suppose that mockito users would be able to create an annotation like withmockito as neededso i think we dont have to provide withmockito btw junits mockitoextension supports method constructor injectionhttp junitorg junit docs current user guide writing tests dependency injectionwhat do you think about supporting it what do you think about supporting itit was discussed in and definetly worth a look for this pr i would like to provide only a mvp more features should be added in the next steps so i think we dont have to provide withmockitoi like it and keep it for now but without stricness attribute timvdlippe tmurakami do you guys have an idea how to get the build green i must admit im a gradle noob fearful i think we should disable the animalsniffer in this specific subprojectcan we disable the task in some way if not we should not import the fulljava librarygradle but only the logic we need then we dont importanimalsniffer straight awayon fri oct christian schwarz wrote timvdlippe tmurakami do you guys have an idea how to get the build green i must admit im a gradle noob 😨 — you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread christianschwarz thank you ill read christianschwarz i pushed fixes to this pr which should make the build pass now timvdlippe big thanks for fixing the build christianschwarz do you have some time in the near future to address the above feedback thanks timvdlippe do you have some time in the near future to address the above feedback thanksi look into it next week tmurakami in case you want to joint the api discussion here it is mockito google group how should the perfect mockito junit api look like https groupsgooglecom forum topic mockito r l ag rgbq christianschwarz thank you i will check later i have updated this pr with the refactoring really happy that the impact on our public api is minimal the only sad part is the mockitosession with testclassinstances but the impact is limited i have also updated the specification of the extension to be in line with other junit extension this severely simplified the implementation of searching for strictness while still allowing users to override per method code coverage in this prs diff is lower than im waiting to merge this pr this pr is work in progress we will improve the code coverage lateron sat jan wreulicke wrote code coverage in this prs diff is lower than im waiting to merge this pr — you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread hey mockito developers can you review its a critical change because its new public api we are always very judicious about public api changes it also simplifies this pr junit integration because we dont need strictness annotationfor this pr how about we ship first now that has been shipped i think we should discuss how to continue with this pr christianschwarz do you have time to continue with this effort id be happy to help hi marcphilipp do you have time to continue with this effort id be happy to helpthis week i can invest some hours in this pr you help is very welcome thanks for your request do you know how to set up gradle so the junit mockito extension module is build a independent artefact mockitoguy timvdlippe why you want to distribute the mockito junit extension as independent artefact and not as part of mockito core from a user perspective it is convenient to have only one dependency because mockito core uses java and junit and its extensions requirejava therefore we can not incorporate in core and have to publish aseparate artifacton mon feb christian schwarz wrote hi marcphilipp do you have time to continue with this effort id be happy to help this week i can invest some hours in this pr you help is very welcome thanks for your request do you know how to set up gradle so the junit mockito extension module is build a independent artefact mockitoguy timvdlippe why you want to distribute the mockito junit extension as independent artefact and not as part of mockito core from a user perspective it is convenient to have only one dependency — you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread timvdlippe mockitoguy what is the current state of the strictness discussion if you made no decisson yet i would like leave the strictness toppic out of this first pr it can be added later and use stricnesswarn as default christianschwarz i think our final decision was to remove strictness from test method level but keep it in the extension that leaves strictness on runner mock and soon invocation level for test method level we will need concrete use cases see https githubcom mockito mockito pull issuecomment timvdlippe okay what you mean by remove strictness from test method level but keep it in the extensionkeep the strictness to be used on top level test class and nested test classes java extendwith mockitoextensionclass strictness warn public class nestedtests { nested strictness silent class nestedtest { }} christianschwarz on test method level eg java extendwith mockitoextensionclass strictness warn remove this onepublic class nestedtests { nested strictness silent remove this one class nestedtest { strictness lenient remove this one public void test { } }} timvdlippe should extendwith mockitoextensionclass be supported on nested test classes java extendwith mockitoextensionlenientclass public class nestedtests { nested extendwith mockitoextensionwarnclass class nestedtest { }} christianschwarz yes please in this case all invocations in nestedtest should have strictness warn while all others have lenient i think using subclasses like mockitoextensionwarn and mockitoextensionlenient is not a good idea because in that case both extensions would get registered and interfere with each other marcphilipp hm good point we wanted to keep our api in line with how we deal with strictness in junit do we have any other options to use a similar interface but removing the duplication issue confirmed it doesnt work stricness annotation to the rescue that is really unfortunate cry will keep on thinking for alternatives but for now we have to resort to strictness you could handle the duplication issue in the extensions by using lazy initialization and the same namespace to store the mockitosession in extensioncontext thank you guys for picking this uplets discuss the strictness annotation and potentially other settings of the extension strictness annotation looks nice in the test code but it has caveats it appears as general purpose api but it is only a setting for junit extension this may be confusing for users annotation used without mockitoextension user thinks it works but it has no effect it is not easy to discoverwhat do you think about following options mockitoextensionsettings strictnessstrictnesslenient mockitoextensionsettings strictnessstrictnesslenient loggermyloggerclass example future setting mockitoextensionstrictness strictnesslenient if we need to discuss the annotation more we can always ship the initial version version of junit support without it this way we can unblock a feature for our users while still improve the api incrementally it would be good to make the extension use strict_stubs by default it is consistent with mockitosession and it is inline with our path to stricter stubs by default in future version of mockito i agree with timvdlippe that were not ready for strictness per method lets see some solid use cases first to implement it cleanly we should support it for all kinds of runners not only junit lets stay focused on junit extension and revisit strictness per method later also when we merge we may not need strictness per method at allwhats the best name of the new module mockito junit mockito jupiter what is the typical naming convention here mockitoextensionsettings strictnessstrictnesslenient looks modern and more flexible than the junit look alike extendwith mockitoextensionlenientclass but i would like to shorten it to mockitoextension strictnessstrictnesslenient but i wonder how it behave with nested test classes timvdlippe mockitoguy how should the api finally look like what should be shoud not be included in first version christianschwarz the first version needs to create mocks with mock and spy and such properly handle mockitosession even with nested classes have strict stub support how should the extension look extendwith mockitoextensionclass vs mockitoextension so we leave the configurable stricness for a next step right extendwith mockitoextensionclass such that users downstream can potentially introduce mockitoextension if they want to that lets us stick to the mainstream junit notation with freedom for our users so we leave the configurable stricness for a next step rightyes please to timvdlippes comments christianschwarz regarding your earlier suggestion with mockitoextension strictnessstrictnesslenient can mockitoextension be at the same time a annotation for configuring our extension and b a class referenced in jupiters extendwith extendwith mockitoextensionclass mockitoextension strictnessstrictnesslenient class junit test {} can mockitoextension be at the same time a annotation for configuring our extension and b a class referenced in jupiters extendwith no that is not possiblean annotation in java is not allowed to implement any interface other than annotation any attempt to do so will result in a compiler warning similar to the following annotation type declaration cannot have explicit superinterfaces you could meta annotate the annotation with extendwith thoughfor example java extendwithmockito strictnessstrictnesslenient class junit test {} java extendwith mockitoextensionclass retention runtime public interface extendwithmockito { strictness strictness default strictnessstrict} timvdlippe mockitoguy i would like to follow the proposal of marcphilipp but leaving the strictness for now the stricness can be added later the annotation extendwithmockito reveal clearly its intention it is even better than mockitoextension christianschwarz yes that seems fine lets try to finish this pr and ship as it has been lingering for quite a while now smile i am going to polish up this pr this weekend to hopefully get this close to merging it has been waiting for quite a while now smile all right i have polished up the implementation now with help from marcphilipp much appreciated the implementation now includes a configuredwithmockito which is an annotation that describes how mockito should run this includes the strictness for now but is extensible to future configuration we would likethere are a couple of action points left mockitoguy could you review this pr in terms of documentation implementation gradlew build does not include the junit subproject tests i have no clue why yet cry running the tests directly works in intellij but if i run the module package instead i get the following stacktrace mar pm orgjunitplatformlaunchercoredefaultlauncher handlethrowablewarning testengine with id junit jupiter failed to discover testsjavalangarraystoreexception sunreflectannotationtypenotpresentexceptionproxy at sunreflectannotatio notationparserparseclassarray annotationparserjava at sunreflectannotatio notationparserparsearray annotationparserjava at sunreflectannotatio notationparserparsemembervalue annotationparserjava at sunreflectannotatio notationparserparseannotation annotationparserjava at sunreflectannotatio notationparserparseannotations annotationparserjava at sunreflectannotatio notationparserparseannotations annotationparserjava at javalangclasscreateannotationdata classjava at javalangclassannotationdata classjava at javalangclassgetdeclaredannotation classjava at orgjunitplatformcommonsutilannotationutilsfindannotation annotationutilsjava at orgjunitplatformcommonsutilannotationutilsfindannotation annotationutilsjava at orgjunitjupiterenginedescriptorjupitertestdescriptordeterminedisplayname jupitertestdescriptorjava at orgjunitjupiterenginedescriptorclasstestdescriptor classtestdescriptorjava at orgjunitjupiterenginedescriptorclasstestdescriptor classtestdescriptorjava at orgjunitjupiterenginediscoverytestcontainerresolverresolveclass testcontainerresolverjava at orgjunitjupiterenginediscoverytestcontainerresolverresolveelement testcontainerresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolvertrytoresolvewithresolver javaelementsresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolverlambda$resolve$ javaelementsresolverjava at javautilstreamreferencepipeline$ $ accept referencepipelinejava at javautiliteratorforeachremaining iteratorjava at javautilspliterators$iteratorspliteratorforeachremaining spliteratorsjava at javautilstreamabstractpipelinecopyinto abstractpipelinejava at javautilstreamabstractpipelinewrapandcopyinto abstractpipelinejava at javautilstreamreduceops$reduceopevaluatesequential reduceopsjava at javautilstreamabstractpipelineevaluate abstractpipelinejava at javautilstreamreferencepipelinecollect referencepipelinejava at orgjunitjupiterenginediscoveryjavaelementsresolverresolve javaelementsresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolverlambda$resolveforallparents$ javaelementsresolverjava at javautilcollections$singletonsetforeach collectionsjava at orgjunitjupiterenginediscoveryjavaelementsresolverresolveforallparents javaelementsresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolverresolvecontainerwithparents javaelementsresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolverresolveclass javaelementsresolverjava at javautilarraylistforeach arraylistjava at javautilcollections$unmodifiablecollectionforeach collectionsjava at orgjunitjupiterenginediscoverydiscoveryselectorresolverlambda$resolve$ discoveryselectorresolverjava at javautilarraylistforeach arraylistjava at orgjunitjupiterenginediscoverydiscoveryselectorresolverresolve discoveryselectorresolverjava at orgjunitjupiterenginediscoverydiscoveryselectorresolverresolveselectors discoveryselectorresolverjava at orgjunitjupiterenginejupitertestenginediscover jupitertestenginejava at orgjunitplatformlaunchercoredefaultlauncherdiscoverengineroot defaultlauncherjava at orgjunitplatformlaunchercoredefaultlauncherdiscoverroot defaultlauncherjava at orgjunitplatformlaunchercoredefaultlauncherdiscover defaultlauncherjava at comintellijjunit junit ideatestrunnerstartrunnerwithargs junit ideatestrunnerjava at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs ideatestrunnerjava at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart junitstarterjava at comintellijrtexecutionjunitjunitstartermain junitstarterjava mar pm orgjunitplatformlaunchercoredefaultlauncher handlethrowablewarning testengine with id junit jupiter failed to discover testsjavalangarraystoreexception sunreflectannotationtypenotpresentexceptionproxy at sunreflectannotatio notationparserparseclassarray annotationparserjava at sunreflectannotatio notationparserparsearray annotationparserjava at sunreflectannotatio notationparserparsemembervalue annotationparserjava at sunreflectannotatio notationparserparseannotation annotationparserjava at sunreflectannotatio notationparserparseannotations annotationparserjava at sunreflectannotatio notationparserparseannotations annotationparserjava at javalangclasscreateannotationdata classjava at javalangclassannotationdata classjava at javalangclassgetdeclaredannotation classjava at orgjunitplatformcommonsutilannotationutilsfindannotation annotationutilsjava at orgjunitplatformcommonsutilannotationutilsfindannotation annotationutilsjava at orgjunitjupiterenginedescriptorjupitertestdescriptordeterminedisplayname jupitertestdescriptorjava at orgjunitjupiterenginedescriptorclasstestdescriptor classtestdescriptorjava at orgjunitjupiterenginedescriptorclasstestdescriptor classtestdescriptorjava at orgjunitjupiterenginediscoverytestcontainerresolverresolveclass testcontainerresolverjava at orgjunitjupiterenginediscoverytestcontainerresolverresolveelement testcontainerresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolvertrytoresolvewithresolver javaelementsresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolverlambda$resolve$ javaelementsresolverjava at javautilstreamreferencepipeline$ $ accept referencepipelinejava at javautiliteratorforeachremaining iteratorjava at javautilspliterators$iteratorspliteratorforeachremaining spliteratorsjava at javautilstreamabstractpipelinecopyinto abstractpipelinejava at javautilstreamabstractpipelinewrapandcopyinto abstractpipelinejava at javautilstreamreduceops$reduceopevaluatesequential reduceopsjava at javautilstreamabstractpipelineevaluate abstractpipelinejava at javautilstreamreferencepipelinecollect referencepipelinejava at orgjunitjupiterenginediscoveryjavaelementsresolverresolve javaelementsresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolverlambda$resolveforallparents$ javaelementsresolverjava at javautilcollections$singletonsetforeach collectionsjava at orgjunitjupiterenginediscoveryjavaelementsresolverresolveforallparents javaelementsresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolverresolvecontainerwithparents javaelementsresolverjava at orgjunitjupiterenginediscoveryjavaelementsresolverresolveclass javaelementsresolverjava at javautilarraylistforeach arraylistjava at javautilcollections$unmodifiablecollectionforeach collectionsjava at orgjunitjupiterenginediscoverydiscoveryselectorresolverlambda$resolve$ discoveryselectorresolverjava at javautilarraylistforeach arraylistjava at orgjunitjupiterenginediscoverydiscoveryselectorresolverresolve discoveryselectorresolverjava at orgjunitjupiterenginediscoverydiscoveryselectorresolverresolveselectors discoveryselectorresolverjava at orgjunitjupiterenginejupitertestenginediscover jupitertestenginejava at orgjunitplatformlaunchercoredefaultlauncherdiscoverengineroot defaultlauncherjava at orgjunitplatformlaunchercoredefaultlauncherdiscoverroot defaultlauncherjava at orgjunitplatformlaunchercoredefaultlauncherexecute defaultlauncherjava at comintellijjunit junit ideatestrunnerstartrunnerwithargs junit ideatestrunnerjava at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs ideatestrunnerjava at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart junitstarterjava at comintellijrtexecutionjunitjunitstartermain junitstarterjava process finished with exit code empty test suite you can run the individual tests though and see how it works i would like to finish this pr asap and publish next week to finally have mockito junit working tada i was able to fix the gradle integration after following https junitorg junit docs current user guide running tests build gradle intellij still broken but i got to go now sbrannen whats the most consistent and popular naming convention gradle team calls new junit junitplatform because in the gradle file you write this test { usejunitplatform } in this pr were shipping new module orgmockito junit jupiter which i prefer what is the best name mockitoguy the platform is something different than jupiter the platform is a separate organisation https mvnrepositorycom artifact orgjunitplatform which handles integration with platform oriented clients like gradle intellij maven etc instead we are building an extension that is built on top of the junit api and this is called jupiter mockitoguy whats the most consistent and popular naming convention gradle team calls new junit junitplatformthats because the gradle test task actually launches the _junit platform_ which was released under the junit umbrella project the platform can be used to run test engines for junit jupiter aka junit junit vintage aka junit and and any other testing frameworks for which there is a testengine eg spek etc so the gradle team has made the best choice in calling that support for the junit platform in this pr were shipping new module orgmockito junit jupiter which i prefer what is the best name junit jupiter makes perfect sense here your extension is an implementation of apis from junit jupiter so you should definitely stick with thati do the same thing in springs support for junit jupiter for example the springextension in spring framework resides in the orgspringframeworktestcontextjunitjupiter package within the spring test artifactmake sense btw i highly recommend my explanation of what junit is here https junitorg junit docs current user guide overview what is junit 😉 _junit junit platform junit jupiter junit vintage_ when can we expect releasing junit support by mockito mockitoguy feedback addressed if no one else objects i am merging this later today and publish a new maven central release for mockito java and junit compatibility all right lets do thisthanks christianschwarz for the initial implementation marcphilipp sbrannen for the junit feedback and help and the others for reviewing merging
1130,1228,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,add checkreturnvalue to stubbing verification methods introduce a new annotation checkreturnvalue and add this to methods like when and verify such that static analysis can verify the value is actually used http errorproneinfo bugpattern checkreturnvalue this makes sure developers can get warnings on build time instead of run time with our internal validatestate fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e c e c ecd b ef a b d fsrcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &srcpr&tokenmx slder &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down l configuration plugins defaultmockitopluginsjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul bsdwdpbnmvrgvmyxvsde vy tpdg qbhvnaw zlmphdme va org mockito internal invocation realmethodjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul jlywxnzxrob quamf yq internal invocation defaultinvocationfactoryjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul rlzmf bhrjbnzvy f aw urmfjdg yes qyxzh arrow_up nternal listeners verificationstartednotifierjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc saxn zw lcnmvvmvyawzpy f aw uu rhcnrlze vdglmawvylmphdme arrow_up a org mockito internal creation suspendmethodjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi tdxnwzw ktwv ag klmphdme arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e c d a a https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments approved your changes please consider my feedback and ship at will
904,1247,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,remove several container classes and inline code remove several classes that were containers for code that is easier to be inlined they were only referenced once or never at all this makes it easier to reason about the code while also maintaining less code and classescloses codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d ae ec da e bdee f ee b fc e f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down va org mockito internal util collections setsjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbgxly rpb zl nldhmuamf yq arrow_down internal junit mismatchreportingtestlistenerjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc naxntyxrjafjlcg ydgluz rlc rmaxn zw lci qyxzh arrow_down g mockito internal matchers text valueprinterjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc tyxrjagvycy zxh l zhbhvluhjpbnrlci qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d aed e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments since no one reviewed this pr for a while i assume it is safe to be merged sorry nobody picked up the work you can try to ping us for feedback i suspect that because it was a safely looking internal refactoring we put a low priority on this in the future lets try to solicit approval for prs
1254,1257,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes and improved check for self invocation better checks for recursive calls and guards internally used jdk typesfixes fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f ebf b b d eef e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f ed https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments updated the pr i have merged this after your feedback which i took into consideration if you have anything further i am happy to adress it i wanted to get this out as it affects a bunch of kotlin users great thank you for merging
1256,1257,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes and improved check for self invocation better checks for recursive calls and guards internally used jdk typesfixes fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f ebf b b d eef e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f ed https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments updated the pr i have merged this after your feedback which i took into consideration if you have anything further i am happy to adress it i wanted to get this out as it affects a bunch of kotlin users great thank you for merging
106,1258,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,prevent class loading race condition allow singleton locking in context with class loading racesfixes fully agree will do soon codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e de a c c ebf c df srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&width &tokenmx slder &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ eation bytebuddy typecachingbytecodegeneratorjava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvvhlwzunhy hpbmdcexrly kzudlbmvyyxrvci qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e de cf https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments raphw to help us mockito users it would be useful to have a short wiki entry describing purpose use case of the flag orgmockitolocksingleton added a segment to the documentation is it possible to test these changes now from snapshot build for exampleive just hit this issue with sbt mockito and id be glad to give feedback you should be able to clone this repository check out this branch and then gradlew build the artifact which you can include in your project ive thought about this but it is not that easy with different build tools let me see whether there is something like gradlelocal in sbt good news it worksbad news it slows down the buildi used gradlew install && cp build libs mockito core jar home martin ivy cache orgmockito mockito core jars mockito core jar and then sbt dorgmockitolocksingletontrue now my build and tests passin my master branch where it uses mockito x the build tests pass for secs in the branch with mockito dorgmockitolocksingletontrue it takes secsim following https githubcom sbt sbt issues so hopefully soon ill get rid of dorgmockitolocksingletontrue good news it worksawesome bad news it slows down the buildusing the property or not should not affect the performance if you look at the code change regardless if we use classloader or bootstrap_lock as lock monitor we should have the same performance characteristic either of those objects is a singleton in the jvm that runs testsi suspect that your tests are slower because mockito x is a bit slower that x in general this could be because we fixed bunch of concurrency issues and added safeguards we can always try to optimize mockito contributions are welcome using the property or not should not affect the performancehere is my setup mockito parallelexecution in test false in buildsbt secs mockito built from this branch parallelexecution in test false secsso it is not mockito x vs x but just this new lock parallel tests mockito parallelexecution in test true this is the default in sbt secsmy team voted to go back to mockito x until the issue in sbt is fixed although setup is not bad hi mockitoguy i see your argument it is not a good default to rely on a user setting when class loading hierarchies can cause deadlocks in the first place maybe it should be the other way round would you rather configure it using the runner in this caseand yes byte buddy is a bit slower on class creation then cglib this is due to its proper resolution of generic types and visibility bridges etc and because of its retention of meta data like annotations this is extra work that cglib never did but it helped us to solve a bunch of bugs for this reason the benchmarks are difficult to compare my team voted to go back to mockito x until the issue in sbt is fixed although setup is not bad martin g when the issue with sbt is fixed we suspect that you will still have the perf degradation when moving to mockito x trying to manage your expectations it is not a good default to rely on a user setting when class loading hierarchies can cause deadlocks in the first place maybe it should be the other way round would you rather configure it using the runner in this casehey raphw the idea with the runner is interesting it is better because it does not introduce yet another way to configure mockito it still is not discoverable well and the user will get deadlock in the first place why not using bootstrap_lock always i pushed the commit to your branch to illustrate the idea any news on this raphw mockitoguy news 😄 elfolink thank you for pushing raphw are you ok with simplifying locking my last commit id like to merge this pr in its current form yes looks like an easy enough solution and the performance hit does not seem too severe go for it
1262,1268,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes update doc for answerscalls_real_methods update the documentation for the answerscalls_real_methods according to and also included a note with recommendation not to use when thenreturn for partial mock codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit efa c b e bdadf efe ed a f f cf srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull srcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update efa c dc c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments hey seriybg this is a nice change sorry we have not reviewed earlier it must have slipped our radar continually improving documentation is absolutely important thank you for contributing
1130,1270,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,cleaner code for mockito users by better integration with static code checkers more checkreturnvalue builds on note that almost all non void orgmockitomockito methods are now annotated checkreturnvalue you could consider going the other way by annotating the class as a whole checkreturnvalue and adding canignorereturnvalue https githubcom google error prone blob master annotations src main java com google errorprone annotations canignorereturnvaluejava to the non void methods that form the complement codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d aa ee b c c e f bcsrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &width &tokenmx slder &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d aaae aac https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments context for this change within a company internal pr i found an unused mock someclass statement and thought itd be nice if mockito supported checkreturnvalue then i found but noticed that the mock methods werent annotated in fixing that i decided to go over the whole class for each method annotated in this pr i traced its logic most are side effect free while the remainder throw an exception in case of misuse the only non void method in orgmockitomockito i did not annotate is ignorestubs because it returns its input the reason i did not include these methods in was because there were no side effects checking them would therefore not required as it would be perfectly okay from a mockito perspective that these methods are invoked and then discarded the methods i annotated do have side effects and thus are harmful if you discard the return valuetherefore i am hesitant to accept this pr as to my knowledge these methods are pure and are not harmful for mockito to be invoked a lot of times invoking these methods many times may not be harmful in a functional sense but imho checkreturnvalue is more about establishing correctness ignoring the return value of any of these methods indicates a human error leading to cluttered tests in the best case and a false sense of security in the worst caselooking at guava that seems to be the way how they use the annotation for example it is applied to the whole package comgooglecommoncollect with some methods within that package annotated canignorereturnvalue none of those are pure i do understand that point of view however in that case we would need to update every public api that is non void to have this annotation which seems counter intuitiveanyways these are my cents paging mockito core to give their opinion smile \ \ in that case we would need to update every public api that is non void to have this annotation \ \ well a single annotation in package infojava takes care of that example https githubcom google guava blob master guava src com google common collect package infojaval dbut indeed lets see how others feel about it interesting discussion heres how i would summarize the decision point a benefit a chance of making our customers code cleaner because they could identify and remove dead code b downside hard to apply this strategy consistently we would have to review all public api and always remember to use those annotations when adding new apigiven that we already started using the annotations the downside b already applies merging the pr does not make it any worse hence the downside can be discounted and we only have the benefit im in favor of merging the prthank you stephan for tracing the public api methods and coming up with the pr timvdlippe the current master s last commit is e a ac cf af f aa d e e but git grep i prone doesnt show an error prone integration cant find another applicable branch using git log s prone i all either am i looking cross eyed or ah my brain was derping i was working on and thought i merged it but i did not so we have to rebase after that pr is merged sorry for the confusion no worries smile i see also targets the release x branch so i wont need to switch the target branch for this pr and indeed that pr contains a bunch of suppresswarnings checkreturnvalue this pr will almost certainly force the addition of a bunch more of those ive subscribed to the other pr and will rebase again once its merged
792,1272,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,strictness configurable per mock stubbing fixes problemtoday we have strict stubs feature a key enabler for cleaner tests and improved debuggability strict stubs dont work well with common stubbing pattern they also dont like when we call stubbed methods with unexpected arguments even though sometimes it is legit for more see solution java test public void demo { lenient method on mocksettings interface foo mock mockitomock fooclass withsettings lenient lenient method on mockito class mockitolenient when mockfoo thenreturn mockitolenient doreturn when mock foo } for more see public api changes new methods mockitolenient mocksettingslenient mockcreationsettingsislenient stubbinggetstrictness new interfaces basestubber extracted out from existing stubber interface so that we can reuse api with lenientstubber lenientstubber instance returned by mockitolenient other changes made orgmockitonotextensible annotation public so that we can use it in subpackages codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e ac eec aa b ea e d dd d srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &width &tokenmx slder &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito quality strictnessjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by xdwfsaxr l n cmljdg lc muamf yq arrow_down src main java org mockito junit mockitojunitjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by qdw pdc nb nraxrvslvuaxquamf yq arrow_down exceptions misusing potentialstubbingproblemjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl pc vzaw nl bvdgvudglhbfn dwjiaw nuhjvymxlbs qyxzh arrow_down eptions misusing unnecessarystubbingexceptionjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl pc vzaw nl vubmvjzxnzyxj u r ymjpbmdfegnlchrpb uamf yq arrow_down mockito internal invocation unusedstubsfinderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul vudxnlzfn dwjzrmluzgvylmphdme arrow_down mockito internal stubbing ongoingstubbingimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy pbmdvaw nu r ymjpbmdjbxbslmphdme arrow_up rc main java org mockito internal mockitocorejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nraxrvq yzs qyxzh arrow_up ckito internal stubbing doanswerstylestubbingjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy eb fuc dlcln ewxlu r ymjpbmcuamf yq mockito internal junit unusedstubbingsfinderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc vbnvzzwrtdhviymluz ngaw kzxiuamf yq arrow_down org mockito internal handler mockhandlerimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc oyw kbgvyl vy tiyw kbgvysw wbc qyxzh arrow_down and more https codecovio gh mockito mockito pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e ac fcc a https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments as a cross point with junit i would actually say that we still want method level lenient stubbing thus these two features can co exist in my opinioncan you provide a use case test case that demonstrates the value you can also reply to the long email thread we had about it on mockito mailing list moreover i see null used a lot of times which is unclear to me what the usefulness iscan you be more specific what nulls are you not clear about the code changes are light on the javadoc and comments apologies thank you for review for example the strictnesslenient is scattered throughout the code this make it very hard to expand later on rather i would add logic to strictness with methods that based on the type determine what they should do this makes the code a lot more maintainablestrictness is a public type and we want to be very judicious adding methods to it im very curious about your idea though perhaps we can put those methods on some new internal strictness object let me try to work on this and get back great feedback hey mockito developers any feedback timvdlippe ive addressed portion of your feedback can you clarify the other portion see my questions to your questions please address the left over todos and add a new section in the mockitojava javadoc then you can merge this pr 👍absolutely thank you for review hey guys any ideas when this will be ready to merge in and released im just poking because were having the exact issue this would resolve at our workthank you in advance mpkempson thank you for upvoting thats what i needed ill work on this shortly
108,1280,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,update strict_stubs documentation for verifynomoreinteractions fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a c c b bfdf b a ffe srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito quality strictnessjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by xdwfsaxr l n cmljdg lc muamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1232,1301,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,extend mockitosession builder api to enable usage by testing frameworks the first commit in this pr fixes in the additional commits ive taken the liberty to implement my proposals from https githubcom mockito mockito issues issuecomment add mockitosessionbuildername string to pass a name from the testing framework to the mockitosession add mockitosessionbuilderlogger mockitosessionlogger to customize the logger used for hints warnings produced when finishing mocking useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter add mockitosessionfinishmocking throwable to avoid potentially confusing warnings for failing tests add mockitosessionsetstrictness strictness to change the strictness of the current session there were two test cases requiring that each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to fix to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the junitrule implementation to use it codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a f d b b e f ec b beec d dsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &width &tokenmx slder &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ockito internal runners defaultinternalrunnerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc ydw uzxjzl rlzmf bhrjbnrlcm hbfj bm lci qyxzh arrow_down src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down internal junit mismatchreportingtestlistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc naxntyxrjafjlcg ydgluz rlc rmaxn zw lci qyxzh arrow_down internal session mockitosessionloggeradapterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zzxnzaw ul vy tpdg tzxnzaw utg nz vyqwrhchrlci qyxzh kito internal framework defaultmockitosessionjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc mcmftzxdvcmsvrgvmyxvsde vy tpdg tzxnzaw ulmphdme arrow_up ckito internal junit defaulttestfinishedeventjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx vgvzdezpbmlzagvkrxzlbnquamf yq arrow_down mockito internal junit universaltestlistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc vbml zxjzywxuzxn tglzdgvuzxiuamf yq mockito internal session mockitologgeradapterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zzxnzaw ul vy tpdg mb dnzxjbzgfwdgvylmphdme ain java org mockito internal junit junitrulejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc kvw pdfj bguuamf yq arrow_up internal session defaultmockitosessionbuilderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zzxnzaw ul rlzmf bhrnb nraxrvu vzc lvbkj awxkzxiuamf yq and more https codecovio gh mockito mockito pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a f a https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments marcphilipp thank you very much for your pr it looks like this also includes several changes i introduced in https githubcom mockito mockito pull commits b db a a d f bbfd ddead be c for we will need to look how this mergessadly i do not have a lot of time for review but i will try to find some time as soon as possible to provide feedback initial look is promising smile mockitoguy ive improved the documentation in fb d timvdlippe sorry i wasnt aware of your changes in there will definitely be conflicts but the general direction seems to be the same mockitoguy ive improved the documentation in fb dgreat taking a look now marcphilipp can you configure your pr to allow our pushes i have minor tweaks i want to do before merging and would like to push to your repo for visibility first ive tried to push to your repo branch but i got this mockito src$ git push https githubcom marcphilipp mockitogitto https githubcom marcphilipp mockitogit remote rejected marcphilipp issues session additions marcphilipp issues session additions permission denied error failed to push some refs to https githubcom marcphilipp mockitogit marcphilipp this pr is great and im almost ready to merge the updates to the docs are good im making tweaks to this pr in this branch https githubcom mockito mockito commits marcphilipp issues session additions making tweaks helps me understand the code and keeps the docs consistent if you allow upstream pushes from this pr it would be usefulwe are very happy to take this contribution thank you hmm allow edits from maintainers is enabled so it should work if checked users with write access to mockito mockito can add new commits to your issues session additions branch you can always change this setting lateranyway ive sent you an invite as a collaborator to my fork that should work in any case please let me know if it did mockito developers can we get your input on method namingthis pr adds sessionsetstrictness strictness since in our api we already use strictness method i suggest we keep it consistent java existing mockitorulestrictness strictness mockitosession strictness strictness suggested change for this pr sessionstrictness strictness thoughts mockitoguy i am okay with that thank you timvdlippe for feedback marcphilipp thoughts on strictness vs setstrictness method in the next day or two ill finish tweaking this pr push changes upstream to your fork and we should be ready to mergethis is very nice improvement and im looking forward eagerly to merge i went with the setter to emphasize that the old value might already have been used for previously created mocks but didn‘t want to break the api of the rule implementation however i‘d be fine with strictness too marcphilipp thank you for feedback we should be ready to merge soon todays mockito time budget i used on different pr but i have this one on mind every day marcphilipp before i merge i have requests can you update the version in versionproperties to next minor number and also the since tags i believe it will e can you add a paragraph to our main javadoc with concise summary of the public api changes check out how we have done it in the past https githubcom mockito mockito blob release x src main java org mockito mockitojaval this is a really really nice improvement of the public api for framework integrations big thanks mockitoguy done feel free to polish what i wrotei merged master into the pr branch to resolve the conflict in versionproperties ill be on vacation the next few days but please go ahead and rebase squash or merge the commits in this branch great thank you making a final review and merging
1306,1307,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,update public api of invocationfactory needed for android static mocking fixes a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior a callable that throws athrowable codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a bc e cfdaf f b a cf e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ va org mockito internal invocation realmethodjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul jlywxnzxrob quamf yq arrow_down internal invocation defaultinvocationfactoryjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul rlzmf bhrjbnzvy f aw urmfjdg yes qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a bc e ef https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments r call throws throwable would conflict with r call throws exception so i cannot use subclassing when just an anonoymous inner realmethodbehavior that wrapps the callable orgmockitousagebasicapimocksserializationtest failsi added a test case that tests the case where the invocation is handled without a throwable reviewing else you should be able to update our internal fromcallable to use a realmethodbehavior and let both createinvocation call this method that should remove the need for a duplicate inner class since these classes are in internal anyways i like timvdlippes idea to reduce duplication i applied that idea to the changes i made on top moltmanns branch https githubcom mockito mockito commits moltmann throwcallable mockitoguy you change https githubcom mockito mockito commit cf c ed a bcba d f seem to break orgmockitousagebasicapimocksserializationforannotationtest the same issue i saw how do i apply your changes manually via git am you change cf seem to break orgmockitousagebasicapimocksserializationforannotationtest the same issue i sawouch i missed that use case we need to make the new interface serializable otherwise non android use cases like powermockito will use the new public api and break when mocks are being serialized unless they remember to keep the implementation classes serializable for android use cases we dont need serialization but this new public api will be used in other context tooour strategy is that public interfaces that we expect our users to extend are marked serializable if they are needed for mockitos serialization feature how do i apply your changes manually via git amjust pull my changes on top of your branch alternatively configure your pr to allow pushes from mockito devs did you do it already allow edits from maintainers should be enabled timvdlippe once the build passes im merging thanks for review
1279,1310,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,ensure isolation of stubbings bugfix compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal corner cases only possibly incorrect tests and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the world problemwhen stubbing with answers that call different mocked methods javawhen mockfoo the swer { othermockbar } we need to ensure that mockfoo and othermockbar dont interfere prior to this bugfix this scenario resulted in various problems like stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see solutionthe solution is based on great pr by r smirnov huge thanks to r smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as documented mockito syntax caveat thank you r smirnov for persistence and getting this fixed can we give an example of a test that breaks with this new behavior codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ec b f bda f f f c a ebd srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ec d c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments can we give an example of a test that breaks with this new behaviortake a look or run the test class attached to this pr there are test methods that demonstrate invalid behavior such as soe there are also test methods that demonstrate incorrect behavior of stubbing timvdlippe the ticket linked from this pr contains examples mockitoguy i understand that the supplied test cases are now working as intended what i meant was are there any other tests that previously passed but now fail and what we consider the breaking change i understand that the supplied test cases are now working as intended what i meant was are there any other tests that previously passed but now fail and what we consider the breaking changein our codebase which has very comprehensive coverage all tests were passing there are no concrete examples of tests that would be failing after this change the test class included in the pr demonstrates the change in behavior in that case i wouldnt consider this a breaking change simply a major bugfix 😄 in that case i wouldnt consider this a breaking change simply a major bugfix 😄sounds good i updated the description can you review the code approve thank you again r smirnov merging
1296,1310,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,ensure isolation of stubbings bugfix compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal corner cases only possibly incorrect tests and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the world problemwhen stubbing with answers that call different mocked methods javawhen mockfoo the swer { othermockbar } we need to ensure that mockfoo and othermockbar dont interfere prior to this bugfix this scenario resulted in various problems like stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see solutionthe solution is based on great pr by r smirnov huge thanks to r smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as documented mockito syntax caveat thank you r smirnov for persistence and getting this fixed can we give an example of a test that breaks with this new behavior codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ec b f bda f f f c a ebd srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ec d c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments can we give an example of a test that breaks with this new behaviortake a look or run the test class attached to this pr there are test methods that demonstrate invalid behavior such as soe there are also test methods that demonstrate incorrect behavior of stubbing timvdlippe the ticket linked from this pr contains examples mockitoguy i understand that the supplied test cases are now working as intended what i meant was are there any other tests that previously passed but now fail and what we consider the breaking change i understand that the supplied test cases are now working as intended what i meant was are there any other tests that previously passed but now fail and what we consider the breaking changein our codebase which has very comprehensive coverage all tests were passing there are no concrete examples of tests that would be failing after this change the test class included in the pr demonstrates the change in behavior in that case i wouldnt consider this a breaking change simply a major bugfix 😄 in that case i wouldnt consider this a breaking change simply a major bugfix 😄sounds good i updated the description can you review the code approve thank you again r smirnov merging
1314,1319,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes include all the invocation in mock verification error message have changes the verify error message to include all the invocation instead of including just one undesired invocationpreviously we have message like wanted time at but was times undesired invocation at this pr changes it to wanted time at but was times at at to make the error message consistent the similar changes was made for too little invocations casethe message wanted times at but was times at changed to wanted times at but was times at at codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit cbc a db bdb cb d b d be a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ification checkers numberofinvocationscheckerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vy hly tlcnmvtnvtymvyt zjbnzvy f aw uc nozwnrzxiuamf yq mockito internal invocation invocationsfinderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul ludm jyxrpb zrmluzgvylmphdme arrow_up n checkers atleastxnumberofinvocationscheckerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vy hly tlcnmvqxrmzwfzdfhodw izxjpzkludm jyxrpb zq hly tlci qyxzh arrow_down java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update cbc a db https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments nice contribution we will try to review in the next couple of days have fixed all the remarks except the imports since im not sure that the previous layouts were the correct ones mockitoguy thanks i can rebase these pr if there are conflicts with the release x timvdlippe thanks have fixed your remark and also rebased the pr on top of x branch
111,1320,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,avoid bytebuddy import issue to enable repackaging without bytebuddy this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectorytest grep r e import org\mockito\internal\creation\bytebuddy\ ^\ $ src main does not return anythingoffers workaround for codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit cc e c d adfdbfbf ab srcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ rnal creation bytebuddy mockmethodinterceptorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzeludgvyy vwdg ylmphdme ito internal invocation interceptedinvocationjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul ludgvyy vwdgvksw b nhdglvbi qyxzh internal invocation defaultinvocationfactoryjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul rlzmf bhrjbnzvy f aw urmfjdg yes qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c a https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments hey moltmann thank you for another contribution can you elaborate the goals for this prthis pr changes only internal classes how does it help alternate mockmakers what does cleanly exclude the bytebuddy subdirectory mean interceptedinvocation is used by all mockmakers hence if you want to order it correctly it should not be in a bytebuddy specific directorythere are currently two ways to build mockito without bytebuddy just load mockito core and exclude netbytebuddy this leaves the bytebuddy mockmaker in place hence there will be unresolved references into net bytebuddy this still works as none of these references will be called and at least on android loading something with unresolved references just throws some log messages but nothing worse you can also take mockito core unpack it and remove the dependency on netbytebuddy and remove the whole src org mockito internal creation bytebuddy folder then you have no references into net bytebuddy to be able to do this you need this change to clean up the directory structure of mockito as described above also if you even wanted to produce a byte buddy less version of mockito this change would be the first you would make regarding my last comment during a regular android gradle build we run a lint checker which finds the issue in my last comment you can suppress this and you are good though thank you for explanation i updated the title and im absolutely merging
1326,1327,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,fixes reduce the allocation rate for the typical use of locat… …ionimpla trivial one but should be very useful as i noticed this class being instantiated quite a lot codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit cc e c d adfdbfbf ab srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &srcpr&tokenmx slder &width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update cf f b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments will do thanks another strong memory consumer is the throwable stored in this same class as in most cases it seems empty yet has an array of elements prepared for filling in the stacki didnt change that as im not sure when this would be safe to do
1346,1349,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fix different mocks are used for mock and injectmock in the same test class with junit extension fix fix mockitoextension which has init mocks with two identical test instances which cause the mock to be initialized and injected two times codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f d e b dd af aa a cc srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &width &tokenmx slder &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f eebd b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments sadly this doesnt cover the case where we are using testinstance testinstancelifecycleper_class https githubcom mockito mockito issues
1348,1350,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,support local parameters in test methods with junit jupiter note that this implementation differs from the prototype implementation of the junitteam https githubcom junit team junit samples blob bf d ca c ddb c a junit mockito extension src main java com example mockito mockitoextensionjaval l instead it will do not do any parameter resolution between test methodsfixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c ebb c aa a c f e f dd de d c e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &height &srcpr&width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ nternal configuration mockannotationprocessorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul vy tbbm vdgf aw uuhjvy vzc ylmphdme arrow_up mockito internal stubbing ongoingstubbingimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy pbmdvaw nu r ymjpbmdjbxbslmphdme ava org mockito internal stubbing stubberimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvysw wbc qyxzh ito internal stubbing invocationcontainerimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy jbnzvy f aw uq udgfpbmvysw wbc qyxzh internal junit defaultstubbinglookuplistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx u r ymjpbmdmb rdxbmaxn zw lci qyxzh rg mockito internal creation mocksettingsimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi nb nru v dgluz njbxbslmphdme o internal creation settings creationsettingsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi zzxr aw ncy dcmvhdglvblnldhrpbmdzlmphdme src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme rc main java org mockito internal mockitocorejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nraxrvq yzs qyxzh org mockito internal handler mockhandlerimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc oyw kbgvyl vy tiyw kbgvysw wbc qyxzh arrow_down and more https codecovio gh mockito mockito pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c ebb c be f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments instead it will do not do any parameter resolution between test methodsi always thought that was a _cool_ feature of the original prototype but i can understand your rationale for omitting that feature however id make sure its very well documented in the user guide etc for mockitootherwise users will likely get confused quite quickly in contrast to field names which are always user defined i would also make a special note in the documentation that the default name for a mock created for a parameter will be something very ugly like arg instead of the user defined name unless the code has been compiled on java with the parameters flag regarding that latter in the prototype we added explicit support for determining the mock name here https githubcom junit team junit samples blob bf d ca c ddb c a junit mockito extension src main java com example mockito mockitoextensionjaval _and_ we did not create the mock with a custom name if the user did not provide a custom nameso id suggest mockito do something similar id make sure its very well documented in the user guide etc for mockitoi think the javadoc of mockitoextension is quite explicit about this do you have any suggestions to extend it i would also make a special note in the documentation that the default namegood call will do we did not create the mock with a custom name if the user did not provide a custom namewe can use the type name indeed i think the javadoc of mockitoextension is quite explicit about this do you have any suggestions to extend itwell as the code is currently implemented supportsparameter will return true for any parameter annotated with mock whether such a parameter is in a _constructor_ beforeall afterall beforeeach aftereach test method etcand it _sounds_ like you wish to restrict usage to test testfactory parameterizedtest and repeatedtest methodsor maybe you dont want to restrict itbut its unclear what is supported and what isnti think your goal is to restrict sharing of parameter injected mock instances between setup and test methods so you might want to restrict mock injection for lifecycle callback methodson the other hand it would be a perfectly valid use case to have a mock injected into a constructor and then store it in a private final field ie immutability in summary youll need to think through the possible use cases and document which ones you actually support and the implementation should only return true from supportsparameter if mockito actually supports the use case oh i was not aware of all these cases i thought it was only for test methods have to think about what we do want to support maybe it all magically works already with this implementation sure id recommend you _play around_ with it a bit to get a feel for whats possiblethen youll be better equipped to make an informed decision 😉 for sharing i think beforeeach void f mock x test void f mock x could be the same object timvdlippe as i read youre clearing the session after each test so sharing between methods would affect a single test method execution twisterrob please see https githubcom mockito mockito issues issuecomment for the full explanation timvdlippe maybe it all magically works already with this implementationyes that should be the casebut i still think the mockito team should provide guidance for end users demonstrating best practices when using the mockitoextension for junit jupiterfor example if it were my project id make sure that there are tests in place and documented examples demonstrating parameter injection for constructors lifecycle methods testable methods eg test testfactory etc _and_ id cover the use of testinstance per_class semantics as wellim sure that either i or someone else from the junit team would be happy to review your work before you publish it 😉 for reference https githubcom junit team junit issues is the issue that is blocking this pr for now but the upstream issue is actively being worked on atm thank you guys for working on this the junit issue has been resolved on their master https githubcom junit team junit issues issuecomment so we have to wait for a new release and then i can continue working on this pr timvdlippe i wouldt hold off on working on this pr just to wait on junit jupiter to be releasedthat will literally take months plus it would prevent mockito users from using the feature with junit jupiter x unless we backport the convenience methods to x for example in spring framework likely being released today i already added custom support https githubcom spring projects spring framework commit ba aba b c e for the jdk bug so that spring users arent affected by the issue even on junit jupiter x unless we backport the convenience methods to xas a user i would strongly appreciate a backport have to think whether we would like to maintain this code ourselves like spring does or whether we simply note the limitation that this will be addressed in the next release of junit sure maintaining the workaround is a personal decision you have to makeas for appreciating a backport feel free to voice your opinion on the related junit jupiter issue which i reopened for that purpose 😉 per https githubcom junit team junit issues issuecomment this will be backported to junit we just have to wait till that release is out and then i can finish up this pr tada timvdlippe looks like released couple of hours back https searchmavenorg artifactdetails corgjunitjupiter cjunit jupiter engine c cjar awesome constructor parameter resolution has been fixed mockito core ptal 👍 will this be getting released soon thank you this is still awaiting review of mockito core i finished reviewing and im happy to merge theres some issue with our travis build at the moment but we should merge soon i rebased and will wait for travis feedback before merging
1367,1368,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,resolve the correct protection domain for the codegen package when using reflection fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit fc c fcc cf b c f f dd b srcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &srcpr&tokenmx slder &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ al creation bytebuddy subclassinjectionloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc njbmply rpb mb fkzxiuamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update feb https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments probably by creating two mocks with different protection domains bur for that we would need to different signed jars not trivial to test
1364,1369,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,performance improvements use less expensive method graph compiler for inline mock maker update byte buddy for general performance improvements and bug fixes fixes also fixes javadoc warning codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ef d dbb ff ca c be d esrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &srcpr&height &width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ef df d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1240,1378,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,avoid circularity avoid endless loop during mock creation if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop described in comment fixes it is a bit difficult to reproduce this issue in our tests it mainly happens with classes generated by kotlin or scala and requires the inline mock maker and a jdk or older if we want to add such a test we can copy the test from https githubcom guenhter mockito final class kotlin problem if we want to add such a test we can copy the test from https githubcom guenhter mockito final class kotlin problemyou should be able to add this to the mockito kotlin subproject i suppose does it use the inline mock maker true of course added a test does that test really reproduce the issue that seems awfully simple yet we did not encounter it thus far 😮 codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit cb f d e b c d f bbcdfa b f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgtokenmx slder &height &srcpr&width https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update cb f d d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments it is really dependent on what classes are referenced by the generated byte code and if we are using this in the code that determines if an instance is a mock or not only if those classes are not yet loaded and if we are using some code transitively ourselves this issue reproduces so it is not so surprising that this only surfaces in an isolated unit test as this is partly global vm state dependant
1386,1387,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes adding atmostonce rename threadverifiescontinuoslyinteractingmocktest and one todo hii would like to make a quick contribution on this projecti add atmostonce it seems not to be a big feature i just want to highlight the fact you have the function atleastonce but nothing for the atmostonce casei rename the testclass threadverifiescontinuoslyinteractingmocktest on threadverifiescontinuouslyinteractingmocktest and the todo on tostring from hamcrestargumentmatcher codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f c df d af e c e f dasrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ito internal hamcrest hamcrestargumentmatcherjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc oyw jcmvzdc iyw jcmvzdefyz vtzw twf y hlci qyxzh arrow_down ito internal verification verificationwrapperjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw uv jhchblci qyxzh src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_up internal verification verificationmodefactoryjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw utw kzuzhy rvcnkuamf yq arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f c e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1390,1391,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,make mockitoextension constructor public it is possible to register an extension for automatic use using javas serviceloader mechanismhttps junitorg junit docs current user guide extensions registration automaticsome projects may want to provide their own meta inf file to avoid tediously adding mockitoextension to tests since it is very common however serviceloader requires the class to have a no args public constructor so the current extension cannot be used with the serviceloader mechanismfixes check list x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ would be great if you could add a test for this not sure if that is possible it is not a blocking issue for me though codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ca fba b eaf faed d f dsrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ca e fd https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments added a test a bit heavyweight since it needs to be a separate project to avoid influencing others
1401,1402,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes correctly handle varargsmatcher check for hamcrestmatchers codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ab cd bde aac caa dce f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &srcpr&width &tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_up ito internal hamcrest hamcrestargumentmatcherjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc oyw jcmvzdc iyw jcmvzdefyz vtzw twf y hlci qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ab cdfcd https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments hi timvdlippe this change is meant to handle the situation in which we use a custom hamcrest vararg matcher as https githubcom mockito mockito blob release x src main java org mockito hamcrest mockitohamcrestjaval wraps the actual matcher it is not possible to check if it implements varargmatcher interfaceplease see https githubcom mockito mockito issues for an example
1419,1426,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,mockito on java ea fixes requires dnetbytebuddyexperimentaltrue system property to be set to let bytebuddy use asm api version asm _expermiental and use the same one in inlinebytecodegenerator codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f c c a a d fc e e b cdsrcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &srcpr&tokenmx slder &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f fa https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments raphw can you comment if this change looks safe to you eg no foreseen use impact upgrade bytebuddy upgrade asm orgow asm asm orgow asm asm snazy thank you ill wait for a word from raphw and merge it yes looks good would have pushed it myself but currently on vacation sorry for the delay thank you for confirming ill merge it mockito core jar byte buddy jarwith orgmockitopluginsmockmaker mock maker inline the fix is not working with java _ and java ea without mock maker inline it worksorgmockitoexceptionsbasemockitoexception mockito cannot mock this class interface deespiritorschemaentitytypeif youre not sure why youre getting this error please report to the mailing listjava jvm vendor name oracle corporationjvm vendor version b jvm name java hotspot tm bit server vmjvm version _ b jvm info mixed modeos name mac os xos version you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item of the mockito class javadocunderlying exception orgmockitoexceptionsbasemockitoexception could not modify all classes interface deespiritorschemaentitytype interface javaioserializable at deespiritfirstspiritaccesseditortestentityassociatebeforeeach testentityassociatejava at sunreflectnativemethodaccessorimplinvoke native method at sunreflectnativemethodaccessorimplinvoke nativemethodaccessorimpljava at sunreflectdelegatingmethodaccessorimplinvoke delegatingmethodaccessorimpljava at javalangreflectmethodinvoke methodjava at orgjunitrunnersmodelframeworkmethod$ runreflectivecall frameworkmethodjava at orgjunitinternalrunnersmodelreflectivecallablerun reflectivecallablejava at orgjunitrunnersmodelframeworkmethodinvokeexplosively frameworkmethodjava at orgjunitinternalrunnersstatementsrunbeforesevaluate runbeforesjava at orgjunitrunnersparentrunnerrunleaf parentrunnerjava at orgjunitrunnersblockjunit classrunnerrunchild blockjunit classrunnerjava at orgjunitrunnersblockjunit classrunnerrunchild blockjunit classrunnerjava at orgjunitrunnersparentrunner$ run parentrunnerjava at orgjunitrunnersparentrunner$ schedule parentrunnerjava at orgjunitrunnersparentrunnerrunchildren parentrunnerjava at orgjunitrunnersparentrunneraccess$ parentrunnerjava at orgjunitrunnersparentrunner$ evaluate parentrunnerjava at orgjunitrunnersparentrunnerrun parentrunnerjava at orgjunitrunnerjunitcorerun junitcorejava at comintellijjunit junit ideatestrunnerstartrunnerwithargs junit ideatestrunnerjava at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs ideatestrunnerjava at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart junitstarterjava at comintellijrtexecutionjunitjunitstartermain junitstarterjava caused by orgmockitoexceptionsbasemockitoexception could not modify all classes interface deespiritorschemaentitytype interface javaioserializable at netbytebuddytypecachefindorinsert typecachejava at netbytebuddytypecache$withinlineexpunctionfindorinsert typecachejava at netbytebuddytypecachefindorinsert typecachejava at netbytebuddytypecache$withinlineexpunctionfindorinsert typecachejava morecaused by javalangillegalstateexception byte buddy could not instrument all classes within the mocks type hierarchythis problem should never occur for javac compiled classes this problem has been observed for classes that are compiled by older versions of scalac classes that are part of the android distribution at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation inlinebytecodegeneratorjava at orgmockitointernalcreationbytebuddyinlinebytecodegeneratormockclass inlinebytecodegeneratorjava at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$ call typecachingbytecodegeneratorjava at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$ call typecachingbytecodegeneratorjava at netbytebuddytypecachefindorinsert typecachejava at netbytebuddytypecache$withinlineexpunctionfindorinsert typecachejava at netbytebuddytypecachefindorinsert typecachejava at netbytebuddytypecache$withinlineexpunctionfindorinsert typecachejava at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass typecachingbytecodegeneratorjava at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemocktype inlinebytebuddymockmakerjava at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemock inlinebytebuddymockmakerjava at orgmockitointernalutilmockutilcreatemock mockutiljava at orgmockitointernalmockitocoremock mockitocorejava at orgmockitomockitomock mockitojava at orgmockitomockitomock mockitojava morecaused by javalangnosuchfielderror asm_api at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapper$parameteraddingclassvisitor inlinebytecodegeneratorjava at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapper$parameteraddingclassvisitor inlinebytecodegeneratorjava at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapperwrap inlinebytecodegeneratorjava at netbytebuddyasmasmvisitorwrapper$compoundwrap asmvisitorwrapperjava at netbytebuddydynamicscaffoldtypewriter$default$forinlining$redefinitionclassvisitorvisit typewriterjava at netbytebuddyjarasmclassreaderaccept classreaderjava at netbytebuddyjarasmclassreaderaccept classreaderjava at netbytebuddydynamicscaffoldtypewriter$default$forinliningcreate typewriterjava at netbytebuddydynamicscaffoldtypewriter$defaultmake typewriterjava at netbytebuddydynamicscaffoldinlineredefinitiondynamictypebuildermake redefinitiondynamictypebuilderjava at netbytebuddydynamicscaffoldinlineabstractinliningdynamictypebuildermake abstractinliningdynamictypebuilderjava at netbytebuddydynamicdynamictype$builder$abstractbasemake dynamictypejava at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortransform inlinebytecodegeneratorjava at suninstrumenttransformermanagertransform transformermanagerjava at suninstrumentinstrumentationimpltransform instrumentationimpljava at suninstrumentinstrumentationimplretransformclasses native method at suninstrumentinstrumentationimplretransformclasses instrumentationimpljava at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation inlinebytecodegeneratorjava more
1438,1439,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,javadoc update ignorestubs to include strictness it updates ignorestubs docs to include strictness information codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e ba c dab d e e d ec dad fsrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgsrcpr&tokenmx slder &width &height https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e bf c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments this is ready to merge ill wait until current build is complete and merge it thank you
793,1458,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,add stubbinglookupevent and notifier a part of this pr adds stubbinglookupevent and stubbinglookupnotifier as a part of the issue codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b b e a d f ce df srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgheight &width &tokenmx slder &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down internal junit defaultstubbinglookuplistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx u r ymjpbmdmb rdxbmaxn zw lci qyxzh arrow_down ito internal listeners stubbinglookupnotifierjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc saxn zw lcnmvu r ymjpbmdmb rdxbob rpzmllci qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b e f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1460,1463,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,prevent stubonly from being verified this pr adds assertion to verification methods to prevent stub only mock from being verified verify verifynomoreinteractions inorder codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ceb d c abf c bb aa bc cf srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_up java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ceb d f b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments this was a really nice pr thank you marchpig i made a couple of tweaks can you take review rebase happy to merge when youre ok with them mockitoguy thank you for review your commits made it better thumbsup thank you for review
1466,1543,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,exposed new api stubbinglookuplistener exposed new public api based on an internal api stubbinglookuplistener as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of onion skin apithis pr replaces very nice pr from marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr marchpig thank you for understanding codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c f cf d a fbb b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal junit defaultstubbinglookuplistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx u r ymjpbmdmb rdxbmaxn zw lci qyxzh ito internal listeners stubbinglookupnotifierjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc saxn zw lcnmvu r ymjpbmdmb rdxbob rpzmllci qyxzh arrow_down internal junit strictstubsrunnertestlistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc tdhjpy rtdhvic j bm lclrlc rmaxn zw lci qyxzh arrow_down o internal creation settings creationsettingsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi zzxr aw ncy dcmvhdglvblnldhrpbmdzlmphdme arrow_down java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_up rg mockito internal creation mocksettingsimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi nb nru v dgluz njbxbslmphdme arrow_down mockito internal stubbing consecutivestubbingjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy db zzwn dgl zvn dwjiaw nlmphdme mockito internal stubbing ongoingstubbingimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy pbmdvaw nu r ymjpbmdjbxbslmphdme nal stubbing defaultanswers returnssmartnullsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zu hcnrodwxscy qyxzh ava org mockito internal stubbing stubberimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvysw wbc qyxzh and more https codecovio gh mockito mockito pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c a d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments it looks good to me ill update the version since tags and will merge shortly most likely tomorrow
793,1543,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,exposed new api stubbinglookuplistener exposed new public api based on an internal api stubbinglookuplistener as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of onion skin apithis pr replaces very nice pr from marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr marchpig thank you for understanding codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c f cf d a fbb b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal junit defaultstubbinglookuplistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx u r ymjpbmdmb rdxbmaxn zw lci qyxzh ito internal listeners stubbinglookupnotifierjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc saxn zw lcnmvu r ymjpbmdmb rdxbob rpzmllci qyxzh arrow_down internal junit strictstubsrunnertestlistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc tdhjpy rtdhvic j bm lclrlc rmaxn zw lci qyxzh arrow_down o internal creation settings creationsettingsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi zzxr aw ncy dcmvhdglvblnldhrpbmdzlmphdme arrow_down java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_up rg mockito internal creation mocksettingsimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi nb nru v dgluz njbxbslmphdme arrow_down mockito internal stubbing consecutivestubbingjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy db zzwn dgl zvn dwjiaw nlmphdme mockito internal stubbing ongoingstubbingimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy pbmdvaw nu r ymjpbmdjbxbslmphdme nal stubbing defaultanswers returnssmartnullsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zu hcnrodwxscy qyxzh ava org mockito internal stubbing stubberimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvysw wbc qyxzh and more https codecovio gh mockito mockito pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c a d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments it looks good to me ill update the version since tags and will merge shortly most likely tomorrow
1541,1544,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes prevent premature garbage collection of mock objects fixes if using one liner stubs https staticjavadocio orgmockito mockito core org mockito mockitohtmlone_liner_stub the mock object may be premature cleaned up and returning the mock fails with an exception this occurs because there is no strong reference to the mock itselftherefore we need to maintain a strong reference to the mock until weve returned it while making sure that the gc can still cleanup the mock correctly when neededcause implementations of basestubbing are intended to be cleaned up after usage we can store a strong ref to the mock there getmock then uses the strong ref instead of the weak ref provided by the invocation after cleaning up the implementations of basestubbing there is no strong ref to the mock itself anymore except the one in the test class i tried some alternative solutions but i believe this is the only way it works bind last mock creation to mockingprogress does not work because of this when mock testclass class gettestclass thenreturn mock testclassclass getmock bind mock of last invocation for stubbing to mockingprogress does not work because of this when mock testclassclass getstuff thenreturn x thenreturn when mock testclassclass getstuff thenreturn xxx getmock getstuff getmock codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d ee c e a a b a ba b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down mockito internal stubbing ongoingstubbingimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy pbmdvaw nu r ymjpbmdjbxbslmphdme arrow_down va org mockito internal stubbing basestubbingjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy cyxnlu r ymjpbmcuamf yq arrow_up ternal exceptions stacktrace stacktracefilterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl n ywnrdhjhy uvu rhy tucmfjzuzpbhrlci qyxzh a org mockito internal debugging locationimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc kzwj z dpbmcvtg jyxrpb jbxbslmphdme internal junit defaultstubbinglookuplistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx u r ymjpbmdmb rdxbmaxn zw lci qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d dc d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments this is great i pushed a couple of commits on top of this pr can you take a look if youre ok with those changes im merging lgtm thanks for your improvementsonly passing the mock was my first take but i thought passing the invocationcontainerimpl is more type safe than just having object as parameter also the mock retrieval logic would be located in one central place but im very fine with the refactoring thank you
151,1549,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixed issue with leftover state when stubbing with bad throwables fixed issue with leftover state when stubbing with bad throwables fixes good catch codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ee e dc a e edcb a a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ava org mockito internal stubbing stubberimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvysw wbc qyxzh arrow_up mockito internal stubbing consecutivestubbingjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy db zzwn dgl zvn dwjiaw nlmphdme mockito internal stubbing ongoingstubbingimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy pbmdvaw nu r ymjpbmdjbxbslmphdme va org mockito internal stubbing basestubbingjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy cyxnlu r ymjpbmcuamf yq java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme internal junit defaultstubbinglookuplistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx u r ymjpbmdmb rdxbmaxn zw lci qyxzh arrow_up rc main java org mockito internal mockitocorejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nraxrvq yzs qyxzh arrow_up a org mockito internal debugging locationimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc kzwj z dpbmcvtg jyxrpb jbxbslmphdme arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ee e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
155,1552,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,minimal test to repro generic issue with smart nulls created a minimal test that reproduces bug with smart nulls and generics see issue codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c a ed e d c efsrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c a f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments since this is a new test ill just merge it without review happy to fix change things later if someone reviews it
155,1554,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,fixed verifyerror when junit is in the classpath mockito will throw verifyerror during its junit detection when junit is in the classpath because the code only supports junit and laterthis change will catch this error and pretend that junit is not thereissue i would like some opinions on testing because i was not able to figure out a good way to test this i tried changing the class hierarchy of comparisonfailure using byte buddy and a custom classloader but was not able to get that to work i also thought it would be possible though heavy to use a gradle property to change the version of the junit dependency to run a test and add that to the test matrix but i dont expect that to work without other changes because mockito itself uses junit to compile and run its own tests codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c a ed e d c efsrcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ a org mockito internal junit exceptionfactoryjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc fegnlchrpb gywn b j lmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c af fbb https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments im making a couple of tweaks and ill merge itdont worry about tests i dont want to keep tests that use junit because that version is too old maintaining it is more cost than value can you verify that this fix resolved the problem you were seeingthank you for the contribution please confirm that the fix works for you and ill merge it thank you again verified i tested this in a small project and in the larger work project i encountered this in as well thanks again
1551,1576,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fix bug cce on smart not null answers this pr intends to fix for fix it the returnssmartnulls answer use now some reflection to find the correct return type instead of the javautilobject when the return type can be found it will start to retrieve empty values using the answer returnsmoreemptyvalues & returnsemptyvalues before creating a new mock instanceas you may notice in tests there is still one case where the return type cannot be found in this case the answer will return a null instead of object mocki think it may be possible to improve this code any suggestion will be welcome codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c e a a f a a f bsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ nal stubbing defaultanswers returnssmartnullsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zu hcnrodwxscy qyxzh arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c e a bf https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1577,1582,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fix refactoring naming rule for sealed packages to better work with the java module system the java module system consideres packages of all named modules to be sealed this results in the naming strategy to rename classes such that they cannot subclass package private types codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c e a a f a a f bsrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal junit defaultstubbinglookuplistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx u r ymjpbmdmb rdxbmaxn zw lci qyxzh arrow_down ito internal creation bytebuddy modulehandlerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw kdwxlsgfuzgxlci qyxzh al creation bytebuddy subclassinjectionloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc njbmply rpb mb fkzxiuamf yq al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq creation bytebuddy subclassbytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrly kzudlbmvyyxrvci qyxzh src main java org mockito argumentmatchersjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by bcmd bwvude hdgnozxjzlmphdme arrow_down ernal configuration injectingannotationenginejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul luamvjdgluz fubm yxrpb fbmdpbmuuamf yq arrow_down and more https codecovio gh mockito mockito pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c e dd https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i set myself a goal for that there is a dy ic layer api but i never really used it i need to look into the api and generate code in modules dynamically some time maybe that allows for adding proper tests here is a scetch for some testing of mocking modularized types javaimport static netbytebuddymatcherelementmatchersnamedimport javaioioexceptionimport javalangmoduleconfigurationimport javalangmodulemodulefinderimport javaniofilefilesimport javaniofilepathimport javautilcollectionsimport javautilconcurrentcallableimport javautiljarjarentryimport javautiljarjaroutputstreamimport orgmockitomockitoimport netbytebuddybytebuddyimport netbytebuddydescriptionmodifiervisibilityimport netbytebuddyimplementationfixedvalueimport netbytebuddyjarasmclasswriterimport netbytebuddyjarasmmodulevisitorimport netbytebuddyjarasmopcodesimport netbytebuddyutilityopenedclassreaderpublic class mytest { public static void main string args throws exception { path jar modularjar true true true modulelayer layer layer jar class type layerfindloader mockitotest loadclass samplemycallable suppresswarnings unchecked callable mock callable mockitomock type mockitowhen mockcall thencallrealmethod object result mockcall we should have a check that fails mock creation of mock cannot be loaded in target class loader systemoutprintln mockgetclass getname orgmockitocodegen only if opened false systemoutprintln result should be foo } private static path modularjar boolean publik boolean exported boolean opened throws ioexception { path jar filescreatetempfile sample module jar try jaroutputstream out new jaroutputstream filesnewoutputstream jar { outputnextentry new jarentry module infoclass outwrite moduleinfo exported opened outcloseentry outputnextentry new jarentry sample mycallableclass outwrite type publik outcloseentry } return jar } private static byte type boolean publik { return new bytebuddy subclass callableclass name samplemycallable merge publik visibilitypublic visibilitypackage_private method named call intercept fixedvaluevalue foo make getbytes } private static byte moduleinfo boolean exported boolean opened { classwriter classwriter new classwriter openedclassreaderasm_api classwritervisit opcodesv opcodesacc_module module info null null null modulevisitor mv classwritervisitmodule mockitotest null mvvisitrequire javabase opcodesacc_mandated null mvvisitpackage sample if exported { mvvisitexport sample } if opened { mvvisitopen sample } mvvisitend classwritervisitend return classwritertobytearray } private static modulelayer layer path jar { configuration configuration configurationresolve modulefinderof jar collectionssingletonlist modulelayerboot configuration modulefinderof collectionssingleton mockitotest return modulelayerdefinemoduleswithoneloader configuration collectionssingletonlist modulelayerboot null layer }} timvdlippe could you integrate a test using java into the build somehow if you achieve that i would add some more logic that i think we should integrate for better error messages raphw i have added a subproject that can run on java and tests the modules however the test you provided also passes on release x so you might have to update the test or its assertions to make sure we catch this regressionalso have to see how we can fix travis on java with this module
1584,1585,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fix where multipleparentclassloader lacks of classloaders of superclasses the multipleparentclassloader is now composed also with classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy the problem of test case is that is not possible reflect a real osgi environment without use some test framework like pax exam the most complicate thing is do not pollute test dependency with and more dependencies if is not a problem i can try to create test case that verify if the multiparentclassloader contains more classloaders a job fails to install jdk other jobs are ok i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top most type this would effectively prevent mocking package private classes and methods for such types which worked until nowi just extended the multiple parent class loader in byte buddy to allow for collecting the most specific class loaders only after this i think we can add this change probably we would also need to include all class loaders of interface types for this to work universallyi am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type tree i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top most typei had a look to the implementation of multipleparentclassloader and it delegate to parents in the exact order they was added this means that if the classloader of the actual type the first added is able to load all classes other classloaders are not visited probably we would also need to include all class loaders of interface types for this to work universallyits already like that the actual classloader is built with a composition of classloader of actual type and the classloader of all interfaces the class implements my pr simply add classloaders from superclasses i am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type treei do not expect a hierarchy bigger than classloader are filtered at most we should ensure there are no duplicated in the list if not already this needs a rebase now codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a bfb b a ec b cd a e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ creation bytebuddy subclassbytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrly kzudlbmvyyxrvci qyxzh arrow_up main java org mockito internal util platformjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl bsyxrmb jtlmphdme creation bytebuddy subclassbytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrlqnvkzhlnb nrtwfrzxiuamf yq l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme al creation bytebuddy subclassinjectionloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc njbmply rpb mb fkzxiuamf yq src main java org mockito argumentmatchersjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by bcmd bwvude hdgnozxjzlmphdme arrow_down ernal configuration injectingannotationenginejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul luamvjdgluz fubm yxrpb fbmdpbmuuamf yq arrow_up ito internal creation bytebuddy modulehandlerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw kdwxlsgfuzgxlci qyxzh al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a bf da e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments rebase done we encountered an issue with java which should now be fixed could you rebase again sorry for the troublesawaiting raphw review and then we can merge this works for me as we now apply a filter to only add the most specific class loader in a hirarchy before we would have added several class loaders in a hierarchy what would had ruined injection and therewith mocking of package private typeslooks good for me but i am a bit excited to see if this breaks things in a way we do not anticipate however i do not see an obvious problem which is why i suggest to merge please also consider a release on maven central i had attached an osgi test case but i have no idea how to integrate in the actual build system i inexpert with gradle it is a simple maven project that run a test case using pax exam that cover the scenario described in the issue if in the pomxml you change the version of mockito worksi hope this will help to avoid regression osgi testzip https githubcom mockito mockito files osgi testzip
1587,1588,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,fixes remove unnecessary loop from injectingannotationengine removes injectingannotationengine processinjectmocks method that does an unnecessary loopfixes https githubcom mockito mockito issues codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit be faef d cbc c eebd fc srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ernal configuration injectingannotationenginejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul luamvjdgluz fubm yxrpb fbmdpbmuuamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update be faef aba f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments travis seems happy thanks again
1578,1596,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes outer class mocks unavailable from inner class i opened issue a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression reported to be working in the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_ problem junitrule detects an unfinished mocking session when an inner class is detected fix if a mockitosession has been established for junitrule then use that and init mocks of the inner class tests within an inner class ensure mocks are accessible override outer class values when desired retain original values if not overwritten demonstrated with debechtejunit junit hierarchicalcontextrunner snapshot codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a c b d b f ac fa a ffsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a d bdfe https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
353,1596,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes outer class mocks unavailable from inner class i opened issue a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression reported to be working in the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_ problem junitrule detects an unfinished mocking session when an inner class is detected fix if a mockitosession has been established for junitrule then use that and init mocks of the inner class tests within an inner class ensure mocks are accessible override outer class values when desired retain original values if not overwritten demonstrated with debechtejunit junit hierarchicalcontextrunner snapshot codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a c b d b f ac fa a ffsrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a d bdfe https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
357,1612,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,return null instead of causing a cce this solves a large number of edge cases where null will actuallyremove the runtime classcastexception this essentially negates thewhole mockitocast errorprone check we can still not support every usecase but causing a npe instead of a cce does not seem to make thisworsei am still running internal tests within google to see if there are anyregressions but i already saw that some of the test failures we hadwith bytebuddy were resolved with this particular patchnote that this now fully closes a previous pr resolved the sameissue with returnssmartnulls fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f be ee bc b f fc srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f b addc https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1615,1617,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,fix issue with mocking of javautil classes fixes i hope the test is correct at least it failed before and succeeds now codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f be ee bc b f fc srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ creation bytebuddy subclassbytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrly kzudlbmvyyxrvci qyxzh arrow_down main java org mockito internal util platformjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl bsyxrmb jtlmphdme creation bytebuddy subclassbytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrlqnvkzhlnb nrtwfrzxiuamf yq l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f b a f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments lets also publish this one to central i would like to batch up the prs and issues that we have discovered so far and then publish that to maven central
1532,1619,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with themfixes and i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces a new method on mockmaker is a breaking change will give you a detailed review tomorrow that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito ie dont know what can be done and what cant its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit af d be fbfecad cef da b d a fbe srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme arrow_up to internal framework defaultmockitoframeworkjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc mcmftzxdvcmsvrgvmyxvsde vy tpdg gcmftzxdvcmsuamf yq ternal util reflection genericmetadatasupportjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl jlzmxly rpb vr vuzxjpy ldgfkyxrhu vwcg ydc qyxzh aultanswers retrievegenericsfordefaultanswersjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxryawv zudlbmvyawnzrm yrgvmyxvsdefuc dlcnmuamf yq src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down rnal creation bytebuddy mockmethodinterceptorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzeludgvyy vwdg ylmphdme arrow_down rnal stubbing defaultanswers returnsdeepstubsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zrgvlcfn dwjzlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update af d b cba https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thank you for the pr since this is changing adding new public api i will review it too many thanks to timvdlippe for offering to review this ill commit to provide review by the end of this week thanks to mockitoguy just some context here i tried to avoid new api at first but defaultmockitosession seems at least from tests to be used within a thread and changing its default behavior to listen on events from all threads will break tests for multi threading therefore i came up with the new api solutioni didnt know how much impact there would be to add a new method in mockmaker interface that requires everyone providing an implementation when they uprev their mockito to a version that has the new method but i have no clue how much work it could be if its too noisy maybe we can have a default impl if only java is supported or a brand new interface called inlinemockmaker to add that method i personally want to expose a chance to mock makers to clean up as we dont know how they handle the mapping from mock to its handler which may have other places that could cause memory leaks other than those places we found we need better documentation on that but i have to admit im not good at writing api docs so ill defer to any of your suggestions in terms of documentationi hope the review wont later become a whole refactor of current implementation i reviewed the implementation and most of it is really good it is also a very high quality pr thank you curious are you facing this problem at gi have a couple of concerns design choices to discuss a can we make the fix more seamless im not sure if this is possible but lets discuss goals users dont have to remember to use trackandcleanupmocks _when_ inline mocker is in use for example brainstorming we introduce a new interface that inlinebytebuddymockmaker implements say requirescleaningmocks we expose a new method like frameworkgetplugins getplugin mockmackerclass this way we can find out in runtime what mockmaker is in use in mockito session we check if the mock maker is requirescleaningmocks in session we call requirescleaningmockscleanupmock b mockmakercleanupmock is an incompatible change so we cannot ship this pr in its current form mockmaker is typically provided at runtime from a different jar example dexmaker powermockito i have a couple ideas but first lets explore a great tests deep change in the internals of mockito thank you very much for the contribution thanks for your review mockitoguy dexmaker is incubating a feature in inline dexmaker to create spies without creating new instances so that we can stub final members and we android framework found these mem leaks when using that i then found and reproduced that i confirmed it also happens with bytebuddy mock makers so i started the fix with help from timvdlippe first of all i really didnt see a solution w o tying mock lives with something and i think mockitosession is the most natural choice for the something so technically its already not transparent to properly use inline mock makers because sessions are necessary to make it work while its optional to use subclass mock makersi also first tried to avoid trackandcleanupmocks the difficulty actually comes from the fact mockitolisteners are threadlocal before this change and its a requirement to track mocks generated from other threads because failontimeout failontimeout basically runs tests in different threads than the thread used to run before and after before this change user can have multiple defaultmockitosession as long as they are in different threads threadsrunalltestshalfmanualtest also verifies that behavior and not interfering with each other however if we convert defaultmockitosession to have thread global influence threadrunalltestshalfmanualtest will fail because cross threads mock cleanup will invalidate mocks created in tests running in a different threadi think i have a way a bit hacky though to make it work but i dont think its complication outweighs the new api given that its already not transparent to users it doesnt encourage clean tests in multi threading scenario either imho however i can still put my thought here and let you decide if we should take it dont reject registration of global listeners if its from a different thread for the same type only clean up mocks when the last mocktracker is unregisteredthen it basically treats the life of any defaultmockitosession as mock lives it doesnt allow user to precisely control mock lives but with some care users should still be able to avoid oom failontimeout https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval oh i already added inlinemockmaker interface so not all mock makers need to implement cleanupmock im not sure if the plugin way is still preferred over current change because for most dexmakers theyre still just implementing the basic mockmaker interface and nothing should break while they can choose to implement inlinemockmaker if clean up is necessary just to be clear that im waiting for mockitoguy s response on if we would like to go for that approach in exchange of removing trackandcleanupmocks api just in case were waiting for each other and its going nowhere as a sidenote the refactoring with the new inlinemockmaker interface is for me smile hey ttanxu so you youre saying that the approach i suggested in a wouldnt work oh i already added inlinemockmaker interface so not all mock makers need to implement cleanupmock great ill review again this weekend as a sidenote the refactoring with the new inlinemockmaker interface is 👍 for me 😄 timvdlippe im with you its a good idea to have a separate interface and stay compatible hey mockitoguy what you suggested could solve the same issue that is solved by inlinemockmaker in current pr the mockmaker contract breakage trackandcleanupmocks was introduced for other reason but could use different tech to remove its necessity i explained the detail in previous comments mostly because of the multi thread implementation of failontimeout in junit https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval ttanxu thank you for explanation im looking into it my comment is short but i put a lot of consideration into this given all arguments i agree that a new api is the best way before we ship it i want to bounce one more idea what if we tie mockmaker with mockitosession when the session completes it tears down its mockmaker cleans up all mocks we could use threadlocal thoughts correct me if im wrongit seems youre suggesting one mockmaker per thread the critical part of this approach is the mock map in the inline mock maker needs to be a threadlocal which means mocks wont look have handlers tied to them in threads other than the thread where they were created and thus wont appear to be a mock and method invocations on it might trigger exceptions thats not likely a compatible change to existing use cases because if failontimeout is used befores and afters are executed in a different thread than the test methodif we still only have one mockmaker across all threads then the structure is pretty much the same as current change except that instead of calling inlinemockmakerclearup we just tear down the entire mockmaker im not sure if this is better than calling clearup it does sound like a viable solution w o introduction to inlinemockmaker as we can just swap the instance of mockmaker in pluginregistry the con is thats more of a systematic refactor than inlinemockmakerclearup approach and it reduces the cleanness of current code we cant use final for mockmaker in pluginregistry anymore btw this doesnt help avoid a new api trackandclearupmocks in mockitosession ill leave this decision to you https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval great points thank you for taking the time to explain why do we need to keep track of specific mocks can we just clear all oh you say we dont have to save created mocks in a list in mocktracker i guess we can just clear all mocks especially considering there cant be multiple mock tracking sessions open at the same time mocks created before the session is opened may be leakedremoving mocktracker can simply this change a lot especially we dont need global listeners ill update the change actually i recall that the thought of tracking specific mocks stemmed from the thought that usually mocks have different lives eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different lives it would be nice if we can keep mocks created in beforeclass for later reusecurrent impl is half baked because there can only be one tracking session but i want to keep cleanup object signature or we can have cleanup object instead so that we can clean up everything if object array is null for inlinemockmaker just in case we want to support the case abovewith that said ill change cleanup object to cleanup object and use null array for clean up everything oh besides if we just want to clear everything it doesnt seem natural to me to add the api to mockitosession maybe we can add an api to mockito thank you for considering i want us to strive for simplicity ill think about the new api for mockito or mockitoframework if we have a static method like mockitoframework clearallmocks would it work for you eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different livesdo we know legit use cases for static mocks it seems an anti pattern finally cleaned up all remains from previous change its a lot simpler now please take a looki can think of a case for static mocks where constructing a mock may be expensive and someone wants to reuse it across tests thats not an argument why static mocks have to be used though they can definitely reconstruct those mocks reviewing we are ready thank you ttanxu and timvdlippe for patience this is the best pragmatic step to resolve the problem in the future perhaps we can avoid having the weak map of references in a first place ttanxu i made some tweaks to tests documentation ive also renamed the method to clearmocks clearinlinemocks for consistency take a look and see if youre ok with this let us know and ill merge this nice work with this change timvdlippe i did some cosmetic changes please review if you want thanks i will review this on monday in the office thanks for the polish test user can safely call clearinlinemocks and clearmock even when mock maker is not a inline mock maker ttanxu great point im making the final tweaks based on the code review and im merging this is awesome thank you guys i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉 hi just to let you know i am using the new api already with v and for me it was breaking the strict test with following exception orgmockitoexceptionsmisusingnotamockexception argument passed to mockitomockingdetails should be a mock but is an instance of class cache$mockitomock$ at orgmockitointernalrunnersdefaultinternalrunner$ $ testfinished defaultinternalrunnerjava i had to move it to afterclass to mitigate the problem s you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api
1533,1619,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with themfixes and i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces a new method on mockmaker is a breaking change will give you a detailed review tomorrow that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito ie dont know what can be done and what cant its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit af d be fbfecad cef da b d a fbe srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme arrow_up to internal framework defaultmockitoframeworkjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc mcmftzxdvcmsvrgvmyxvsde vy tpdg gcmftzxdvcmsuamf yq ternal util reflection genericmetadatasupportjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl jlzmxly rpb vr vuzxjpy ldgfkyxrhu vwcg ydc qyxzh aultanswers retrievegenericsfordefaultanswersjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxryawv zudlbmvyawnzrm yrgvmyxvsdefuc dlcnmuamf yq src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down rnal creation bytebuddy mockmethodinterceptorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzeludgvyy vwdg ylmphdme arrow_down rnal stubbing defaultanswers returnsdeepstubsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zrgvlcfn dwjzlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update af d b cba https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thank you for the pr since this is changing adding new public api i will review it too many thanks to timvdlippe for offering to review this ill commit to provide review by the end of this week thanks to mockitoguy just some context here i tried to avoid new api at first but defaultmockitosession seems at least from tests to be used within a thread and changing its default behavior to listen on events from all threads will break tests for multi threading therefore i came up with the new api solutioni didnt know how much impact there would be to add a new method in mockmaker interface that requires everyone providing an implementation when they uprev their mockito to a version that has the new method but i have no clue how much work it could be if its too noisy maybe we can have a default impl if only java is supported or a brand new interface called inlinemockmaker to add that method i personally want to expose a chance to mock makers to clean up as we dont know how they handle the mapping from mock to its handler which may have other places that could cause memory leaks other than those places we found we need better documentation on that but i have to admit im not good at writing api docs so ill defer to any of your suggestions in terms of documentationi hope the review wont later become a whole refactor of current implementation i reviewed the implementation and most of it is really good it is also a very high quality pr thank you curious are you facing this problem at gi have a couple of concerns design choices to discuss a can we make the fix more seamless im not sure if this is possible but lets discuss goals users dont have to remember to use trackandcleanupmocks _when_ inline mocker is in use for example brainstorming we introduce a new interface that inlinebytebuddymockmaker implements say requirescleaningmocks we expose a new method like frameworkgetplugins getplugin mockmackerclass this way we can find out in runtime what mockmaker is in use in mockito session we check if the mock maker is requirescleaningmocks in session we call requirescleaningmockscleanupmock b mockmakercleanupmock is an incompatible change so we cannot ship this pr in its current form mockmaker is typically provided at runtime from a different jar example dexmaker powermockito i have a couple ideas but first lets explore a great tests deep change in the internals of mockito thank you very much for the contribution thanks for your review mockitoguy dexmaker is incubating a feature in inline dexmaker to create spies without creating new instances so that we can stub final members and we android framework found these mem leaks when using that i then found and reproduced that i confirmed it also happens with bytebuddy mock makers so i started the fix with help from timvdlippe first of all i really didnt see a solution w o tying mock lives with something and i think mockitosession is the most natural choice for the something so technically its already not transparent to properly use inline mock makers because sessions are necessary to make it work while its optional to use subclass mock makersi also first tried to avoid trackandcleanupmocks the difficulty actually comes from the fact mockitolisteners are threadlocal before this change and its a requirement to track mocks generated from other threads because failontimeout failontimeout basically runs tests in different threads than the thread used to run before and after before this change user can have multiple defaultmockitosession as long as they are in different threads threadsrunalltestshalfmanualtest also verifies that behavior and not interfering with each other however if we convert defaultmockitosession to have thread global influence threadrunalltestshalfmanualtest will fail because cross threads mock cleanup will invalidate mocks created in tests running in a different threadi think i have a way a bit hacky though to make it work but i dont think its complication outweighs the new api given that its already not transparent to users it doesnt encourage clean tests in multi threading scenario either imho however i can still put my thought here and let you decide if we should take it dont reject registration of global listeners if its from a different thread for the same type only clean up mocks when the last mocktracker is unregisteredthen it basically treats the life of any defaultmockitosession as mock lives it doesnt allow user to precisely control mock lives but with some care users should still be able to avoid oom failontimeout https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval oh i already added inlinemockmaker interface so not all mock makers need to implement cleanupmock im not sure if the plugin way is still preferred over current change because for most dexmakers theyre still just implementing the basic mockmaker interface and nothing should break while they can choose to implement inlinemockmaker if clean up is necessary just to be clear that im waiting for mockitoguy s response on if we would like to go for that approach in exchange of removing trackandcleanupmocks api just in case were waiting for each other and its going nowhere as a sidenote the refactoring with the new inlinemockmaker interface is for me smile hey ttanxu so you youre saying that the approach i suggested in a wouldnt work oh i already added inlinemockmaker interface so not all mock makers need to implement cleanupmock great ill review again this weekend as a sidenote the refactoring with the new inlinemockmaker interface is 👍 for me 😄 timvdlippe im with you its a good idea to have a separate interface and stay compatible hey mockitoguy what you suggested could solve the same issue that is solved by inlinemockmaker in current pr the mockmaker contract breakage trackandcleanupmocks was introduced for other reason but could use different tech to remove its necessity i explained the detail in previous comments mostly because of the multi thread implementation of failontimeout in junit https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval ttanxu thank you for explanation im looking into it my comment is short but i put a lot of consideration into this given all arguments i agree that a new api is the best way before we ship it i want to bounce one more idea what if we tie mockmaker with mockitosession when the session completes it tears down its mockmaker cleans up all mocks we could use threadlocal thoughts correct me if im wrongit seems youre suggesting one mockmaker per thread the critical part of this approach is the mock map in the inline mock maker needs to be a threadlocal which means mocks wont look have handlers tied to them in threads other than the thread where they were created and thus wont appear to be a mock and method invocations on it might trigger exceptions thats not likely a compatible change to existing use cases because if failontimeout is used befores and afters are executed in a different thread than the test methodif we still only have one mockmaker across all threads then the structure is pretty much the same as current change except that instead of calling inlinemockmakerclearup we just tear down the entire mockmaker im not sure if this is better than calling clearup it does sound like a viable solution w o introduction to inlinemockmaker as we can just swap the instance of mockmaker in pluginregistry the con is thats more of a systematic refactor than inlinemockmakerclearup approach and it reduces the cleanness of current code we cant use final for mockmaker in pluginregistry anymore btw this doesnt help avoid a new api trackandclearupmocks in mockitosession ill leave this decision to you https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval great points thank you for taking the time to explain why do we need to keep track of specific mocks can we just clear all oh you say we dont have to save created mocks in a list in mocktracker i guess we can just clear all mocks especially considering there cant be multiple mock tracking sessions open at the same time mocks created before the session is opened may be leakedremoving mocktracker can simply this change a lot especially we dont need global listeners ill update the change actually i recall that the thought of tracking specific mocks stemmed from the thought that usually mocks have different lives eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different lives it would be nice if we can keep mocks created in beforeclass for later reusecurrent impl is half baked because there can only be one tracking session but i want to keep cleanup object signature or we can have cleanup object instead so that we can clean up everything if object array is null for inlinemockmaker just in case we want to support the case abovewith that said ill change cleanup object to cleanup object and use null array for clean up everything oh besides if we just want to clear everything it doesnt seem natural to me to add the api to mockitosession maybe we can add an api to mockito thank you for considering i want us to strive for simplicity ill think about the new api for mockito or mockitoframework if we have a static method like mockitoframework clearallmocks would it work for you eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different livesdo we know legit use cases for static mocks it seems an anti pattern finally cleaned up all remains from previous change its a lot simpler now please take a looki can think of a case for static mocks where constructing a mock may be expensive and someone wants to reuse it across tests thats not an argument why static mocks have to be used though they can definitely reconstruct those mocks reviewing we are ready thank you ttanxu and timvdlippe for patience this is the best pragmatic step to resolve the problem in the future perhaps we can avoid having the weak map of references in a first place ttanxu i made some tweaks to tests documentation ive also renamed the method to clearmocks clearinlinemocks for consistency take a look and see if youre ok with this let us know and ill merge this nice work with this change timvdlippe i did some cosmetic changes please review if you want thanks i will review this on monday in the office thanks for the polish test user can safely call clearinlinemocks and clearmock even when mock maker is not a inline mock maker ttanxu great point im making the final tweaks based on the code review and im merging this is awesome thank you guys i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉 hi just to let you know i am using the new api already with v and for me it was breaking the strict test with following exception orgmockitoexceptionsmisusingnotamockexception argument passed to mockitomockingdetails should be a mock but is an instance of class cache$mockitomock$ at orgmockitointernalrunnersdefaultinternalrunner$ $ testfinished defaultinternalrunnerjava i had to move it to afterclass to mitigate the problem s you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api
1614,1619,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with themfixes and i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces a new method on mockmaker is a breaking change will give you a detailed review tomorrow that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito ie dont know what can be done and what cant its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit af d be fbfecad cef da b d a fbe srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme arrow_up to internal framework defaultmockitoframeworkjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc mcmftzxdvcmsvrgvmyxvsde vy tpdg gcmftzxdvcmsuamf yq ternal util reflection genericmetadatasupportjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl jlzmxly rpb vr vuzxjpy ldgfkyxrhu vwcg ydc qyxzh aultanswers retrievegenericsfordefaultanswersjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxryawv zudlbmvyawnzrm yrgvmyxvsdefuc dlcnmuamf yq src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down rnal creation bytebuddy mockmethodinterceptorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzeludgvyy vwdg ylmphdme arrow_down rnal stubbing defaultanswers returnsdeepstubsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zrgvlcfn dwjzlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update af d b cba https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thank you for the pr since this is changing adding new public api i will review it too many thanks to timvdlippe for offering to review this ill commit to provide review by the end of this week thanks to mockitoguy just some context here i tried to avoid new api at first but defaultmockitosession seems at least from tests to be used within a thread and changing its default behavior to listen on events from all threads will break tests for multi threading therefore i came up with the new api solutioni didnt know how much impact there would be to add a new method in mockmaker interface that requires everyone providing an implementation when they uprev their mockito to a version that has the new method but i have no clue how much work it could be if its too noisy maybe we can have a default impl if only java is supported or a brand new interface called inlinemockmaker to add that method i personally want to expose a chance to mock makers to clean up as we dont know how they handle the mapping from mock to its handler which may have other places that could cause memory leaks other than those places we found we need better documentation on that but i have to admit im not good at writing api docs so ill defer to any of your suggestions in terms of documentationi hope the review wont later become a whole refactor of current implementation i reviewed the implementation and most of it is really good it is also a very high quality pr thank you curious are you facing this problem at gi have a couple of concerns design choices to discuss a can we make the fix more seamless im not sure if this is possible but lets discuss goals users dont have to remember to use trackandcleanupmocks _when_ inline mocker is in use for example brainstorming we introduce a new interface that inlinebytebuddymockmaker implements say requirescleaningmocks we expose a new method like frameworkgetplugins getplugin mockmackerclass this way we can find out in runtime what mockmaker is in use in mockito session we check if the mock maker is requirescleaningmocks in session we call requirescleaningmockscleanupmock b mockmakercleanupmock is an incompatible change so we cannot ship this pr in its current form mockmaker is typically provided at runtime from a different jar example dexmaker powermockito i have a couple ideas but first lets explore a great tests deep change in the internals of mockito thank you very much for the contribution thanks for your review mockitoguy dexmaker is incubating a feature in inline dexmaker to create spies without creating new instances so that we can stub final members and we android framework found these mem leaks when using that i then found and reproduced that i confirmed it also happens with bytebuddy mock makers so i started the fix with help from timvdlippe first of all i really didnt see a solution w o tying mock lives with something and i think mockitosession is the most natural choice for the something so technically its already not transparent to properly use inline mock makers because sessions are necessary to make it work while its optional to use subclass mock makersi also first tried to avoid trackandcleanupmocks the difficulty actually comes from the fact mockitolisteners are threadlocal before this change and its a requirement to track mocks generated from other threads because failontimeout failontimeout basically runs tests in different threads than the thread used to run before and after before this change user can have multiple defaultmockitosession as long as they are in different threads threadsrunalltestshalfmanualtest also verifies that behavior and not interfering with each other however if we convert defaultmockitosession to have thread global influence threadrunalltestshalfmanualtest will fail because cross threads mock cleanup will invalidate mocks created in tests running in a different threadi think i have a way a bit hacky though to make it work but i dont think its complication outweighs the new api given that its already not transparent to users it doesnt encourage clean tests in multi threading scenario either imho however i can still put my thought here and let you decide if we should take it dont reject registration of global listeners if its from a different thread for the same type only clean up mocks when the last mocktracker is unregisteredthen it basically treats the life of any defaultmockitosession as mock lives it doesnt allow user to precisely control mock lives but with some care users should still be able to avoid oom failontimeout https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval oh i already added inlinemockmaker interface so not all mock makers need to implement cleanupmock im not sure if the plugin way is still preferred over current change because for most dexmakers theyre still just implementing the basic mockmaker interface and nothing should break while they can choose to implement inlinemockmaker if clean up is necessary just to be clear that im waiting for mockitoguy s response on if we would like to go for that approach in exchange of removing trackandcleanupmocks api just in case were waiting for each other and its going nowhere as a sidenote the refactoring with the new inlinemockmaker interface is for me smile hey ttanxu so you youre saying that the approach i suggested in a wouldnt work oh i already added inlinemockmaker interface so not all mock makers need to implement cleanupmock great ill review again this weekend as a sidenote the refactoring with the new inlinemockmaker interface is 👍 for me 😄 timvdlippe im with you its a good idea to have a separate interface and stay compatible hey mockitoguy what you suggested could solve the same issue that is solved by inlinemockmaker in current pr the mockmaker contract breakage trackandcleanupmocks was introduced for other reason but could use different tech to remove its necessity i explained the detail in previous comments mostly because of the multi thread implementation of failontimeout in junit https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval ttanxu thank you for explanation im looking into it my comment is short but i put a lot of consideration into this given all arguments i agree that a new api is the best way before we ship it i want to bounce one more idea what if we tie mockmaker with mockitosession when the session completes it tears down its mockmaker cleans up all mocks we could use threadlocal thoughts correct me if im wrongit seems youre suggesting one mockmaker per thread the critical part of this approach is the mock map in the inline mock maker needs to be a threadlocal which means mocks wont look have handlers tied to them in threads other than the thread where they were created and thus wont appear to be a mock and method invocations on it might trigger exceptions thats not likely a compatible change to existing use cases because if failontimeout is used befores and afters are executed in a different thread than the test methodif we still only have one mockmaker across all threads then the structure is pretty much the same as current change except that instead of calling inlinemockmakerclearup we just tear down the entire mockmaker im not sure if this is better than calling clearup it does sound like a viable solution w o introduction to inlinemockmaker as we can just swap the instance of mockmaker in pluginregistry the con is thats more of a systematic refactor than inlinemockmakerclearup approach and it reduces the cleanness of current code we cant use final for mockmaker in pluginregistry anymore btw this doesnt help avoid a new api trackandclearupmocks in mockitosession ill leave this decision to you https githubcom junit team junit blob master src main java org junit internal runners statements failontimeoutjaval great points thank you for taking the time to explain why do we need to keep track of specific mocks can we just clear all oh you say we dont have to save created mocks in a list in mocktracker i guess we can just clear all mocks especially considering there cant be multiple mock tracking sessions open at the same time mocks created before the session is opened may be leakedremoving mocktracker can simply this change a lot especially we dont need global listeners ill update the change actually i recall that the thought of tracking specific mocks stemmed from the thought that usually mocks have different lives eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different lives it would be nice if we can keep mocks created in beforeclass for later reusecurrent impl is half baked because there can only be one tracking session but i want to keep cleanup object signature or we can have cleanup object instead so that we can clean up everything if object array is null for inlinemockmaker just in case we want to support the case abovewith that said ill change cleanup object to cleanup object and use null array for clean up everything oh besides if we just want to clear everything it doesnt seem natural to me to add the api to mockitosession maybe we can add an api to mockito thank you for considering i want us to strive for simplicity ill think about the new api for mockito or mockitoframework if we have a static method like mockitoframework clearallmocks would it work for you eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different livesdo we know legit use cases for static mocks it seems an anti pattern finally cleaned up all remains from previous change its a lot simpler now please take a looki can think of a case for static mocks where constructing a mock may be expensive and someone wants to reuse it across tests thats not an argument why static mocks have to be used though they can definitely reconstruct those mocks reviewing we are ready thank you ttanxu and timvdlippe for patience this is the best pragmatic step to resolve the problem in the future perhaps we can avoid having the weak map of references in a first place ttanxu i made some tweaks to tests documentation ive also renamed the method to clearmocks clearinlinemocks for consistency take a look and see if youre ok with this let us know and ill merge this nice work with this change timvdlippe i did some cosmetic changes please review if you want thanks i will review this on monday in the office thanks for the polish test user can safely call clearinlinemocks and clearmock even when mock maker is not a inline mock maker ttanxu great point im making the final tweaks based on the code review and im merging this is awesome thank you guys i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉 hi just to let you know i am using the new api already with v and for me it was breaking the strict test with following exception orgmockitoexceptionsmisusingnotamockexception argument passed to mockitomockingdetails should be a mock but is an instance of class cache$mockitomock$ at orgmockitointernalrunnersdefaultinternalrunner$ $ testfinished defaultinternalrunnerjava i had to move it to afterclass to mitigate the problem s you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api
1618,1620,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes fix strict stubbing profile serialization support when strict stubs profile is enabled mock serialization doesnt workthis pr fixes this problem codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ebca a cd dd e ba f a srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal junit defaultstubbinglookuplistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc ezwzhdwx u r ymjpbmdmb rdxbmaxn zw lci qyxzh arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ebca ab faae https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1621,1624,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,handle terminal type var with bounds this pr aim to fix the issue described in the issue being that terminal type variable arguments were not looked up for their boundsfixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c e a e e ab b d srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down ternal util reflection genericmetadatasupportjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl jlzmxly rpb vr vuzxjpy ldgfkyxrhu vwcg ydc qyxzh arrow_down rnal creation bytebuddy mockmethodinterceptorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzeludgvyy vwdg ylmphdme arrow_down rnal stubbing defaultanswers returnsdeepstubsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zrgvlcfn dwjzlmphdme internal junit strictstubsrunnertestlistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc tdhjpy rtdhvic j bm lclrlc rmaxn zw lci qyxzh arrow_down ito internal listeners stubbinglookupnotifierjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc saxn zw lcnmvu r ymjpbmdmb rdxbob rpzmllci qyxzh arrow_down internal stubbing defaultanswers returnsmocksjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm ztw ja muamf yq arrow_down o internal creation settings creationsettingsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi zzxr aw ncy dcmvhdglvblnldhrpbmdzlmphdme arrow_down aultanswers retrievegenericsfordefaultanswersjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxryawv zudlbmvyawnzrm yrgvmyxvsdefuc dlcnmuamf yq and more https codecovio gh mockito mockito pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c f cbf https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1642,1644,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,verificationcollector to handle non matching args and other assertions this fix for widens the catch in verificationcollectorimpl so that it will catch any assertionerror rather than just mockitoassertionerror in this way any comparison failures such as the built in argument comparison when running under junit will also be collected rather than propagating through to the test frameworkthere are also two commits which are more cosmetic improvements to verificationcollectorimpltest rename assertatleastonefailure to assertexactlyonefailure more accurate description of what it does change assertfail to assertjs assertbecauseexceptionwasnotthrown produces better diagnostics in the case of a failure codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b b d e c fa fd b ff b srcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ kito internal junit verificationcollectorimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc wzxjpzmljyxrpb db xszwn b jjbxbslmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b b dc d d e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
166,1665,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,new public api invocationgetargumentsasmatchers new public api invocationgetargumentsasmatchers useful for advanced integrations such as mockito scala some internal refactorings that provide temporary help with mockito scala integrationfixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d a bbdfbafd a a d ffbedc easrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ mockito internal invocation invocationmatcherjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul ludm jyxrpb nyxrjagvylmphdme arrow_down org mockito internal reporting printsettingsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc yzxbvcnrpbmcvuhjpbnrtzxr aw ncy qyxzh arrow_down ito internal invocation interceptedinvocationjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul ludgvyy vwdgvksw b nhdglvbi qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d a f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i agree that the pr has not a single purpose but given the changes were minimal i thought it wouldnt be a problemi can split it if you prefer so mockitoguy timvdlippe hey guys thanks for your inputi took a different approach now and the amount of changes required seems lower the tldr story is that i kept the non public interface getters on interceptedinvocation and i added a new one which is public that exposes the arguments as matchers in this way we can delegate this transformation to the invocation which makes it more consistent across the code and also allows me to override said method to use my own matchers which have their own tostring so i can customise how they are printed without having to mess that much with the internals of mockito coreplease let me know your thoughts mockitoguy ive improved the javadoc restarted the build if it is happy ill merge timvdlippe mockitoguy sorry to bother guys but could you release this to maven central or otherwise when is the next notable version coming outcheers travis should be on its way https githubcom mockito mockito commit e e daedce c cfc d c b bca dbf timvdlippe much appreciated the build failed though and i am not sure if it has actually pushed the artifact to maven central thank you
1663,1667,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,improved ide experience for junit visual comparison failure when junit mockito is used in modern ide idea eclipse we now show visual comparison failure pop up for certain mockito exceptions such as argumentsaredifferent fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a b de f e c d de f ce b srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ a org mockito internal junit exceptionfactoryjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc qdw pdc fegnlchrpb gywn b j lmphdme arrow_down exceptions verification argumentsaredifferentjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl zlcmlmawnhdglvbi bcmd bwvudhnbcmveawzmzxjlbnquamf yq arrow_up verification opentest j argumentsaredifferentjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl zlcmlmawnhdglvbi vcgvudgvzddrql fyz vtzw c fyzurpzmzlcmvudc qyxzh ions verification junit argumentsaredifferentjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl zlcmlmawnhdglvbi qdw pdc bcmd bwvudhnbcmveawzmzxjlbnquamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a b f e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments do you have any instructions on how i can test this pr to verify the difference in ide behavior create a simple junit test that fails with argumentsaredifferent javapackage mytestimport static orgmockitomockitomockimport static orgmockitomockitoverifyimport orgjunitjupiterapitestpublic class test { suppresswarnings unchecked test public void test { comparable c comparable mock comparableclass ccompareto test verify c compareto somethingelse }} make sure that the snapshot version of mockito is on your classpath make sure junit is on the test classpath if youre using mockitos workspace you can do this with the following dependency declarations testcompile librariesjunitjupiterapi testruntime librariesjunitjupiterengine run the test in the ide using the junit runner in eclipse you should get the following argumentsaredifferent https user imagesgithubusercontentcom a c e c d f fa png im not sure how it looks in idea or android studio but im sure its similar this implementation is not perfect under eclipse if youre using the junit but happen to have opentest on the classpath then youll use the visual diff capability again this is because the junit runner in eclipse doesnt try and catch handle orgopentest jassertionfailederror im not sure of the behaviour in ideathe only way around that would be for exceptionfactorycreateargumentsaredifferent to examine the caller stack to see if it has been invoked from a junit or a junit context and throw the most appropriate exception this would complicate the implementation and make it run slower too it would be better imo if the junit runner in the ides were made aware of the opentest j exception and could handle it too this implementation is not perfect under eclipse if youre using the junit but happen to have opentest on the classpath then youll use the visual diff capability againwhy do you call this behavior imperfect this implementation is not perfect under eclipse if youre using the junit but happen to have opentest on the classpath then youll use the visual diff capability again why do you call this behavior imperfectsorry it was a typo it should have read then youll lose the visual diff capability again perfect behaviour in my mind would be that it determined which runner was actually running as opposed to merely being on the classpath and throw the exception that was appropriate for that runner but i think this is an edge case that probably isnt worth the extra complexity not perfect but good enough this looks great thank you can you do more checks for us does it work with idea toothis will be difficult for me to do as i dont have idea installed but i cant see why it wouldnt work can you build the project and inspect all pom files they should be somewhere under build dirs and ensure that we dont ship the new dependencywill do i did note that i need to make sure that an optional import package is added to the manifestmf too this will be difficult for me to do as i dont have idea installedgrab it from jetbrains site idea community open source edition is free and easy to install sorry it was a typogot it thank you for confirming yes the ideal behavior is that we get clean visual diff for all ides lets move on it seems that having opentest j junit on classpath is an edge case also i would hope that eclipse will catch up and start handling opentest j exceptions timvdlippe this is an interesting argument for our discussion about adding hard dependency on opentest j if we add such dependency today then eclipse junit mockito with opentest j combo loses visual diff feature unless we write code to detect the runner a fragile complexity better avoided just an fyi i dont mind to restart the discussionthanks guys if we add such dependency today then eclipse junit mockito with opentest j combo loses visual diff feature unless we write code to detect the runner a fragile complexity better avoided i am absolutely fine with not adding the hard dependency smile got it thank you for confirming yes the ideal behavior is that we get clean visual diff for all ides lets move on👍 it seems that having opentest j junit on classpath is an edge case also i would hope that eclipse will catch up and start handling opentest j exceptions just to clarify in case it wasnt clear the problem is not merely having both opentest j and junit on the class path junit and opentest j have been deliberately designed so that they can happily co exist with junit on the same classpaththe problem in eclipse at least is if you mix the junit _runner_ with opentest j exceptions which this current pr will do if you have opentest j on the classpath the visual diff will not work because eclipses implementation of the junit runner special cases the junit & comparisonfailure but not the opentest j assertionfailederror conversely eclipses junit runner handles only assertionfailederror and not comparisonfailure if you use the junit runner in eclipse the visual diff will work even if junit is on the classpath timvdlippe this is an interesting argument for our discussion about adding hard dependency on opentest j if we add such dependency today then eclipse junit mockito with opentest j combo loses visual diff feature unless we write code to detect the runner a fragile complexity better avoided just an fyi i dont mind to restart the discussionactually the issue of losing the visual diff doesnt have anything to do with whether the dependency on opentest j is hard or soft it has more to do with how the decision is made about which exception to throw the above problem would still occur even if we made the dependency on opentest j a hard one unless we did the same stack trace trick ie check which runner invoked us and throw the appropriate exception thanks guyswelcome honoured to be able to meaningfully contribute to such a popular project idea verification idea opentest j https user imagesgithubusercontentcom d d b e ca cf be epng note the click to see difference link in the error output and the visual diff could you maybe add a new subproject which has some sample tests with instructions on how to inspect the diff that would ease future development so that we can check if regressed on that thanks for all the hard work good progress can you build the project and inspect all pom files they should be somewhere under build dirs and ensure that we dont ship the new dependency will do i did note that i need to make sure that an optional import package is added to the manifestmf tooi did this i can confirm that opentest j does not appear as a dependency in any of the generated pom filesi also added the manifest change orgopentest j is now an optional import to the osgi manifest so that it would work properly in an osgi environment could you maybe add a new subproject which has some sample tests with instructions on how to inspect the diff that would ease future development so that we can check if regressed on that thanks for all the hard work good progressill sleep on it but to be honest my initial thoughts are that i feel this is overreaching a little i think the mockito tests should focus on the fact that it throws assertionfailederror correctly which i think they already do added to which im not sure i have the timeperhaps this could be the subject of a separate issue pr which i can get to if i find time or else someone else can take it on could you maybe add a new subproject which has some sample tests with instructions on how to inspect the diff that would ease future development so that we can check if regressed on that thanks for all the hard work good progressi suggest we move on we wont be able to automatically test how ides integrate with xunit runners manual tests will be forgotten we never had tests for this feature and it did not regress eventual regression will not be a blocker if we encounter one then we can prioritize a solution i didnt count it as a blocker more as a future improvement i am okay with merging as is
1599,1672,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,report initialization failures per test method prior to this commit defaultinternalrunner threw an exception when mockitoannotationsinitmocks failed from the overridden withbefores method instead it now returns a statement that isresponsible for initializing potential exceptions are then handled byjunit regardless whether version or beta is used insteadof reporting a class level error junit will now report a failure foreach test method in such test classesrelated issue junit team junit x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c aae b b cffb e b d e srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ockito internal runners defaultinternalrunnerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc ydw uzxjzl rlzmf bhrjbnrlcm hbfj bm lci qyxzh arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c aae e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1692,1693,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,make mockitonotextensible service loadable this way error prone can find the plugin when mockito errorprone is added to the annotation processor classpathfixes nb in this pr i chose to use google autoservice https githubcom google auto tree master service as is customary for error prone plugins if preferred i can instead introduce an explicit meta inf services comgoogleerrorpronebugpatternsbugchecker file timvdlippe sure will have a look at whats the simplest way to achieve this codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e ebd d e c afa bf fe b bsrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ o errorprone bugpatterns mockitonotextensiblejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c vichjvamvjdhmvzxjyb jwcm uzs zcmmvbwfpbi qyxzhl yzy tb nraxrvl vycm ychjvbmuvynvncgf dgvybnmvtw ja l b vdev dgvuc libguuamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e ef b e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments stephan were you able to take a look at this i wanted to fix the same in timvdlippe i considered several approaches and concluded that the best way forward would be to see whether how support for this kind of real full test can be added to error prones compilationtesthelper and bugcheckerrefactoringtesthelper classes the idea would be that they get another static factory method which relies on service loading rather than an explicitly provided checker class this would also benefit other non google ep users such as ubers nullaway https githubcom uber nullaway but then life happened so i didnt yet get to the point of actually trying that implementation note that even if it would work this pr would be blocked on those changes getting merged and released as part of error prone but i assume you could help getting the changes reviewed by the ep team so that leaves the question of timelines i can try but wont commit to spend some time on this later this week likely in the weekend alternatively if you agree with the suggested solution you could have a crack at an error prone pr and id be happy to be the first reviewerwrt whether this pr should be blocked on all that i have manually tested the changes in this pr so functionally we could just merge this for now the approach taken here is exactly https githubcom uber nullaway blob c b f dbba aac ff acbb d b nullaway src main java com uber nullaway nullawayjaval what nullaway does but just merging is not in the spirit of the mockito project so i totally undestand not wanting to go that route lets merge it for now and hope we dont regress in the future
1542,1701,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of with the tests fixed and implementation rebased on release x fixes
1556,1701,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of with the tests fixed and implementation rebased on release x fixes
1623,1708,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes rename toolittleactualinvocations rename the exception toolittleactualinvocations totoofewactualinvocations as this is more correct english as thisexception is public api we rename by subclassing and deprecating theoriginal rename all tests and internal methods that were referencingthe old name by aligning with the new namecheck list x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e e a dbc c c cf srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down ceptions verification toofewactualinvocationsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl zlcmlmawnhdglvbi ub gzxdby r ywxjbnzvy f aw ucy qyxzh n checkers atleastxnumberofinvocationscheckerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vy hly tlcnmvqxrmzwfzdfhodw izxjpzkludm jyxrpb zq hly tlci qyxzh arrow_down ification checkers numberofinvocationscheckerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vy hly tlcnmvtnvtymvyt zjbnzvy f aw uc nozwnrzxiuamf yq arrow_down java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e df cef https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1713,1714,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes fix typo in mockitojava javadoc i was confused and tried to look for verifynomoreinvocations when i came across this javadocshopefully this prevents further confusion codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ac f e a baf c c srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ac bf https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
298,1715,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,fixes replaces objenesis references from stubbing classes with plugin equivalents this enables the ios mockito plugin https githubcom google j objc tree master testing mockito to upgrade to v codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f e d f cb f a e e a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down va org mockito internal stubbing basestubbingjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy cyxnlu r ymjpbmcuamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f b a a https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments please bump the maven version to so j objcs build can reference this change should i also objenesis references should be moved out of core mockito i did the minimum to keep the patch small but a more complete change would move objenesisinstantiator https githubcom mockito mockito blob release x src main java org mockito internal creation instance objenesisinstantiatorjaval to a bytebuddy like subpackage such as orgmockitointernalcreationinstanceobjenesis and initialize defaultinstantiatorprovider https githubcom mockito mockito blob release x src main java org mockito internal creation instance defaultinstantiatorproviderjaval so it uses the plugin api to define its defaultthat small re org plus the new unit test should make it much more obvious what is core and what belongs in bytecode based mockito implementations should i also objenesis references should be moved out of core mockitolets put that in a follow up issue pr and keep this pr small i want to get this patch in but want to have the regression test in here now that way if we do decide to do the follow up pr we can refactor safely sounds good i should have the test done later today its a little more involved than nojunitdependenciestest because the default plugins are getting loaded ill see if a set of stub plugins can be substituted may be useful for future tests and if not update the tests classloader to not test the list of default plugin classes test added its not perfect since defaultmockitoplugins has bytebuddy plugin names hardwired so classes that trigger that class loading needed to be removed to fully test plugin loading code wed have to make defaultmockitopluginsdefault_plugins settable so a set of plugin stub classes can be substituted this seems like a useful but bigger change that you likely want with this pr i think this test is fine for now thanks for adding it
1717,1718,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,fixes configure the methodvisitor for java compatibility im looking into adding a unit test if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java this should fix codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d ebd d e a e d b ae ccb srcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq al creation bytebuddy subclassinjectionloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc njbmply rpb mb fkzxiuamf yq ito internal creation bytebuddy modulehandlerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw kdwxlsgfuzgxlci qyxzh ternal exceptions stacktrace stacktracefilterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl n ywnrdhjhy uvu rhy tucmfjzuzpbhrlci qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d a b c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments ive added a unit test thanks to an article https wwwjavacodegeekscom hands on java constantdynamichtml written by raphw of course could you update the pr to use openedclassreaderasm_api this way if byte buddys experimental feature is used mockito is capable of processing class files raphw done ive also rebased on release x lgtm i will merge this and publish a new version
1716,1723,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,change implementation of exceptionfactory to explicitly test for dependent classes the original implementation of conditional opentest j support relied on some implicit behaviour of the java classloader to generate and catch the exception at the right time it seems that this behaviour is not always exactly replicated in all environments for example in where mockito was being used in an instrumentation test that was being run on an android emulatorthe new implementation is a bit more direct in how it tests for the dependent classes the existing test cases still pass and matejdro confirmed that this fixed his problemfixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a c c c b cc srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f fc fe https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i just want to note that without this patch all mockito android builds after are unusable without opentest j installed as a workaround so maybe you could create patch release for just android not sure what the timeline for x is matejdro i am aiming for releasing mockito today okay never mind then whats happened with this pr did it ever get merged into x or into x it doesnt seem to have been merged as far as i can see are you waiting for me to rebase it onto x and resubmit this should be rebased onto x https githubcom mockito mockito pull pullrequestreview im so sorry i didnt realise you were waiting for me to do the rebase ill get it fine in the next hours or so no problem at all dont rush we have plenty of time to get this in there is no deadline work on this whenever you have the time to do so dont force it ok rebased it onto release x and changed the base branch of my pull requesti also changed it to use lambdas per tlubzs suggestion
977,1733,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,verifynointeractions guarantees no interactions with mock with i provided a fix to and however that pr targeted master which eventually became old x and its code didnt make it into release x and should be reopenedi have back ported that pr to target release x verifyzerointeractions is marked as deprecated and a new verifynointeractions is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if when this code will ship javadocs contain a placeholder since xx codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit aa d e d f b ede b eaab srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_up rc main java org mockito internal mockitocorejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nraxrvq yzs qyxzh arrow_up src main java org mockito bddmockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by crernb nraxrvlmphdme arrow_down internal verification verificationmodefactoryjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw utw kzuzhy rvcnkuamf yq arrow_up java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_up mockito internal verification nointeractionsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vtm jbnrlcmfjdglvbnmuamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update aa bb https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks for this and good catch i still have to release mockito but wasnt able to because of issues with our release mechanism i will try that next week after which we can merge this pr 😄 mockito was released so i am merging tada
989,1733,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,verifynointeractions guarantees no interactions with mock with i provided a fix to and however that pr targeted master which eventually became old x and its code didnt make it into release x and should be reopenedi have back ported that pr to target release x verifyzerointeractions is marked as deprecated and a new verifynointeractions is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if when this code will ship javadocs contain a placeholder since xx codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit aa d e d f b ede b eaab srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_up rc main java org mockito internal mockitocorejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nraxrvq yzs qyxzh arrow_up src main java org mockito bddmockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by crernb nraxrvlmphdme arrow_down internal verification verificationmodefactoryjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw utw kzuzhy rvcnkuamf yq arrow_up java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_up mockito internal verification nointeractionsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vtm jbnrlcmfjdglvbnmuamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update aa bb https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments thanks for this and good catch i still have to release mockito but wasnt able to because of issues with our release mechanism i will try that next week after which we can merge this pr 😄 mockito was released so i am merging tada
1743,1745,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes clarify default answer in api changes postponed to default answer has not been changed in oh travis is deeply unhappy i would need to investigate that 😢 please rebase this pr to fix the travis issue codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ec bed b d a c b afc b a dsrcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ec bed ec e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1513,1760,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,minor bug fixes fixes removed typofixes added missing tag to fix javadocsupersedes and closes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ad c d a add cd dd b srcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ad f f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1747,1760,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,minor bug fixes fixes removed typofixes added missing tag to fix javadocsupersedes and closes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ad c d a add cd dd b srcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ad f f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1758,1762,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fixes method generictypeextractorfindgenericinterface always … …returns first interface codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f b e b a ff afee a bf c srcpr&eldesc will not change coverage the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal util reflection generictypeextractorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl jlzmxly rpb vr vuzxjpy r cgvfehryywn b iuamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1769,1773,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes clarify default strict stubbing behaviour in similar to https githubcom mockito mockito pull as requested by timvdlippe in https githubcom mockito mockito issues closes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e d e a b e a a faef srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito quality strictnessjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by xdwfsaxr l n cmljdg lc muamf yq arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e f c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
178,1781,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes close file handle to avoid a file handle leak fix a small file handle leak which pops up when running tests with file leak detector https file leak detectorkohsukeorg fixes good catch this always gets me as the class name is file
1780,1781,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes close file handle to avoid a file handle leak fix a small file handle leak which pops up when running tests with file leak detector https file leak detectorkohsukeorg fixes good catch this always gets me as the class name is file
1786,1787,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes clarify differences between timeout and after tries to improve the javadoc for timeout to differentiate it from after directly in the first sentence codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit dbe d cd aa cba d de srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update db https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments the root cause can be fixed by pr unification of timeout and after api
1630,1788,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,upgraded junit jupiter we need higher version of junit jupiter to reproduce and fix added a test to enhance coverage codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit dbe d cd aa cba d de srcpr&eldesc will decrease coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ o errorprone bugpatterns mockitointernalusagejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c vichjvamvjdhmvzxjyb jwcm uzs zcmmvbwfpbi qyxzhl yzy tb nraxrvl vycm ychjvbmuvynvncgf dgvybnmvtw ja l b ludgvybmfsvxnhz uuamf yq o errorprone bugpatterns mockitonotextensiblejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c vichjvamvjdhmvzxjyb jwcm uzs zcmmvbwfpbi qyxzhl yzy tb nraxrvl vycm ychjvbmuvynvncgf dgvybnmvtw ja l b vdev dgvuc libguuamf yq ternal exceptions stacktrace stacktracefilterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl n ywnrdhjhy uvu rhy tucmfjzuzpbhrlci qyxzh al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq ito internal creation bytebuddy modulehandlerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw kdwxlsgfuzgxlci qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update db ab c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments coverage drop is a red herring i verified the new test runs as part of ci merging
1630,1789,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixed junit jupiter parallel issue fixes this fix improves mockito junit jupiter extension however it does not completely resolve all kinds of parallel issues when nested test classes are used ill open a separate ticket for it codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit d aa cb c b ac b aea a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update d ed a https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments this is much nicer thank you
1791,1798,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fix typo in the wiki link fixes check list x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ded efbfbd be e a a fdae d d be srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ded ef bba https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1587,1810,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,revert fixes remove unnecessary loop from injectingannotationengine reverts mockito mockito related to heres a pseudo code to describe the issues around this issue before while clazz objectclazz { val mocks aggregatespyormockfields clazzgetmockfields val fields aggregateinjectmocksfields clazz val ret tryconstructorinjection clazz fields mock if retfieldwasinitializedusingconstructorinjection { trysetterorpropertyinjection clazz fields mock } clazz clazzgetsuperclass } after val mocks aggregatespyormockfields clazzgetmockfields val fields aggregateinjectmocksfields clazz val ret tryconstructorinjection clazz fields mock if retfieldwasinitializedusingconstructorinjection { trysetterorpropertyinjection clazz fields mock } detailsbefore if the injectmocks field has a field that not listed in the constructor argument will fill by setter property injection at the nd loop 😃it may not the expected behaviors by mockito authors but some users code depends on this behaviormy suggestion is to revert the fixes remove unnecessary loop from injectingannotationengine by lihmeh · pull request · mockito mockito · github https githubcom mockito mockito pull at this time why travis fails this needs a rebase that should fix travis presumably codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a c f fda a b d a bf fb a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ernal configuration injectingannotationenginejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul luamvjdgluz fubm yxrpb fbmdpbmuuamf yq arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a c b d c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments rebased timvdlippe added test case
1771,1813,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,fixes upgrade byte buddy to from release notes https githubcom raphw byte buddy releases tag byte buddy https githubcom raphw byte buddy releases tag byte buddy https githubcom raphw byte buddy releases tag byte buddy https githubcom raphw byte buddy releases tag byte buddy https githubcom raphw byte buddy releases tag byte buddy https githubcom raphw byte buddy releases tag byte buddy https githubcom raphw byte buddy releases tag byte buddy https githubcom raphw byte buddy releases tag byte buddy https githubcom raphw byte buddy releases tag byte buddy relevant commits raphw byte buddy byte buddy byte buddy codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit a c f fda a b d a bf fb a srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a c c c f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
181,1818,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,add duration overloads fixes add new javatimeduration based public apis to mockito after and timeout and deprecate the corresponding long based public apisplumb those duration instances through the internals of mockito codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit bc ebb efa a f cdff c c a asrcpr&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme arrow_up nternal verification verificationovertimeimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw ut zlclrpbwvjbxbslmphdme arrow_down erification verificationwrapperinorderwrapperjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw uv jhchblcklut jkzxjxcmfwcgvylmphdme arrow_down src main java org mockito verification afterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by zxjpzmljyxrpb vqwz zxiuamf yq rc main java org mockito verification timeoutjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by zxjpzmljyxrpb vvgltzw dc qyxzh src main java org mockito internal util timerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl rpbwvylmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update bc a f b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
181,1819,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,deprecate mockitohamcrest this class was used during the migration period from mockito andmockito but is no longer necessary to be able to remove ourdependency on hamcrest we should remove mockitohamcrestin response to friendly ping on this pr i will submit this pr next week if there are no objections there were no objections so i am merging this sorry im late here i suggest we dont deprecate it the use case as documented in the javadoc is the following hamcrest integration is provided so that users can take advantage of existing hamcrest matchers that use case is still valid perhaps the docs need to be clearer to address for code that does not use hamcrest users should be following standard non hamcrest argthat apihope that helps for code that does not use hamcrest users should be following standard non hamcrest argthat apithe problem is that this project requires hamcrest as compile time dependency to be built this is a problem for users who do not want to use hamcrest but still build the source code as they cant use the pre built jars if we want to keep supporting hamcrest users with this api i would suggest a mockito hamcrest artifact that takes care of the integration that way those users who do not want to use hamcrest dont rely on it as wellwdyt im novice to testing because i have to wear many hats and i avoided getting into it like the plague in the past returning to spring development in my career and discovering mockito this year changed my integration testing life i rely heavily on googling stack overflow examples until it become memorized if ever i do it seems like there is a much larger documented wealth of knowledge on hamcrest on stack overflow maybe cause its been around a long time and so its easy to find solutions to basic challenges while someone new to mockito gets used to itfor example hasentry from this so helped me today https stackoverflowcom questions using mockito how do i match against the key value pair of a mapi like timvdlippes suggestion because it leverages giving your users the ability to tap into that knowledge solutions while slimming down the dependencies for the core mockito code basethanks for all your contributions in this area and letting us stand on your shoulders thanks for that response mansours i will look into introducing a mockito hamcrest artifact and figure out a way forward tomorrow i can revert this pr given the points raised by mockitoguy and make that work this is a problem for users who do not want to use hamcrest but still build the source code as they cant use the pre built jars can you elaborate this problem we use compileonly dependency for hamcrest just like we do for junit or opentest j this should not cause problems for consumers yes we are facing the same issues with junit and opentest j junit is not an issue atm as we are also using it but opentest j is currently an issuewe are not able to include jars as we require source code to be included and built for security analyses thus the inclusion of the dependencies during compile time does lead to problems when we want to build mockito in isolationi am currently investigating solutions for junit and opentest j and how that could be decoupled i went ahead with this pr as it was my understanding with mockito is that we wanted to remove our dependency of hamcrest therefore i assumed that deprecation was appropriate especially as there were no objections posted on this pr for almost weeks i understood that this was okayi will revert the pr for us to revisit but i would like to come to a decision on our hamcrest support and whether we want to support it or not at all when we come to a decision i would like to update our javadoc and wiki on that to clarify that for our users especially as there were no objections posted on this pr for almost weeks i understood that this was okayof course thank you for waiting weeks dont block on us yes we are facing the same issues with junit and opentest j junit is not an issue atm as we are also using it but opentest j is currently an issuecan you elaborate the problem is it a google mono repo use case i dont object reworking the artifacts i want understanding for me and others can you elaborate the problem is it a google mono repo use case i dont object reworking the artifacts i want understanding for me and others this is for every repository that includes third_party code that we need to have the original source code for security analyses that includes the mono repository as well as some other repositories that we havesince the hamcrest api is not type safe as it requires casting with object vs t as argument type we would like to move away from unsafe type casts the argumentmatcher interface does not inherit that problem but the older hamcrest api doesby having the hamcrest compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apii would personally say that while the hamcrest api was originally useful for defining reusable matchers the lack of type safety does more harm than good i have received good responses when i finished the migration of the argumentmatcher to be typed and it already caught bugs in our tests i think we should promote the type safe argumentmatcher and thus deprecate the old api but happy to disagree on that part and leave hamcrest compatibility in for example a separate artifact that we need to have the original source code for security analysesso the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis i still dont feel i fully understand this use case by having the hamcrest compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apithats a fair argument leave hamcrest compatibility in for example a separate artifactto keep backwards compatibility we would need mockito core mockito hamcrest are you thinking of reversing the dependency in future major version revert of this pr is in https githubcom mockito mockito commit ad f a f dd c ee c cd f so the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis i still dont feel i fully understand this use case correct since jars can be built with any arbitrary code we prefer to not check in a jar as we cant be certain that it was built from the original source code thats why we check in the original source code and build that instead to keep backwards compatibility we would need mockito core mockito hamcrest are you thinking of reversing the dependency in future major versionyes but since maven does not allow a cyclic dependency we have to figure out what the possibilities are
1767,1821,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,guard against multiple evaluations of before statement some rules evaluate the base statement multiple times eg to executetests repeatedly the changes made in led to an exception in suchcases because the mockitolistener was registered multiple times nowwe only add the listener the first time the statement is evaluated inorder to restore the old behaviorfixes oh this fails a lot of tests 😢 could it be that testfinished needs the same treatment could it be that testfinished needs the same treatmentit does indeed 👍 codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ffc aee fe ed cee e da f f b b b srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ffc ae e aa https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments awesome thanks
1815,1845,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,revert add duration overloads fixes reverts mockito mockito fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit faccdcf f d f fc f a a esrcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme nternal verification verificationovertimeimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw ut zlclrpbwvjbxbslmphdme arrow_down src main java org mockito verification afterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by zxjpzmljyxrpb vqwz zxiuamf yq arrow_down rc main java org mockito verification timeoutjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by zxjpzmljyxrpb vvgltzw dc qyxzh arrow_down erification verificationwrapperinorderwrapperjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vvmvyawzpy f aw uv jhchblcklut jkzxjxcmfwcgvylmphdme arrow_down src main java org mockito internal util timerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl rpbwvylmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update facc https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1846,1847,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixed undetected unused stubbing when matching previous stubbed call fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f c aa f dc e a a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ to internal stubbing stubbedinvocationmatcherjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvksw b nhdglvbk hdgnozxiuamf yq arrow_down ito internal stubbing invocationcontainerimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy jbnzvy f aw uq udgfpbmvysw wbc qyxzh arrow_up java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down ava org mockito internal reporting pluralizerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc yzxbvcnrpbmcvugx cmfsaxplci qyxzh arrow_up ternal exceptions stacktrace stacktracefilterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl n ywnrdhjhy uvu rhy tucmfjzuzpbhrlci qyxzh arrow_up al creation bytebuddy subclassinjectionloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc njbmply rpb mb fkzxiuamf yq arrow_up creation bytebuddy subclassbytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrlqnvkzhlnb nrtwfrzxiuamf yq arrow_up main java org mockito internal util platformjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl bsyxrmb jtlmphdme arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f c b d d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments ill review by tomorrow thank you for the updates i tweaked the tests when the build is green ill mergethank you for this nice pr
1848,1849,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,performance optimization by using methodgetparametercount where possible hias described in we could make use of methodgetparametercount in order to save some overhead from unnecessary cloning caused by methodgetparametertypes as this is my first contribution to mockito let me know if i can do something to helplet me know what you thinkcheerschristoph codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f c aa f dc e a a srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage arrow_up mockito internal invocation typesafematchingjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul r cgvtywzltwf y hpbmcuamf yq arrow_down o internal stubbing answers returnsargumentatjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy hbnn zxjzl jldhvybnnbcmd bwvudef lmphdme arrow_down a org mockito internal util objectmethodsgurujava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl iamvjde ldghvzhnhdxj lmphdme arrow_down nal creation instance constructorinstantiatorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi pbnn yw jzs db zdhj y rvckluc rhbnrpyxrvci qyxzh arrow_down ito internal util reflection fieldinitializerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl jlzmxly rpb vrmllbgrjbml awfsaxplci qyxzh arrow_down java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme arrow_down continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f c a de https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments after importing this change into google i realized that this change is breaking all downstream android applications should we revert this change similarly to see full postmortem at https githubcom mockito mockito wiki android java javatimeduration postmortem given that it does not change our public api thats very unfortunate should we revert this change similarly to absolutely
522,1850,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for is caught with the following exception javalangillegalstateexception failed to install bundle mockito core jar at orgmockitoosgitestosgitestsetup osgitestjava snipped caused by orgosgiframeworkbundleexception error occurred installing a bundle at orgeclipseosgistoragestorageinstall storagejava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgmockitoosgitestosgitestsetup osgitestjava morecaused by javalangillegalargumentexception invalid range invalid format at orgosgiframeworkversionrange versionrangejava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestorageinstall storagejava morecaused by javautilnosuchelementexception at javautilstringtokenizernexttoken stringtokenizerjava at orgosgiframeworkversionrange versionrangejava more the osgi test project consists of three source sets a regular junit test source set with a single class osgitest starts an osgi framework installs mockito core byte buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework a source set testbundle thats built to an osgi bundle using the bundle task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle a source set otherbundle thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details the test source set only has compile dependencies on the osgi apis and junit ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used the test cases are run by loading classes from the test bundle that all implement runnable this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework the osgi bundles are built using the bnd gradle plugin https githubcom bndtools bnd blob master bizaqutebndgradle readmemdgradle plugin for workspace builds instead of the deprecated osgi plugin in gradle the reason is both future proofing to not impede a migration to gradle in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f c aa f dc e a a srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ternal exceptions stacktrace stacktracefilterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl n ywnrdhjhy uvu rhy tucmfjzuzpbhrlci qyxzh arrow_up al creation bytebuddy subclassinjectionloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc njbmply rpb mb fkzxiuamf yq arrow_up creation bytebuddy subclassbytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrlqnvkzhlnb nrtwfrzxiuamf yq arrow_up main java org mockito internal util platformjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl bsyxrmb jtlmphdme arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f c e d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments this is great work thanks only some nits and a question whether we can use the junit api to handle the tests that should improve the assertions and simplify the loading of the teststhanks for the speedy review it was intentional not to use the junit api since its not readily available to consume as an osgi bundle in this project however i have committed a new version where the orgjunit package is provided to the osgi bundles as a system package and thus is loaded from the regular class loaderits still tricky to get the test cases to run inside the bundles since they arent visible to gradle in the test source set in fact the test classes are only available during runtime _after_ starting the osgi framework and installing their bundles to overcome that issue ive inherited from suite and fed it test classes loaded through the class loader of the test bundleof course using proper asserts is preferable now that they are available so i fixed that to get a clean diff from the first commit i did not yet consolidate the test classes ie theres still one test class with a single test method for each previous runnable which might look a bit wasteful input on that is welcome and also if you think that the added complexity of using a suite and the way junit is provided to the inside of osgi is acceptabletechnical details the framework needs to be started in the suite constructor to be able to load the test classes thus beforeclass can no longer be used however afterclass still works for the tear down using junit inside the test bundles makes bnd add a corresponding import package orgjunit to its manifest the one thats resolved by the extra system package entry this additional package import should not affect the effectiveness of the test for detecting manifest issues in fact it might even make it more like other usages of mockito
678,1850,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for is caught with the following exception javalangillegalstateexception failed to install bundle mockito core jar at orgmockitoosgitestosgitestsetup osgitestjava snipped caused by orgosgiframeworkbundleexception error occurred installing a bundle at orgeclipseosgistoragestorageinstall storagejava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgmockitoosgitestosgitestsetup osgitestjava morecaused by javalangillegalargumentexception invalid range invalid format at orgosgiframeworkversionrange versionrangejava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestorageinstall storagejava morecaused by javautilnosuchelementexception at javautilstringtokenizernexttoken stringtokenizerjava at orgosgiframeworkversionrange versionrangejava more the osgi test project consists of three source sets a regular junit test source set with a single class osgitest starts an osgi framework installs mockito core byte buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework a source set testbundle thats built to an osgi bundle using the bundle task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle a source set otherbundle thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details the test source set only has compile dependencies on the osgi apis and junit ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used the test cases are run by loading classes from the test bundle that all implement runnable this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework the osgi bundles are built using the bnd gradle plugin https githubcom bndtools bnd blob master bizaqutebndgradle readmemdgradle plugin for workspace builds instead of the deprecated osgi plugin in gradle the reason is both future proofing to not impede a migration to gradle in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f c aa f dc e a a srcpr&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ternal exceptions stacktrace stacktracefilterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl n ywnrdhjhy uvu rhy tucmfjzuzpbhrlci qyxzh arrow_up al creation bytebuddy subclassinjectionloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc njbmply rpb mb fkzxiuamf yq arrow_up creation bytebuddy subclassbytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrlqnvkzhlnb nrtwfrzxiuamf yq arrow_up main java org mockito internal util platformjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl bsyxrmb jtlmphdme arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f c e d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments this is great work thanks only some nits and a question whether we can use the junit api to handle the tests that should improve the assertions and simplify the loading of the teststhanks for the speedy review it was intentional not to use the junit api since its not readily available to consume as an osgi bundle in this project however i have committed a new version where the orgjunit package is provided to the osgi bundles as a system package and thus is loaded from the regular class loaderits still tricky to get the test cases to run inside the bundles since they arent visible to gradle in the test source set in fact the test classes are only available during runtime _after_ starting the osgi framework and installing their bundles to overcome that issue ive inherited from suite and fed it test classes loaded through the class loader of the test bundleof course using proper asserts is preferable now that they are available so i fixed that to get a clean diff from the first commit i did not yet consolidate the test classes ie theres still one test class with a single test method for each previous runnable which might look a bit wasteful input on that is welcome and also if you think that the added complexity of using a suite and the way junit is provided to the inside of osgi is acceptabletechnical details the framework needs to be started in the suite constructor to be able to load the test classes thus beforeclass can no longer be used however afterclass still works for the tear down using junit inside the test bundles makes bnd add a corresponding import package orgjunit to its manifest the one thats resolved by the extra system package entry this additional package import should not affect the effectiveness of the test for detecting manifest issues in fact it might even make it more like other usages of mockito
1853,1854,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,fixes allow mockitosettings to be inherited x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b f da eb db c d da srcpr&eldesc will not change coverage the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b c bce https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments could you add a regression test in the junit jupiter test testsuiteive just amended the commit with a test
1877,1878,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,revert fixed undetected unused stubbing when matching previous stubbed call reverts mockito mockito fixes based on feedback in codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit bc b aad c aa e f srcpr&eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &tokenmx slder &height &srcpr https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ito internal stubbing invocationcontainerimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy jbnzvy f aw uq udgfpbmvysw wbc qyxzh to internal stubbing stubbedinvocationmatcherjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy tdhviymvksw b nhdglvbk hdgnozxiuamf yq arrow_down ava org mockito internal reporting pluralizerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc yzxbvcnrpbmcvugx cmfsaxplci qyxzh java org mockito internal exceptions reporterjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc legnlchrpb zl jlcg ydgvylmphdme ito internal creation bytebuddy modulehandlerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw kdwxlsgfuzgxlci qyxzh arrow_down al creation bytebuddy subclassinjectionloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc njbmply rpb mb fkzxiuamf yq arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update bc ab b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1880,1881,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,fix unnecessarystubbingexception javadoc fix
1875,1890,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fix mocks throwing same instance with throwable class fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with dothrow class or thenthrow class this is achieved by moving the instantiation of the throwable into a new answer called throwsexceptionclass much like throwsexception then thenthrow class calls the swer answer with a new instance of throwsexceptionclass rather than thenthrow throwable similar for dothrow class dothrow throwable and doanswer answer fixes timvdlippe just have a quick inquiry the test in uninstantiablethrowabletest is failing because it expects an instantiationerror to be thrown in the middle of stubbing check pr the new code doesnt instantiate in the middle of stubbing anymore how do i ignore the test or do i just delete the test file im used to using an annotation to ignore tests the pr should be ready after thats sorted and any other suggested changes
1894,1895,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes checkstyle error on windows windows has some issues with relative paths in checkstyle config files additionally it failed with an euro sign in codeplease verify if it also works on unix env codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ab bd c ac ab f c ffc&eldesc will not change coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update ab bd c https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1910,1911,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes update description of argumentmatcher javadoc for any the doc says thatany is an alias of anyobject and any javalangclass but in the note it says thatsince mockito any class is not anymore an alias of this methodthis is confusing so the alias in the doc should exclude any javalangclass to simply beany is an alias of anyobject also update the same issue of anyobject check list x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_
190,1914,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,fix pattern matcher not matching to subregion issue talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument provided with an invocation to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas matchermatch see comment https githubcom mockito mockito issues issuecomment in this commit fixes that by using matcherfind fixes
1905,1914,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,fix pattern matcher not matching to subregion issue talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument provided with an invocation to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas matchermatch see comment https githubcom mockito mockito issues issuecomment in this commit fixes that by using matcherfind fixes
189,1942,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning nullfixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f cb a bc cb e b dfbdb &eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ rnal stubbing defaultanswers returnsdeepstubsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zrgvlcfn dwjzlmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1898,1942,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning nullfixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit f cb a bc cb e b dfbdb &eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ rnal stubbing defaultanswers returnsdeepstubsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zdhviymluzy kzwzhdwx yw zd vycy szxr cm zrgvlcfn dwjzlmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1712,1949,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes prepend description to assertionerror thrown in verification extended mockitoassertionerror to wrap instance of assertionerror in addition to mockitoassertionerror so that the various possible exceptions thrown for non matching arguments have description prepended to the message oh it seems like you need to run gradlew spotlessapply locally to fix the formatting issues i think you need to rebase on release x to pick up the latest changes your spotless configuration locally appears to be out of date are you running gradlew spotlessapply i can take a look on monday why it is not formatting as expected thanks tim ive rebased now hopefully should fix the formatting issue just squashed the commits codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b d c bd d f c f d aa &eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ mockito exceptions base mockitoassertionerrorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by legnlchrpb zl jhc uvtw ja l b fzc vydglvbkvycm ylmphdme org mockito internal verification descriptionjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc zxjpzmljyxrpb vrgvzy jpchrpb uamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b d e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1013,1955,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,mockito defines and implements api for static mocking fixes allows for static method mocking in mockito i thought about it but i am pretty confident that this is what its gonna be i suggest we put the apis as incubating as we have done with the inline mock maker if we commit to the api even in a separate artifact i think the android folks will still go for it and have a similar expectation on its stabilityyou think a separate artifact would be cleaner i mostly prefer a conservative route if we have that option but keeping as incubating is okay with me i think id prefer the single artifact its fully opt in and does not touch any existing code i think this way it will be used more and well find out the adoption quicker codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit fd da e a ca af b a d b &eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ nternal creation bytebuddy bytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvqnl zuj zgr tw ja ha vylmphdme creation bytebuddy subclassbytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrly kzudlbmvyyxrvci qyxzh reation bytebuddy inject mockmethoddispatcherjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvaw qzwn l vy tnzxrob reaxnwyxrjagvylmphdme ito internal invocation interceptedinvocationjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul ludgvyy vwdgvksw b nhdglvbi qyxzh nal configuration independentannotationenginejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul luzgvwzw kzw qw ub rhdglvbkvuz luzs qyxzh arrow_down nternal configuration mockannotationprocessorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul vy tbbm vdgf aw uuhjvy vzc ylmphdme rg mockito internal creation mocksettingsimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi nb nru v dgluz njbxbslmphdme arrow_down l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh arrow_down rc main java org mockito internal mockitocorejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nraxrvq yzs qyxzh arrow_down and more https codecovio gh mockito mockito pull diffsrcpr&eltree more continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update fd dbdd b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i just saw this and cannot believe my eyes will try to review shortly awesome just discovered a remaining recursion on thencallrealmethod but i think i already know how to fix it and it works too i thought about splitting the mockitoannotations into offering two methods however since we introduce a life cycle the old method can no longer be used safely its a rather uncommon api to use manually therefore i believe that a breaking change is a good way to notify users that they need to pay attention most people do however use the junit runner rule and extension i think and wont be affectedi considered splitting up the pr but that way i could not implement static mocks as a running feature without putting all pieces together i therefore suggest that we release it as one change that way mockito stays consistent in its offered features and we hopefully get frictionless adoption i am afraid that this change has a certain inherent complexity that would not go away even when splitting up its a rather uncommon api to use manually therefore i believe that a breaking change is a good way to notify users that they need to pay attentioni have seen numerous usages in google before we make this change i would like to verify that this is indeed safe to do i am not sure when i have time to do so but i think someday next week should be possible i have not considered wide usage in this case i think its better to deprecate initmocks in favor of openmocks where the former does not misbehave unless you are using the new static mocks this way there is no api breakage and mockito continues to well behave for unchanged user codei think such a life cycle will be useful for other cases too for instance i think it opens a solution for https githubcom mockito mockito issues where i otherwise cannot see a solutioni updated the pr but still suggest that we do not split it up we could otherwise introduce the life cycle in a separate pr but without a single user of the life cycle it would be hard to capture the application of this feature in a meaningful way not considering the additional work that splitting up the pr would entail initmocks is used widely in the android ecosystem as it allegedly has better integration with classloader like robolectric i think since then we have addressed the issues in mockito but the usage of initmocks remains prevalent raphw you also need to run gradlew spotlessapply locally to format the sourcecode i also have this problem when the mockmaker is inlinebytebuddymockmaker i use spybean to spy a spring bean and then verify the bean it throws notamockexception i debug and find the class type is not contains mockito but it contains when i use the bytebuddymockmaker and it seems not a spring bug image https user imagesgithubusercontentcom c ea dd b fc c png i guess i find it because the mocksget mock cant find it the mock is cglib proxy not the original typewhen i use the verify appgroupclusteraction aoptestutilsgettargetobject appgroupclusteraction to verify it works
1960,1961,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,document using mock with method parameters although weve called it out in the junit extension we should alsomake sure its clear in the core documentation to make it more visiblewe can fully quality the test annotation to make clear that it has tobe with junit closes junit extension https javadocio doc orgmockito mockito junit jupiter latest org mockito junit jupiter mockitoextensionhtml codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit e c dd a bdafc ae e ac&eldesc will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockitojava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nraxrvlmphdme to internal util concurrent weakconcurrentmapjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbmn cnjlbnqvv vha nvbmn cnjlbnrnyxauamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update e be b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1967,1968,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes correctly handle mocks with limited life cycle in listeners due to the limited lifetime of static mocks they cannot be validated within a mockito session since they might have expired when the validation is applied this patch excludes static mocks from all validation to support static mocks in the regular session validation we would rather need to trigger the validation upon release of any static mock it only tests part of the issue for actually testing it we would need to run the junit tests with the inline mock maker and create subprojects for it i am going on a two week vacation tomorrow so i did not want to open that barrel of wine tonight but i validated the working manually if you have some time could you add additional subprojects i validated the runners manually however ah okay i got confused as the commit mentions that the issue is fixed so thats why i thought we had test the whole scenario please go on vacation we can figure it out later 😄 codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b bfc e f c c d b f bdfefe &eldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockedstaticjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nrzwrtdgf awmuamf yq in java org mockito internal mockedstaticimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nrzwrtdgf awnjbxbslmphdme ternal invocation finder allinvocationsfinderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul zpbmrlci bbgxjbnzvy f aw uc zpbmrlci qyxzh kito internal framework defaultmockitosessionjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc mcmftzxdvcmsvrgvmyxvsde vy tpdg tzxnzaw ulmphdme nternal configuration mockannotationprocessorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul vy tbbm vdgf aw uuhjvy vzc ylmphdme to internal util concurrent weakconcurrentmapjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbmn cnjlbnqvv vha nvbmn cnjlbnrnyxauamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b bfe e aa https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments i added an additional project for the junit jupiter extension and added a junit rule for the inline mock maker tests i hope this should avoid any future regressions
1855,1974,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes and improve error message when the inline mock maker cannot be used improves the error message and does not create a hard dependency on the compiler module it also points out that byte buddy can now emulate the attachment api using jna if its added to the class path codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit deec a d d c a fa a&eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme to internal util concurrent weakconcurrentmapjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbmn cnjlbnqvv vha nvbmn cnjlbnrnyxauamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update dee ba https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1988,1989,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,do not pass static mocks to regular listener callback does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks fixes we have passed class objects to the listener to indicate a static mock the class object is of course itself not a regular mock and its cleaner to create a callback method of its own this way existing listeners remain logically backwards compatible including our own listener that is used within the junit runner we have only tested the rule i added a test for the runner too codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit c b a da fa ccfeef adaa a db d bd &eldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ito internal invocation interceptedinvocationjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul ludgvyy vwdgvksw b nhdglvbi qyxzh mockito internal progress mockingprogressimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc wcm ncmvzcy nb nraw nuhjvz jlc njbxbslmphdme va org mockito listeners mockcreationlistenerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by saxn zw lcnmvtw ja nyzwf aw utglzdgvuzxiuamf yq ternal invocation finder allinvocationsfinderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc pbnzvy f aw ul zpbmrlci bbgxjbnzvy f aw uc zpbmrlci qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update c b a b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
2015,2017,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,only enable mocking of types right before instantiation to avoid circular interception of constructor creation fixes
2015,2018,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,only enable mocking of types right before instantiation to avoid circular interception of constructor creation fixes
2011,2023,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,initializes classes prior to instrumentation to avoid uncontrolled code execution fixes triggeres initializers explicitly codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit ab b f b ac bfd a eeeldesc will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq to internal util concurrent weakconcurrentmapjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbmn cnjlbnqvv vha nvbmn cnjlbnrnyxauamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update a d d https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
1802,2034,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,escape mock during method dispatch on mock to avoid premature garbage collection under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch to avoid this we escape the mock instance during the dispatch to make sure that the gc cannot collect the objectfixes indeed force pushed a new version just nowlets hope the jit stays dumb enough to avoid this error in the future i was really certain that the stack allocation of the mock object would avoid the allocation but if the entire mockito call stack gets inlined that does no longer apply worst case we need to make the mockito call stack deeper then the inlining heuristic
198,2042,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,mock resolver plugin adds a plugin to allow for adding one or multiple mock resolvers this way instances that are provided to mockitos dsl do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as springthis works today with the subclass mock maker by accident as we read the mock state from the mock instance via a method which gets proxied if we ever find a more private appraoch this would however break springs mockito use and it is already broken with the inline mock makerby this spi spring could add an unproxy resolver to its mockito build up and make its proxied mocks compatible with mockito other frameworks could use the same approach if desired as this spi is genericcloses codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b ae cf b ef e aab eb deldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ g mockito internal util defaultmockingdetailsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl rlzmf bhrnb nraw nrgv ywlscy qyxzh src main java org mockito plugins mockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by wbhvnaw zl vy tnywtlci qyxzh o internal configuration plugins pluginloaderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul bsdwdpbnmvugx z lutg hzgvylmphdme arrow_down ernal configuration plugins plugininitializerjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul bsdwdpbnmvugx z lusw pdglhbgl zxiuamf yq arrow_down o internal configuration plugins pluginfinderjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul bsdwdpbnmvugx z lurmluzgvylmphdme arrow_down internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh internal configuration plugins pluginregistryjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul bsdwdpbnmvugx z luumvnaxn cnkuamf yq ockito internal configuration plugins pluginsjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jb mawd cmf aw ul bsdwdpbnmvugx z lucy qyxzh main java org mockito internal util mockutiljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl vy tvdglslmphdme al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b ae cfc b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
2040,2046,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,do not exclude synthetic constructors from instrumentation fixes byte buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic eg bridge methods for constructor instrumentation it is however crucial that no code is called during mock creation and that fields are copied during spy creation codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b ae cf b ef e aab eb deldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ internal creation bytebuddy mockmethodadvicejava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvtw ja ldghvzefkdmljzs qyxzh al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b ae cf a f https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
206,2071,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes argumentmatcher error messages use lambda class names fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b ec cafdbf fb c f c bb aeldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ain java org mockito internal util stringutiljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl n cmluz v awwuamf yq ockito internal matchers text matchertostringjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc tyxrjagvycy zxh l hdgnozxjub n cmluzy qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b ec e b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
2061,2071,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes argumentmatcher error messages use lambda class names fixes codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc into release x https codecovio gh mockito mockito commit b ec cafdbf fb c f c bb aeldesc will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ ain java org mockito internal util stringutiljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl n cmluz v awwuamf yq ockito internal matchers text matchertostringjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc tyxrjagvycy zxh l hdgnozxjub n cmluzy qyxzh continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update b ec e b https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
2092,2176,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error_prone_cores releases error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield fixed nosuchelementexception crash in restrictedapichecker false positive in differentnamebutsame false positive in unnecessaryoptionalget false positive in unnecessarymethodreference fixed a regression in jdk ea support error prone new checks banserializableread catchingunchecked computeifabsentambiguousreference dangerousliteralnull datechecker differentnamebutsame donotcallsuggester donotclaimannotations donotmockautovalue floggerformatstring floggerlogvarargs floggerlogwithcause floggermessageformat floggerpassedaround floggerredundantisenabled floggerrequiredmodifiers floggersplitlogstatement floggerwithcause floggerwithoutcause hashcodetostring identityhashmapusage immutablemembercollection immutablesetforcontains initializeinline invalidthrowslink isinstanceincompatibletype javautildate jodaconstructors jodadatetimeconstants longfloatconversion membername misplacedscopeannotations objectequalsforprimitives optionalmapunusedvalue returnsnullcollection truncated commits e ac release error prone f support pre jdk early desugaring of jcnewclass dont set checks as disableable false in external a f handle classes with explicit enclosing instances in differentnamebutsame a symbolislocal was renamed in jdk fb d dont suggest private constructors for abstract classes d df fix handling of super method references in unnecessarymethodreference b eaa only report unnecessaryoptionalget findings if the receivers are identical c address a visiblefortestingused finding generate javadoc in ci pipeline additional commits viewable in compare view updates error_prone_test_helpers from to release notes sourced from error_prone_test_helperss releases error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield fixed nosuchelementexception crash in restrictedapichecker false positive in differentnamebutsame false positive in unnecessaryoptionalget false positive in unnecessarymethodreference fixed a regression in jdk ea support error prone new checks banserializableread catchingunchecked computeifabsentambiguousreference dangerousliteralnull datechecker differentnamebutsame donotcallsuggester donotclaimannotations donotmockautovalue floggerformatstring floggerlogvarargs floggerlogwithcause floggermessageformat floggerpassedaround floggerredundantisenabled floggerrequiredmodifiers floggersplitlogstatement floggerwithcause floggerwithoutcause hashcodetostring identityhashmapusage immutablemembercollection immutablesetforcontains initializeinline invalidthrowslink isinstanceincompatibletype javautildate jodaconstructors jodadatetimeconstants longfloatconversion membername misplacedscopeannotations objectequalsforprimitives optionalmapunusedvalue returnsnullcollection truncated commits e ac release error prone f support pre jdk early desugaring of jcnewclass dont set checks as disableable false in external a f handle classes with explicit enclosing instances in differentnamebutsame a symbolislocal was renamed in jdk fb d dont suggest private constructors for abstract classes d df fix handling of super method references in unnecessarymethodreference b eaa only report unnecessaryoptionalget findings if the receivers are identical c address a visiblefortestingused finding generate javadoc in ci pipeline additional commits viewable in compare view dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself errorprone is catching actual issues i will work through them
2094,2176,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error_prone_cores releases error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield fixed nosuchelementexception crash in restrictedapichecker false positive in differentnamebutsame false positive in unnecessaryoptionalget false positive in unnecessarymethodreference fixed a regression in jdk ea support error prone new checks banserializableread catchingunchecked computeifabsentambiguousreference dangerousliteralnull datechecker differentnamebutsame donotcallsuggester donotclaimannotations donotmockautovalue floggerformatstring floggerlogvarargs floggerlogwithcause floggermessageformat floggerpassedaround floggerredundantisenabled floggerrequiredmodifiers floggersplitlogstatement floggerwithcause floggerwithoutcause hashcodetostring identityhashmapusage immutablemembercollection immutablesetforcontains initializeinline invalidthrowslink isinstanceincompatibletype javautildate jodaconstructors jodadatetimeconstants longfloatconversion membername misplacedscopeannotations objectequalsforprimitives optionalmapunusedvalue returnsnullcollection truncated commits e ac release error prone f support pre jdk early desugaring of jcnewclass dont set checks as disableable false in external a f handle classes with explicit enclosing instances in differentnamebutsame a symbolislocal was renamed in jdk fb d dont suggest private constructors for abstract classes d df fix handling of super method references in unnecessarymethodreference b eaa only report unnecessaryoptionalget findings if the receivers are identical c address a visiblefortestingused finding generate javadoc in ci pipeline additional commits viewable in compare view updates error_prone_test_helpers from to release notes sourced from error_prone_test_helperss releases error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield fixed nosuchelementexception crash in restrictedapichecker false positive in differentnamebutsame false positive in unnecessaryoptionalget false positive in unnecessarymethodreference fixed a regression in jdk ea support error prone new checks banserializableread catchingunchecked computeifabsentambiguousreference dangerousliteralnull datechecker differentnamebutsame donotcallsuggester donotclaimannotations donotmockautovalue floggerformatstring floggerlogvarargs floggerlogwithcause floggermessageformat floggerpassedaround floggerredundantisenabled floggerrequiredmodifiers floggersplitlogstatement floggerwithcause floggerwithoutcause hashcodetostring identityhashmapusage immutablemembercollection immutablesetforcontains initializeinline invalidthrowslink isinstanceincompatibletype javautildate jodaconstructors jodadatetimeconstants longfloatconversion membername misplacedscopeannotations objectequalsforprimitives optionalmapunusedvalue returnsnullcollection truncated commits e ac release error prone f support pre jdk early desugaring of jcnewclass dont set checks as disableable false in external a f handle classes with explicit enclosing instances in differentnamebutsame a symbolislocal was renamed in jdk fb d dont suggest private constructors for abstract classes d df fix handling of super method references in unnecessarymethodreference b eaa only report unnecessaryoptionalget findings if the receivers are identical c address a visiblefortestingused finding generate javadoc in ci pipeline additional commits viewable in compare view dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself errorprone is catching actual issues i will work through them
2105,2176,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error_prone_cores releases error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield fixed nosuchelementexception crash in restrictedapichecker false positive in differentnamebutsame false positive in unnecessaryoptionalget false positive in unnecessarymethodreference fixed a regression in jdk ea support error prone new checks banserializableread catchingunchecked computeifabsentambiguousreference dangerousliteralnull datechecker differentnamebutsame donotcallsuggester donotclaimannotations donotmockautovalue floggerformatstring floggerlogvarargs floggerlogwithcause floggermessageformat floggerpassedaround floggerredundantisenabled floggerrequiredmodifiers floggersplitlogstatement floggerwithcause floggerwithoutcause hashcodetostring identityhashmapusage immutablemembercollection immutablesetforcontains initializeinline invalidthrowslink isinstanceincompatibletype javautildate jodaconstructors jodadatetimeconstants longfloatconversion membername misplacedscopeannotations objectequalsforprimitives optionalmapunusedvalue returnsnullcollection truncated commits e ac release error prone f support pre jdk early desugaring of jcnewclass dont set checks as disableable false in external a f handle classes with explicit enclosing instances in differentnamebutsame a symbolislocal was renamed in jdk fb d dont suggest private constructors for abstract classes d df fix handling of super method references in unnecessarymethodreference b eaa only report unnecessaryoptionalget findings if the receivers are identical c address a visiblefortestingused finding generate javadoc in ci pipeline additional commits viewable in compare view updates error_prone_test_helpers from to release notes sourced from error_prone_test_helperss releases error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield fixed nosuchelementexception crash in restrictedapichecker false positive in differentnamebutsame false positive in unnecessaryoptionalget false positive in unnecessarymethodreference fixed a regression in jdk ea support error prone new checks banserializableread catchingunchecked computeifabsentambiguousreference dangerousliteralnull datechecker differentnamebutsame donotcallsuggester donotclaimannotations donotmockautovalue floggerformatstring floggerlogvarargs floggerlogwithcause floggermessageformat floggerpassedaround floggerredundantisenabled floggerrequiredmodifiers floggersplitlogstatement floggerwithcause floggerwithoutcause hashcodetostring identityhashmapusage immutablemembercollection immutablesetforcontains initializeinline invalidthrowslink isinstanceincompatibletype javautildate jodaconstructors jodadatetimeconstants longfloatconversion membername misplacedscopeannotations objectequalsforprimitives optionalmapunusedvalue returnsnullcollection truncated commits e ac release error prone f support pre jdk early desugaring of jcnewclass dont set checks as disableable false in external a f handle classes with explicit enclosing instances in differentnamebutsame a symbolislocal was renamed in jdk fb d dont suggest private constructors for abstract classes d df fix handling of super method references in unnecessarymethodreference b eaa only report unnecessaryoptionalget findings if the receivers are identical c address a visiblefortestingused finding generate javadoc in ci pipeline additional commits viewable in compare view dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself errorprone is catching actual issues i will work through them
2173,2179,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fix reversed order of verify parameters for consistency the parameters of the methodmockedstaticverify verificationmode verification have been swapped tomockedstaticverify verification verificationmode as this order is already used inmockitoverify t verificationmode fixes check list x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ codecov https codecovio gh mockito mockito pull srcpr&elh report merging https codecovio gh mockito mockito pull srcpr&eldesc e into release x https codecovio gh mockito mockito commit f bae c c d ce db ab edddf eeldesc f ba will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder https codecovio gh mockito mockito pull srcpr&eltree diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree coverage δ complexity δ src main java org mockito mockedstaticjava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by nb nrzwrtdgf awmuamf yq in java org mockito internal mockedstaticimpljava https codecovio gh mockito mockito pull diffsrcpr&eltreediff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc nb nrzwrtdgf awnjbxbslmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue legend click here to learn more https docscodecovio docs codecov delta δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter last update f ba e https codecovio gh mockito mockito pull srcpr&ellastupdated read the comment docs https docscodecovio docs pull request comments
2154,2193,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes javalangobject is now instrumented again seems like the object type does not ever need instrumentationtargetsremove objectclass in orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation set boolean was a bit over the top i e it does seem to break mocking of tostring when inherited from javalangobject i added a test for this which should have been there in the first place due to this i am still not sure if removing the line is safe even if the whole test suite is green please review carefully yeah good point i dont know why i ever added that
2235,2236,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,bugfix verify on a wrapped mock fails pr for verify on a wrapped mock fails with unfinishedverificationexception
2238,2241,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes do not omit stack frames of causing class this pr will fix this problems described in the main cause wasnt the hiderecursivecall method but tryinvoke methodin tryinvoke the original stacktrace will be passed through the configured filter after it has been modified by hiderecursivecall when calling hiderecursivecall the second argument current is set the the length of the stack trace of the causing exceptionthis will omit too much stack frames ultimately skipping the lines containing of the root exception causein this patch tryinvoke will try to find a better starting frame when an exception is caughtit will do this by investigating the created stack trace and look for the first entry matching the class name of the instance object given to tryinvoke this offset will then be given to hiderecursivecall as current argument instead of using the stack trace lengthif there is no instance object null the length of the stack trace is used like before
218,2259,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,but invoked here lists the invocation parameters supersedes and closes
2242,2263,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes make exceptions for inorderverify more standard spec… …ific adds nullinsteadofmockexception and notamockexception checks to inorderverify before checking if mocks were passed in during creation of inordersee https githubcom mockito mockito issues for a description of the issueinorderverify mock now first checks if the passed argument is null and if the mock is in fact a mock and gives appropriate exception messages before checking if the passed in argument was passed during creation of inorder object and therefore giving a less specific error message code change loop checklist x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ indeed thanks
2266,2267,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,include cause when fieldreader fails to access field fixes simply passes the exception cause to the thrown mockitoexception codecov https codecovio gh mockito mockito pull srcpr&elh &utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito report merging https codecovio gh mockito mockito pull srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito e c into release x https codecovio gh mockito mockito commit fa a e c a f b d d e e eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito fa a will increase coverage by the diff coverage is n a exclamation current head e c differs from pull request most recent head c ea consider uploading reports for the commit c ea to get more accurate results impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder &utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito https codecovio gh mockito mockito pull srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito coverage δ complexity δ mockito internal util reflection fieldreaderjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl jlzmxly rpb vrmllbgrszwfkzxiuamf yq to internal util concurrent weakconcurrentmapjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbmn cnjlbnqvv vha nvbmn cnjlbnrnyxauamf yq continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito legend click here to learn more https docscodecovio docs codecov deltautm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito last update fa a c ea https codecovio gh mockito mockito pull srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito read the comment docs https docscodecovio docs pull request commentsutm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito i can confirm that the regression test fails when the change to fieldreader is reverted
2273,2274,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes add missing parenthesis to javadoc example adds the missing parenthesis to the argumentmatcher javadoc example checklist x read the contributing guide https githubcom mockito mockito blob release x github contributingmd x pr should be motivated ie what does it fix why and if relevant how x if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change x avoid other runtime dependencies x meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years x the pull request follows coding style x mention fixes in the description _if relevant_ x at least one commit should mention fixes _if relevant_ codecov https codecovio gh mockito mockito pull srcpr&elh &utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito report merging https codecovio gh mockito mockito pull srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito f d into release x https codecovio gh mockito mockito commit c fe d bd ec d a f e eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito c fe will increase coverage by the diff coverage is n a impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder &utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito https codecovio gh mockito mockito pull srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito diff coverage diff release x coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito coverage δ complexity δ to internal util concurrent weakconcurrentmapjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbmn cnjlbnqvv vha nvbmn cnjlbnrnyxauamf yq al creation bytebuddy inlinebytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zwnvzgvhzw lcmf b iuamf yq l creation bytebuddy inlinebytebuddymockmakerjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvsw saw lqnl zuj zgr tw ja ha vylmphdme continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito legend click here to learn more https docscodecovio docs codecov deltautm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito last update c fe f d https codecovio gh mockito mockito pull srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito read the comment docs https docscodecovio docs pull request commentsutm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito
2257,2298,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error_prone_cores releases error prone everything in error prone plus an additional fix for jdk error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete bug reports for issues with java are welcome ​inlineme is a deprecation mechanism that allows automated tools to cleanup existing callers http errorproneinfo docs inlineme new checks equalsnull missingbraces nullableprimitivearray optionalmapunusedvalue testparametersnotinitialized closed issues commits b release error prone ff improve jdk support a c enable returnvalueignored checking of collection iterable and iterat c a d fix a jdk incompatibility d add tests for method invocation bug with the inliner c f c fix a jdk only test d bf internal refactoring d update error prone ci to use jdk as latest and add ea f ee fix a jdk incompatibility b c d fix some crashes involving records additional commits viewable in compare view updates error_prone_test_helpers from to release notes sourced from error_prone_test_helperss releases error prone everything in error prone plus an additional fix for jdk error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete bug reports for issues with java are welcome ​inlineme is a deprecation mechanism that allows automated tools to cleanup existing callers http errorproneinfo docs inlineme new checks equalsnull missingbraces nullableprimitivearray optionalmapunusedvalue testparametersnotinitialized closed issues commits b release error prone ff improve jdk support a c enable returnvalueignored checking of collection iterable and iterat c a d fix a jdk incompatibility d add tests for method invocation bug with the inliner c f c fix a jdk only test d bf internal refactoring d update error prone ci to use jdk as latest and add ea f ee fix a jdk incompatibility b c d fix some crashes involving records additional commits viewable in compare view dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself dependabot rebase dependabot squash and merge
2260,2298,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error_prone_cores releases error prone everything in error prone plus an additional fix for jdk error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete bug reports for issues with java are welcome ​inlineme is a deprecation mechanism that allows automated tools to cleanup existing callers http errorproneinfo docs inlineme new checks equalsnull missingbraces nullableprimitivearray optionalmapunusedvalue testparametersnotinitialized closed issues commits b release error prone ff improve jdk support a c enable returnvalueignored checking of collection iterable and iterat c a d fix a jdk incompatibility d add tests for method invocation bug with the inliner c f c fix a jdk only test d bf internal refactoring d update error prone ci to use jdk as latest and add ea f ee fix a jdk incompatibility b c d fix some crashes involving records additional commits viewable in compare view updates error_prone_test_helpers from to release notes sourced from error_prone_test_helperss releases error prone everything in error prone plus an additional fix for jdk error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete bug reports for issues with java are welcome ​inlineme is a deprecation mechanism that allows automated tools to cleanup existing callers http errorproneinfo docs inlineme new checks equalsnull missingbraces nullableprimitivearray optionalmapunusedvalue testparametersnotinitialized closed issues commits b release error prone ff improve jdk support a c enable returnvalueignored checking of collection iterable and iterat c a d fix a jdk incompatibility d add tests for method invocation bug with the inliner c f c fix a jdk only test d bf internal refactoring d update error prone ci to use jdk as latest and add ea f ee fix a jdk incompatibility b c d fix some crashes involving records additional commits viewable in compare view dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself dependabot rebase dependabot squash and merge
2282,2298,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error_prone_cores releases error prone everything in error prone plus an additional fix for jdk error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete bug reports for issues with java are welcome ​inlineme is a deprecation mechanism that allows automated tools to cleanup existing callers http errorproneinfo docs inlineme new checks equalsnull missingbraces nullableprimitivearray optionalmapunusedvalue testparametersnotinitialized closed issues commits b release error prone ff improve jdk support a c enable returnvalueignored checking of collection iterable and iterat c a d fix a jdk incompatibility d add tests for method invocation bug with the inliner c f c fix a jdk only test d bf internal refactoring d update error prone ci to use jdk as latest and add ea f ee fix a jdk incompatibility b c d fix some crashes involving records additional commits viewable in compare view updates error_prone_test_helpers from to release notes sourced from error_prone_test_helperss releases error prone everything in error prone plus an additional fix for jdk error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete bug reports for issues with java are welcome ​inlineme is a deprecation mechanism that allows automated tools to cleanup existing callers http errorproneinfo docs inlineme new checks equalsnull missingbraces nullableprimitivearray optionalmapunusedvalue testparametersnotinitialized closed issues commits b release error prone ff improve jdk support a c enable returnvalueignored checking of collection iterable and iterat c a d fix a jdk incompatibility d add tests for method invocation bug with the inliner c f c fix a jdk only test d bf internal refactoring d update error prone ci to use jdk as latest and add ea f ee fix a jdk incompatibility b c d fix some crashes involving records additional commits viewable in compare view dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself dependabot rebase dependabot squash and merge
2324,2298,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error_prone_cores releases error prone everything in error prone plus an additional fix for jdk error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete bug reports for issues with java are welcome ​inlineme is a deprecation mechanism that allows automated tools to cleanup existing callers http errorproneinfo docs inlineme new checks equalsnull missingbraces nullableprimitivearray optionalmapunusedvalue testparametersnotinitialized closed issues commits b release error prone ff improve jdk support a c enable returnvalueignored checking of collection iterable and iterat c a d fix a jdk incompatibility d add tests for method invocation bug with the inliner c f c fix a jdk only test d bf internal refactoring d update error prone ci to use jdk as latest and add ea f ee fix a jdk incompatibility b c d fix some crashes involving records additional commits viewable in compare view updates error_prone_test_helpers from to release notes sourced from error_prone_test_helperss releases error prone everything in error prone plus an additional fix for jdk error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete bug reports for issues with java are welcome ​inlineme is a deprecation mechanism that allows automated tools to cleanup existing callers http errorproneinfo docs inlineme new checks equalsnull missingbraces nullableprimitivearray optionalmapunusedvalue testparametersnotinitialized closed issues commits b release error prone ff improve jdk support a c enable returnvalueignored checking of collection iterable and iterat c a d fix a jdk incompatibility d add tests for method invocation bug with the inliner c f c fix a jdk only test d bf internal refactoring d update error prone ci to use jdk as latest and add ea f ee fix a jdk incompatibility b c d fix some crashes involving records additional commits viewable in compare view dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself dependabot rebase dependabot squash and merge
230,2306,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,use the parent classloader if the context classloader is a child of it this should only affect cases that previously would have thrown anexceptionfixes there are some formatting issues that should be automatically fixed if you run gradlew spotlessapply locally formatting issues fixed codecov https codecovio gh mockito mockito pull srcpr&elh &utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito report merging https codecovio gh mockito mockito pull srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito b into main https codecovio gh mockito mockito commit c ea a f aad f a ce c bc eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito c ea will decrease coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder &utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito https codecovio gh mockito mockito pull srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito diff coverage diff main coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito coverage δ creation bytebuddy subclassbytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrly kzudlbmvyyxrvci qyxzh arrow_down to internal util concurrent weakconcurrentmapjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbmn cnjlbnqvv vha nvbmn cnjlbnrnyxauamf yq arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito legend click here to learn more https docscodecovio docs codecov deltautm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito last update c ea b https codecovio gh mockito mockito pull srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito read the comment docs https docscodecovio docs pull request commentsutm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito thanks charlesmunger for working on this and the regression test i have since encountered two cases where this pr introduces breakage mocking a private abstract class while using https githubcom google gwtmockito this worked before because gwtmockito was stripping final and other modifiers off of loaded classes but now the changed loader behavior causes it to fail a custom classloader that instruments some but not all of the packages it loads delegating others to its parentit turns out that the root of these problems is loaderbuilderbuild mockmethodinterceptorclassgetclassloader i didnt actually intend to include that it came from the x release branch when i initially forked the repo and was removed in bc be d fb dcd b ced e fc originally sorry for the error ill send a pr to fix
2303,2312,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,undo parent for multipleparentsclassloader ea f c adf cea e b a inadvertently undid a change from bc be d fb dcd b ced e fc which breaks behavior under some classloaders that special case mockito classes use of an explicit parent with multipleparentsclassloader appears to be discouraged in the documentation alsofollowup for codecov https codecovio gh mockito mockito pull srcpr&elh &utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito report merging https codecovio gh mockito mockito pull srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito bd into main https codecovio gh mockito mockito commit d bc e be f c ce b cf b eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito d will increase coverage by the diff coverage is impacted file tree graph https codecovio gh mockito mockito pull graphs treesvgwidth &height &srcpr&tokenmx slder &utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito https codecovio gh mockito mockito pull srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito diff coverage diff main coverage complexity files lines branches hits misses partials impacted files https codecovio gh mockito mockito pull srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito coverage δ creation bytebuddy subclassbytecodegeneratorjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc jcmvhdglvbi iexrlynvkzhkvu viy xhc ncexrly kzudlbmvyyxrvci qyxzh arrow_up to internal util concurrent weakconcurrentmapjava https codecovio gh mockito mockito pull diffsrcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockitodiff c jjl haw vamf ys vcmcvbw ja l by pbnrlcm hbc dglsl nvbmn cnjlbnqvv vha nvbmn cnjlbnrnyxauamf yq arrow_up continue to review full report at codecov https codecovio gh mockito mockito pull srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito legend click here to learn more https docscodecovio docs codecov deltautm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito δ absolute impact not affected missing data powered by codecov https codecovio gh mockito mockito pull srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito last update d bd https codecovio gh mockito mockito pull srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito read the comment docs https docscodecovio docs pull request commentsutm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr comments&utm_termmockito i spent some time thinking about it and reduced the test case to something understandable
2303,2318,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,check package privacy of method params this patch handles methods where an interface uses a package private type as a param or return value without it the generated mock class will produce abstractmethoderror since its methods do not actually override the methods of the interfacesfollowup on i have run this through googles internal tests and it doesnt break anything
