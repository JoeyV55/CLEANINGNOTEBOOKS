Named,issueNumber,prNumber,Util,NLP,APM,Network,DB,Interpreter,Logging,DataStructure,i18n,DevOps,Logic,Microservices,ML,Test,Search,IO,UI,Parser,Security,Cloud,BigData,App,GIS,corpus
0,99,103,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes issue #99 : returns_deep_stubs automatically tries to create serializable mocks see issue #99 what it does is propagating the serializing mode of the parent upon each mock creation when deep stubbingbefore each mock created where made serializable by default which is not an issue when the types have a default no arg constructor but may become problematic when the type didnt have one mockito would report an error explaining that it couldnt mock this type awesome :)thanks brice for fixing the problem new version is already out :dancer: btw the release notes automation is based on the titles of the tickets in github: the better the title the better the release notes: https://githubcom/mockito/mockito/blob/master/doc/release-notes/officialmd || ok ah yeah it makes sense i may be able to update it on the phone ||
1,128,142,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,"fix #128 : deep stubbing with generic responses in the call chain is not working   also i kind of like the original unit test in #128 i propose you include it in this pr it could be name like : `orgmockitousagebugsdeepstubsdeepstubfailingwhengenricnestedasrawtypetest` if you can amend the change ill merge the pr || done - not sure its exactly what you were asking for but i dont see other option at the moment || the final diff looks good to me !could you squash the 6 commits in a single one (in the same branch / pr) ? better for the history ) || btw you should be able to do that this way : ``` bashgit reset --soft head~6git commit --message""fixes issue #128 for deep stubs with mixed raw generics type""``` || i was off for few days - i see szczepan did the job so theres noting left for me :)btw happy new year!cheers || "
2,155,176,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"make propertyandsetterinjection field sorting consistent #155 is caused by calling `collectionssort` with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type `[iterable integer number]` it gives `iterable  integer` and `iterable  number` but also an inconsistent `integer < number`im not sure its possible to sort consistently with a stateless `comparator` so this change switches to a `sortsupertypeslast` method that first sorts by name and then shuffles any subclasses to after their superclasses its slower but should be deterministic the existing tests are preserved by leaving behind a dummy `comparator` that uses the new sort method new tests make sure that the sorted ordering doesnt depend on the original orderfixes #155 wow nice pr thanks for diving in the problem !so i agree on the idea but ive mixed feelings on having a custom sort therealso i agree speed is not the real issue here anyway id prefer the algorithm to be deterministic || finally i like the comment in the commit messages though it would be better if the last 2 commit were amended properly :) || overall its really nice work :sparkles: i you think its possible to rewrite with a comparator and rewrite a clean history ill merge _asap_ :) || thanks ive rebased to clean up historyusing `comparator` is trickier id really prefer to do that and i spent some time thinking about what state could be calculated to allow pairwise comparison however this is essentially a topological sort and i cant think of a way to do this short of using a custom sort and then preparing a `comparator` that checks indexes in that versionactually checking now thats exactly the fallback suggested in [this stackoverflow answer](http://stackoverflowcom/questions/28099307/how-to-write-a-transitive-comparator-when-equality-implies-order-doesnt-matt):> the only way i see that it would be possible to do using a comparator would be to first do a topological sort and then using the indexes of the objects in this sorting as keys when implementing the comparatorid be happy to add any more tests or change the style to increase confidence that its a safe implementation || mmmmh ok it would definitely be better to have the comparator but that seems a bit complex as you said so i propose 2 things then :1 without comparator it would be better to externalize the sorting in some class instead of a method could be used like       ``` java   sorted  new orgmockitointernalutilreflectiontopologysorter()sort()   ```2 thanks for the amend i propose that the proper commits starts `fixes #155` like you did in one of the previous commits github can track identify the keyword and the issue referencesorry to be nitpicky but as soon as the pr is merged there will be an automated release :)also tests are finethanks for the feedback and the interesting links :) || :star2: thanks for the modifications @josephw perfect pr :) || by the way do you have any remarks on the contributing guide (missing info style guideline git stuff etc) || its great that youve got a contribution guide i think a couple of the things i missed are mentioned by it but i might over-emphasise:>  at least one commit message in the pr contains ""fixes #id""and suggest a template commit message> clean commit historyyou could make the history rewriting explicit here something like we prefer a clean commit history rebased and squashed if necessary so that each commit clearly changes one things and there are no extraneous fix-ups?thanks for the feedback -- everything else seemed specific enough that a review was the only way to pick it up || @josephw ok thanks for the feedback too || "
3,200,201,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #200 : argumentcaptorforclass is more friendly with generic types we modify the signature of `argumentcaptorfromclass(class<t>)` to better express the type relationship between the argument and the return type  there is no change to the behavior of the method  this change is to allow expressions such as:``` javaargumentcaptor<consumer<string>> captor  argumentcaptorfromclass(consumerclass)```to type check which is desirable as a convenience to users of `argumentcaptor`we also add two tests to document this extension to the api both of which fail to compile without this change to `argumentcaptorfromclass`  these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile-time properties of `argumentcaptor` not its behavior almost perfect pr :)maybe the contributing guide is missing something here but the exemple `#id` should have been expended to the real gh issue number actually the commit message should be something like :```fixes #200 : tweak generic signature of argumentcaptorfromclass```ill merge it asap :)thanks for the pr by the way ! || i updated the contributing guide with an exemple :)if youre unsure how to rename the commit :``` bashgit commit --amendgit push --force``` || the travis build is broken in some way your code is fine thanks for the change :) ||
4,187,202,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,better protection against incompatible returned value of default answer and get safely mock name fixes issue #187the value returned by the default answer is now validated to make sure there wont be a `classcastexception` if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a `classcastexception` when reporting a verification issue build is ok but fail on travis ||
5,197,207,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes #197 : blocks ability to use negative value for timeout() and after() method it should fix issue #197 if user uses mockitoafter() or mockitotimeout() with negative values then friendly reminder exception with details will be thrown first commit fixes the issue second one is a little bit of refactoring: (mostly reducing visibility and increasing encapsulation)fixes #197 : refactoring: - removed unused field from verificationovertimeimpl and also from constructors signature- improved encapsulation by removing 3 getters from verificationovertimeimpl- reduced visibility of few constructors in timeout and after classes   || nice pull request thank you !if comments are addressed ill merge right away ! || about timeouttest please look at it the whole point of this test is to pass timer object and do mocking/verifications on it if i use public constructor for this test i will not to able to pass timer objectthis is why constructor with this signature timeout(long pollingperiodmillis verificationmode delegate timer timer) was introduced by author in first place should i really touch it?btw there in so such thing like aftertest || oh yeah i see fair point just ignore what i said on thatignore the `aftertest` too i was a bit off this morning thanks for the feedback :) ||
6,188,211,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,argumentcaptor no longer working for varargs fixes #188  these commits should fix issue with capturing varargs hi thanks for the pri will take a look at it soon and probably merge it in the mean time git history is fine except the merge commit can you get rid of it ?otherwise ill have to cherry-pick relevant commits || i will try to do rebase and then do force push hope it will work take a lookhm i see merge conflicts probably due your activity today :) || commit looks good but indeed theres some conflict to narrow down ill take a look later thanks for the rebase ) || now it should work || thanks ) ||
7,212,221,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions follow-up to #212 thanks @mkordas  ||
8,203,222,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #203 : introduce bdd inorder verification follow-up to #203  
9,206,223,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,[#206] fix issue related to windows path problem was caused by file separator replacing hardcoded char / by fileseperatorchar solves issue in the same file there is second occurence of this character but it is used with getresource(path) method -  in such case / is only acceptable separator do i need to do something special in order to build with java 8? it looks like problem with default method - i create branch from master || dont worry about that error ill push the fix at some point todaythanks for fixing the windows test issue :) ||
10,228,229,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes #228: fixed a verify() call example in @captor javadoc   thanks for the fix :) ||
11,233,234,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,cannot instantiate type with public method of a public parent class having a non public types in signature this should fix #233(awaiting delivery of bytebuddy fix https://githubcom/raphw/byte-buddy/commit/6f223d93ee57b199abf0e7abaf4837df6d041f41)thanks @raphw actually fixed in bytebuddy 0610 in commit https://githubcom/raphw/byte-buddy/commit/1cf6c6aa0ef0ff47238e58f27df16637cdfe96c2 ||
12,220,235,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #220 constructor invoking methods raise npe in some recent version of mockito `@spy` annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls (unconfirmed at this point)this pr aims to fix that by calling real code if interceptor is not set which can only happen if `constructorinstanciator` is usedthanks to @raphw for his tip on this regard as well : https://githubcom/raphw/byte-buddy/issues/32#issuecomment-113269844 i just saw that you chose to invoke the real method instead of returning a default value that might cause problems when the invoked method expects some state then again if the constructor is called the constructor might always receive correct input values?i added another interceptor to make the field receival a bit more convenient and runtime efficient and if you wanted to aupress the calls from the constructor (might be unsuitable for spies) i think i also found a better alternative for thati just send you a pull request on monday || yes for constructors that made sense (when spy is instantiated with constructor) though i agree with you other than this scenario it shouldnt be authorized i didnt yet wrap entirely my head around this yetim not yet sure how to ensure a bit more safety there ||
13,251,252,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,[#251] migrate fest assert code to assertj fixes #251 ## [current coverage](https://codecovio/github/mockito/mockito?ref5f4dbe782093df70566ff0ee1bacc3baf5aa1158) is `8347%`> merging **#252** into **master** will change coverage by **-006%** by [`5f4dbe7`](https://githubcom/mockito/mockito/commit/5f4dbe782093df70566ff0ee1bacc3baf5aa1158)#### coverage diff``` diff@@            master    #252   diff @@  files          270     270         stmts         4585    4585         branches       745     745         methods          0       0       - hit           3830    3827     -3  partial        220     220       - missed         535     538     +3```---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref5f4dbe782093df70566ff0ee1bacc3baf5aa1158)1 `+013%` via [ializationissuejava#2833](https://codecovio/github/mockito/mockito/src/org/mockito/exceptions/base/mockitoserializationissuejava?ref5f4dbe782093df70566ff0ee1bacc3baf5aa1158#28) 2 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/org/mockito/internal/invocation/serializablemethodjava?ref5f4dbe782093df70566ff0ee1bacc3baf5aa1158#97) 3 `+011%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/org/mockito/internal/configuration/plugins/pluginloaderjava?ref5f4dbe782093df70566ff0ee1bacc3baf5aa1158#60) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref5f4dbe782093df70566ff0ee1bacc3baf5aa1158)_> powered by [codecov](https://codecovio) || :+1:  ||
14,260,261,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"fixes #260: typo in documentation very minor typo in documentation: https://githubcom/mockito/mockito/issues/260theres an extra ""at"" (@) in the documentationbefore it reads:""annotating the junit test class with a @runwith(@mockitojunitrunnerclass)""after it reads:""annotating the junit test class with a @runwith(mockitojunitrunnerclass)""![image](https://cloudgithubusercontentcom/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749png) ## [current coverage](https://codecovio/github/mockito/mockito?ref298330658c63b36a154470f742e829bdf713c921) is `837%`> merging **#261** into **master** will change coverage by **0%** by [`2983306`](https://githubcom/mockito/mockito/commit/298330658c63b36a154470f742e829bdf713c921)#### coverage diff``` diff@@            master   #261   diff @@  files          270    270         stmts         4583   4583         branches       745    745         methods          0      0         hit           3836   3836         partial        220    220         missed         527    527       ```---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref298330658c63b36a154470f742e829bdf713c921)1 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref298330658c63b36a154470f742e829bdf713c921#97) 2 `+011%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref298330658c63b36a154470f742e829bdf713c921#122) 3 `+011%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref298330658c63b36a154470f742e829bdf713c921#60) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref298330658c63b36a154470f742e829bdf713c921)_> powered by [codecov](https://codecovio) || cool thanks for the fix :) ||"
15,268,270,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,issue #268: added support for generic arrays as return types solves https://githubcom/mockito/mockito/issues/268 by explicitly checking for return types that represent a generic array and by resolving for the arrays component type ## [current coverage](https://codecovio/github/mockito/mockito?ref76f83f4d499890e7fd1c873966f66222d0a6b5d8) is `8373%`> merging **#270** into **master** will increase coverage by **+003%** as of [`76f83f4`](https://codecovio/github/mockito/mockito/commit/76f83f4d499890e7fd1c873966f66222d0a6b5d8)``` diff@@            master    #270   diff @@  files          270     270         stmts         4584    4603    +19  branches       745     748     +3  methods          0       0       + hit           3837    3854    +17  partial        220     220       - missed         527     529     +2```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/fe5cbcfb2a986a58d24cc7bec3a707eab06f767376f83f4d499890e7fd1c873966f66222d0a6b5d8)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref76f83f4d499890e7fd1c873966f66222d0a6b5d8)1 `+019%` via [rningscollectorjava#2331](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/debugging/warningscollectorjava?ref76f83f4d499890e7fd1c873966f66222d0a6b5d8#23) 2 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref76f83f4d499890e7fd1c873966f66222d0a6b5d8#97) 3 `+011%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref76f83f4d499890e7fd1c873966f66222d0a6b5d8#60) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref76f83f4d499890e7fd1c873966f66222d0a6b5d8)_> powered by [codecov](https://codecovio) ||
16,243,280,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,reintroduce null check on mockutilismock() will fix #243 - null check on mockutilismock() was incorrectly removed after successive refactoring this pr reintroduces null check ## [current coverage](https://codecovio/github/mockito/mockito?ref27e074066ecec55ed086f7430246ef1c8818819f) is `8373%`> merging **#280** into **master** will not affect coverage as of [`27e0740`](https://codecovio/github/mockito/mockito/commit/27e074066ecec55ed086f7430246ef1c8818819f)``` diff@@            master    #280   diff @@  files          270     270         stmts         4627    4627         branches       753     753         methods          0       0         hit           3874    3874         partial        221     221         missed         532     532       ```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/2f88f06d6b0e851ff8ed2125085d3faac3f4ee1b27e074066ecec55ed086f7430246ef1c8818819f) as of [`27e0740`](https://codecovio/github/mockito/mockito/commit/27e074066ecec55ed086f7430246ef1c8818819f)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref27e074066ecec55ed086f7430246ef1c8818819f)1 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref27e074066ecec55ed086f7430246ef1c8818819f#97) 2 `+010%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref27e074066ecec55ed086f7430246ef1c8818819f#60) 3 `+010%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref27e074066ecec55ed086f7430246ef1c8818819f#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref27e074066ecec55ed086f7430246ef1c8818819f)_> powered by [codecov](https://codecovio) updated on successful ci builds ||
17,124,287,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,implement verificationcollector which can collect multiple verifications it will report in the end the result of multiple statements fixes #124 ## [current coverage](https://codecovio/github/mockito/mockito?ref08b0daeea01e17a63b0c817ff3139ab918aec710) is `8389%`> merging **#287** into **master** will increase coverage by **+009%** as of [`08b0dae`](https://codecovio/github/mockito/mockito/commit/08b0daeea01e17a63b0c817ff3139ab918aec710)``` diff@@            master    #287   diff @@  files          269     270     +1  stmts         4620    4651    +31  branches       752     753     +1  methods          0       0       + hit           3872    3902    +30  partial        220     220       - missed         528     529     +1```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/495406554354a23980ac40fb991c1dae8f4105aa08b0daeea01e17a63b0c817ff3139ab918aec710) as of [`08b0dae`](https://codecovio/github/mockito/mockito/commit/08b0daeea01e17a63b0c817ff3139ab918aec710)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref08b0daeea01e17a63b0c817ff3139ab918aec710)1 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref08b0daeea01e17a63b0c817ff3139ab918aec710#97) 2 `+011%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref08b0daeea01e17a63b0c817ff3139ab918aec710#122) 3 `+011%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref08b0daeea01e17a63b0c817ff3139ab918aec710#60) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref08b0daeea01e17a63b0c817ff3139ab918aec710)_> powered by [codecov](https://codecovio) updated on successful ci builds || rebased branch and changed code according to comments of @bric3 to make the inner test test working the inner test should not end with `test` || nice rework || made the impl class package-protected || looks good to me || :+1: thanks for the reviews! || hey timthanks for cool contributions!!!what are your thoughts on improving the verificationcollector idea: the rule would automatically validate all verify methods at the end of the test this way there would be no need to call collectorverify at all (we could leave it as optional for gnarly cases) || @szczepiq i am not really sure what you mean could you provide a code snippet with what you would like to achieve? || current api:``` java     @rule     public verificationcollector collector  mockitojunitcollector()     @test     public void should_fail() {         imethods methods  mock(imethodsclass)         collectorverify(methods)bytereturningmethod()         collectorverify(methods)simplemethod()     }```desired api:``` java     @rule     public mockitorule rule  mockitojunitrule()lazyverify() //just an example no strong opinion here     @test     public void should_fail() {         imethods methods  mock(imethodsclass)         //below just works (strong opinion :)         verify(methods)bytereturningmethod()         verify(methods)simplemethod()     }``` || @szczepiq pr is up at #389 :smile:  ||
18,245,293,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,remove validateserializable() fixes #245:remove serializable validation ## [current coverage](https://codecovio/github/mockito/mockito?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26) is `8366%`> merging **#293** into **master** will decrease coverage by **-006%** as of [`0b451d2`](https://codecovio/github/mockito/mockito/commit/0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26)``` diff@@            master    #293   diff @@  files          270     270         stmts         4627    4623     -4  branches       753     752     -1  methods          0       0       - hit           3874    3868     -6+ partial        221     220     -1- missed         532     535     +3```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/a821f7b0ec47f3214bf6f0361df5deb211fa22140b451d2b9b7abc75d869bea7ac5fe2ee61d54b26) as of [`0b451d2`](https://codecovio/github/mockito/mockito/commit/0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26)1 `+016%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26#97) 2 `+011%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26#60) 3 `+011%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26)_> powered by [codecov](https://codecovio) updated on successful ci builds ||
19,365,373,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #365 simplify the invocationonmock-api to get a casted argument this pull request fixes #365 by introducing `t getargument(int)` and deprecating `t getargumentat(intclass<t>)` in type `invocationonmock` this improves the readabilty of custom answers this`string text  invocationgetargumentat(1stringclass)` can be replaced by `string text  invocationgetargument(1)` ## [current coverage](https://codecovio/github/mockito/mockito?ref5eff8e1b85f4e2877da9228249be1d976782d8a6) is `8545%`> merging **#373** into **master** will decrease coverage by **-003%** as of [`5eff8e1`](https://codecovio/github/mockito/mockito/commit/5eff8e1b85f4e2877da9228249be1d976782d8a6)``` diff@@            master    #373   diff @@  files          271     271         stmts         4693    4695     +2  branches       759     759         methods          0       0         hit           4012    4012         partial        167     167       - missed         514     516     +2```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/196ff979da156caa07e19f57e4849637d8bede1a5eff8e1b85f4e2877da9228249be1d976782d8a6) as of [`5eff8e1`](https://codecovio/github/mockito/mockito/commit/5eff8e1b85f4e2877da9228249be1d976782d8a6)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref5eff8e1b85f4e2877da9228249be1d976782d8a6)1 `+019%` via [rningscollectorjava#2331](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/debugging/warningscollectorjava?ref5eff8e1b85f4e2877da9228249be1d976782d8a6#23) 2 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref5eff8e1b85f4e2877da9228249be1d976782d8a6#97) 3 `+010%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref5eff8e1b85f4e2877da9228249be1d976782d8a6#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref5eff8e1b85f4e2877da9228249be1d976782d8a6)_> powered by [codecov](https://codecovio) updated on successful ci builds || looks good makes implementing custom answers easier indeed ||
20,374,386,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,remove deprecated code fixes for #374 - more left though ## [current coverage](https://codecovio/github/mockito/mockito?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c) is `8561%`> merging **#386** into **master** will increase coverage by **+013%** as of [`a27a7f9`](https://codecovio/github/mockito/mockito/commit/a27a7f906bc285dd4d21df86389e7f8a7c6a554c)``` diff@@            master    #386   diff @@  files          271     266     -5  stmts         4693    4679    -14  branches       759     759         methods          0       0       - hit           4012    4006     -6  partial        167     167       + missed         514     506     -8```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/196ff979da156caa07e19f57e4849637d8bede1aa27a7f906bc285dd4d21df86389e7f8a7c6a554c) as of [`a27a7f9`](https://codecovio/github/mockito/mockito/commit/a27a7f906bc285dd4d21df86389e7f8a7c6a554c)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c)1 `+019%` via [rningscollectorjava#2331](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/debugging/warningscollectorjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#23) 2 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#97) 3 `+011%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c)_> powered by [codecov](https://codecovio) updated on successful ci builds || @davidkarlsen - [x] the method [mockitostubvoid()](https://githubcom/mockito/mockito/blob/master/src/main/java/org/mockito/mockitojava#l1889) is deprecated but lacks the annotation `@deprecated` can you take care of it? || on it - ill be back! (the terminator) :) || @christianschwarz ok added removal of stubvoid in https://githubcom/davidkarlsen/mockito/tree/removestubvoid (which is a fork of this pr) || wdyt? || @davidkarlsen looks good! there is only one reference in the javadocs that should be removed i added a note in your commit  || @christianschwarz fixed - ping || @szczepiq intersted in this? || love it thanks! || @szczepiq what about https://githubcom/mockito/mockito/pull/394 (which is https://githubcom/davidkarlsen/mockito/tree/removestubvoid) - if you read the thread above? ||
21,374,404,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"fixes #374 removed deprecated classes and methods fixes #374 removed deprecated classes and methods thanks for this pr and for fixing the formatting could you also squash all commits to a single one for better versioning? thanks! || @raphw i fixed the line ending issue is it okay to squash the commits once the review of all commits is fine? the removal of some deprecated classes and methods was more than simply removing it eg mockitojunitrule if my implementation is not okay it can easily be reverted  || @raphw do you know why the check ""codecov/changes"" fail? || @christianschwarz fixing issue and will report back shortly || @christianschwarz can you submit an empty commit for another rebuild i believe this issue was fixed within the last 6 days thank you || i do not currently have good internet access (vacation) please repush (forced) and see if it worksthanksfor the effort this will be merged eventually  || @raphw and @stevepeak thanks for your support || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/404?srcpr) is **8583%**> merging [#404](https://codecovio/gh/mockito/mockito/pull/404?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **031%**1 2 files (not in diff) in `ito/internal/handler` were modified [more](https://codecovio/gh/mockito/mockito/commit/617a3d6f1b26dff24777e6f6c73905aa949b8b71/changes?srcpr#7372632f6d61696e2f6a6176612f6f72672f6d6f636b69746f2f696e7465726e616c2f68616e646c6572)    - misses `+2`    - hits `-2`2 1 files (not in diff) in `org/mockito/internal` were modified [more](https://codecovio/gh/mockito/mockito/commit/617a3d6f1b26dff24777e6f6c73905aa949b8b71/changes?srcpr#7372632f6d61696e2f6a6176612f6f72672f6d6f636b69746f2f696e7465726e616c)    - misses `+11`    - hits `-11`3 1 files (not in diff) in `ain/java/org/mockito` were modified [more](https://codecovio/gh/mockito/mockito/commit/617a3d6f1b26dff24777e6f6c73905aa949b8b71/changes?srcpr#7372632f6d61696e2f6a6176612f6f72672f6d6f636b69746f)    - misses `+1`    - hits `-1`4 file `nal/mockitocorejava` was modified [more](https://codecovio/gh/mockito/mockito/commit/617a3d6f1b26dff24777e6f6c73905aa949b8b71/changes?srcpr#7372632f6d61696e2f6a6176612f6f72672f6d6f636b69746f2f696e7465726e616c2f4d6f636b69746f436f72652e6a617661)    - misses `+3`    - partials `0`    - hits `-3```` diff@@             master       #404   diff @@  files           265        262     -3     lines          4695       4659    -36     methods           0          0            messages          0          0            branches        763        763          - hits           4045       3999    -46   - misses          482        492    +10     partials        168        168          ```[![sunburst](https://codecovio/gh/mockito/mockito/pull/404/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/404?srcpr)> powered by [codecov](https://codecovio?srcpr) last updated by [93e8f02617a3d6](https://codecovio/gh/mockito/mockito/compare/93e8f027a6f3f3d36327aeef79c61945615b05b3617a3d6f1b26dff24777e6f6c73905aa949b8b71) || @raphw @szczepiq  @bric3 sorry for stressing you the people want mockito 2 & 3 (lambda) please comment and/or merge this pr its a little step in the right direction || ping || lgtm thanks for doing the chore work! || "
22,407,412,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixed #407 vararg method call on mock object fails   @andreyrmg can you add your test too? || oh yes of course! im sorry but only tomorrow || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/412?srcpr) is **8616%**> merging [#412](https://codecovio/gh/mockito/mockito/pull/412?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **<01%**``` diff@@             master       #412   diff @@  files           265        265            lines          4695       4696     +1     methods           0          0            messages          0          0            branches        763        763          + hits           4045       4046     +1     misses          482        482            partials        168        168          ```[![sunburst](https://codecovio/gh/mockito/mockito/pull/412/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/412?srcpr)> powered by [codecov](https://codecovio?srcpr) last updated by [93e8f02302aa9f](https://codecovio/gh/mockito/mockito/compare/93e8f027a6f3f3d36327aeef79c61945615b05b3302aa9f0e3e3a1884c834dbea02fe78e23fb33e8) || added test || +1 for adding unit tests!can you also add your `defaultanswerdemo` test case to the usage tests (package orgmockitousagestubbing)? name proposal: stubbingwithdelegatevarargstest || sorry for delay i added usage test case and squash commits into oneand there is need to extend from `testbase` for calling help method `orgmockitoutiltestbase#invocationof(javalangclass<?> javalangstring javalangobject)` || lgtm thanks for figuring this one out and adding an extensive test suite luckily an easy fix ||
23,20,424,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,inorder timeouts *fixes issue https://codegooglecom/archive/p/mockito/issues/292  *updated code provided by https://githubcom/sirchia in pr #20closes #20 could you please add tests to make sure the code is correctly behaving?also you have some unrelated changes mostly imports reordering please remove those as well || i should have some time to work on the code changes this weekend || @timvdlippe there was already a test there i just removed the @ignore tag ill add one for the exception throwing behavior as well i also removed the import reordering my ide was trying to be super helpful! || @jazzepi sounds great! :+1: the codecov status has to pass before this can be merged after the current feedback has been processed i will take another look but i think so far it is looking good! || @jazzepi could you rebase this pr and commit your changes? i would like to merge this sooner rather than later || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/424?srcpr) is **8723%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/424/graphs/sunburstsvg?size150&srcpr)](https://codecovio/gh/mockito/mockito/pull/424?srcpr)> no coverage report found for **master** at 69e1f17> > powered by [codecov](https://codecovio?srcpr) last updated by [69e1f177485a27](https://codecovio/gh/mockito/mockito/compare/69e1f17eb9779ee7ce5fadd607bdf4468f6f96c87485a2707597071d82090e2196a943d4d53734e4) || @timvdlippe i think it should all be in working ordering now ive been doing git force pushes to my branch no idea if thats the accepted style but github seems to be figuring out what im doing i just wish it were layering patchsets on like gerrit does@christianschwarz i really puzzled over what you were looking for and could not understand how i could improve the code in the way youre describing id prefer this changeset get merged and then make whatever style changes you wanted yourself || lgtm thanks! ||
24,426,427,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,refactored class reporter to a static utillity fixes #426 for class reporter this pr changes the way errors are created and thrown all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly this improves the readability and eliminates the use of hacks to satisfiy the compilerhere is a sample:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            reporter()noargumentvaluewascaptured()            return null        } else {            return argumentsgetlast()        }}```the above code snipped can be rewritten to this:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            throw noargumentvaluewascaptured()        }         return argumentsgetlast()}```  
25,426,431,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #426 dropped class handyreturnvalues #426while refactoring the class`handyreturnvalues` towards a static utility class i notices that it is not required at all therefore i decided to remove the type `handyreturnvalues` ## [current coverage](https://codecovio/gh/mockito/mockito/pull/431?srcpr) is **8715%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/431/graphs/sunburstsvg?size150&srcpr)](https://codecovio/gh/mockito/mockito/pull/431?srcpr)> no coverage report found for **master** at 999cdee> > powered by [codecov](https://codecovio?srcpr) last updated by [999cdeef7c1b82](https://codecovio/gh/mockito/mockito/compare/999cdee1c0019f9057244c5e8561c6a1252db5bef7c1b82139cf23a37f9775ee07c6d8ce0952650e) || lgtm but the formatting of quite some files is still incorrect some have a space too much others are indented too much please take a close look at the diff and make sure that formatting changes are reverted functionality is fine by me || @timvdlippe > lgtm but the formatting of quite some files is still incorrecthopefully fixed for now and ever ||
26,426,432,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #426 refactored invocationmarker to a static utility class #426refactored `invocationmarker`to a static utility class ## [current coverage](https://codecovio/gh/mockito/mockito/pull/432?srcpr) is **8686%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/432/graphs/sunburstsvg?size150&srcpr)](https://codecovio/gh/mockito/mockito/pull/432?srcpr)> no coverage report found for **master** at a1de9a5> > powered by [codecov](https://codecovio?srcpr) last updated by [a1de9a524ebbff](https://codecovio/gh/mockito/mockito/compare/a1de9a5e1d38774f2f3e343e60c56e8f000b71ca24ebbff25a20614925b97313652d82716025604e) || there are some imports remaining on the `invocationmarker` which i think can be removed other than that lgtm || how to trigger a build without the commiting squashing forced push cycle? that failing tests suck! || not much faster but the fastest way i know of to trigger building of pull request is```git commit --amendgit push -f``` || lgtm ||
27,304,442,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,enable some ignored tests of bridgemethodshitagaintest and detectingf… …inalmethodstestthis worked locally so lets see if this also works on the ci serverfixes #304 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/442?srcpr) is **8722%**> merging [#442](https://codecovio/gh/mockito/mockito/pull/442?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will not change coverage``` diff@@             master       #442   diff @@  files           262        262            lines          4774       4774            methods           0          0            messages          0          0            branches        770        770            hits           4164       4164            misses          440        440            partials        170        170          ```[![sunburst](https://codecovio/gh/mockito/mockito/pull/442/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/442?srcpr)> powered by [codecov](https://codecovio?srcpr) last updated by [713710f047470d](https://codecovio/gh/mockito/mockito/compare/713710f98e8e9b5acf938223fe5c7514c2aa7398047470dd5f02544ecaefd4e65264db20ebd3be86) || thanks this has fixed issue #304 ! ||
28,438,444,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,add parameter elementtype to @mock todo: add a regression test to also show how this functionality can be used cc @smoyer64fixes #438 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/444?srcpr) is **8723%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/444/graphs/sunburstsvg?size150&srcpr)](https://codecovio/gh/mockito/mockito/pull/444?srcpr)> no coverage report found for **master** at d648014> > powered by [codecov](https://codecovio?srcpr) last updated by [d648014bd574a3](https://codecovio/gh/mockito/mockito/compare/d6480148b28defa299b25230abe7f463f850350abd574a38b8dbb13844aa8995010a5fad8020c103) ||
29,433,451,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,refactored timeout and after concurrent test refactored concurrent test in order to fix #433 the implementation now uses  an `executor`to perform async calls instead of extending `thread` and doesnt extend testbase anymore i also added a stopwatch which can be used for further time dependent testing in the future i want to use this class to write more tests for after/timeout can you rebase this to the latest removal of deprecated api? thanks! || seems like something went wrong with my rebase i will look tomorrow into it || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/451?srcpr) is **8738%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/451/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/451?srcpr)> no coverage report found for **master** at c17089d> > powered by [codecov](https://codecovio?srcpr) last updated by [c17089d2e0a79d](https://codecovio/gh/mockito/mockito/compare/c17089de11714a5b3689ad5ba5e59dfc6a7bde452e0a79d76a92119815f54d035a3d1ab5d9cf36a7) || @christianschwarz i think its preferable to rebase (eg `pull --rebase upstream master`) a pull request instead of merging that hides unrelated commits and makes reviewing easier thanks!edit: just saw your comment above so please ignore this || this lgtm but one small comment thank you again for your work! || okay i fixed the formatting issues || lgtm! || i guess it would have been better to use more lenient timeouts: https://travis-ciorg/mockito/mockito/builds/139572662 || it really sucks that we only experience this flakiness on master and now when we are reviewing such pull requests i cant seem to recreate these timing issues locally either || i can replicate the issues if i decrease the timeouts and run a timeout test in an endless looptravis builds have very limited cpu resources: so https://docstravis-cicom/user/ci-environment/ so failures of multi-threaded tests are more likely ||
30,453,454,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,modified javadoc for argumentmatcher to fix #453 - this is the amendment to the `argumentmatcher` javadoc ## [current coverage](https://codecovio/gh/mockito/mockito/pull/454?srcpr) is **8780%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/454/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/454?srcpr)> no coverage report found for **master** at ce95784> > powered by [codecov](https://codecovio?srcpr) last updated by [ce957849994bb3](https://codecovio/gh/mockito/mockito/compare/ce957844a9adc8403434ccf893b9d68d047573e99994bb39c480cf77a0f422e22e264e7002afea1a) || lgtm ||
31,390,491,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,deprecate whitebox and corresponding verboserunner and junitfailureha… a quick google showed that there are almost zero usages of this runner moreover it was relying on a very hackish implementation i think we can do a better job by creating a new runner with junit 5 as part of #390 therefore the intent is to deprecate these classes and remove them in mockito 30fixes #489 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/491?srcpr) is 8835% (diff: 5555%)> merging [#491](https://codecovio/gh/mockito/mockito/pull/491?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **054%**``` diff@@             master       #491   diff @@  files           265        275    +10     lines          5061       5566   +505     methods           0          0            messages          0          0            branches        826        900    +74   + hits           4444       4918   +474   - misses          444        469    +25   - partials        173        179     +6   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/491/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [4ce9ac2033e211](https://codecovio/gh/mockito/mockito/compare/4ce9ac2ea38153f4f0c7e272d52fdf9a494ccb14033e211b59dfe72ef84032a37d52173bd0dce8bb?srcpr) || dont remove this runner a few people were relying on this it may not show up on open source projectin my opinion `whitebox` should be removed though so it could be possible to use other internal reflection utils like `fieldgetter` / `fieldsetter` || @timvdlippe @bric3 what do you think about deprecating all mockito-runners in order to promote the uses of `mockitorule`? motivation: - mockito should promote only one api to initialize annotated fields cause it may confuse users what to choose when (runners vs rule) - `mockitorule`does the same as the runners but is more flexible cause it allows to uses other runners eg for parameterized tests which is a often requested feature || i do not think we should deprecate them junit (4) still has runners as a non-deprecated feature we should deprecate the runners once they do the same a lot of people still rely on old junit versions where runners are the only option we can however add proper documentation that indicates that runners should be the second choice || @raphw even if i disagree at some points i accept the core-team decision > a lot of people still rely on old junit versions where runners are the only optioni see you point but i think that people that update to mockito 2x can also update there junit version also deprecating doesnt mean that it is removed in 20 it will still be usable and indicate that a better alternative exist > we can however add proper documentation that indicates that runners should be the second choicegood idea here we go #531 || the reason to deprecate this runner is because the new mockito runner is strict and is a lot more userfriendly than this runner to promote the strict runner we should deprecate this one and use the strict version imoregarding runners vs rules: we can state our preference but we should keep the possibility || ill tidy up the verbose runner documentation i dont think it is useful given the work on #384 and #401 || ok deprecation sounds good to me however id remove `whitebox` its internal after alllets just replace the methods in `junitfailurehacker` at [line 19](https://githubcom/mockito/mockito/pull/491/files#diff-a041e60ee2d1a736352af1c34c19b1f4r19) and at [line 26](https://githubcom/mockito/mockito/pull/491/files#diff-a041e60ee2d1a736352af1c34c19b1f4r26) by private methods || rebased and updated pull request with feedback ptal :smile:  || indeed the timeout test is picky especially with openjdk 6 i restarted the job 2 times || verbose runner and console spamming runner are now both deprecated lets kill them in 30 :) ||
32,482,492,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"revert ""remove deprecated method"" simple git revert for an accidental removal of a deprecated api since 20 instead of 1xfixes #482 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/492?srcpr) is **8785%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/492/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/492?srcpr)> no coverage report found for **master** at 5dd0f71> > powered by [codecov](https://codecovio?srcpr) last updated by [5dd0f718d7489c](https://codecovio/gh/mockito/mockito/compare/5dd0f71ae37f75f3abc9b3d9ba7ad5cb4b79f38a8d7489cf9c28b858c0276022b8aaef2553e8545a?srcpr) ||"
33,401,499,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #401 - makes the junit runner detect unused stubs fixes #401this is a breaking change because junit runner will now fail the test class if there is an unused stubbingfeedback is welcome sorry for working on it for a long time and big number of commits investigating the failure on travis works for me locally! :d || i would rather not default to strict right away this will break a lot of user test suites which significantly increasing the upgrade process to mockito 20if we let developers know our intention is to makr the strict version default later they can slowly make the changes for each of their runners then we can change the default in mockito 30 so developers had some time to adopt || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/499?srcpr) is 8772% (diff: 9506%)[![sunburst](https://codecovio/gh/mockito/mockito/pull/499/graphs/sunburstsvg?size150&srcpr)](https://codecovio/gh/mockito/mockito/pull/499?srcpr)> no coverage report found for **master** at 35581f2> > powered by [codecov](https://codecovio?srcpr) last update [35581f2657f4a5](https://codecovio/gh/mockito/mockito/compare/35581f22cf8aabe2f6bc46abb3bc3cc42a413420657f4a5f49a693efd7847c3df21dc96682fd68a3?srcpr) || yes we can change the default if thats the decision!personally i think we should go ahead with this change at the cost of upgrade pain why?- it actually helps the codebase - dead code removed tests are cleaner arguably it could make the users _want_ to upgrade because they can make the codebase better its nice if the upgrade effort actually brings immediate value to the codebase- because of above it could be easier to justify the upgrade to the team / manager- it shouldnt be that much work i doubt that users have that many unused stubs in mockito codebase (huge amount of mockito tests) we had just few examples- not changing the default will make this feature not used by most users because most devs dont care unless forced to care :pthoughts? || +1 for making it the defaultcleaner test because of removed dead code are a big plus i guess it should not be much work to delete some code || thanks for feedback! if there is no more feedback im merging it this weekend || late in the review game but nice feature ||
34,426,501,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,refactored testmethodsfinder to a static utility class (#426)   ## [current coverage](https://codecovio/gh/mockito/mockito/pull/501?srcpr) is 8770% (diff: 000%)[![sunburst](https://codecovio/gh/mockito/mockito/pull/501/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/501?srcpr)> no coverage report found for **master** at 21f80c8> > powered by [codecov](https://codecovio?srcpr) last update [21f80c87649759](https://codecovio/gh/mockito/mockito/compare/21f80c8de824fc9a8c3d56fff029f6909d4b5b847649759daca5d9cd8c9eb9725c8e67a1e7eb5a07?srcpr) || lgtm ||
35,426,502,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,refactored argumentscomparator to a static utility class (#426)   ## [current coverage](https://codecovio/gh/mockito/mockito/pull/502?srcpr) is 8770% (diff: 5000%)[![sunburst](https://codecovio/gh/mockito/mockito/pull/502/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/502?srcpr)> no coverage report found for **master** at 35581f2> > powered by [codecov](https://codecovio?srcpr) last update [35581f2bb8989b](https://codecovio/gh/mockito/mockito/compare/35581f22cf8aabe2f6bc46abb3bc3cc42a413420bb8989bbc201b25aff4e192ecd030cde6c544715?srcpr) || lgtm ||
36,426,503,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,refactored nongreedynumberofinvocationsinorderchecker to a static uti… …lity class (#426) ## [current coverage](https://codecovio/gh/mockito/mockito/pull/503?srcpr) is 8770% (diff: 5000%)[![sunburst](https://codecovio/gh/mockito/mockito/pull/503/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/503?srcpr)> no coverage report found for **master** at 35581f2> > powered by [codecov](https://codecovio?srcpr) last update [35581f2407a9fd](https://codecovio/gh/mockito/mockito/compare/35581f22cf8aabe2f6bc46abb3bc3cc42a413420407a9fdaed1627d54b90fd4570b2248849ea1bed?srcpr) ||
37,506,507,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,improved exception message - fixes issue 506 fixes #506 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/507?srcpr) is 8770% (diff: 100%)[![sunburst](https://codecovio/gh/mockito/mockito/pull/507/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/507?srcpr)> no coverage report found for **master** at 21f80c8> > powered by [codecov](https://codecovio?srcpr) last update [21f80c87ead73e](https://codecovio/gh/mockito/mockito/compare/21f80c8de824fc9a8c3d56fff029f6909d4b5b847ead73e206fb3edbf27f3e3b11a81f6d45dff319?srcpr) || lgtm ||
38,194,510,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,"fixes #194 tweaks any matchers details is #194 i took the opportunity to - replace `testbaseassertthat` by more powerful assertj equivalent theres still some work to be done in this class- add iterable matchersbefore merging- [x] i ponder to make `anyobject()` not to accept `null` currently `any()` is an alias of `anyobject()` > keeping the `anyobjet` behaviour and deprecate the method- [x] i need to update `anyint` family description ## [current coverage](https://codecovio/gh/mockito/mockito/pull/510?srcpr) is 8769% (diff: 9857%)![sunburst](https://codecovio/gh/mockito/mockito/pull/510/graphs/sunburstsvg?srcpr&size150)> no coverage report found for **master** at 2e1e51c> > powered by [codecov](https://codecovio?srcpr) last update [2e1e51c3bdf848](https://codecovio/gh/mockito/mockito/compare/2e1e51cf0f9178c68bcba1c97bcbe3213e002f343bdf8481132b1ef22562b1f1308ee69801efecd6?srcpr) || heres some poll on twitter (values are from the time this comment was edited `fri jul 29 15:35:28 cest 2016`) :- https://twittercom/bricedutheil/status/758967944881639424    > #mockito any(class) will check the type in mockito 20 but should it match theres still the matcher isnull  > - 38% null and non-null  > - 62% only non-null  >   > 25 votes- https://twittercom/bricedutheil/status/758969135489388544    > #mockito anyint and other primitive matchers should they match   > (there is still isnull)  > - 07% null and non-null integer  > - 93% only non-null integer  >   > 27 votesi feel this pr is safe to merge not much voters but the poll trend ratio shouldnt change that much and those trends agrees with the changes brought by this pr || 30 votes and i merge the pr ill monitor the poll after my holidays || if i understand correctly `list<t> anylistof(class<t> clazz)` was deprecated in favour of `list anylist()` shouldnt the latter then be made generic? when i replace one with the other i get ""unchecked conversion"" warnings(idem for `anyset` `anymap` `anycollection` and `anyiterable`) || @stephan202 thanks for the feedback yes it was deprecated for people that use java8 as documented in the javadoc and the deprecation announces removal in mockito 3 which will be java 8 minimum || @bric3: i am on java 8 and did migrate as suggested i agree this is a change for the better :)my point is that this replaces a deprecation warning with an unchecked conversion warning the question is shouldnt the following type of change be applied to all aforementioned methods?``` diff--- a/src/main/java/org/mockito/argumentmatchersjava+++ b/src/main/java/org/mockito/argumentmatchersjava@@ -4749 +4749 @@ public class argumentmatchers {      * @see #isnull()      * @see #isnull(class)      */-    public static list anylist() {+    public static <t> list<t> anylist() {         reportmatcher(new instanceof(listclass ""<any list>""))-        return new arraylist(0)+        return new arraylist<t>(0)     }``` || > shouldnt the following type of change be applied to all aforementioned methods?what do you mean by that ?> this replaces a deprecation warning with an unchecked conversion warningdo you mean that ides show an unchecked conversion when using `anylist()`  || > > shouldnt the following type of change be applied to all aforementioned methods?> > what do you mean by that ?im not sure what more to explain: the diff shows the addition of a generic type argument to `argumentmatchers#anylist` i propose this change is made to said method as well as `argumentmatchers#{anysetanymapanycollectio yiterable}`> > this replaces a deprecation warning with an unchecked conversion warning> > do you mean that ides show an unchecked conversion when using anylist()my compiler does and we compile with `-werror` sure i can suppress the warning on our side but the changes im proposing is in line with `argumentmatchers#any` so it seems to ""make sense"" || oh thanks it seems i forgot to stash these lines i thought it was in the commit !im fixing that right now || cool :) || see #528 || "
39,426,514,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,refactored mockutil to a static utility class (#426)   ## [current coverage](https://codecovio/gh/mockito/mockito/pull/514?srcpr) is 8766% (diff: 9000%)> merging [#514](https://codecovio/gh/mockito/mockito/pull/514?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **002%**``` diff@@             master       #514   diff @@  files           268        268            lines          4818       4807    -11     methods           0          0            messages          0          0            branches        793        793          - hits           4225       4214    -11     misses          423        423            partials        170        170          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/514/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [b1a7090f25bb62](https://codecovio/gh/mockito/mockito/compare/b1a7090c2647bc02d3aff4c8b5788fd7b57133daf25bb62ca53779e99986bb0e9becfc9816221619?srcpr) ||
40,426,515,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,refactored allinvocationsfinder and verifiableinvocationsfinder to st… …atic utility classes (#426) ## [current coverage](https://codecovio/gh/mockito/mockito/pull/515?srcpr) is 8764% (diff: 7142%)> merging [#515](https://codecovio/gh/mockito/mockito/pull/515?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **004%**``` diff@@             master       #515   diff @@  files           268        268            lines          4818       4816     -2     methods           0          0            messages          0          0            branches        793        793          - hits           4225       4221     -4   - misses          423        425     +2     partials        170        170          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/515/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [b1a7090e7d0449](https://codecovio/gh/mockito/mockito/compare/b1a7090c2647bc02d3aff4c8b5788fd7b57133dae7d04492e7b485799fbac4779635e02dc769b470?srcpr) || @pascalschumacher these 2 classes have only one public method they can be merged into:- `verificationfinder::findverified()` /  `::findall()`what do you think? || @christianschwarz sure ||
41,508,525,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,add regression test for #508 as mentioned in the bug report for #508  adds a test which would catch this issue if it happened to regress in the future ## [current coverage](https://codecovio/gh/mockito/mockito/pull/525?srcpr) is 8800% (diff: 100%)![sunburst](https://codecovio/gh/mockito/mockito/pull/525/graphs/sunburstsvg?size150&srcpr)> no coverage report found for **master** at c952a04> > powered by [codecov](https://codecovio?srcpr) last update [c952a046576423](https://codecovio/gh/mockito/mockito/compare/c952a0460eb578025e6622a862d8f6499785cae765764233968eaff6aa2d3884a58818506c879915?srcpr) ||
42,194,528,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,missing generics info on collection matchers follow up on #510 (issue #194) following this comment https://githubcom/mockito/mockito/pull/510#issuecomment-236877717basically it tweaks the collection matchers with generic support it should have bee in abf9851  
43,426,535,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,refactored supertypeslastsorter to a static utility class refactored supertypeslastsorter to a static utility classrelates to #426 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/535?srcpr) is 8787% (diff: 3333%)![sunburst](https://codecovio/gh/mockito/mockito/pull/535/graphs/sunburstsvg?srcpr&size150)> no coverage report found for **master** at 6aa26a8> > powered by [codecov](https://codecovio?srcpr) last update [6aa26a8f8f9a32](https://codecovio/gh/mockito/mockito/compare/6aa26a85e73956ea5036f639912ba7b0edd5121df8f9a32c031d8c0446b5406484442878d6281584?srcpr) ||
44,426,540,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,inlined arrayutilsisempty() in argumentsprocessor inlined arrayutilsisempty() in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessoralso isempty() was renamed to isnullorempty() for clarityrelates to #426 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/540?srcpr) is 8785% (diff: 000%)> merging [#540](https://codecovio/gh/mockito/mockito/pull/540?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **002%**``` diff@@             master       #540   diff @@  files           266        265     -1     lines          5065       5064     -1     methods           0          0            messages          0          0            branches        830        830          - hits           4451       4449     -2     misses          442        442          - partials        172        173     +1   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/540/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [dc1fb1b684fa76](https://codecovio/gh/mockito/mockito/compare/dc1fb1b4c2043f4801200c01e277b6c4043c7424684fa76aef801526f12e97d26b25faf4dbcc05f2?srcpr) || lgtm ||
45,426,547,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,refactored objectmethodsguru to a static utility class - refactored `objectmethodsguru` to a static utility class- removed unused methods and associated tests:  - `istostring(mockitomethod method)`  - `isequalsmethod(method method)`  - `ishashcodemethod(method method)`- renamed `istostring()` to `istostringmethod()`relates to #426 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/547?srcpr) is 8779% (diff: 9090%)> merging [#547](https://codecovio/gh/mockito/mockito/pull/547?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **005%**``` diff@@             master       #547   diff @@  files           265        265            lines          5064       5057     -7     methods           0          0            messages          0          0            branches        830        825     -5   - hits           4449       4440     -9   - misses          442        444     +2     partials        173        173          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/547/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [17b8dcaa3264c0](https://codecovio/gh/mockito/mockito/compare/17b8dca7bd455a887051095d877361ea74daa364a3264c0e78115a5a09366c1187d387495b6f9113?srcpr) || lgtm ||
46,538,550,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"fixed #538 changed error message in case initialization for mock injection fails fixed #538if a filed is annotated with @injectmocks and the type of a field is an enum inner class interface or local class the error message is now: _""mock injection failed on field fieldname cause the type abstractcollection is an abstract class_"" openjdk6 build failed the others gone clearwow! the native world exploded```:buildsrc:test*** buffer overflow detected ***: /usr/lib/jvm/java-6-openjdk-amd64/bin/java terminated backtrace: /lib/x86_64-linux-gnu/libcso6(__fortify_fail+0x37)[0x7fa189635e37]/lib/x86_64-linux-gnu/libcso6(+0x108d30)[0x7fa189634d30]/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/amd64/libnetso(java_java_net_inet4addressimpl_getlocalhostname+0x1a0)[0x7fa1843c0d80][0x7fa17d0136b0]``` || this seem to be an issue with travis itself : https://githubcom/travis-ci/travis-ci/issues/5227 || from their thread the workaround in the [travisyml](https://githubcom/mockito/mockito/blob/master/travisyml#l18-l23) doesnt work anymorecc @raphw  || ha theres been a change a few days ago : https://githubcom/travis-ci/travis-ci/issues/5227#issuecomment-165131913people should use the hosts addon : ``` ymladdons:  hosts:    - myshorthost  hostname: myshorthost``` || aside from the help removal that i dont want removed the code looks good || @christianschwarz you can rebase on master i may have pushed a working fix for the buffer overflow issue in #553 || @bric3 > aside from the help removal that i dont want removed the code looks goodthanks for reviewing! if you dont mind i would like to have a short discussion on the error message inorder to help devs to fix the issue---full error message:```cannot instantiate @injectmocks field named configurationmanageryou havent provided the instance at field declaration so i tried to construct the instancehowever i failed because: the type configurationmanager is an interfaceexamples of correct usage of @injectmocks:   @injectmocks service service  new service()   @injectmocks service service   //also dont forget about mockitoannotationsinitmocks()   //and dont forget about some @mocks for injection :)```**line 1**: `""cannot instantiate @injectmocks field named "" + fieldname + """"`okay that line was replaced with something like: `""@injectmocks failed on field f cause the type innerclass is an inner non static class""` so far so good**line 2**:  `""you havent provided the instance at field declaration so i tried to construct the instance""`i would like to remove that line the dev added @injectmocks in order to construct  an instance do  we really need to tell him what he did?  **line 3**: `""however i failed because: "" + detailsgetmessage()`can be removed it is now included in the first line**line 4**: `""examples of correct usage of @injectmocks:""`hmmm i have no idea how a dev can learn from the provided examples the field declaration is not wrong in this case but the provided filed type that is hard (impossible) to express in an example if you have an idea i will add it**line 5**: `""   @injectmocks service service  new service()""`ouch that hurts! i didnt know that it works! what do users expect to happen in this case big question? imho mockito should fail here indicating that either @injectmocks should be removed cause it have no effect or indicating that the field must be initialised with `null`/ leaved blank or is it over written after mockito set the field?**line 6**: `""   @injectmocks service service""`same as for line 4**line 7**: `""   //also dont forget about mockitoannotationsinitmocks()""`this line can be removed the user (or rule/runner) didnt forget to call initmocks() other wise he wont see this error message**line 8**:  `""   //and dont forget about some @mocks for injection :)""`that is confusing we dont need mocked fields if the class has an no arg  constructor` || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/550?srcpr) is 8780% (diff: 100%)> merging [#550](https://codecovio/gh/mockito/mockito/pull/550?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **<01%**``` diff@@             master       #550   diff @@  files           265        265            lines          5057       5061     +4     methods           0          0            messages          0          0            branches        825        826     +1   + hits           4440       4444     +4     misses          444        444            partials        173        173          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/550/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [f80dd4a3f1b9a2](https://codecovio/gh/mockito/mockito/compare/f80dd4a95d78d15dfea814877d143e8e31cfd8803f1b9a27023bd22cba6fa06a99672857a7c8fc2a?srcpr) || heres my comment i strongly insist on keeping a message like the current one> **line 1**: `""cannot instantiate @injectmocks field named "" + fieldname + """"`> okay that line was replaced with something like: `""@injectmocks failed on field f cause the type innerclass is an inner non static class""` so far so goodid like to keep this introduction here the issue is the instantiation of the field not the mock injection> **line 2**:  `""you havent provided the instance at field declaration so i tried to construct the instance""`> i would like to remove that line the dev added @injectmocks in order to construct  an instance do  we really need to tell him what he did?  this is debatable but a lot of users dont read the javadoc explaining what mockito has been trying allows users to give a clue how that works this is especially important for this auto-injection where the behavior is different than regular di framework > **line 3**: `""however i failed because: "" + detailsgetmessage()`> can be removed it is now included in the first lineindeed the proposed change on cause explanation looks better**line 4**: `""examples of correct usage of @injectmocks:""`hmmm i have no idea how a dev can learn from the provided examples the field declaration is not wrong in this case but the provided filed type that is hard (impossible) to express in an example if you have an idea i will add itmaybe the examples can be reworked but he can compare what is good in this simple example with his code without looking at the javadoc thats the idea behind the `reporter` not just throwing exceptions**line 5**: `""   @injectmocks service service  new service()""`ouch that hurts! i didnt know that it works! what do users expect to happen in this case big question? imho mockito should fail here indicating that either @injectmocks should be removed cause it have no effect or indicating that the field must be initialised with `null`/ leaved blank or is it over written after mockito set the field?yes this is voluntary and necessary users may require an initialized instance and still perform mock injection after ive seen that with spring or guice constructor then other `@autowired` fieldsfield initialization is a feature that was added after and progressively allowed constructor injection this was not the primary objective at first and thus it may break code**line 6**: `""   @injectmocks service service""`same as for line 4i dont see the issue there to have this line as an example**line 7**: `""   //also dont forget about mockitoannotationsinitmocks()""`this line can be removed the user (or rule/runner) didnt forget to call initmocks() other wise he wont see this error messageagreed this line can be removed note that this is the junit code others than not use junit**line 8**:  `""   //and dont forget about some @mocks for injection :)""`that is confusing we dont need mocked fields if the class has an no arg  constructoractually some people believed that mocks where created automatically from the fields of the injected class his could be reworded though || okay fixed! the first line contains now the cause message the rest is the same || lgtm || "
47,384,555,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,junit rules report unused stubs - fixes #384 - makes junit rules detect unused stubs- introduces mockitolistener api- see the use case in issue #384 - recreated pr #527 with squashed commits lets merge this today this pr is a squash of #527 plus some code changes per code review feedback (i addressed code feedback subjectively and selectively :) || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/555?srcpr) is 8784% (diff: 9813%)> merging [#555](https://codecovio/gh/mockito/mockito/pull/555?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **005%**``` diff@@             master       #555   diff @@  files           265        270     +5     lines          5057       5185   +128     methods           0          0            messages          0          0            branches        825        843    +18   + hits           4440       4555   +115   - misses          444        451     +7   - partials        173        179     +6   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/555/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [f80dd4a26a0854](https://codecovio/gh/mockito/mockito/compare/f80dd4a95d78d15dfea814877d143e8e31cfd88026a0854fbe7f762f5b9d180710bc6cbef246921e?srcpr) ||
48,527,555,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,junit rules report unused stubs - fixes #384 - makes junit rules detect unused stubs- introduces mockitolistener api- see the use case in issue #384 - recreated pr #527 with squashed commits lets merge this today this pr is a squash of #527 plus some code changes per code review feedback (i addressed code feedback subjectively and selectively :) || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/555?srcpr) is 8784% (diff: 9813%)> merging [#555](https://codecovio/gh/mockito/mockito/pull/555?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **005%**``` diff@@             master       #555   diff @@  files           265        270     +5     lines          5057       5185   +128     methods           0          0            messages          0          0            branches        825        843    +18   + hits           4440       4555   +115   - misses          444        451     +7   - partials        173        179     +6   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/555/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [f80dd4a26a0854](https://codecovio/gh/mockito/mockito/compare/f80dd4a95d78d15dfea814877d143e8e31cfd88026a0854fbe7f762f5b9d180710bc6cbef246921e?srcpr) ||
49,554,560,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #554 : checkschecknotnull now throws iae instead of npe changes npe to iae see #554 lgtm you can merge when travis passes ||
50,332,568,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes #401 yay!!!!highlights:- fixed the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs- removed stubbinglistener api (it could not work to the thread safety levels we support in mockito see also #545)closes #332fixes #401 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/568?srcpr) is 8780% (diff: 100%)> merging [#568](https://codecovio/gh/mockito/mockito/pull/568?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **<01%**``` diff@@             master       #568   diff @@  files           269        267     -2     lines          5189       5158    -31     methods           0          0            messages          0          0            branches        843        842     -1   - hits           4556       4529    -27   + misses          454        451     -3   + partials        179        178     -1   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/568/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [e38764f9ca4536](https://codecovio/gh/mockito/mockito/compare/e38764fa0c5fb0373b8a82120b12a2b635e363a99ca45362f89efa705f21e6b9bf2c39d73efc7522?srcpr) || lgtm || thanks for review!!! how come you didnt merge yourself? || i still want to take a look at this pr can do this evening || @timvdlippe i almost merged it when i saw your reply literally i was crafting the squashed commit message :) anyhow if youre squashing you can use this summary:- fixes #401 - unused stubbing detection logic was not thread safe in mockito junit runner- killed the stubbinglistener api - it couldnt support thread safe scenarios mockito requires- small javadoc tweaks removed my login id from javadocs- deprecated few more apis connected to the runners- ensured we verify correctness of mockitojunitrunnerstrict (it was not used directly by any of the tests but it was well tested out / great coverage) || waiting until eod today and merging if no other feedback if youre happy with change merge yourself :) ||
51,401,568,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes #401 yay!!!!highlights:- fixed the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs- removed stubbinglistener api (it could not work to the thread safety levels we support in mockito see also #545)closes #332fixes #401 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/568?srcpr) is 8780% (diff: 100%)> merging [#568](https://codecovio/gh/mockito/mockito/pull/568?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **<01%**``` diff@@             master       #568   diff @@  files           269        267     -2     lines          5189       5158    -31     methods           0          0            messages          0          0            branches        843        842     -1   - hits           4556       4529    -27   + misses          454        451     -3   + partials        179        178     -1   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/568/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [e38764f9ca4536](https://codecovio/gh/mockito/mockito/compare/e38764fa0c5fb0373b8a82120b12a2b635e363a99ca45362f89efa705f21e6b9bf2c39d73efc7522?srcpr) || lgtm || thanks for review!!! how come you didnt merge yourself? || i still want to take a look at this pr can do this evening || @timvdlippe i almost merged it when i saw your reply literally i was crafting the squashed commit message :) anyhow if youre squashing you can use this summary:- fixes #401 - unused stubbing detection logic was not thread safe in mockito junit runner- killed the stubbinglistener api - it couldnt support thread safe scenarios mockito requires- small javadoc tweaks removed my login id from javadocs- deprecated few more apis connected to the runners- ensured we verify correctness of mockitojunitrunnerstrict (it was not used directly by any of the tests but it was well tested out / great coverage) || waiting until eod today and merging if no other feedback if youre happy with change merge yourself :) ||
52,541,569,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,improved the public api of mockingdetails fixes #541 highlights:- started exposing full mock creation information instead of just type to mock and extra interfaces- changed public api but only for methods that were introduced in 2x so it is _not_ backwards incompatible change as far as 110 is concerned ## [current coverage](https://codecovio/gh/mockito/mockito/pull/569?srcpr) is 8781% (diff: 100%)> merging [#569](https://codecovio/gh/mockito/mockito/pull/569?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **001%**``` diff@@             master       #569   diff @@  files           269        269            lines          5189       5195     +6     methods           0          0            messages          0          0            branches        843        845     +2   + hits           4556       4562     +6     misses          454        454            partials        179        179          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/569/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [e38764fc2ab75e](https://codecovio/gh/mockito/mockito/compare/e38764fa0c5fb0373b8a82120b12a2b635e363a9c2ab75e01ffc749be0adc674b4319b6bab425512?srcpr) || id like the comment fixed but it looks good to me! || waiting until eod today and merging if no other feedback if youre happy with change merge yourself :) || i needed to merge because it was blocking me i can address @bric3 comment later if such is the decision || @szczepiq nope your feedback works for me as well ) ||
53,552,592,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,stylesheet-tweaks-for-openjdk6 #589 aimed to fix the javadoc rendering but the assumption was that the javadoc tool of the sun jdk6 will render javadoc the same way as openjdk6unfortunately this is not the same the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements this making the stylesheet incompatiblethis pr aims to fix that and thus fix #552 bonus i changed the `2*` and `20` by `200` in the javadoc this way we have aligned version numbers  
54,497,615,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #497 : returns_deep_stubs may try to mock final classes fixes #497with deep stubs it was possible for generic metadata to be lost/unusedthrough nested invocations on non generic types this could cause `returns_deep_stubs` to try mocking final classes which would result in a `classcastexception`apparently my other pr (#549) wasnt quite enough to fully fix this problem---**edited by mockito team** ## [current coverage](https://codecovio/gh/mockito/mockito/pull/615?srcpr) is 8824% (diff: 100%)> merging [#615](https://codecovio/gh/mockito/mockito/pull/615?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **<01%**``` diff@@             master       #615   diff @@  files           266        266            lines          5161       5163     +2     methods           0          0            messages          0          0            branches        847        847          + hits           4554       4556     +2     misses          429        429            partials        178        178          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/615/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [b669b4f0549899](https://codecovio/gh/mockito/mockito/compare/b669b4fa790171149b8383cc8f9c55cec32de934054989999ca49c170b7838bd7e05d8804eaf3f47?srcpr) || assigning to @bric3 as he did the previous review too also setting to milestone 22 as we have a code freeze atm || this looks good to me~~but can you amend the commit to remove `final` this is misleading as mockito **dont** mock final classes as of now~~_thats why im renaming the prs_ || by the way thanks @jeffreyfalgout  ||
55,338,617,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,moves arity interfaces of java8 helper answers to public api the java 8 helper interfaces have been introduced in #338 however the public `additionalanswersanswer` family leak the functional interfacesthese _parameter arity_ interfaces can be public hence they are moved next to `answer` in the `orgmockitostubbing` packageim however in favor of adding the `@incubating` annotation on those apis and related objects thoughts ?fixes #614 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/617?srcpr) is 8824% (diff: 100%)> merging [#617](https://codecovio/gh/mockito/mockito/pull/617?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **001%**``` diff@@             master       #617   diff @@  files           266        266            lines          5163       5163            methods           0          0            messages          0          0            branches        847        847          - hits           4557       4556     -1     misses          429        429          - partials        177        178     +1   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/617/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [1ce8704fb8d63e](https://codecovio/gh/mockito/mockito/compare/1ce870433fcdfa8c36de70ab85e34a32ba81b32efb8d63e528bee6a2c43f2b752dd52be642fc38bf?srcpr) || some very small doc comments lgtm also with the `@incubating` :+1:  ||
56,548,619,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes #548 from now on verification happens always call in other thre… should fix problems with #548 and #601 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/619?srcpr) is 8824% (diff: 100%)> merging [#619](https://codecovio/gh/mockito/mockito/pull/619?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will not change coverage``` diff@@             master       #619   diff @@  files           266        266            lines          5163       5163            methods           0          0            messages          0          0            branches        847        847            hits           4556       4556            misses          429        429            partials        178        178          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/619/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [130a5c72ea6ea9](https://codecovio/gh/mockito/mockito/compare/130a5c7c25a2c2b669ebf842b7f5ea971cec25e92ea6ea9d2114cd034fdc0d1855a2dd8559202ec8?srcpr) || i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist : https://gistgithubcom/lukasz-szewc/f1ca9cece0a8997e898e5b6ba1a65f0c || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now! :tada:  || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||
57,601,619,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes #548 from now on verification happens always call in other thre… should fix problems with #548 and #601 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/619?srcpr) is 8824% (diff: 100%)> merging [#619](https://codecovio/gh/mockito/mockito/pull/619?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will not change coverage``` diff@@             master       #619   diff @@  files           266        266            lines          5163       5163            methods           0          0            messages          0          0            branches        847        847            hits           4556       4556            misses          429        429            partials        178        178          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/619/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [130a5c72ea6ea9](https://codecovio/gh/mockito/mockito/compare/130a5c7c25a2c2b669ebf842b7f5ea971cec25e92ea6ea9d2114cd034fdc0d1855a2dd8559202ec8?srcpr) || i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist : https://gistgithubcom/lukasz-szewc/f1ca9cece0a8997e898e5b6ba1a65f0c || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now! :tada:  || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||
58,596,623,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,updated the javadocs polishing the javadocs starting with this small pr:issue #596- updated @since to 210 (instead 200)- added more docs around the verification collector ## [current coverage](https://codecovio/gh/mockito/mockito/pull/623?srcpr) is 8824% (diff: 100%)> merging [#623](https://codecovio/gh/mockito/mockito/pull/623?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will not change coverage``` diff@@             master       #623   diff @@  files           266        266            lines          5163       5163            methods           0          0            messages          0          0            branches        847        847            hits           4556       4556            misses          429        429            partials        178        178          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/623/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [09304b55c05802](https://codecovio/gh/mockito/mockito/compare/09304b59c6c6d7923db89e7a98fc3fc507a630e95c05802c7b60c56e362b55d33c191e3941d6279a?srcpr) || lgtm ||
59,439,635,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a `matcherapplicationstrategy` this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches(arg) call and an other is used to perfrom the capturing- fixes #439 argumentcaptor and argumentmatchers can now be mixed in varargs- fixes #583 no more npe when null is passed to an varargs - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently) - reduced logic duplication ## [current coverage](https://codecovio/gh/mockito/mockito/pull/635?srcpr) is 8733% (diff: 9772%)> no coverage report found for **release/2x** at 0fcad43> > powered by [codecov](https://codecovio?srcpr) last update [0fcad43968fea6](https://codecovio/gh/mockito/mockito/compare/0fcad43a0a341fc4e3698c9b30faf377018b7b7e968fea67bef5bb284903b239537bda62dde786e1?srcpr) || on hold as we need to address the beta release thing || since these 2 bugfixes will not be included in the 210 rc phase should i send a new pr against release/2x ?  || @christianschwarz yes but lets wait until 210 is out this way nobody gets confused :) || @christianschwarz ive changed the base branch to `release/2x` || > [] lets wait until 210 is out this way nobody gets confused :)**@mockito-team**now i am confused! who can mockito users be confused by bugfixes? in the meantime on the `master` branch- refactorings were merged like #656 and #654- new features are going to be merged too #648 - but bugfixed wont be merged ?  || we wanted to freeze the release branch while waiting for the rc #648 is a special case which originates from javaone a major selling point for mockito we dont plan to add other changes in the rc || @christianschwarz this thing will go in 22 i mean it )i think capturing matcher deserves an overfaul and i like the enhancement youve made but feature freeze is essential sorry for the longer rc phase but i think its for the better ) || @christianschwarz by the way could you rebase your commits on top of `release/2x` because git seems to see unrelated commits form @timvdlippe  || @bric3 this pr is now rebased on `release/2x` it the `master` now used for mockito 3x ?@all if you have some time besided the numerous ci-tasks please review this pr   || great thanks it may be delayed again due to some disagreement on the ci-cdotherwise yes the master is for mockito 3x i should probably update the contributing guide and the template as well || some adjustments can be made eg `getargumenttype` can be simplified to read the type arg on the class rather than looking at the method but its a nice code improvementother improvements can be made later thanks again @christianschwarz ! || @christianschwarz this is an impressive code change improving not only the behavior but also code and test coverage!!! thanks!thanks @bric3 for reviewing and merging the pr! || @bric3 > some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with #463 at first i tried to retrieve the type-argument from the class but this turned out to be more complex eg when the type-argument is bound in an upper class or interface or additional type-arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now!> other improvements can be made later sounds good can you open a new ticket so i can take look || @mockito-core#606 can be closed now || > > other improvements can be made later> > sounds good can you open a new ticket so i can take lookat the moment this works quite well! so no hurry especially given your above remark on mockito 3 (on master atm) we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that || @christianschwarz i have seen an interesting problem with `varargstest` fail on master which is jdk 8 only while the same test passes on release/2x which is compiled and run against 3 jdk 6/7/8 im not sure why at the moment this behavior is different  plus my dev laptop is being fixed for a few days so im limited in my debug right nowthis happened after a merge of release/2x to master (52df10af105b7e9cd45bf214141c5096db3ecafe)i noticed that `verify(mock)varargs(isnull())` is compiled to invoke `imethodsvarargs(string  string)` im not sure other jdks behave/compile differently though one of the failing test can be fixed by adding the cast statement```    @test    public void shouldmatchvarargs_nullarrayarg() {        object[] argarray  null        mockvarargs(argarray)        verify(mock)varargs((object[]) isnull()) // otherwise it is linked against string[]    }```could it be that something went wrong with the merge regarding this pr ? || @christianschwarz actually the investigation continue see https://githubcom/mockito/mockito/issues/717#issuecomment-256632518 ||
60,583,635,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a `matcherapplicationstrategy` this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches(arg) call and an other is used to perfrom the capturing- fixes #439 argumentcaptor and argumentmatchers can now be mixed in varargs- fixes #583 no more npe when null is passed to an varargs - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently) - reduced logic duplication ## [current coverage](https://codecovio/gh/mockito/mockito/pull/635?srcpr) is 8733% (diff: 9772%)> no coverage report found for **release/2x** at 0fcad43> > powered by [codecov](https://codecovio?srcpr) last update [0fcad43968fea6](https://codecovio/gh/mockito/mockito/compare/0fcad43a0a341fc4e3698c9b30faf377018b7b7e968fea67bef5bb284903b239537bda62dde786e1?srcpr) || on hold as we need to address the beta release thing || since these 2 bugfixes will not be included in the 210 rc phase should i send a new pr against release/2x ?  || @christianschwarz yes but lets wait until 210 is out this way nobody gets confused :) || @christianschwarz ive changed the base branch to `release/2x` || > [] lets wait until 210 is out this way nobody gets confused :)**@mockito-team**now i am confused! who can mockito users be confused by bugfixes? in the meantime on the `master` branch- refactorings were merged like #656 and #654- new features are going to be merged too #648 - but bugfixed wont be merged ?  || we wanted to freeze the release branch while waiting for the rc #648 is a special case which originates from javaone a major selling point for mockito we dont plan to add other changes in the rc || @christianschwarz this thing will go in 22 i mean it )i think capturing matcher deserves an overfaul and i like the enhancement youve made but feature freeze is essential sorry for the longer rc phase but i think its for the better ) || @christianschwarz by the way could you rebase your commits on top of `release/2x` because git seems to see unrelated commits form @timvdlippe  || @bric3 this pr is now rebased on `release/2x` it the `master` now used for mockito 3x ?@all if you have some time besided the numerous ci-tasks please review this pr   || great thanks it may be delayed again due to some disagreement on the ci-cdotherwise yes the master is for mockito 3x i should probably update the contributing guide and the template as well || some adjustments can be made eg `getargumenttype` can be simplified to read the type arg on the class rather than looking at the method but its a nice code improvementother improvements can be made later thanks again @christianschwarz ! || @christianschwarz this is an impressive code change improving not only the behavior but also code and test coverage!!! thanks!thanks @bric3 for reviewing and merging the pr! || @bric3 > some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with #463 at first i tried to retrieve the type-argument from the class but this turned out to be more complex eg when the type-argument is bound in an upper class or interface or additional type-arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now!> other improvements can be made later sounds good can you open a new ticket so i can take look || @mockito-core#606 can be closed now || > > other improvements can be made later> > sounds good can you open a new ticket so i can take lookat the moment this works quite well! so no hurry especially given your above remark on mockito 3 (on master atm) we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that || @christianschwarz i have seen an interesting problem with `varargstest` fail on master which is jdk 8 only while the same test passes on release/2x which is compiled and run against 3 jdk 6/7/8 im not sure why at the moment this behavior is different  plus my dev laptop is being fixed for a few days so im limited in my debug right nowthis happened after a merge of release/2x to master (52df10af105b7e9cd45bf214141c5096db3ecafe)i noticed that `verify(mock)varargs(isnull())` is compiled to invoke `imethodsvarargs(string  string)` im not sure other jdks behave/compile differently though one of the failing test can be fixed by adding the cast statement```    @test    public void shouldmatchvarargs_nullarrayarg() {        object[] argarray  null        mockvarargs(argarray)        verify(mock)varargs((object[]) isnull()) // otherwise it is linked against string[]    }```could it be that something went wrong with the merge regarding this pr ? || @christianschwarz actually the investigation continue see https://githubcom/mockito/mockito/issues/717#issuecomment-256632518 ||
61,520,639,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"update travis configuration to also build on oraclejdk9 lets see if this actually works testing for #520 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/639?srcpr) is 8830% (diff: 100%)> merging [#639](https://codecovio/gh/mockito/mockito/pull/639?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **106%**``` diff@@             master       #639   diff @@  files           272        266     -6     lines          5476       5154   -322     methods           0          0            messages          0          0            branches        901        843    -58   - hits           4777       4551   -226   + misses          508        426    -82   + partials        191        177    -14   ```> powered by [codecov](https://codecovio?srcpr) last update [f3179a2b9551c3](https://codecovio/gh/mockito/mockito/compare/f3179a22f8de1d5e6c98a5d7616f99023388d599b9551c35397246b813fb2e74d8e35bda57ee7130?srcpr) || all right for this one the `htmldoclet` is actually breaking the build which was apparently the issue in #521 therefore reopening that one jdk8 is working but it seems they have moved some classes in jdk9 not sure if we can have a configuration which works for both jdks || i have started the configuration to only compile certain files on a specific jdk version to at least not fail compilation on jdk 9 however as i personally do not have jdk 9 installed (still running on jdk 8) i cant develop a valid doclet does anyone else want to take over implementing the exclude function? || otherwise it lgtm || **one eternity later**all right this took quite a while but we can actually compile on jdk9 now :tada: this required some ""workarounds"" to bugs in various versions of our dependencies- i updated gradle to 31 this release fixes an internal classcastexception when compiling groovy buildsrc code- i updated jacoco to the latest snapshot release to get around several exceptions thrown in the bytecode generated by jacoco the corresponding pr is https://githubcom/jacoco/jacoco/pull/434i sadly had to remove the doclet for jdk > 8 because the latest release available for xenial release is build 114 which does not expose the actual doclets and internal packages required to write a doclet this is fixed in later builds but these are only published for the development version of ubuntu :cry: all in all we are now compiling correctly but sadly we have failing tests: https://travis-ciorg/mockito/mockito/jobs/161332991#l433-l465 these seem to be related to assertj failing to understand genericsi have also seen other test failures so maybe some other tests are failing still @szpak could you try this branch and see if it compiles locally for you? || only 1 more failure with the inline mock maker tests: https://travis-ciorg/mockito/mockito/jobs/164437417#l396-l401 || asm 6 (support for java 9) is still in an alpha state therefore java 9 class files are still rejected the moment asm 6 is released this is updated || optionally we can use byte-buddy-dep and explicitly use asm 6 alpha || i think we should keep the actual bytebuddy we could eventually disable the test with jdk 9 using `assumethat` || i do not think that remi will release asm 6 before the class file format is finalized and i do neither think it is a good idea to rely on these things yet the java 9 class files can change any day and given this it is not yet possible to rely on the inline transformer with java 9 just yet for pure subclassing byte buddy does not need to process any java 9 class files which is why i would suggest to add a rule to the inliner tests to not be run on java 9 (yet) anything but it should work || i will disable the test on jdk9 then thanks for the explanation! || ignoring the broken test on jdk9 this pr should now be green i would propose to merge this pr right now and fix possible incoming java 9 issues in separate prs || instead may we could detect the api level of asm not sure whats the best way to start we can detect if `opcodes` contains `v1_9` or `asm6` see [branch of asm 6](http://websvnow2org/filedetailsphp?repnameasm&path%2fbranches%2fasm_6_future%2fasm%2fsrc%2forg%2fobjectweb%2fasm%2fopcodesjava) bytebuddy repackages it in `netbytebuddyjarasmopcodes`that way we wont forget to enable this code again ) || also shall we update jacoco [snapshot](http://wwweclemmaorg/jacoco/trunk/doc/changeshtml) theres a new build || > also shall we update jacoco snapshot theres a new buildi would rather wait for the official 078 release and upgrade to that || ok fair enough ) || shalli merge this one? || yes || "
62,640,646,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"fixes #640 warns user to upgrade if java 8 version is to low fixes #640 warns user to upgrade if java 8 version is to lowalso took the opportunity to log other platform details if mock class cannot be created before merging not that automatic release system will release a 210rc2 || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/646?srcpr) is 8820% (diff: 7222%)> merging [#646](https://codecovio/gh/mockito/mockito/pull/646?srcpr) into [release/2x](https://codecovio/gh/mockito/mockito/branch/release/2x?srcpr) will decrease coverage by **003%**``` diff@@           release/2x       #646   diff @@  files              266        267     +1     lines             5163       5189    +26     methods              0          0            messages             0          0            branches           847        854     +7   + hits              4556       4577    +21   - misses             429        434     +5     partials           178        178          ```> powered by [codecov](https://codecovio?srcpr) last update [db06504ff2ffff](https://codecovio/gh/mockito/mockito/compare/db06504e1c1a41d4343dcf5951c6f4a1b0feb2ecff2ffffe0b6d2a6c527cbf6d1ff96a2d40e5395f?srcpr) || some test for platform would be nice especially too see if the version number extraction works with all known formats eg : - feature -> 180-b24- maintai ce -> 141_05-ea-b01- update -> 140_03-b04  140_03-ea-b01http://wwworaclecom/technetwork/java/javase/versioning-naming-139433htmlhow does it work for other jvms like jrockit j9 or excelsior jet? || ok thanks for feedback ill update the code accordingly || beautiful!!! we can push and generate new rc or use the magic incantation in the commit message to prevent release and stack this change to next rc (if there is need for yet another rc) || @christianschwarz we dont care about those as we dont have report on those only oracle / openjdk although i dont know about their version scheme- bea (now oracle) jrockit > discontinued last version is java 6 and oracle migrated features in oracle jdk- ibm j9- excelsior jet - azul zing > ?- azul zulu > based on openjdk || @bric3 what i wanted to say was: the update version mechanism should be aware of version schemes other than the expected  the current implementation throws an indexoutofboundsexception if the jvm_version is eg  ""180b5_u44"" or an numberformatexception if the jvm_version is ""140_03-ea-b01""  || @christianschwarz fantastic review thanks! || @christianschwarz yes no problem that was a valuable input i didnt want these exceptions to be thrown !i updated the test case and i did some research as well for future cases like this || wow really nice tests!! :tada: this lgtm || "
63,653,654,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,renamed failuredetecter to failure detector also renamed misspelled issussessful() to issuccessful()fixes: #653 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/654?srcpr) is 8822% (diff: 6666%)> merging [#654](https://codecovio/gh/mockito/mockito/pull/654?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will not change coverage``` diff@@             master       #654   diff @@  files           266        266            lines          5154       5154            methods           0          0            messages          0          0            branches        843        843            hits           4547       4547            misses          429        429            partials        178        178          ```> powered by [codecov](https://codecovio?srcpr) last update [bde8b406f19ea0](https://codecovio/gh/mockito/mockito/compare/bde8b406f7988a7434d9edd2866e61817c13e05e6f19ea0f623bee81cb58794116cd2a471aebaa42?srcpr) || thanks oliver! ||
64,707,711,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes #707 adds throwable to arity answers also improved javadoc all in the title this should fix #707 lgtm restarted the build that was failing on an unrelated test || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/711?srcpr) is 8672% (diff: 100%)> no coverage report found for **release/2x** at f9f6d21> > powered by [codecov](https://codecovio?srcpr) last update [f9f6d21cda47c1](https://codecovio/gh/mockito/mockito/compare/f9f6d21974d530030ea731f21ad2da016ce14adacda47c1637358eab6186c0c5bcfe3b731057969b?srcpr) ||
65,727,746,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,add missing copyright headers - [x] fixes #727 - [x] add missing copyrights using [license-gradle-plugin](https://githubcom/hierynomus/license-gradle-plugin)- [x] updated only source files test files were skipped existing copyright headers were not modified unfortunately the plug-in is not compiled for java 6i really would like to avoid as much as possible maintaining 2x too long || however i suppose we can change the jdk that gradle use if this is a separate task in traviswhy a separate task because if gradle runs the under the code under another jdk we may miss specific jdk 6 runtime behavior || per https://githubcom/hierynomus/license-gradle-plugin/issues/35#issuecomment-238446002 we can use version 0110 and make it work on jdk6 || good point lets do that instead @dmitriyzaitsev could you amend b27af329e91743e945e5971a3e5b7a4f839d0f03 with the working version? thanks in advance || @dmitriyzaitsev by id like to say you have done a proper pull request thats very nice! || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/746?srcpr) is 8673% (diff: 100%)> no coverage report found for **release/2x** at 9a4f30f> > powered by [codecov](https://codecovio?srcpr) last update [9a4f30f04b418a](https://codecovio/gh/mockito/mockito/compare/9a4f30f6e1897865171b772dd9c647d0ec9af02f04b418a0834fc5afd8b79ebde70315f5764c4aa4?srcpr) || @bric3 ive switched plugin version to `0110` rebased my branch and resubmitted || added fixes after @szczepiq review || @dmitriyzaitsev thanks! || thx @dmitriyzaitsev  ||
66,731,771,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes #731 implements retry rule for flaky tests previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in #731 to gain back stability on the build ## [current coverage](https://codecovio/gh/mockito/mockito/pull/771?srcpr) is 8658% (diff: 100%)> no coverage report found for **release/2x** at fc9329c> powered by [codecov](https://codecovio?srcpr) last update [fc9329cb109fe6](https://codecovio/gh/mockito/mockito/compare/fc9329cba14c55310c3d4640b6667cf0230d042ab109fe6abec8564c9bbac61978ec4b7ee4c44614?srcpr) || the amount of import reordering and stylistic changes is quite high sadly would be nice to prevent these for new prs || > the amount of import reordering and stylistic changes is quite high sadly would be nice to prevent these for new prsregarding the imports i followed the new style guide to lower this noise we can apply the style guide on the whole project also i think its possible to export/import the intellij/eclipse style config || @bric3 yes it is good you enforce it its that others dont :p seems like a good idea to fix it once and then block prs if they change it ||
67,801,803,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,adds a warning for ibm j9 vms if mock generation fails related to #801 this pr simply adds a warning for ibm j9 vms if the mock maker fails ## [current coverage](https://codecovio/gh/mockito/mockito/pull/803?srcpr) is 8662% (diff: 3846%)> no coverage report found for **release/2x** at c0fa34e> powered by [codecov](https://codecovio?srcpr) last update [c0fa34e293cbdc](https://codecovio/gh/mockito/mockito/compare/c0fa34edd5fe899a997e85278822078ace0b1fcb293cbdc2244c81e76ae94072a435e6cca32c4119?srcpr) || damn build not passing due to some certificate issue yet i think its safe to merge || yes i have seen that error multiple times now it seems to be related to the release tool of @szczepiq  || i believe its the jdk6 installed on travis that is not updated with new certificates of pluginsgradle bu i dont understand why atm didnt investigated either || the sooner we purge jdk6 the better :stuck_out_tongue:  || agreed theres a few things to do on mockito 2 still but i cant agree more ||
68,770,807,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"new opt-in stubbing strictness implemented in junit rules new api (for rationale see #769 for code review history see #770):```java//existing api:@rule public mockitorule mockito  mockitojunitrule()//proposed improvements:rule()strictness(strictnesslenient)rule()strictness(strictnesswarn)       // <-- is the defaultrule()strictness(strictnessstrict_stubs)  // <-- mockito 30 default```what ""strict stubbing"" means?- improved debuggability: the test fails early when code under test invokes stubbed method with different arguments- cleaner tests without unnecessary stubbings: the test fails when there are any unused stubs declared- cleaner more dry tests (""dont repeat yourself""): if you use mockitoverifynomoreinteractions() you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out [szczepans article on linkedin](https://wwwlinkedincom/pulse/curious-how-get-even-cleaner-tests-new-mockito-features-faber) with interactive rebase you can squash commits away or use `git reset --soft head~2` to reset the last 2 commits :smile:  || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/807?srcpr) is 8669% (diff: 9464%)> no coverage report found for **release/2x** at 613977a> powered by [codecov](https://codecovio?srcpr) last update [613977a3645794](https://codecovio/gh/mockito/mockito/compare/613977ad6c20edcfb86af8841fde9513148949a536457940f777fc35758087d64a4c567b2e37bb5c?srcpr) || thanks for the hint on slack about ""git push -f"" i could have used it to fix the original pr :) || for extra safety prefer `git push --force-with-lease` :) || agreed with @timvdlippe its simplier if you rebase interractively on your machine then push force-with-lease ) || "
69,820,821,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fixes #820 returnsargat to handle returning vararg as arrays attempt at fixing #820basically it makes the returnsargumentat answer a bit more smart about varargs but im not satisfied with the fix yet ## [current coverage](https://codecovio/gh/mockito/mockito/pull/821?srcpr) is 8657% (diff: 100%)> no coverage report found for **release/2x** at c2261b5> powered by [codecov](https://codecovio?srcpr) last update [c2261b51d28510](https://codecovio/gh/mockito/mockito/compare/c2261b5d6df55a68302875a5b70503856c51a2961d285102bb01150f6399604aa900bd3f3365e4e7?srcpr) || wouldnt it a bit confusing that `returnsargat(0)` returns different types for the same argument type?```javaint[] foo(int input) //returnsargat(0) would return an arrayint foo(int input) //returnsargat(0) would returns an int```what about handling varargs always as array? it would break the actual behaviour but i wonder if this would be an option in mockito 3? || @timvdlippe not sure what [_stfm_](https://wwwgooglefr/search?qsftm&oqsftm&aqschrome69i57j0l5334j0j7&sourceidchrome&ieutf-8#qdefine:sftm) means p@christianschwarz yeah i pondered on this  the use case is pretty limited though ie all following conditions have to be met for the type change to take effect : * vararg method* wanted index have to be the index of the vararg* type of the vararg have to be assignable to the return typein the end i think the new behavior makes sense> ```java> int[] foo(int input) // returnsargat(0) would return an array> int foo(int input) // returnsargat(0) would returns an int> ```> wouldnt it a bit confusing that returnsargat(0) returns different types for the same argument type?actually the current behavior is confusing hence the #820 )> what about handling varargs always as array? it would break the actual behaviour but i wonder if this would be an option in mockito 3?im not sure what you exactly mean but what about arg index beyond the first position of the vararg```javaint foo(int input)foo(1234)when()then(returnsargat(3))```as a user i wouldnt be happy without and i wouldnt be happy this behaviour changed || one of the thing that displease me here is that `answersvalidator` knows too much about answers id like a validable answer || @bric3 > im not sure what you exactly mean []what i wanted to say is a bit out of scope for this pr i try keep it short: mocktio should not expand varargs and treat them as regular arguments this causes also problems in various vararg+captor scenarios maybe it is better to handle varargs seperate:example: `int` return type ```javaint foo(int input)foo(1234)when()then(returnsargat(0) //^ throws an exception: arg0 of type int[] is not compatible with return type int//new api  for varargswhen()then(returnvarargat(0))//returns 1```example: `int[]` return type ```javaint[] bar(int input)bar(1234)when()then(returnsargat(0) //return the vararg int[]//new api  for varargswhen()then(returnvarargat(0))//^ throws an exception: arg0[0] of type int is not compatible with return type int[]```  || > one of the thing that displease me here is that answersvalidator knows too much about answers id like a validable answer+100 great idea! to keep `answer` a sam/functionalinterface an extra interface `validatableanswer` would be required right?  || > to keep answer a sam/functionalinterface an extra interface validatableanswer would be required right?yes> what i wanted to say is a bit out of scope for this pr i try keep it short: mocktio should not expand varargs and treat them as regular arguments this causes also problems in various vararg+captor scenarios maybe it is better to handle varargs seperate:i dont know i feel mockito should handle this without requiring another answer also since there can only be one vararg in a method the position this api would be akward```javaint[] bar(char a char b int input)bar(a b 1234)//new api  for varargswhen()then(returnvarargat(2)) // to return 2``` || > @timvdlippe not sure what stfm means pwas a typo meant seems fine to me || i still think the change is safe and predicatable from a users perspective however lets wait on #826  || rebased on top of release/2x its better now ill see if i can improve the code now || nice work and really cool idea about validableanswer>mockito should not expand varargs and treat them as regular arguments this causes also problems in various vararg+captor scenariosi have high level feedback hopefully you find it useful mockito is optimized for simplicity intuitiveness readability var args look in the code as a sequence of args and mockito models it similarly in the api (thats why we expand them) can we solve captor+vararg edge cases while keeping the api simple? || yeah agreed || ok now the implementation seems more readable it is ready for reviewive updated the javadoc to document the behavior as well || on mobile right now but implementation seems fine! ||
70,818,823,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,only resolve instrumented method after validating that an instance is… this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a `method` instance which requires using a `hashmap` which causes an infitite loop upon mocking the hash map type fixes #818 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/823?srcpr) is 8667% (diff: 7500%)> no coverage report found for **release/2x** at 589c3c1> powered by [codecov](https://codecovio?srcpr) last update [589c3c1ea35a0e](https://codecovio/gh/mockito/mockito/compare/589c3c1d996e76ec05ed256d277013fbf6cb405fea35a0eb57bef2d9cb8a4d231faeb91202ebcd9e?srcpr) || i agree i will look into it and make a wuggestion ||
71,820,826,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"introduce validable answers for early validation of stubbing ## overviewcustom answers are now more robust - users can add add validation logic to the answer implementation it can validate the return type early during stubbing in test rather than fail late during execution of code under test mockito team uses this api behind the hood for all custom implementations of answer interface now advanced users can leverage this new api too!```javaclass mycustomanswer implements answer validableanswer { // <-- note extra ""validableanswer"" interface  public object answer(invocationonmock invocation) {    // answer implementation  }  public void validatefor(invocationonmock invocation) {    // throw mockitoexception if answer cannot be applied to given invocation  }}``` ## implementationwhile trying to fix #820 / #821 i noticed that `answersvalidator` knew too much about other answers to fix the design issue i propose the following design :* introduce `validableanswer` in public api which is a single method interface that doesnt extends `answer`* each answer that wants to be validated hence implement this interfacebenefit reduced visibility of some methods in these answers each new answer that want to be validated can just by implementing the new contractvalidating returned value of a mocks default answer had to be handled differently ## [current coverage](https://codecovio/gh/mockito/mockito/pull/826?srcpr) is 8663% (diff: 9743%)> no coverage report found for **release/2x** at 855e24f> powered by [codecov](https://codecovio?srcpr) last update [855e24f61d56ad](https://codecovio/gh/mockito/mockito/compare/855e24f55d3a52c1ab3bd807c87bb664be35ad9d61d56ad45201f05764e9139cb1090c4663d0d74e?srcpr) || hey! from the description i dont quite get why we need additional public api what does this public api give to the users? || > what does this public api give to the users?users that like to write there own answers have now the opportunity to add a runtime usage validation this was not possible before the `answersvalidator` had the knowledge about predefined mockito answers harded coded it was not extensible from outside thats why this api is public  || updated `@since` to `238` || i think this could be used for better maintainability for framework developers like mockito sugar that could add specifics regarding scala method signatures etc || damn the correct version is 2310 || thanks for quick turnaround really nice change! || added a press release to the top of this pr description :) || @szczepiq a press release ? || >@szczepiq a press release ?by ""press release"" i mean a paragraph that describes the benefits for the users at a high level || oh you meant on the mockito class pointing to [this](https://githubcom/mockito/mockito/pull/826/files#diff-b414b69679387431a0e74e77f5c8460cr12) i find the feature less interesting than strict stubbing for end users i think the release notes should be enough || "
72,822,830,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,improves exception message in case a matcher is used for a primitive parameter this should help for cases like #822 npe can be raised by the jvm on the callsite of a matcher returning object like `any()`the thing is that the jvm does several thing like to allows a type to match a signature like `<t> t any()` type inference with java 8 cast and unboxing however `any()` can only return `null` so the jvm raises an npe on the cast opcode of course the problem isnt new but more possible due to java 8 flexibility thats why mockito had for a long time the primitivewhen mockito is used with the junit runner or the junit rule theres a `invaliduseofmatchersexception` raised **after** the npe with a message about misplaced matchers this exception is raised because the matchers were not consumed by the mock since the npe is raised first so this exception is correct and can help the neophyte to discover the primitive variant like `anyint()` i love this change! the description of the pr is really good i immediately was able to understand the use case mockito is great because we never stop improving the ux - the exception messages and suchbig thanks! ||
73,825,831,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,test clean up according to discussions for rememberinglisteners according to issue @719 we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in #825 that build was failing for some reason not obvious and had 1 merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr ## [current coverage](https://codecovio/gh/mockito/mockito/pull/831?srcpr) is 8667% (diff: 100%)> merging [#831](https://codecovio/gh/mockito/mockito/pull/831?srcpr) into [release/2x](https://codecovio/gh/mockito/mockito/branch/release/2x?srcpr) will not change coverage```diff@@           release/2x       #831   diff @@  files              284        284            lines             5666       5666            methods              0          0            messages             0          0            branches           924        924            hits              4911       4911            misses             563        563            partials           192        192          ```> powered by [codecov](https://codecovio?srcpr) last update [2105afcda28c81](https://codecovio/gh/mockito/mockito/compare/2105afc9792643c362f46a64d92a15e9642e6e8eda28c8186faf640d198a0c1f9e49e21b76d591e5?srcpr) || @bric3 @timvdlippe sorry for this new pr with the same code previously we were discussing #825 in an attempt to fix the pr github lost the link and i couldnt reconnect it this pr is building and has only one commit message and no merge || looks good to me thanks for the improvement ||
74,838,839,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"fixes #838 : adds a matches(pattern) following discussion in #838 it is sensible to add a mockito matcher that can take a `pattern` as an argumentthe usage is the same as `matches(string)````javawhen(mockonearg(matches(patterncompile(""[a-z]+\\d\\d""))))thenreturn()```although it allows to build more complex regex especially with regular expression flags @mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right away || >@mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right awayabsolutelyupdating the public api needs review from other team mates but in this case its best to move fast its an overloaded method very natural complement to the existing one thanks @bric3! || yes exactly :) ||"
75,840,843,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,junit rule strictness can be tweaked per test method see the design and rationale at #840please review! ## [current coverage](https://codecovio/gh/mockito/mockito/pull/843?srcpr) is 8649% (diff: 9482%)> merging [#843](https://codecovio/gh/mockito/mockito/pull/843?srcpr) into [release/2x](https://codecovio/gh/mockito/mockito/branch/release/2x?srcpr) will increase coverage by **003%**```diff@@           release/2x       #843   diff @@  files              287        287            lines             5690       5703    +13     methods              0          0            messages             0          0            branches           919        920     +1   + hits              4920       4933    +13     misses             574        574            partials           196        196          ```> powered by [codecov](https://codecovio?srcpr) last update [75807878626cfd](https://codecovio/gh/mockito/mockito/compare/7580787a02fd913a8aae76f8120abd7848ad493f8626cfd11efe7c286e8893fcbd0da6ae2f285579?srcpr) || any other feedback? id love to merge this change! || merging tomorrow morning unless theres feedback thanks @timvdlippe for review! ||
76,860,861,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,backport release/2x changes to master (20161231) + fix for #860 backport release/2x changes to master + the fix for #860 reported also #862 for broken inlinebytebuddymockmakertest test with java 9 || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/861?srcpr) is 8655% (diff: 8831%)> merging [#861](https://codecovio/gh/mockito/mockito/pull/861?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **018%**```diff@@             master       #861   diff @@  files           277        287    +10     lines          5563       5704   +141     methods           0          0            messages          0          0            branches        908        917     +9   + hits           4825       4937   +112   - misses          550        573    +23   - partials        188        194     +6   ```> powered by [codecov](https://codecovio?srcpr) last update [b5b087eae06051](https://codecovio/gh/mockito/mockito/compare/b5b087e1ca7868e0c0e187ae955526884b8ff136ae06051c35c9b0e5efeba3b450978e5e1ddc37f3?srcpr) || its green anyone willing to approve/provide further feedback? || lgtm! ||
77,384,865,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:- [x]  address @bric3 feedback  - [x] getter  - [x] javadoc- [x] review documentation for consistency  - [x] mockitosession()  - [x] mockitosessionbuilder  - [x] strictness  - [x] mockitohint  - [x] potentialstubbingproblem  - [x] unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking ## [current coverage](https://codecovio/gh/mockito/mockito/pull/865?srcpr) is 8659% (diff: 9000%)> no coverage report found for **release/2x** at 23c75bd> powered by [codecov](https://codecovio?srcpr) last update [23c75bdd61f877](https://codecovio/gh/mockito/mockito/compare/23c75bd0fd190a08c7bbcc40ad298f52cc8f90afd61f87757199e467e6f3ba608d0a3c30affc815f?srcpr) || bit busy in this couple of weeks il give my review asap probably next week || i think this api makes more sense if it is actually used in the junit rule and runner eg this api exposes the methods and implementation and the rule/runner call this api accordingly || thanks guys! waiting for feedback@timvdlippe i completely agree this api should be used by the rule / runner what are your thoughts about exposing this api to the users? || @szczepiq not sure what the benefit is for users therefore i would like this pr to implement it as internal api used in the rule and runner later we can see if we want to expose it or not || @timvdlippe thanks for feedback! you are not sure about benefits of a) strict stubbing or b) strict stubbing availibility/need outside of runner/rule? || @szczepiq b strict stubbing is very valuable but i am not sure what a user could do with the api outside of a runner/rule i think keeping it internal is just fine for now || ok what about users that cannot use our junit rule/runner? || at this moment i am not aware of users requesting this still we can initially keep it internal and expose it later if requested? || im with you on being very cautious about introducing features without user feedback or request i think that this exactly the approach the core team should have to build a great librarything is that in this situation there are users needing it for example im frustrated that myself and other engineers at linkedin cannot use strict stubbing (most of the tests use testng there are also usages of custom runners)another use case are existing integrations like [jukito](https://githubcom/arcbees/jukito) [springockito](http://wwwspringockitoorg) etc users of those frameworks wont be able to take advantage of strict stubbingin general if the team chooses to implement a feature such us strict stubbing then we should make the usage of the feature easy and flexible we should not lock in users with junit for example mockito has ""@mock"" annotation and offers flexible way of using that annotation: with junit rule runner and without them (initmocks() method)also keep in mind that the new api is ""@incubating"" so we could potentially take it away if we dont find it valuablethoughts? || > myself and other engineers at linkedin cannot use strict stubbingi was not aware of this usecase as no issue was created given that this is requested by user making it public is okay with me! || pushed changes new api is ready some todos javadoc updates in code are pending || i will try to review the pushed change tonight but im a tad overwhelmed at this moment || i added game plan to the pr description thanks so much for review! the code will not be changed much (individual commits can be reviewed anyway) || i just rebased and bumped minor version to 270 this code is ready for final review and merge i dont plan to work on the code unless there is more feedbackthe remaining unfinished action item in the description is a non-code change and does not block the review / merge || if there is no more feedback id like to merge thanks guys for comprehensive review and pointing out improvements!!! || "
78,857,865,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:- [x]  address @bric3 feedback  - [x] getter  - [x] javadoc- [x] review documentation for consistency  - [x] mockitosession()  - [x] mockitosessionbuilder  - [x] strictness  - [x] mockitohint  - [x] potentialstubbingproblem  - [x] unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking ## [current coverage](https://codecovio/gh/mockito/mockito/pull/865?srcpr) is 8659% (diff: 9000%)> no coverage report found for **release/2x** at 23c75bd> powered by [codecov](https://codecovio?srcpr) last update [23c75bdd61f877](https://codecovio/gh/mockito/mockito/compare/23c75bd0fd190a08c7bbcc40ad298f52cc8f90afd61f87757199e467e6f3ba608d0a3c30affc815f?srcpr) || bit busy in this couple of weeks il give my review asap probably next week || i think this api makes more sense if it is actually used in the junit rule and runner eg this api exposes the methods and implementation and the rule/runner call this api accordingly || thanks guys! waiting for feedback@timvdlippe i completely agree this api should be used by the rule / runner what are your thoughts about exposing this api to the users? || @szczepiq not sure what the benefit is for users therefore i would like this pr to implement it as internal api used in the rule and runner later we can see if we want to expose it or not || @timvdlippe thanks for feedback! you are not sure about benefits of a) strict stubbing or b) strict stubbing availibility/need outside of runner/rule? || @szczepiq b strict stubbing is very valuable but i am not sure what a user could do with the api outside of a runner/rule i think keeping it internal is just fine for now || ok what about users that cannot use our junit rule/runner? || at this moment i am not aware of users requesting this still we can initially keep it internal and expose it later if requested? || im with you on being very cautious about introducing features without user feedback or request i think that this exactly the approach the core team should have to build a great librarything is that in this situation there are users needing it for example im frustrated that myself and other engineers at linkedin cannot use strict stubbing (most of the tests use testng there are also usages of custom runners)another use case are existing integrations like [jukito](https://githubcom/arcbees/jukito) [springockito](http://wwwspringockitoorg) etc users of those frameworks wont be able to take advantage of strict stubbingin general if the team chooses to implement a feature such us strict stubbing then we should make the usage of the feature easy and flexible we should not lock in users with junit for example mockito has ""@mock"" annotation and offers flexible way of using that annotation: with junit rule runner and without them (initmocks() method)also keep in mind that the new api is ""@incubating"" so we could potentially take it away if we dont find it valuablethoughts? || > myself and other engineers at linkedin cannot use strict stubbingi was not aware of this usecase as no issue was created given that this is requested by user making it public is okay with me! || pushed changes new api is ready some todos javadoc updates in code are pending || i will try to review the pushed change tonight but im a tad overwhelmed at this moment || i added game plan to the pr description thanks so much for review! the code will not be changed much (individual commits can be reviewed anyway) || i just rebased and bumped minor version to 270 this code is ready for final review and merge i dont plan to work on the code unless there is more feedbackthe remaining unfinished action item in the description is a non-code change and does not block the review / merge || if there is no more feedback id like to merge thanks guys for comprehensive review and pointing out improvements!!! || "
79,898,865,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"new strict stubbing api - mockitosession see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:- [x]  address @bric3 feedback  - [x] getter  - [x] javadoc- [x] review documentation for consistency  - [x] mockitosession()  - [x] mockitosessionbuilder  - [x] strictness  - [x] mockitohint  - [x] potentialstubbingproblem  - [x] unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking ## [current coverage](https://codecovio/gh/mockito/mockito/pull/865?srcpr) is 8659% (diff: 9000%)> no coverage report found for **release/2x** at 23c75bd> powered by [codecov](https://codecovio?srcpr) last update [23c75bdd61f877](https://codecovio/gh/mockito/mockito/compare/23c75bd0fd190a08c7bbcc40ad298f52cc8f90afd61f87757199e467e6f3ba608d0a3c30affc815f?srcpr) || bit busy in this couple of weeks il give my review asap probably next week || i think this api makes more sense if it is actually used in the junit rule and runner eg this api exposes the methods and implementation and the rule/runner call this api accordingly || thanks guys! waiting for feedback@timvdlippe i completely agree this api should be used by the rule / runner what are your thoughts about exposing this api to the users? || @szczepiq not sure what the benefit is for users therefore i would like this pr to implement it as internal api used in the rule and runner later we can see if we want to expose it or not || @timvdlippe thanks for feedback! you are not sure about benefits of a) strict stubbing or b) strict stubbing availibility/need outside of runner/rule? || @szczepiq b strict stubbing is very valuable but i am not sure what a user could do with the api outside of a runner/rule i think keeping it internal is just fine for now || ok what about users that cannot use our junit rule/runner? || at this moment i am not aware of users requesting this still we can initially keep it internal and expose it later if requested? || im with you on being very cautious about introducing features without user feedback or request i think that this exactly the approach the core team should have to build a great librarything is that in this situation there are users needing it for example im frustrated that myself and other engineers at linkedin cannot use strict stubbing (most of the tests use testng there are also usages of custom runners)another use case are existing integrations like [jukito](https://githubcom/arcbees/jukito) [springockito](http://wwwspringockitoorg) etc users of those frameworks wont be able to take advantage of strict stubbingin general if the team chooses to implement a feature such us strict stubbing then we should make the usage of the feature easy and flexible we should not lock in users with junit for example mockito has ""@mock"" annotation and offers flexible way of using that annotation: with junit rule runner and without them (initmocks() method)also keep in mind that the new api is ""@incubating"" so we could potentially take it away if we dont find it valuablethoughts? || > myself and other engineers at linkedin cannot use strict stubbingi was not aware of this usecase as no issue was created given that this is requested by user making it public is okay with me! || pushed changes new api is ready some todos javadoc updates in code are pending || i will try to review the pushed change tonight but im a tad overwhelmed at this moment || i added game plan to the pr description thanks so much for review! the code will not be changed much (individual commits can be reviewed anyway) || i just rebased and bumped minor version to 270 this code is ready for final review and merge i dont plan to work on the code unless there is more feedbackthe remaining unfinished action item in the description is a non-code change and does not block the review / merge || if there is no more feedback id like to merge thanks guys for comprehensive review and pointing out improvements!!! || "
80,866,867,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fixes #866 should not throw npe when custom exception fillinstacktrace returns null fixes #866 @wuwen5 can you rebase this commit on the latest `release/2x`also thanks for the contribution || the build is failingthe reason is `please export gh_token env variable first expression: javalangsystemenv[it] values: it  gh_token`@timvdlippe that sound familiar however i believe this was fixed a couple of weeks ago ||
81,860,868,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,fixes #860 jacaco synthetic fields are not anymore final in 078 fixes #860 this internal assumed jacoco fields will always be `static final` obviously not jacoco 078 changed that the simple fix was to make the source field _accessible_ instead of skipping this fieldhence removing the test exclusion  
82,879,880,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixes #879: argumentmatchers javadoc grammar improvement fixed grammar issue in `argumentmatchers`:> this implementation is due static type safety imposed by java compilershould be:> this implementation is due to static type safety imposed by java compilerthis pr fixes issue #879 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/880?srcpr) is 8646% (diff: 100%)> merging [#880](https://codecovio/gh/mockito/mockito/pull/880?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **009%**```diff@@             master       #880   diff @@  files           287        287            lines          5704       5703     -1     methods           0          0            messages          0          0            branches        917        915     -2   - hits           4937       4931     -6   - misses          573        575     +2   - partials        194        197     +3   ```> powered by [codecov](https://codecovio?srcpr) last update [64c2f61a036d08](https://codecovio/gh/mockito/mockito/compare/64c2f61274a59eb3d86f1f122d71a80d9a1231bea036d08e2637dff2ce26ab7b61296a57c7e79c7a?srcpr) || thanks! ||
83,879,881,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,fixed #879: argumentmatchers grammar fix cherry-pick pr #880 to the 2x branchthis pr should fix issue #879 on this branch too  
84,878,885,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,spy annotation reports better error message if instance creation is impossible this simple piece of code prevents the `spyannotationengine` to try create a spy instance for a some inner private class with different set of modifierswhile preventing execution it reports slightly better error messages before some time the cause was `null`  this should fix #878 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/885?srcpr) is 8658% (diff: 9189%)> no coverage report found for **release/2x** at e983acd> powered by [codecov](https://codecovio?srcpr) last update [e983acd9d81a1e](https://codecovio/gh/mockito/mockito/compare/e983acdef8da0076f1980f622363d179e1eff6809d81a1e5a3dbaba47466f65bc77c309c847e584e?srcpr) || the diff is quite cluttered with unrelated changes https://githubcom/mockito/mockito/pull/885/files?w1 makes it a bit easier but still a lot of other changes going onif i can digest the changes correctly i think they are fine || @timvdlippe theres some reformat and cleanup commit the most interesting is the latest commit || >@timvdlippe theres some reformat and cleanup commit the most interesting is the latest committhis is useful information i can focus on the last commit || comments addressed ||
85,874,891,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,update to byte buddy 164: fixes bridge method resolution for generic types fixes #874  
86,895,896,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,clarify documentation for consecutive stubbing fixes #895as of now the documentation does not clarify the difference of behaviour between chaining multiple thenreturn() statements and using multiple when/thenreturn statements when someone attempts to perform consecutive stubbingi added a warning/clarification in the documentation with a corresponding example so that its more clear (especially for new users of mockito) ## [current coverage](https://codecovio/gh/mockito/mockito/pull/896?srcpr) is 8657% (diff: 100%)> no coverage report found for **release/2x** at e983acd> powered by [codecov](https://codecovio?srcpr) last update [e983acd85c6a4d](https://codecovio/gh/mockito/mockito/compare/e983acdef8da0076f1980f622363d179e1eff68085c6a4deae289d6c607adef2d4c68d98a9767870?srcpr) || hi @dimosr thank you for the javadoc update !could you rework the javadoc a bit ? ||
87,814,905,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #814 : a elements were missing the name attribute meaningful links probably never worked as expectedthe `a` elements were missing the `name` attribute so the browser couldnt find the matching part of the documentfor reference : [598 navigating to a fragment identifier](http://wwww3org/html/wg/drafts/html/master/browsershtml#scroll-to-fragid)> for html documents (and the text/html mime type) the following processing model must be followed to determine what the indicated part of the document is> > 1 parse the url and let fragid be the <fragment> component of the url> 2 if fragid is the empty string then the indicated part of the document is the top of the document> 3 if there is an element in the dom that has an id exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here> 4 if there is an a element in the dom that has a name attribute whose value is exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here> 5 otherwise there is no indicated part of the document i am merging this one as this is very simple || hm dont want a quick review? i try to never self-merge as it got me numerous times already || the change is damn simple (its just adding `name` attribute) fixed with a simple regexp || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/905?srcpr) is 8658% (diff: 100%)> no coverage report found for **release/2x** at de0a772> powered by [codecov](https://codecovio?srcpr) last update [de0a77265ad7d8](https://codecovio/gh/mockito/mockito/compare/de0a7725667bbc025f1bd78310fbbf8cde4d8bb665ad7d84cc9c46e7b1eb9d8477afa3b94aed2a30?srcpr) ||
88,426,907,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,unified all number of invocations checker in numberofinvocationschecker fixes #426this pr unifies the functionality of `nongreedynumberofinvocationschecker` `numberofinvocationscheckerinorder `and `numberofinvocationschecker `in static methods of the type `numberofinvocationschecker` this saves ~50 lines of code and increases readability on the call sides ## [current coverage](https://codecovio/gh/mockito/mockito/pull/907?srcpr) is 8656% (diff: 9259%)> no coverage report found for **release/2x** at f967b93> powered by [codecov](https://codecovio?srcpr) last update [f967b93fe0e7dc](https://codecovio/gh/mockito/mockito/compare/f967b930042c624fa75c059aa6a5b1c5d013f6affe0e7dc198cdc587fd7597ad819a8ca22e6402ca?srcpr) || @timvdlippe -  the unification of the 3 classes helps to keep the code base consistent we have a similar unification of checking methods in `missinginvocationchecker `and `atleastxnumberofinvocationschecker` -  the call sides can now use static imports which improves the readability:```javachecknumberofinvocations(invocations wanted wantedcount)```vs```javanumberofinvocationschecker numberofinvocations  new numberofinvocationschecker()      numberofinvocationscheck(invocations wanted wantedcount)```  || @timvdlippe can you reopen #426? it was automatically closed || sure then please alter the pr description to references #426 instead offixeson fri 27 jan 2017 23:13 christian schwarz <notifications@githubcom>wrote:> @timvdlippe <https://githubcom/timvdlippe> can you reopen #426> <https://githubcom/mockito/mockito/issues/426>? it was automatically> closed>> —> you are receiving this because you were mentioned>>> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/907#issuecomment-275789518> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdb3t4d6ayo027nfsqglzizjzax04qks5rwmwngajpzm4luk6w>> > ||
89,426,908,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,simplified the creation of argumentsaredifferent-exceptions relates to #426 this pr simplifies the creation of argumentsaredifferent-exceptions saving 2 classes and ~40 lines of code # [codecov](https://codecovio/gh/mockito/mockito/pull/908?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`release/2x@1cbc7f8`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)> the diff coverage is `80%````diff@@              coverage diff               @@##             release/2x     #908   +/-   ##  coverage               ?   8669%             complexity             ?     2256             files                  ?      287             lines                  ?     5736             branches               ?      664             hits                   ?     4973             misses                 ?      574             partials               ?      189```| [impacted files](https://codecovio/gh/mockito/mockito/pull/908?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/compare/1cbc7f821d48c38cd006036dcc2b90c0266939bd26094a57494794fe5b578342d477922f7fdac09e?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9166% <100%> (ø)` | `88 <ø> (?)` | || [a/org/mockito/internal/junit/exceptionfactoryjava](https://codecovio/gh/mockito/mockito/compare/1cbc7f821d48c38cd006036dcc2b90c0266939bd26094a57494794fe5b578342d477922f7fdac09e?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9fegnlchrpb25gywn0b3j5lmphdme) | `7857% <7857%> (ø)` | `5 <5> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/908?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/908?srcpr&elfooter) last update [1cbc7f826094a5](https://codecovio/gh/mockito/mockito/compare/1cbc7f821d48c38cd006036dcc2b90c0266939bd26094a57494794fe5b578342d477922f7fdac09e?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @szczepiq @bric3 the tests are in place now || bump || why the hell it is so important to end a java file with a new-line seriously why the build must break??? same goes for a single whitespace at the end of a line it adds a lot of more workload to fix this non issues for no benefit || @christianschwarz the checkstyle configuration is incubating at the moment primarily it enforces the same code style such that we as reviewers have an easier time and process pull requests faster (cutting out the noise) these issues you can check by running `/gradlew build` locally so you should not rely on ci to error on them || i know!  || better provide a formatter template so it can be done by the ide doing it by hand is a stubid frustrating job || @christianschwarz hm i have configured my intellij to do this automatically for me so it is not bothering my workflow maybe you can configure your ide to do the same? that was actually the goal of enforcing checkstyle: every developer configures the ide to fix this automatically || can you export your formatter and add a download-link to wiki contribution guidelines? || finally ready to merge ||
90,426,914,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,refactored removefirstline to a static utility class relates to #426 refactored `removefirstline` to a static utility classi would like to unifiy `removefirstline` `decamelizer` and `stringjoiner` to a new type `stringutil` they all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes any thoughts? ## [current coverage](https://codecovio/gh/mockito/mockito/pull/914?srcpr) is 8664% (diff: 8620%)> no coverage report found for **release/2x** at 7ef9251> powered by [codecov](https://codecovio?srcpr) last update [7ef92513d35055](https://codecovio/gh/mockito/mockito/compare/7ef9251a6cb304ccbd9928da18780da5941a8e9b3d3505520d05cd900876fb8b7923e99231e2f8d1?srcpr) || i think refactoring these classes to `stringutil` makes the most sense we can do that in 1 pr instead of 4 separate lets see what the others think || okay lets see what others say! i added a commit containing the unification + missing tests if requested i will remove the commit ||
91,927,933,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,support for return type void in doesnothinganswer fixes #927 this pr allows to use `donothing()` for methods with return type `javalangvoid` like void-methods  to solve this `invocationinfoisvoid()` checks now the return type for the pseudo-type of the keyword `void` or `void` # [codecov](https://codecovio/gh/mockito/mockito/pull/933?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`release/2x@3e9a94b`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)```diff@@              coverage diff               @@##             release/2x     #933   +/-   ##  coverage               ?   8656%             complexity             ?     2254             files                  ?      289             lines                  ?     5738             branches               ?      663             hits                   ?     4967             misses                 ?      582             partials               ?      189```| [impacted files](https://codecovio/gh/mockito/mockito/pull/933?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [kito/internal/stubbing/answers/invocationinfojava](https://codecovio/gh/mockito/mockito/compare/3e9a94b7b9938dbdb882e28c24c2b163c2d19390837ba54e74e1bf3f1663ffc791f3b079e81e75b2?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl0ludm9jyxrpb25jbmzvlmphdme) | `95% <100%> (ø)` | `17 <3> (?)` | || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/compare/3e9a94b7b9938dbdb882e28c24c2b163c2d19390837ba54e74e1bf3f1663ffc791f3b079e81e75b2?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `909% <100%> (ø)` | `18 <1> (?)` | || [mockito/internal/stubbing/answers/doesnothingjava](https://codecovio/gh/mockito/mockito/compare/3e9a94b7b9938dbdb882e28c24c2b163c2d19390837ba54e74e1bf3f1663ffc791f3b079e81e75b2?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl0rvzxnob3roaw5nlmphdme) | `100% <100%> (ø)` | `6 <3> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/933?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/933?srcpr&elfooter) last update [3e9a94b837ba54](https://codecovio/gh/mockito/mockito/compare/3e9a94b7b9938dbdb882e28c24c2b163c2d19390837ba54e74e1bf3f1663ffc791f3b079e81e75b2?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
92,685,935,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,new feature - enable mocking using constructor arguments ## motivation and design - see #685to quote the requirement (see in-depth design in #685):> we already support spying on abstract classes by allowingparameterless constructor however there is no support forconstructor parametersthis has been asked about long time ago mockito api is not robustenough if it supports mocking with constructor but not when one hasany constructor parametersthis patch enhances the `mocksettings#useconstrctor()` method (as suggested in the alternative api comment in the issue) and addsoptional ellipsis arguments that are passed to the constructorthe patch streamlines the creation of mocks via constructors to asingle flow where using a no-arg constructor or an enclosing classare just private cases of this flow and dont require their ownspecial treatment wow! thank you for swift contribution! i will review once i have a bandwidth || apologies the previous push had a couple of failing tests due to a missed file ive updated it and it should work now || # [codecov](https://codecovio/gh/mockito/mockito/pull/935?srcpr&elh1) report> merging [#935](https://codecovio/gh/mockito/mockito/pull/935?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/b413bbeee9f6dc4b61bee8fb394c0c376dc48075?srcpr&eldesc) will **increase** coverage by `008%`> the diff coverage is `100%````diff@@               coverage diff                @@##             release/2x    #935      +/-   ##+ coverage          8672%   868%   +008%     - complexity          2254    2270      +16       files                287     287                lines               5731    5761      +30       branches             663     672       +9     + hits                4970    5001      +31     + misses               573     571       -2     - partials             188     189       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/935?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/compare/b413bbeee9f6dc4b61bee8fb394c0c376dc480754573cdb0eed2493ddd09d4470ecd853d3a555b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :x: || [creation/instance/defaultinstantiatorproviderjava](https://codecovio/gh/mockito/mockito/compare/b413bbeee9f6dc4b61bee8fb394c0c376dc480754573cdb0eed2493ddd09d4470ecd853d3a555b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9pbnn0yw5jzs9ezwzhdwx0sw5zdgfudglhdg9yuhjvdmlkzxiuamf2yq) | `100% <100%> (ø)` | `5 <3> (ø)` | :x: || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/compare/b413bbeee9f6dc4b61bee8fb394c0c376dc480754573cdb0eed2493ddd09d4470ecd853d3a555b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `9512% <100%> (-488%)` | `18 <1> (-1)` | || [nal/creation/instance/constructorinstantiatorjava](https://codecovio/gh/mockito/mockito/compare/b413bbeee9f6dc4b61bee8fb394c0c376dc480754573cdb0eed2493ddd09d4470ecd853d3a555b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9pbnn0yw5jzs9db25zdhj1y3rvckluc3rhbnrpyxrvci5qyxzh) | `100% <100%> (+129%)` | `25 <15> (+12)` | :white_check_mark: || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/compare/b413bbeee9f6dc4b61bee8fb394c0c376dc480754573cdb0eed2493ddd09d4470ecd853d3a555b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `92% <100%> (+095%)` | `39 <3> (+2)` | :white_check_mark: || [to/internal/configuration/spyannotationenginejava](https://codecovio/gh/mockito/mockito/compare/b413bbeee9f6dc4b61bee8fb394c0c376dc480754573cdb0eed2493ddd09d4470ecd853d3a555b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul1nweufubm90yxrpb25fbmdpbmuuamf2yq) | `95% <0%> (-319%)` | `26% <0%> (+2%)` | || [o/exceptions/verification/wantedbutnotinvokedjava](https://codecovio/gh/mockito/mockito/compare/b413bbeee9f6dc4b61bee8fb394c0c376dc480754573cdb0eed2493ddd09d4470ecd853d3a555b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl3zlcmlmawnhdglvbi9xyw50zwrcdxrob3rjbnzva2vklmphdme) | `100% <0%> (+3333%)` | `2% <0%> (+1%)` | :white_check_mark: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/935?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/935?srcpr&elfooter) last update [b413bbe6a82c03](https://codecovio/gh/mockito/mockito/compare/b413bbeee9f6dc4b61bee8fb394c0c376dc480756a82c030756a30932406d6b807e7ca34f20631e3?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || question: this patch was built on top of master for the next release should i have built it on top of release/2x? || @mureinik yes please 😄  || @timvdlippe doneits slightly less elegant in 2x as the source compatibility level is 16 not 18 (so no `stream`s or `optional`s) but the idea remains the samefeedback more than welcome || @christianschwarz thanks for the comments - will take a look tomorrow hopefully when i have a bit more bandwidth || @szczepiq @christianschwarz thanks for your comments i was a bit swamped last week and didnt manage to address the earlier ones will look into all of them this week - hopefully tomorrow or tuesday || rebased in order to apply pr #934 so i can build locally and get the ci passing no other changes applied yet || uploaded an updated patch changes since last revision (in response to comments above):- rebased on top of current 2x branch so that it can build locally with java 8- added a null check in `useconstrutor` allowing to clear up some other null checks- added documentation javadoc and since tags- added some more test casesopen issues:- handling ambiguity - do we try to infer the consturctors argument types from the argument list? if so how do we handle ambiguity or actually - do we? isnt it easier to throw up an exception?- exception messages as detailed aboveand of course any other comments are more than welcome || > options for ambiguity:> >    1 use 1st constructor that matches>    2 throw an exception3 use the constructor the compiler would choose[classgetconstructor(class<?> argtypes)](https://docsoraclecom/javase/8/docs/api/java/lang/classhtml#getconstructor-javalangclass-) should do the trick || wrt handling ambiguity im starting to think that throwing an exception is the only viable option here to recap the suggestions:> use 1st constructor that matches`class#getconstructors` does not guarantee anything about the order of constructors returned making this behavior very fragile - not only could adding new constructors break existing tests running the same tests from different jdks could potentially produce different results> use the constructor the compiler would choose classgetconstructor(class<?> argtypes) should do the trickunless ive completely misunderstood the suggestion this wont work `getconstrucor(class<?>)` matches the static types the constructor expects since were only providing the arguments themselves all we have is the runtime types the following example should illustrate my point (uploaded as a `txt` file due to githubs restructions - just rename it to `java` if you want to compile and run it):[constructorfunjavatxt](https://githubcom/mockito/mockito/files/784964/constructorfunjavatxt)unless anyone has a better idea ill amend this patch to throw an exception if there are two potential constructors that match the given argument list || @mureinik sorry my fault it was pretty  sure getconstructor() would make it fyi: apache-commons-lang has [constructorutils](https://githubcom/apache/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/reflect/constructorutilsjava#l244) but i guess it wont work if null arguments are involved || @christianschwarz `constructorutils` offers a slight improvement on our suggested first approach to quote the documentation: >first it checks if there is a constructor matching the exact signature if not then all the constructors of the class are checked to see if their signatures are assignment-compatible with the parameter types the first assignment-compatible matching constructor is returnedwe could implement such a behavior but imho it still suffers from all the problems i listed above || ci seems to complain about this:```import static orgmockitointernalutilstringjoinerjoin                                       ^  symbol:   class stringjoiner  location: package orgmockitointernalutil/home/travis/build/mockito/mockito/src/main/java/org/mockito/internal/util/platformjava:11: error: static import only from classes and interfacesimport static orgmockitointernalutilstringjoinerjoin^/home/travis/build/mockito/mockito/src/main/java/org/mockito/internal/util/platformjava:55: error: cannot find symbol            description  join(                          ^  symbol:   method join(stringstringstringstringstringstringstring)  location: class platform```my patch does not contain any such codeis travis automatically rebasing it?edit:seems that travis is indeed rebasing submitted patches the 2x build is currently broken presumably by a faulty backporting of a patch from master that attempts to use `stringjoiner` my pr #959 should fix it || new patch includes:- made a decision about multiple matching constructors (an exception is thrown in the discussion above we couldnt find any better idea)- improved error messages specifically distinguished the 0-arg consturctor usecase (looking at the discussion above i cant find any way that distinguighing an inner class would produce better messages)- added tests for above scenarios and beefed up existing tests once pr #959 or something equivalent is merged and the the build passes again travis should produce coverage details on this patch if anything is missing ill add tests to cover itas always feedback more than welcome || latest push was rebased on top on recent build-fix in order to force ci to run and generate coverage report || the travis build is done but it doesnt report back to this page what am i missing? || probably an issue with github/travis it aint your issue 😄  || @timvdlippe i figured as much i wonder though if theres any way to force it to rerun id really like to see the codecov report for this patch || i have restarted one of the jobs hopefully that should flush codecov/travis || @szczepiq we kinda lost speed on this - would you have the time to take a look at the revised patch? || @mureinik thank you for your patience! ive been on holidays in mexico and returned this weekend i will review by the end of tomorrow and most likely merge :) || also can you rebase? there are some conflicts thanks! || updated the pr with new patches as per @szczepiq s review above this revision contains:- improved error messages note that as discussed above new patches were added to extend `checks` functionality while this is needed for the error messages in this patch it is not intrinsic to it and may prove useful in other future work too- added missing test cases and made the existing ones more explicit- rebased against `relesae/2x` and solved merge conflicts in `mockitojava` `@since` tags and documentation entries were updated to refer to 2714 (which this patch will hopefully be a part of) instead of 2712 which has already been released || reviewing ||
93,680,942,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,allow spying on interfaces so that it is convenient to work with java 8 default methods fixes #680 # [codecov](https://codecovio/gh/mockito/mockito/pull/942?srcpr&elh1) report> merging [#942](https://codecovio/gh/mockito/mockito/pull/942?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/64ab2f7f52c2cc8f0a3381df5fecbc8d30b5d765?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `n/a````diff@@                coverage diff                @@##             release/2x     #942      +/-   ##+ coverage          8656%   8658%   +002%     + complexity          2254     2252       -2       files                289      289                lines               5738     5733       -5       branches             663      662       -1     - hits                4967     4964       -3     + misses               582      581       -1     + partials             189      188       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/942?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [to/internal/configuration/spyannotationenginejava](https://codecovio/gh/mockito/mockito/compare/64ab2f7f52c2cc8f0a3381df5fecbc8d30b5d765552353622156598e88d0ff17a2f40f8d80779a06?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul1nweufubm90yxrpb25fbmdpbmuuamf2yq) | `9818% <ø> (+318%)` | `24 <ø> (-2)` | :x: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/942?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/942?srcpr&elfooter) last update [64ab2f787f3a5e](https://codecovio/gh/mockito/mockito/compare/64ab2f7f52c2cc8f0a3381df5fecbc8d30b5d76587f3a5ee98fcc7c4b6d6d30aec0a2e64562a36eb?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @timvdlippe im ok with not having dedicated coverage for java8 in release/2x we dont have a way of doing it right now so i would not want to block this pr || we did have some tests for java 8 in release 2 so it can be done but lets drop it as requirement for this pr || thanks for review!let me know if the javadoc change looks okay to you || restarted the travis ci jobs and will merge as soon as they are green! ||
94,688,972,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,verifies #688: acceptance test to prevent future regression added an acceptance test to verify #688 this is going to fail until mockito updates to the next version of byte buddy (that re-fixes #688) that contains the following commit: https://githubcom/raphw/byte-buddy/commit/98eaf113681b97053419b292ff342f4ea3321879 || could you rebase on `release/2x`? this test should pass now :smile:  || @timvdlippe rebased on `release/2x` and tests are passing now || # [codecov](https://codecovio/gh/mockito/mockito/pull/972?srcpr&elh1) report> merging [#972](https://codecovio/gh/mockito/mockito/pull/972?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/0fe2644767b4526e4db961b511f9c59c34158e6c?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/972/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/972?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x     #972   +/-   ##  coverage          8686%   8686%             complexity          2290     2290             files                287      287             lines               5801     5801             branches             684      684             hits                5039     5039             misses               571      571             partials             191      191```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/972?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/972?srcpr&elfooter) last update [0fe264479c660b](https://codecovio/gh/mockito/mockito/pull/972?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you guys! nice and clean change and makes mockito safer for our users!!! ||
95,974,979,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #974: fix to get correct stubbing location with inline mocking - fix stacktracefilter to support inline mocking- add one test to stacktracefiltertest- add stubbinglocationtest into inline subprojectthis pr fixes #974 # [codecov](https://codecovio/gh/mockito/mockito/pull/979?srcpr&elh1) report> merging [#979](https://codecovio/gh/mockito/mockito/pull/979?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/5815d4c922736e290fb9c4659f7d08c3e08e5b9f?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `95%````diff@@                coverage diff                @@##             release/2x     #979      +/-   ##+ coverage           868%   8682%   +001%     - complexity          2275     2281       +6       files                287      287                lines               5769     5783      +14       branches             675      677       +2     + hits                5008     5021      +13       misses               571      571              - partials             190      191       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/979?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/creation/bytebuddy/interceptedinvocationjava](https://codecovio/gh/mockito/mockito/compare/5815d4c922736e290fb9c4659f7d08c3e08e5b9f33b601e821363e8fda687c8c8fa49279c68a6eb7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw50zxjjzxb0zwrjbnzvy2f0aw9ulmphdme) | `86% <100%> (ø)` | `22 <0> (ø)` | :arrow_down: || [a/org/mockito/internal/debugging/locationimpljava](https://codecovio/gh/mockito/mockito/compare/5815d4c922736e290fb9c4659f7d08c3e08e5b9f33b601e821363e8fda687c8c8fa49279c68a6eb7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9kzwj1z2dpbmcvtg9jyxrpb25jbxbslmphdme) | `100% <100%> (ø)` | `6 <3> (+2)` | :arrow_up: || [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/compare/5815d4c922736e290fb9c4659f7d08c3e08e5b9f33b601e821363e8fda687c8c8fa49279c68a6eb7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7777% <100%> (+085%)` | `7 <2> (+1)` | :arrow_up: || [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/compare/5815d4c922736e290fb9c4659f7d08c3e08e5b9f33b601e821363e8fda687c8c8fa49279c68a6eb7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `6261% <8888%> (+241%)` | `14 <3> (+3)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/979?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/979?srcpr&elfooter) last update [5815d4c33b601e](https://codecovio/gh/mockito/mockito/compare/5815d4c922736e290fb9c4659f7d08c3e08e5b9f33b601e821363e8fda687c8c8fa49279c68a6eb7?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || to solve the issue #974 i thought that if one stack trace element is the method frame representation of `mockmethodadvice#handle` the next element must be skippedsince the `stacktracecleaner` api cannot handle the two related elements i abandoned to move this logic into `defaultstacktracecleaner`> can you describe how did you test this change?i ran `/gradlew clean build` with this pr and confirmed that there was no problemplease point out me if you need additional tests || @timvdlippe thank you for your reviewi did not know that mock maker can be switched by environmental variablestests failed with inline-mock-maker so im working on it || ive just updatedi ran the following command on release/2x and this pr```$ git branch > logtxt$ mock_makermock-maker-inline /gradlew -dorggradleparallelfalse -x removetestresources --continue clean cibuild 2>&1 | tee -a ~/logtxt$ /gradlew removetestresources```on release/2x ([log](https://githubcom/mockito/mockito/files/852805/release_2_xtxt)):```1830 tests completed 8 failed 60 skipped```on this pr ([log](https://githubcom/mockito/mockito/files/852806/fix_issue_974txt)):```1830 tests completed 8 failed 60 skipped```the same tests failed([this](https://githubcom/mockito/mockito/files/852808/difftxt) is difference of two logs)there is no failure caused by this prin the previous code `partialmockingwithspiestest#shouldstacktracegetfilteredonuserexceptions` failedi gave up on fixing stacktracefilter and moved the skip logic to mockmethodadvice ||
96,976,980,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"fixes #976: resolve ambiguous constructors with the current code (introduced in mockito 2714 by commit 6a82c03) calling `mocksettingsuseconstructor` with an argument list that would be applicable to more than one constructor would fail with an `orgmockitointernalcreationinstanceinstantiationexception`this behavior however is suboptimal as described in issue #976 as it makes `useconstructor` less robust than the java compiler which is able to resolve such ambiguitieswith this patch mockito will attempt to match the constructor with the most specific parameter types a constructor x is considered more specific than a constructor y if:1 they are both applicable to the given argument list2 constructor x has at least one parameter which is a further specialization of the corresponding parameter of constructor y (ie `paramxisassignablefrom(paramy)`)3 constructor y has no parameter which is a further specialization of the corresponding parameter of constructor x as defined aboveeg consider the following class:    public class someclass {        someclass(object o) {}        someclass(string s) {}    }without this patch calling    mock(someclassclass withsettings()useconstructor(""string!""))would fail with this patch such a call would invoke the `someclass(string)` constructoras noted above this pr fixes issue #976 # [codecov](https://codecovio/gh/mockito/mockito/pull/980?srcpr&elh1) report> merging [#980](https://codecovio/gh/mockito/mockito/pull/980?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/5815d4c922736e290fb9c4659f7d08c3e08e5b9f?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%````diff@@                coverage diff                @@##             release/2x     #980      +/-   ##+ coverage           868%   8684%   +004%     - complexity          2275     2284       +9       files                287      287                lines               5769     5787      +18       branches             675      682       +7     + hits                5008     5026      +18       misses               571      571                partials             190      190```| [impacted files](https://codecovio/gh/mockito/mockito/pull/980?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/creation/instance/constructorinstantiatorjava](https://codecovio/gh/mockito/mockito/compare/5815d4c922736e290fb9c4659f7d08c3e08e5b9fed4e169fd96f584f60395e813c6d4738164aa828?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9pbnn0yw5jzs9db25zdhj1y3rvckluc3rhbnrpyxrvci5qyxzh) | `9577% <100%> (+143%)` | `36 <9> (+9)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/980?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/980?srcpr&elfooter) last update [5815d4ced4e169](https://codecovio/gh/mockito/mockito/compare/5815d4c922736e290fb9c4659f7d08c3e08e5b9fed4e169fd96f584f60395e813c6d4738164aa828?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i wonder why codecov has no previous report to compare against do any of the maintainers have a clue? || @mureinik because commits by the delivery drone do `[ci skip]` and therefore do not trigger a code coverage report || @timvdlippe that means that any pr thats rebased on top of a release wont have the benefit of a comparative codecov report i get why the delivery drone should skip ci but this is an unfortunate side effect ill bring this up on the mailing list - this pr probably isnt the right place to discuss itand thanks for the explanation! || @mureinik please see #493 for reference || @szczepiq ping? will you have some time to take a look at this please? || @mureinik im very keen to review this change thank you for your submission!im allocating most of my time to https://githubcom/mockito/mockito/issues/911 currently but i promise to review (and hopefully merge) by the end of this weekendthanks for patience with us :) || rebased on top of 2717 and added `creatingmockswithconstructortest#can_spy_ambiguius_constructor_with_primitive` as per @timvdlippes suggestion abovenote that this api does **not** support implicit promotions (eg passing an `int` in `useconstructors()` varargs will autobox it to an `integer` this integer cant be matched to a constructor expecting a `long` primitive or a `long` wrapper) in the same fashion that the `javalangreflect` apis dont support it || pushed updated branch change from previous push:- returned the error message regarding issue #685 as per @szczepiq review above- fixed a freudian slip in the aforementioned error message (""a better **join**"" -> ""a better **job**"")- added javadoc explaining the logic of `orgmockitointernalcreationinstanceconstructorinstantiator#evaluateconstructor` as per @szczepiq  review || the build failure seems to be a travisci issue not an issue with the code itself as this revision introduced only minor changes (added javadoc and fixed a typo) compared to the previous one and some of the travis checks are passing the error:```no output has been received in the last 10m0s this potentially indicates a stalled build or something wrong with the build itselfcheck the details on how to adjust your build configuration on: https://docstravis-cicom/user/common-build-problems/#build-times-out-because-no-output-was-receivedthe build has been terminated```@szczepiq @timvdlippe is there any way to re-trigger travis on this pr? || i have restarted the builds || "
97,982,983,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,break cyclical compile time dependency on hiderecursivecall fixes #982 # [codecov](https://codecovio/gh/mockito/mockito/pull/983?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`release/2x@64a1180`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)> the diff coverage is `100%````diff@@              coverage diff              @@##             release/2x    #983   +/-   ##  coverage               ?   868%             complexity             ?    2275             files                  ?     287             lines                  ?    5769             branches               ?     675             hits                   ?    5008             misses                 ?     571             partials               ?     190```| [impacted files](https://codecovio/gh/mockito/mockito/pull/983?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/compare/64a1180ec625f9ef50fc35a8a6c1e80b6f665b047c8557ac0782ad6e56ed41bb2fb8d4f9f011c4cd?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6288% <ø> (ø)` | `12 <0> (?)` | || [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/compare/64a1180ec625f9ef50fc35a8a6c1e80b6f665b047c8557ac0782ad6e56ed41bb2fb8d4f9f011c4cd?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `602% <100%> (ø)` | `11 <2> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/983?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/983?srcpr&elfooter) last update [64a11807c8557a](https://codecovio/gh/mockito/mockito/compare/64a1180ec625f9ef50fc35a8a6c1e80b6f665b047c8557ac0782ad6e56ed41bb2fb8d4f9f011c4cd?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || lgtm probably a left over from the early phase when i refactored the mock makers || nice merging! thanks for your quick reviews @raphw ! ||
98,929,985,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #981: update javadoc about the mockito-inline artifact this pr fixes #981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that # [codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elh1) report> merging [#985](https://codecovio/gh/mockito/mockito/pull/985?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/1599dfe84f953d5ef85c17471296fabbdd1b9a2b?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a````diff@@              coverage diff              @@##             release/2x    #985   +/-   ##  coverage           868%   868%             complexity          2275    2275             files                287     287             lines               5769    5769             branches             675     675             hits                5008    5008             misses               571     571             partials             190     190```| [impacted files](https://codecovio/gh/mockito/mockito/pull/985?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/compare/1599dfe84f953d5ef85c17471296fabbdd1b9a2b85c7df0afd0cbadaa1c7ac096af6a7734d1eba89?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :x: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elfooter) last update [1599dfe85c7df0](https://codecovio/gh/mockito/mockito/compare/1599dfe84f953d5ef85c17471296fabbdd1b9a2b85c7df0afd0cbadaa1c7ac096af6a7734d1eba89?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
99,981,985,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #981: update javadoc about the mockito-inline artifact this pr fixes #981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that # [codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elh1) report> merging [#985](https://codecovio/gh/mockito/mockito/pull/985?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/1599dfe84f953d5ef85c17471296fabbdd1b9a2b?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a````diff@@              coverage diff              @@##             release/2x    #985   +/-   ##  coverage           868%   868%             complexity          2275    2275             files                287     287             lines               5769    5769             branches             675     675             hits                5008    5008             misses               571     571             partials             190     190```| [impacted files](https://codecovio/gh/mockito/mockito/pull/985?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/compare/1599dfe84f953d5ef85c17471296fabbdd1b9a2b85c7df0afd0cbadaa1c7ac096af6a7734d1eba89?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :x: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elfooter) last update [1599dfe85c7df0](https://codecovio/gh/mockito/mockito/compare/1599dfe84f953d5ef85c17471296fabbdd1b9a2b85c7df0afd0cbadaa1c7ac096af6a7734d1eba89?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
100,989,995,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"verifyzerointeractions guarantees zero interactions instead of just delegating to verifynomoreinteractions fixes #989`verifyzerointeractions` no longer delegates to `verifynomoreinteractions`instead it fetches the number of invocations made to the mock and checks ifthey are zero failing otherwiseim not sure if the style of my code complies with mockito: please let me know what to change and where to look to make it more mockitoish you can always check if you comply with the code by running `/gradlew build` that runs the test and checks the code style :) || # [codecov](https://codecovio/gh/mockito/mockito/pull/995?srcpr&elh1) report> merging [#995](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eldesc) into [master](https://codecovio/gh/mockito/mockito/commit/62a1d8828e7afb0f06dc6f4d135b54824d5eccf8?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `9677%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/995/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eltree)```diff@@             coverage diff              @@##             master     #995      +/-   ##+ coverage     8656%   8662%   +005%     - complexity     2202     2213      +11       files           286      287       +1       lines          5680     5711      +31       branches        658      663       +5     + hits           4917     4947      +30     - misses          571      572       +1       partials        192      192```| [impacted files](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `9787% <100%> (+028%)` | `37 <4> (+4)` | :arrow_up: || [src/main/java/org/mockito/bddmockitojava](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9crernb2nraxrvlmphdme) | `8823% <100%> (+048%)` | `10 <0> (ø)` | :arrow_down: || [internal/verification/verificationmodefactoryjava](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9utw9kzuzhy3rvcnkuamf2yq) | `90% <100%> (+111%)` | `9 <1> (+1)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9162% <100%> (+041%)` | `90 <2> (+2)` | :arrow_up: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9661% <100%> (+011%)` | `39 <1> (+1)` | :arrow_up: || [/mockito/internal/verification/nointeractionsjava](https://codecovio/gh/mockito/mockito/pull/995?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vtm9jbnrlcmfjdglvbnmuamf2yq) | `8333% <8333%> (ø)` | `3 <3> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/995?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/995?srcpr&elfooter) last update [62a1d88912ef07](https://codecovio/gh/mockito/mockito/pull/995?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @ffissore looks cool!  can you add more tests? || thank you for submission! i have not looked into the implementation details if nobody does picks up the review soon ill do it :)team is the decision to change the behavior of ""verifyzerointeractions""? this is likely a disturbing change that will impact many projects migrating to mockito v3 im +1 to this change but i have to acknowledge the impact ) || we would need to investigate the usage of this method i think it is a logical change but we have to prevent users from excessive code problems they can of course always transfer everything to `verifynomoreinteractions` just before they are migrating that shouldnt be a bit of a hassle || @christianschwarz ill add more in the coming daysabout the name: pls consider using a different name `verifynointeractions` for example and deprecating `verifyzerointeractions` with an explanation || as noted in support to my proposal ive changed my pr to include a new `verifynointeractions` and deprecated old `verifyzerointeractions` ive added some tests and coverage will hopefully be happier@timvdlippe ive added those ""since 300"" and removed my initial test class || applied requested modifications and squashed commits || i dont know what went wrong on travis tests pass on my machine using openjdk 8 ping me if i can help || these are flaky tests so it seems fine :) || removed try catch block || "
101,911,1018,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,enabled continuous delivery via robust mockito-release-tools project - continuous delivery pipeline 20 (#911) almost implemented!- removed tons of release logic complexity now all that is a part of general purpose mockito release tools project- the new release automation should be much easier to test # [codecov](https://codecovio/gh/mockito/mockito/pull/1018?srcpr&elh1) report> merging [#1018](https://codecovio/gh/mockito/mockito/pull/1018?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/6438ed18e7a618060414b3a31e6fc73c8d374088?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1018/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1018?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1018   +/-   ##  coverage          8684%   8684%             complexity          2290     2290             files                287      287             lines               5800     5800             branches             684      684             hits                5037     5037             misses               572      572             partials             191      191```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1018?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1018?srcpr&elfooter) last update [6438ed1674caed](https://codecovio/gh/mockito/mockito/pull/1018?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || does this also implement the logic to only publish a release once every x weeks? || >does this also implement the logic to only publish a release once every x weeks?it will be simpler let me finish off the documentation so that everything is clear good question! || i will be merging soon readmemd contains information about the releases more documentation will be provided but it should not blocking this pr! || more documentation on [spanking new wiki page](https://githubcom/mockito/mockito/wiki/continuous-delivery-details#cd)tentatively plan to merge today || really excited for this change thanks for the great work @szczepiq ! || just merged this puppy ill keep an eye on the release automation things might be bumpy for the next week or so until the dust after this change drops down and all fallout is cleaned up :)thank you guys for patience! more documentation and improvements i will duly provide in the meantime shoot feedback || @szczepiq does this also close #618? || >@szczepiq does this also close #618?i suggest we leave #618 open for now so that its a place for discussion || btw thank you for updating #618 thread with the status! ||
102,1071,1076,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fixed validation in returnargumentat(int) in case of type erasure on the parameter fixes #1071 the parameter type inference takes now the type of the actual instanceinto account to avoid type erasure issues in case the parameter isgenericsee also: https://githubcom/mockito/mockito/issues/1071#issuecomment-300091021 # [codecov](https://codecovio/gh/mockito/mockito/pull/1076?srcpr&elh1) report> merging [#1076](https://codecovio/gh/mockito/mockito/pull/1076?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/a8d1f37ec282294dd7ec18028f679b958c2f78ea?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1076/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1076?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1076      +/-   ##+ coverage          8681%   8682%   +001%     - complexity          2286     2288       +2       files                286      286                lines               5793     5798       +5       branches             683      684       +1     + hits                5029     5034       +5       misses               568      568                partials             196      196```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1076?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/internal/stubbing/answers/returnsargumentatjava](https://codecovio/gh/mockito/mockito/pull/1076?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl1jldhvybnnbcmd1bwvudef0lmphdme) | `100% <100%> (ø)` | `27 <2> (+2)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1076?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1076?srcpr&elfooter) last update [a8d1f37181a4f1](https://codecovio/gh/mockito/mockito/pull/1076?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
103,1065,1079,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixed #1065 add information about donothing() method to cannotstubvo…   # [codecov](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&elh1) report> merging [#1079](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/761de40d05b4eddae8328ab1d7e5bdacd882a3be?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1079/graphs/treesvg?tokenmx80slder0&srcpr&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1079   +/-   ##  coverage          8682%   8682%             complexity          2288     2288             files                286      286             lines               5798     5798             branches             684      684             hits                5034     5034             misses               568      568             partials             196      196```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9166% <ø> (ø)` | `88 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&elfooter) last update [761de40f7b5117](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
104,1083,1090,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,fixes #1083: interfaces only declare tostring implicitly and should t… …herefore override it explicitly from the inline mock maker  
105,1088,1091,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"fixes #1088 : updating documentation of verify feature to correct a s… updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut pasted and run verbatimthe documentation presents the following example of the verify exact number of invocations feature:    //using mock    mockedlistadd(""once"")        mockedlistadd(""twice"")    mockedlistadd(""twice"")        mockedlistadd(""three times"")    mockedlistadd(""three times"")    mockedlistadd(""three times"")        //following two verifications work exactly the same - times(1) is used by default    verify(mockedlist)add(""once"")    verify(mockedlist times(1))add(""once"")        //exact number of invocations verification    verify(mockedlist times(2))add(""twice"")    verify(mockedlist times(3))add(""three times"")        //verification using never() never() is an alias to times(0)    verify(mockedlist never())add(""never happened"")        //verification using atleast()/atmost()    verify(mockedlist atleastonce())add(""three times"")    verify(mockedlist atleast(2))add(""five times"")    verify(mockedlist atmost(5))add(""three times"")the last but one line says:    verify(mockedlist atleast(2))add(""five times"")this could be confusing to someone using these examples as it would result in a toolittleactualinvocations failure being reported by mockito this is because in the example the `add()` method is never called with the string `five times` in order to have this example make sense in the way i think it should ive replaced the string `five times` with `three times` as suggested by @szczepiq cheerstim cooke # [codecov](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&elh1) report> merging [#1091](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/db7dbc3d5f7d97d0625683b4e41f282818f9b87c?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1091/graphs/treesvg?tokenmx80slder0&width650&srcpr&height150)](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1091      +/-   ##- coverage          8684%   8682%   -002%     + complexity          2289     2288       -1       files                286      286                lines               5798     5798                branches             684      684              - hits                5035     5034       -1     - misses               567      568       +1       partials             196      196```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: || [o/exceptions/verification/wantedbutnotinvokedjava](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl3zlcmlmawnhdglvbi9xyw50zwrcdxrob3rjbnzva2vklmphdme) | `6666% <0%> (-3334%)` | `1% <0%> (-1%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&elfooter) last update [db7dbc3762a2dc](https://codecovio/gh/mockito/mockito/pull/1091?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || rather surprised codecov reported a reduction in coverage here the total diff of this pr is a single word text replacement in a javadoc no code changes were made so wouldnt expect a change in coverageperhaps im missing something? || thank you! ||"
106,1117,1119,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,"made it possible to delay the return of a mock or spy  (#1117) this is a useful aid in debugging race conditions and other synchronicity problems # [codecov](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&elh1) report> merging [#1119](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eldesc) into [master](https://codecovio/gh/mockito/mockito/commit/17db34508543150a70573fba3ca04bc4ba37a821?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `90%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1119/graphs/treesvg?tokenmx80slder0&srcpr&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree)```diff@@             coverage diff              @@##             master    #1119      +/-   ##- coverage     8663%   8662%   -002%     - complexity     2214     2217       +3       files           287      288       +1       lines          5711     5721      +10       branches        663      663              + hits           4948     4956       +8     - misses          569      572       +3     + partials        194      193       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/additionalanswersjava](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9bzgrpdglvbmfsqw5zd2vycy5qyxzh) | `9523% <100%> (+023%)` | `18 <1> (+1)` | :arrow_up: || [to/internal/stubbing/answers/answerswithdelayjava](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl0fuc3dlcnnxaxrorgvsyxkuamf2yq) | `8888% <8888%> (ø)` | `3 <3> (?)` | || [eation/bytebuddy/typecachingbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvvhlwzunhy2hpbmdcexrly29kzudlbmvyyxrvci5qyxzh) | `8378% <0%> (-136%)` | `8% <0%> (-1%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&elfooter) last update [17db3452b3ff4d](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || re: revert no problem i was applying the boy scout method and killing off warnings but i wasnt sure if that change would be acceptable i could tell you were targeting older java versions but wasnt sure if thats important in this test tooive provided it without the java 8 dependent changes || great this looks good to me signing off on this one but want one other pair of :eyes: to check this pr :smile:  || imho the prs title is misleading - in the first place i thought it meant delay on `mockitomock()`/`mockitospy()` which is obviously useless just after reading the code i understood it means answers with delayid change the title to ""add delayed answers"" it will also clarify the release notes 😄 || cant right now because of day job are the release notes drawn from pr titles? || i changed a title in #1117 it should be used to generate release notes (as that pr has no labels)by the way we will test a new cd mechanism - notable version release thanks for your contribution @myrle-krantz! || my bad i didnt spot that pr was raised against master not 2x || btw release notes dont look very good i created #1123 || nice contribution thank you! || youre welcome it was my pleasure: given how intensively mockito helps me every day this was the least i could dothank you!myrle || "
107,1110,1121,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"improve and develop apis required for framework integrators ### problemmockito does not do static mocking at the moment powermockito does powermockito uses a lot of internal mockito apis exposing the community to issues and wasted productivity on version upgrades we want mockito apis to be easily extensible by framework integrators such us powermockito without compromising api simplicity and consistencyall proposed changes are backwards compatible in accordance to mockitos compatibility contract (in short: limited changes to orgmockito* types freedom to change orgmockitointernal*)### public api changesthe full discussion on the use cases implementation options and decisions is in #1110 ticket1 new public method for creating mock creation settings object:```javamockitowithsettings()name(“my mock”)build(fooclass)```2 framework integrators can now provide custom mockhandler via ```mockmaker#getmockhandler()``` previously it we didn’t offer this capability because we didn’t have convincing use cases that it was needed### public api considerations1 framework integrators may **not** provide custom implementation of ```invocationcontainer``` at this stage this part of api is accessible via public ```mockmaker#getmockhandler()getinvocationcontainer()``` method there are no convincing use cases that exposing this new public api is needed # [codecov](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&elh1) report> merging [#1121](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/f03a92e17f329dd79000e6939c0edf7504593e72?srcpr&eldesc) will **increase** coverage by `018%`> the diff coverage is `8739%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1121/graphs/treesvg?tokenmx80slder0&srcpr&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1121      +/-   ##+ coverage          8693%   8711%   +018%     + complexity          2299     2287      -12       files                287      287                lines               5825     5791      -34       branches             686      685       -1     - hits                5064     5045      -19     + misses               564      554      -10     + partials             197      192       -5```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: || [to/internal/stubbing/stubbedinvocationmatcherjava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvksw52b2nhdglvbk1hdgnozxiuamf2yq) | `100% <ø> (ø)` | `8 <0> (ø)` | :arrow_down: || [mockito/internal/invocation/unusedstubsfinderjava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul1vudxnlzfn0dwjzrmluzgvylmphdme) | `0% <0%> (ø)` | `0 <0> (ø)` | :arrow_down: || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `909% <100%> (ø)` | `18 <0> (ø)` | :arrow_down: || [to/internal/verification/verificationdataimpljava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9urgf0yultcgwuamf2yq) | `100% <100%> (ø)` | `7 <1> (ø)` | :arrow_down: || [g/mockito/internal/handler/nullresultguardianjava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw5kbgvyl051bgxszxn1bhrhdwfyzglhbi5qyxzh) | `100% <100%> (ø)` | `6 <1> (-1)` | :arrow_down: || [to/internal/handler/invocationnotifierhandlerjava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw5kbgvyl0ludm9jyxrpb25ob3rpzmllckhhbmrszxiuamf2yq) | `100% <100%> (ø)` | `8 <1> (-1)` | :arrow_down: || [/org/mockito/internal/handler/mockhandlerimpljava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw5kbgvyl01vy2tiyw5kbgvysw1wbc5qyxzh) | `100% <100%> (ø)` | `12 <6> (-1)` | :arrow_down: || [ito/internal/stubbing/invocationcontainerimpljava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9jbnzvy2f0aw9uq29udgfpbmvysw1wbc5qyxzh) | `9285% <100%> (ø)` | `29 <1> (ø)` | :arrow_down: || [to/internal/framework/defaultmockitoframeworkjava](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9gcmftzxdvcmsuamf2yq) | `100% <100%> (ø)` | `5 <2> (+2)` | :arrow_up: ||  and [23 more](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&elfooter) last update [f03a92e00b5539](https://codecovio/gh/mockito/mockito/pull/1121?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you @timvdlippe for reviewing! the pr is still in progress and we definitely must avoid breaking changes || fyi: im not far from calling this complete i dont expect much code changes rather:- verify powermock needs all the new public api added- add missing documentation / tests for public types- add since tagdespite above i think the code is ready for being reviewed if you have feedback please let me know! || this is complete @mockito/developers friendly request for review :)for high level summary of changes to the public api see the new section added to our ""user guide"" in main mockito class || yes that is a lot clearer!on fri 1 sep 2017 07:13 szczepan faber <notifications@githubcom> wrote:> *@szczepiq* commented on this pull request> ------------------------------>> in src/test/java/org/mockito/staticmockingexperimenttestjava> <https://githubcom/mockito/mockito/pull/1121#discussion_r136584085>:>> > +        }> +    }> +> +    @before public void before() throws throwable {> +        staticmethod  fooclassgetdeclaredmethod(""staticmethod"" stringclass)> +    }> +> +    @test> +    public void verify_static_method() throws throwable {> +        //register staticmethod call on mock> +        invocation invocation  mockitoframework()getinvocationfactory()createinvocation(mock withsettings()build(fooclass) staticmethod realmethod> +            ""some arg"")> +        handlerhandle(invocation)> +> +        //verify staticmethod on mock> +        verify(mock)>> heres the comment: 5be550b> <https://githubcom/mockito/mockito/commit/5be550bba197d76697d69a84d9c46f92e99088dd>>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/1121#discussion_r136584085> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdb79s5g1y7sk2wk_eu15chjphkgnxks5sebd2gajpzm4n2pvr>> > || any feedback? i would love to merge it in a couple of days :) || seems like this branch has conflicts and has a failing build other than this pr is approved! || a lot to read but it look really good to me props to the documentation and compatibility efforts! || "
108,1117,1122,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,made it possible to delay the return of a mock or spy (#1117) a cherry-picked version of #1119 for the 2x branch yup in master there are not checkstyle verification || thats because the backport wasnt finished yet :( havent had time to dive into the failing tests there || # [codecov](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&elh1) report> merging [#1122](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/3cf29be1d7cbf701ed4fac7ccb4ccf914cad7d8a?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `90%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1122/graphs/treesvg?width650&srcpr&tokenmx80slder0&height150)](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1122      +/-   ##+ coverage          8684%   8686%   +002%     - complexity          2288     2293       +5       files                286      287       +1       lines               5808     5818      +10       branches             685      685              + hits                5044     5054      +10     + misses               568      567       -1     - partials             196      197       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/additionalanswersjava](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9bzgrpdglvbmfsqw5zd2vycy5qyxzh) | `9444% <100%> (+032%)` | `17 <1> (+1)` | :arrow_up: || [to/internal/stubbing/answers/answerswithdelayjava](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl0fuc3dlcnnxaxrorgvsyxkuamf2yq) | `8888% <8888%> (ø)` | `3 <3> (?)` | || [o/exceptions/verification/wantedbutnotinvokedjava](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl3zlcmlmawnhdglvbi9xyw50zwrcdxrob3rjbnzva2vklmphdme) | `100% <0%> (+3333%)` | `2% <0%> (+1%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&elfooter) last update [3cf29bea4d7d5d](https://codecovio/gh/mockito/mockito/pull/1122?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks guys for merging the change to 2x! ||
109,1135,1136,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #1135: properly resolve visibility bridges resolve the method hierarchy by byte buddys method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect # [codecov](https://codecovio/gh/mockito/mockito/pull/1136?srcpr&elh1) report> merging [#1136](https://codecovio/gh/mockito/mockito/pull/1136?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/1a60a8496d4b704cac115608ca67840c7d8a6865?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `6666%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1136/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1136?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1136      +/-   ##+ coverage          8687%   8689%   +001%     - complexity          2296     2297       +1       files                287      287                lines               5829     5828       -1       branches             687      687                hits                5064     5064              + misses               568      567       -1       partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1136?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/1136?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `632% <6666%> (+059%)` | `15 <2> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1136?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1136?srcpr&elfooter) last update [1a60a84f21714b](https://codecovio/gh/mockito/mockito/pull/1136?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
110,86,1146,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,enable stubonly() on @mock annotation since issue #86  withsettings() has a api stubonly() which speed up mocked stub a lotsin my case stubonly() huge amount of test overhead stacktrace and avoid invocation footprint list grow too large and cause oomhowever  the api is not available with `@mock` annotationi had to move tens of mock annotation from `@mock foo foo` into `mockitomock(fooclass withsetting()stubonly())````@mock(stubonlytrue)public foo lightweight```suggest adding the above api for convenience check list - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/2x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/1146?srcpr&elh1) report> merging [#1146](https://codecovio/gh/mockito/mockito/pull/1146?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/48856d8fc844d70b21c804d55f5be624d3687ac3?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1146/graphs/treesvg?height150&width650&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1146?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1146      +/-   ##+ coverage          8689%   8689%   +<01%     - complexity          2297     2298       +1       files                287      287                lines               5828     5830       +2       branches             687      688       +1     + hits                5064     5066       +2       misses               567      567                partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1146?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/configuration/mockannotationprocessorjava](https://codecovio/gh/mockito/mockito/pull/1146?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul01vy2tbbm5vdgf0aw9uuhjvy2vzc29ylmphdme) | `100% <100%> (ø)` | `6 <0> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1146?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1146?srcpr&elfooter) last update [48856d82d3a560](https://codecovio/gh/mockito/mockito/pull/1146?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @hkdennis2k good idea! can you add some unit tests to ensure the implementation works || ping for a high level unit test then we can land this change 😄  || @timvdlippe @szczepiq the high level test is here [annotationstestjava#l81](https://githubcom/hkdennis2k/mockito/blob/2d3a5604525f73d8ff235fa0b032c8639fea8765/src/test/java/org/mockitousage/annotation/annotationstestjava#l81) || ah i see i wanted a separate new test but i see that the current one already violates that principle based on that lgtm ||
111,1155,1162,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,"fix for #1155 thenthrow(class) fix for #1155 mockitothenthrow(class) now fails when the given throwable type is not declared on the stubbed method the build fails for jdk7 seem like an ci problem: execution failed for task :fetchallcontributors || >the build fails for jdk7 seem like an ci problem: execution failed for task :fetchallcontributorsi will look into that thank you || # [codecov](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&elh1) report> merging [#1162](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/9e4de546d7ea2ec675e15d8b6960a3b8ffe324f7?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `8275%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1162/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1162      +/-   ##+ coverage          8711%   8716%   +004%     - complexity          2287     2289       +2       files                287      286       -1       lines               5791     5795       +4       branches             685      688       +3     + hits                5045     5051       +6       misses               554      554              + partials             192      190       -2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `90% <ø> (ø)` | `5 <0> (ø)` | :arrow_down: || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `8636% <8095%> (-455%)` | `19 <10> (+1)` | || [va/org/mockito/internal/stubbing/basestubbingjava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9cyxnlu3r1ymjpbmcuamf2yq) | `9285% <875%> (+485%)` | `16 <2> (+2)` | :arrow_up: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <0%> (ø)` | `39% <0%> (ø)` | :arrow_down: || [nternal/configuration/mockannotationprocessorjava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul01vy2tbbm5vdgf0aw9uuhjvy2vzc29ylmphdme) | `100% <0%> (ø)` | `6% <0%> (+1%)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9222% <0%> (+055%)` | `89% <0%> (+1%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&elfooter) last update [9e4de54c7fbb61](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @timvdlippe could you please remove the checkstyle rule [newlineatendoffile] it is _not possible_ ~frustrating~ to fix and adds zero value || if you have an editor with editorconfig support it is no manual work both eclipse and intellij support it intellij even right out of the box else you can manually add the newline i think you configured your editor to revert that change somewhere in your preferencesanyways editorconfig makes sure we avoid unnecessary noise when contributing even if you are new to the project and unaware that it exists its thus more friendly to new developers and i dont want to regress in that regard :( || the ide added a newline also i tried to add manually a newline but check style still fails i have no further time to investigated into it----this pr fixes now cleans up the unfinished stubbing state  in case null was passed to thenthrow(class)/dothrow(class) this leaded to unpredictable results in test suites before || you are fixing the wrong files it is stubbingwiththrowables test: https://travis-ciorg/mockito/mockito/jobs/266766666#l303 || strange when i run it locally it complains about the 3 files of the last commit || @mockitocore what is the current state? what is missing? || @christianschwarz nice thanks! while could seems good could you add a test (could just copy the literal test from #1155) to also check that case? i couldnt spot it in the added tests || sure i can add more tests but what you mean by ""that case""? || `when(mockdoit())thenthrow(exceptionclass)` eg with only a literal class passed on expecting this to fail || i am not sure what you mean by ""only a literal class passed on expecting this to fail""maybe a stubbing with an checked exception type where an other checked exception is declared like this:```class exceptiona extends exceptionclass exceptionb extends exceptionpublic void doit() throws exceptionawhen(mockdoit())thenthrow(exceptionbclass) //^^ fails like ""cant throw checked exception >exceptionb< cause it is not declared""``` || the original report states that the following test did not fail i would like to see that literal test as a regression test in our test body:```java@test(expected  mockitoexceptionclass)    public void using_thenthrow_class() {        c mock  mock(cclass)        // set a checked exception that does not matche the method signature        when(mockdoit())thenthrow(exceptionclass)    }``` || @christianschwarz thanks for all your work! || "
112,1179,1181,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,#1179: fix performance regression caused by use of method graph compiler in order to properly discover visibility bridges we have to run a full analysis of the method graph the compilation of this method graph is rather expensive and we require to cache a computed graph the caching is however non-trivial as it references classes which might be unloaded in order to avoid a leak we cache classes using non-strong referencesthis requires some real-world experience to discover if this caching mechanism suffices # [codecov](https://codecovio/gh/mockito/mockito/pull/1181?srcpr&elh1) report> merging [#1181](https://codecovio/gh/mockito/mockito/pull/1181?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/de5f5483b1ae3e8c1a175479f49f1dda3aba1f51?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `875%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1181/graphs/treesvg?srcpr&tokenmx80slder0&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1181?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1181      +/-   ##+ coverage          8689%   8689%   +<01%     - complexity          2297     2299       +2       files                287      287                lines               5828     5832       +4       branches             687      689       +2     + hits                5064     5068       +4       misses               567      567                partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1181?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/1181?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `6454% <875%> (+133%)` | `17 <4> (+2)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1181?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1181?srcpr&elfooter) last update [de5f5484cfd6ee](https://codecovio/gh/mockito/mockito/pull/1181?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || yes was incorrect before ||
113,1180,1186,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,compare method of graph to defined form of method fixes #1180: compare against non-generic method when deciding if a method should be stubbed # [codecov](https://codecovio/gh/mockito/mockito/pull/1186?srcpr&elh1) report> merging [#1186](https://codecovio/gh/mockito/mockito/pull/1186?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/ddaca834d3112be183079c9a011a764cb40a1d73?srcpr&eldesc) will **not change** coverage> the diff coverage is `0%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1186/graphs/treesvg?height150&width650&tokenmx80slder0&srcpr)](https://codecovio/gh/mockito/mockito/pull/1186?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1186   +/-   ##  coverage          8693%   8693%             complexity          2299     2299             files                287      287             lines               5825     5825             branches             686      686             hits                5064     5064             misses               564      564             partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1186?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/1186?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `6454% <0%> (ø)` | `17 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1186?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1186?srcpr&elfooter) last update [ddaca834e3867f](https://codecovio/gh/mockito/mockito/pull/1186?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
114,1191,1192,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"added new public api for spring-boot use case not intended for merging yet submitted for visibility- for design and rationale see #1191- for usage see ""verificationstartedlistenertest"" classthis is still experimental so refactorings error handling javadoc is missing # [codecov](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&elh1) report> merging [#1192](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/a3a1aaaa47e818f66561e7f5cd5045be4f73b32a?srcpr&eldesc) will **increase** coverage by `009%`> the diff coverage is `9821%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1192/graphs/treesvg?srcpr&tokenmx80slder0&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1192      +/-   ##+ coverage          8723%   8732%   +009%     - complexity          2292     2304      +12       files                286      287       +1       lines               5805     5855      +50       branches             690      696       +6     + hits                5064     5113      +49     - misses               554      555       +1       partials             187      187```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/org/mockito/internal/util/mockutiljava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl01vy2tvdglslmphdme) | `931% <ø> (ø)` | `19 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `977% <100%> (+011%)` | `33 <0> (ø)` | :arrow_down: || [g/mockito/internal/util/defaultmockingdetailsjava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl0rlzmf1bhrnb2nraw5nrgv0ywlscy5qyxzh) | `100% <100%> (ø)` | `14 <1> (+1)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9239% <100%> (ø)` | `92 <1> (ø)` | :arrow_down: || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `8636% <100%> (ø)` | `19 <0> (ø)` | :arrow_down: || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `9259% <100%> (+059%)` | `42 <5> (+3)` | :arrow_up: || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `9772% <100%> (+016%)` | `20 <1> (+1)` | :arrow_up: || [nternal/listeners/verificationstartednotifierjava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9saxn0zw5lcnmvvmvyawzpy2f0aw9uu3rhcnrlze5vdglmawvylmphdme) | `9722% <9722%> (ø)` | `7 <7> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&elfooter) last update [a3a1aaab41d1c5](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || hey @timvdlippe thank you for review! i will work on this today || >what happens if multiple verificationstartedlisteners set a different mock? is it last-come wins? that could potentially break any framework that would be relying on the fact that the mock it set is the mock that is executed onthe mock object is created only once so there is no practical possibility for 2 different frameworks to add different listenerswe already have in our api similar listeners that are configured at mock creation we did not encounter a problem with this api the new ""verificationstartedlistener"" suggested in this pr follows an existing pattern that was already discussed in the pasthence i think its ok to allow multiple listeners to keep the api consistent and simplethank you for insightful feedback! keep it coming because im finishing this feature off :) || sorry for being vague i am okay with adding multiple listeners but my comment was regarding calling `setmock`  multiple times if franeworks a and b both call `setmock` and rely on its value one of them will break (depending on which one is invoked latest) therefore i would like to block calling `setmock` twice if another framework calls it it should be an exception stating that mocks were overridden and there is an incompatibility between two dependencies wdyt? || >if franeworks a and b both call setmock and rely on its value one of them will break (depending on which one is invoked latest)how can 2 frameworks call setmock? only 1 framework can create mock and pass a listener can you describe the scenario more clearly?happy to work out this scenario to design great api! || fyi: im almost done with the code i would love some feedback! || i have some time tomorrow to write down the exampleon sun 8 oct 2017 18:28 szczepan faber <notifications@githubcom> wrote:> fyi: im almost done with the code i would love some feedback!>> —> you are receiving this because you were mentioned>>> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/1192#issuecomment-335018420> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdb-cvxjmtnnwc7oc3urgcbsb7mndyks5sqpg5gajpzm4ppxj0>> > || due to issues with gradle from #1202 i am unable to compile or do any work have to wait till that is resolved until i can write the example :cry:  || okay so while trying to write down the example i realized it is a bit more tricky it would essentially require to add multiple listeners on the same `mockitosettings` object:```javalist mock2  mock(listclass mockitowithsettings()verificationstartedlisteners(new verificationstartedlistener() {            public void onverificationstarted(verificationstartedevent event) {                //this is a hack to simulate desired behavior                containeradd(eventgetmock())                eventsetmock(mock1)            }        } new verificationstartedlistener() {            @override            public void onverificationstarted(verificationstartedevent event) {                eventsetmock(mock2)            }        }))```in this case `mock2` will be the final mock if the first listener was added based on framework 1 and the second one by a different one there is a discrepancy between the mock that is actually in the event and the mock the framework expects if framework 1 is relying on the mock being mock1 while at the same time framework 2 relies on the mock being mock2 one of them will breaki would thus like to propose that if `setmock` is invoked twice an exception is thrown this is very explicit to the user indicating: hey you are using two framework listeners together this cant work || hey @timvdlippe i still dont understand the use case1 only one framework can construct a mock object if multiple frameworks integrate with mockito only one of those frameworks can construct given mock the other framework can use the mock of course but it cannot create it (because it is already created) if we need to lets discuss this further on slack2 id like the api to be consistent with other listeners like invocation listeners using an exception makes verification started listeners work differently than invocation listeners because it makes the 1st listener more important than other listeners consistent api is less surprising to users and makes it easy to use predictable3 adding an exception adds some complexity that we need to maintain4 there is no use case to support 2 listeners just like there is no use case to support only 1 listener supporting 2 listeners does not seem incorrect if it is not incorrect id rather keep things simple allowing 2 listeners is more open for experimentation and unexpected use cases using an exception is creating an arbitrary constraint without a use case5 if the use case presents itself for example we have a user bug report im happy to add code to address it perhaps then we add some validationfyi when designing this i had considered supporting just single listener but decided against it thats why i have added ""[listeners_are_executed_in_sequence](https://githubcom/mockito/mockito/pull/1192/files#diff-c7b40da00e36958d90e247ac5f759871r72)"" testgood discussion! thank you for taking the time to describe what you meant do you have feedback about other parts of the api or the implementation? in the heat of the argument lets not forget about the surrounding code :) || the implementation is done would love some feedback!!! || @szpak can you review? theres a discussion about supporting one or many listeners but i dont think it should be blocking the prlets ship this so that spring boot can start using mockitos public api! || its not about one or many listeners it should be possible to add multiplelisteners however i want to limit `setmock` to be invoked only onceon sat 14 oct 2017 05:24 szczepan faber <notifications@githubcom> wrote:> @szpak <https://githubcom/szpak> can you review? theres a discussion> about supporting one or many listeners but i dont think it should be> blocking the pr>> lets ship this so that spring boot can start using mockitos public api!>> —> you are receiving this because you were mentioned>>> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/1192#issuecomment-336606283> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdbwzrg8lz41svt-2rhzxqk9t9tqdcks5sscmfgajpzm4ppxj0>> > || thank you! im pushing new version soon || "
115,1198,1202,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"[#1202] java 9 ci build for mockito 2x ## summaryprovide java 9 travis build to ensure java 9 compatibility in at least tested use casessupport for java 9 was improved in gradle 4x and that version is being used due to some issues with newer gradle versions (#1198) some other configuration changes were required as well as jacoco version has been bump (https://travis-ciorg/mockito/mockito/jobs/284996316#l799-l816)fixes #1198## check list - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/2x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&elh1) report> merging [#1202](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/5a5c409f561c853c04974c1542fe2f65c999c263?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1202/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1202      +/-   ##+ coverage          8716%   8723%   +007%     - complexity          2289     2292       +3       files                286      286                lines               5795     5805      +10       branches             688      690       +2     + hits                5051     5064      +13       misses               554      554              + partials             190      187       -3```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9239% <0%> (+016%)` | `92% <0%> (+3%)` | :arrow_up: || [ito/internal/stubbing/invocationcontainerimpljava](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9jbnzvy2f0aw9uq29udgfpbmvysw1wbc5qyxzh) | `931% <0%> (+024%)` | `29% <0%> (ø)` | :arrow_down: || [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `909% <0%> (+028%)` | `21% <0%> (ø)` | :arrow_down: || [eation/bytebuddy/typecachingbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvvhlwzunhy2hpbmdcexrly29kzudlbmvyyxrvci5qyxzh) | `8076% <0%> (+076%)` | `4% <0%> (ø)` | :arrow_down: || [/creation/bytebuddy/subclassbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrly29kzudlbmvyyxrvci5qyxzh) | `9444% <0%> (+277%)` | `20% <0%> (ø)` | :arrow_down: || [guration/injection/propertyandsetterinjectionjava](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul2luamvjdglvbi9qcm9wzxj0eufuzfnldhrlckluamvjdglvbi5qyxzh) | `100% <0%> (+285%)` | `10% <0%> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&elfooter) last update [5a5c409e6271d8](https://codecovio/gh/mockito/mockito/pull/1202?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || rather yes one of the failing tests in #1041 is the one i fixed in addition master hasnt been built for a while and may be broken with the current java 9 || @szpak i would like to revert this pr as it seems to break local development i am facing various issues like:<details>```> task :inline:testprocess gradle test executor 31 finished with non-zero exit value 1orggradleprocessinternalexecexception: process gradle test executor 31 finished with non-zero exit value 1        at orggradleprocessinternaldefaultexechandle$execresultimplassertnormalexitvalue(defaultexechandlejava:382)        at orggradleprocessinternalworkerdefaultworkerprocessonprocessstop(defaultworkerprocessjava:118)        at orggradleprocessinternalworkerdefaultworkerprocessaccess$000(defaultworkerprocessjava:41)        at orggradleprocessinternalworkerdefaultworkerprocess$1executionfinished(defaultworkerprocessjava:74)        at sunreflectgeneratedmethodaccessor700invoke(unknown source)        at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)        at javalangreflectmethodinvoke(methodjava:498)        at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)        at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)        at orggradleinternaleventabstractbroadcastdispatchdispatch(abstractbroadcastdispatchjava:42)        at orggradleinternaleventbroadcastdispatch$singletondispatchdispatch(broadcastdispatchjava:230)        at orggradleinternaleventbroadcastdispatch$singletondispatchdispatch(broadcastdispatchjava:149)        at orggradleinternaleventlistenerbroadcastdispatch(listenerbroadcastjava:140)        at orggradleinternaleventlistenerbroadcastdispatch(listenerbroadcastjava:37)        at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)        at comsunproxy$proxy93executionfinished(unknown source)        at orggradleprocessinternaldefaultexechandlesetendstateinfo(defaultexechandlejava:215)        at orggradleprocessinternaldefaultexechandlefinished(defaultexechandlejava:327)        at orggradleprocessinternalexechandlerunnercompleted(exechandlerunnerjava:103)        at orggradleprocessinternalexechandlerunnerrun(exechandlerunnerjava:83)        at orggradleinternaloperationsbuildoperationidentifierpreservingrunnablerun(buildoperationidentifierpreservingrunnablejava:39)        at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:63)        at orggradleinternalconcurrentmanagedexecutorimpl$1run(managedexecutorimpljava:46)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624)        at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun(threadfactoryimpljava:55)        at javalangthreadrun(threadjava:748)process gradle test executor 32 finished with non-zero exit value 1orggradleprocessinternalexecexception: process gradle test executor 32 finished with non-zero exit value 1        at orggradleprocessinternaldefaultexechandle$execresultimplassertnormalexitvalue(defaultexechandlejava:382)        at orggradleprocessinternalworkerdefaultworkerprocessonprocessstop(defaultworkerprocessjava:118)        at orggradleprocessinternalworkerdefaultworkerprocessaccess$000(defaultworkerprocessjava:41)        at orggradleprocessinternalworkerdefaultworkerprocess$1executionfinished(defaultworkerprocessjava:74)        at sunreflectgeneratedmethodaccessor700invoke(unknown source)        at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)        at javalangreflectmethodinvoke(methodjava:498)        at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)        at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)        at orggradleinternaleventabstractbroadcastdispatchdispatch(abstractbroadcastdispatchjava:42)        at orggradleinternaleventbroadcastdispatch$singletondispatchdispatch(broadcastdispatchjava:230)        at orggradleinternaleventbroadcastdispatch$singletondispatchdispatch(broadcastdispatchjava:149)        at orggradleinternaleventlistenerbroadcastdispatch(listenerbroadcastjava:140)        at orggradleinternaleventlistenerbroadcastdispatch(listenerbroadcastjava:37)        at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)        at comsunproxy$proxy93executionfinished(unknown source)        at orggradleprocessinternaldefaultexechandlesetendstateinfo(defaultexechandlejava:215)        at orggradleprocessinternaldefaultexechandlefinished(defaultexechandlejava:327)        at orggradleprocessinternalexechandlerunnercompleted(exechandlerunnerjava:103)        at orggradleprocessinternalexechandlerunnerrun(exechandlerunnerjava:83)        at orggradleinternaloperationsbuildoperationidentifierpreservingrunnablerun(buildoperationidentifierpreservingrunnablejava:39)        at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:63)        at orggradleinternalconcurrentmanagedexecutorimpl$1run(managedexecutorimpljava:46)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624)        at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun(threadfactoryimpljava:55)        at javalangthreadrun(threadjava:748)failed to execute orggradleexecutiontaskgraphdefaulttaskplanexecutor$taskexecutorworker@4c508c7javalangillegalstateexception: some child operations have not yet completed        at orggradleinternalworkdefaultworkerleaseservice$defaultworkerleasereleaselock(defaultworkerleaseservicejava:350)        at orggradleinternalresourcesabstracttrackedresourcelockunlock(abstracttrackedresourcelockjava:60)        at orggradleinternalresourcesdefaultresourcelockcoordinationservice$releaselockstransform(defaultresourcelockcoordinationservicejava:213)        at orggradleinternalresourcesdefaultresourcelockcoordinationservice$releaselockstransform(defaultresourcelockcoordinationservicejava:203)        at orggradleinternalresourcesdefaultresourcelockcoordinationservicewithstatelock(defaultresourcelockcoordinationservicejava:45)        at orggradleexecutiontaskgraphdefaulttaskexecutionplanexecute(defaulttaskexecutionplanjava:628)        at orggradleexecutiontaskgraphdefaulttaskexecutionplanexecutewithtask(defaulttaskexecutionplanjava:580)        at orggradleexecutiontaskgraphdefaulttaskplanexecutor$taskexecutorworkerrun(defaulttaskplanexecutorjava:98)        at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:63)        at orggradleinternalconcurrentmanagedexecutorimpl$1run(managedexecutorimpljava:46)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624)        at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun(threadfactoryimpljava:55)        at javalangthreadrun(threadjava:748)```</details>as well as internal compilation errors with the gradle scan plugin it seems that gradle 4 is breaking a lot of stuff while gradle 35 is working fine are you okay with reverting for now to then investigate what is going on? || @timvdlippe strange it works on travis as well as on my computer :) what command do you call? what os and java version do you have? || i have tried with both openjdk8 and 9 on ubuntu 1604 it fails on `/gradlew clean build` on `release/2x` and also when i try to merge `release/2x` into `backport-fixes` || im not able to reproduce that issue @szczepiq @raphw @christianschwarz are you able to execute `/gradlew clean build` on `release/2x` without errors? || @szpak are you using openjdk or oracljedk? thats the only difference i can spot with my setup and travis || openjdk on fedora 26:```openjdk version ""180_144""openjdk runtime environment (build 180_144-b01)openjdk 64-bit server vm (build 25144-b01 mixed mode)```i have just also tested it with oracle java 9 (which after changes in the final version seems to be reported as openjdk as well):```openjdk version ""9""openjdk runtime environment (build 9+181)openjdk 64-bit server vm (build 9+181 mixed mode)``` || hm i have the latest available (on ubuntu 1604) jdk 8 version which is 131 maybe that is an issue?! would be really weird that would trigger these errors || i installed oraclejdk8 and it is working locally again probably a corrupt state of my computer which was resolved later glad it is working again :relieved:  || "
116,1191,1203,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixed documentation issue added unit tests - while working on new verification started listeners (#1191) i found an instance of incorrect documentation i added unit tests and simplified the documentation- currently contrary to what the javadoc said we do guarantee the order in which invocation listeners get notified some of our users might have started to depend on this behavior i added unit tests and fixed the javadoc in general it is seems useful to guarantee the order this way the api is more predictable easier to use # [codecov](https://codecovio/gh/mockito/mockito/pull/1203?srcpr&elh1) report> merging [#1203](https://codecovio/gh/mockito/mockito/pull/1203?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/14c6171e7ffebf2d38a444584eae87837deb95cd?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1203/graphs/treesvg?height150&width650&tokenmx80slder0&srcpr)](https://codecovio/gh/mockito/mockito/pull/1203?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1203   +/-   ##  coverage          8723%   8723%             complexity          2292     2292             files                286      286             lines               5805     5805             branches             690      690             hits                5064     5064             misses               554      554             partials             187      187```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1203?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1203?srcpr&elfooter) last update [14c6171795d733](https://codecovio/gh/mockito/mockito/pull/1203?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you for review! ||
117,1211,1214,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1211: improve @deprecated javadoc this pull request fixes #1211 by improving the `@deprecated` javadoc of `mockitodebug()` `mockitodebugger` and `mockitodebuggerprintinvocations(object  mocks)` by adding the additional information on how to retrieve an actual instance of the `mockitodebugger` interface # [codecov](https://codecovio/gh/mockito/mockito/pull/1214?srcpr&elh1) report> merging [#1214](https://codecovio/gh/mockito/mockito/pull/1214?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/d25b75c124917e57217fa2d21d5dc2724dfa50e2?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1214/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1214?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1214   +/-   ##  coverage          8732%   8732%             complexity          2304     2304             files                287      287             lines               5855     5855             branches             696      696             hits                5113     5113             misses               555      555             partials             187      187```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1214?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1214?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1214?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1214?srcpr&elfooter) last update [d25b75c5e0e0c9](https://codecovio/gh/mockito/mockito/pull/1214?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
118,1206,1216,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,adresses #1206: allow opting out from annotation copying within mocks the `mocksettings` now include an option to disable copying of annotations to mock classes # [codecov](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&elh1) report> merging [#1216](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/40892948c225caa7fa8bdf4c5c9306b8b689d491?srcpr&eldesc) will **decrease** coverage by `<01%`> the diff coverage is `909%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1216/graphs/treesvg?srcpr&width650&tokenmx80slder0&height150)](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1216      +/-   ##- coverage          8732%   8732%   -001%     - complexity          2304     2308       +4       files                287      287                lines               5855     5868      +13       branches             696      703       +7     + hits                5113     5124      +11       misses               555      555              - partials             187      189       +2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [creation/bytebuddy/subclassbytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrlqnvkzhlnb2nrtwfrzxiuamf2yq) | `6428% <100%> (+064%)` | `10 <0> (ø)` | :arrow_down: || [kito/internal/creation/bytebuddy/mockfeaturesjava](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja0zlyxr1cmvzlmphdme) | `100% <100%> (ø)` | `2 <2> (ø)` | :arrow_down: || [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6421% <100%> (+038%)` | `11 <0> (ø)` | :arrow_down: || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `9777% <100%> (+005%)` | `21 <1> (+1)` | :arrow_up: || [/creation/bytebuddy/subclassbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrly29kzudlbmvyyxrvci5qyxzh) | `9473% <100%> (+029%)` | `22 <0> (+2)` | :arrow_up: || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `9277% <100%> (+017%)` | `43 <1> (+1)` | :arrow_up: || [eation/bytebuddy/typecachingbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvvhlwzunhy2hpbmdcexrly29kzudlbmvyyxrvci5qyxzh) | `7586% <6666%> (-491%)` | `4 <0> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&elfooter) last update [4089294bb4c78c](https://codecovio/gh/mockito/mockito/pull/1216?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
119,1183,1217,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,fixes #1183: make override check more forgiving to accomondate kotlin compile patterns the override check implies java compile patterns such that kotlin method resolutions could fail for void return types which do not fit into javas reference-type only generic hierarchies this pr eases this restriction to fix this resolution for kotlini added the test case of the reported issue as a reference # [codecov](https://codecovio/gh/mockito/mockito/pull/1217?srcpr&elh1) report> merging [#1217](https://codecovio/gh/mockito/mockito/pull/1217?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/40892948c225caa7fa8bdf4c5c9306b8b689d491?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `6363%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1217/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1217?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1217      +/-   ##- coverage          8732%   8727%   -005%     + complexity          2304     2301       -3       files                287      287                lines               5855     5856       +1       branches             696      696              - hits                5113     5111       -2     - misses               555      556       +1     - partials             187      189       +2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1217?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/1217?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `6216% <6363%> (-239%)` | `14 <3> (-3)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1217?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1217?srcpr&elfooter) last update [4089294a507d05](https://codecovio/gh/mockito/mockito/pull/1217?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
120,117,1219,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,add regression test for issue #1174 regression that shows the issue of #1174 i am unable to reproduce this locally lets see what travis sayscloses #1174 # [codecov](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&elh1) report> merging [#1219](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/e10c5409e460c3ecd6b2ef9513a0b3802351d85f?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1219/graphs/treesvg?tokenmx80slder0&width650&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1219   +/-   ##  coverage          8727%   8727%             complexity          2305     2305             files                287      287             lines               5869     5869             branches             703      703             hits                5122     5122             misses               556      556             partials             191      191```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&elfooter) last update [e10c5409f5312b](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you! ||
121,445,1221,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"mockitoextension for junit5 fixes #445discussion: https://groupsgooglecom/forum/#!topic/mockito/r1l1ag2rgbqfirst of all thanks to the junit5-team (@sbrannen) for that great api! the implementation was straight forward and the docu is top notch not comparable to a junitrule or runner implementation one can feel the hard work ----the here provided `mockitoextension` allows to mock/spy/validate like the well known mockito-junitrule/runner this is still ""work in progress"" feel free to commentusage:```java@extendwith(mockitoextensionclass)class junit5test {   @mock  private dependency mock   @test  void checkmockcreation(){    when(mockfoo())thenreturn(""hello junit5"")    mockfoo()    verify(mock)foo()  }}``` possibly we need an annotation on class or method level to provide control of the ""strictness"" eg:```@extendwith(mockitoextensionclass)@mockitostrictness(warn)class junit5test {    @mockitostrictness(strict_stubs)    void testwithlocaldefinedstrictness(){    }}``` || # [codecov](https://codecovio/gh/mockito/mockito/pull/1221?srcpr&elh1) report> merging [#1221](https://codecovio/gh/mockito/mockito/pull/1221?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/2b1a6e049d7c11619896bb168911c92173c05759?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1221/graphs/treesvg?tokenmx80slder0&srcpr&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1221?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1221   +/-   ##  coverage          8818%   8818%             complexity          2354     2354             files                291      291             lines               5935     5935             branches             710      710             hits                5234     5234             misses               521      521             partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1221?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1221/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1221?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1221?srcpr&elfooter) last update [2b1a6e0f4d943f](https://codecovio/gh/mockito/mockito/pull/1221?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > could we subclass the extension for the silent and nonsilent variant? thats in line with the junit4 variant :)you mean 3 extensions like `mockitowarnextension` `mockitolenientextension` `mockitostrictstubextension` ?  || current state: added support for strictnessthe test class and nested test classes and methods can define the stricness by declaring `@strictness`note: the strictness level is inherited and can be overriden per context```java@extendwith(mockitoextensionclass)//default strictness warnclass stricnesstest {    @mock    predicate mock    @test    void strictnessfromtestroot_defaultiswarn_shouldlogunnecessarystubbingexception() {        when(mocktest(1))thenreturn(true)    }    @test    @strictness(lenient)    void strictnessfromtestmethod_lenient_shouldignoreunnecessarystubbing() {        when(mocktest(1))thenreturn(true)    }    @nested    @strictness(warn)    class nestedtest{        @mock        predicate mock        @test        void strictnessfromnestedtest_shouldlogunnecessarystubbing() {            when(mocktest(1))thenreturn(true)        }        @test        @strictness(strict_stubs)        void strictnessfromtestmethod_shouldthrowunnecessarystubbingexception() {            when(mocktest(1))thenreturn(true)        }    }}``` || @christianschwarz correct it would have the 3 different versions againalso travis is unhappy because we are targeting java 8 with this pr since we state mockito 2 supports java 6+ i am not sure if we can integrate into mockito 2 instead we maybe should include it in master and publish a beta version of mockito 3? ||  > instead we maybe should include it in master and publish a beta version of mockito 3?that means stable junit5 support will only be available when mockito 3 final is released i guess this will not happen before q4 2018 an other option is to release junit5 support as seperate mockito 2 addon artefact which requires java 8 like junit 5 itself it can be released much earlier what do you think? || >>you mean 3 extensions like mockitowarnextension mockitolenientextension mockitostrictstubextension ?> correct it would have the 3 different versions againwhat is the benefit for the user here? what do you think of the annotation proposal above? it allows to define strictness at method and nested test level  || > an other option is to release junit5 support as seperate mockito 2 addon artefact which requires java 8 like junit 5 itself it can be released much earlier what do you think?if we can find a way to make that pass on the build i am all for that :+1: :+1: > what is the benefit for the user here? what do you think of the annotation proposal above? it allows to define strictness at method and nested test levelyes definitely keep them they are very useful to specify exceptions for a single method/nested class however to specify the default strictness on a whole test class i would like to have that incorporated in the `@extendwith` annotation || junit 5 supports meta-annotations so we could provide the following annotation:```java@retention(retentionpolicyruntime)@target({elementtypeannotation_type elementtypetype elementtypemethod})@extendwith(mockitoextensionclass)public @interface withmockito {    strictness value() default strictnessstrict_stubs}``` || i am not sure if we should do that  we would have two annotation concepts to define the strictness that is maybe confusing and inconsequent and even conflictingboth annotations  `@strictness` and `@withmockito` are declared with target `elementtypetype` to be applicable to classes in junit5 we have 2 kind of test classes the root-test and nested-test `@withmockito`  will be ignored on nested classes thats fine   `@strictness` can be placed on both but this can lead to conflicts like this:```java@withmockito(warn)@strictness(strict_stubs)class test{   }```----anyway the meta-annotation `@withmockito` is a good idea to avoid boilerplate code ~but i would like to leave out the strictness~ i overlook the `elementtypemethod` in your poposal @tmurakami  now i get your point one can use `@withmockito` to init mocks and define the strictness on a root-test nested and method level this violates the srp  and may lead to problems down the road what do you think? || @christianschwarz could you also add a test for #1163 and verify we can fix that issue? || @christianschwarz sorry i didnt explain it enoughi thought that it would be better to provide an annotation (like @withmockito) that was annotated with `@extendwith(mockitoextensionclass)` instead of providing `@strictness`the reason is to reduce boilerplate code as you said> this violates the srp  and may lead to problems down the road what do you think?i was lacking considerationas you say my proposal may violate the sprif mockitoextension supports meta-annotation i suppose that mockito users would be able to create an annotation like `@withmockito` as neededso i think we dont have to provide `@withmockito` || btw junits mockitoextension supports method/constructor injectionhttp://junitorg/junit5/docs/current/user-guide/#writing-tests-dependency-injectionwhat do you think about supporting it? || > what do you think about supporting it?it was discussed in #445 and definetly worth a look for this pr i would like to provide only a mvp more features should be added in the next steps || > so i think we dont have to provide @withmockitoi like it and keep it for now but without stricness attribute || @timvdlippe @tmurakami do you guys have an idea how to get the build green? i must admit im a gradle noob :fearful: || i think we should disable the animalsniffer in this specific subprojectcan we disable the task in some way? if not we should not import the fulljava-librarygradle but only the logic we need then we dont importanimalsniffer straight awayon fri 27 oct 2017 23:23 christian schwarz <notifications@githubcom>wrote:> @timvdlippe <https://githubcom/timvdlippe> @tmurakami> <https://githubcom/tmurakami>> do you guys have an idea how to get the build green? i must admit im a> gradle noob 😨>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/1221#issuecomment-340089777> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdb8ajedr8lenluxoymp9xqbiqprtsks5swknagajpzm4qfiqd>> > || @christianschwarz thank you ill read #445 || @christianschwarz i pushed fixes to this pr which should make the build pass now || @timvdlippe big thanks for fixing the build! || @christianschwarz do you have some time in the near future to address the above feedback? thanks! || @timvdlippe >do you have some time in the near future to address the above feedback? thanks!i look into it next week || @tmurakami in case you want to joint the api discussion  here it is -> [[mockito google group] how should the perfect mockito junit5 api look like?]( https://groupsgooglecom/forum/#!topic/mockito/r1l1ag2rgbq ) || @christianschwarz thank you i will check later || i have updated this pr with the refactoring really happy that the impact on our public api is minimal the only sad part is the `mockitosession` with `testclassinstances` but the impact is limited i have also updated the specification of the extension to be in line with other junit5 extension this severely simplified the implementation of searching for strictness while still allowing users to override per method || code coverage in this prs diff is lower than 8808%?im waiting to merge this pr || this pr is work in progress we will improve the code coverage lateron sat 20 jan 2018 12:22 wreulicke <notifications@githubcom> wrote:> code coverage in this prs diff is lower than 8808%?> im waiting to merge this pr>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/1221#issuecomment-359164314> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdb2dcuxqjfui4uruedohqdvspczh8ks5tmcxugajpzm4qfiqd>> > || hey @mockito/developers! can you review #1272? its a critical change because its new public api we are always very judicious about public api changes it also simplifies this pr / junit5 integration because we dont need ""@strictness"" annotationfor this pr how about we ship #1232 first? || now that #1232 has been shipped i think we should discuss how to continue with this pr@christianschwarz do you have time to continue with this effort? id be happy to help || hi @marcphilipp !> do you have time to continue with this effort? id be happy to helpthis week i can invest some hours in this pr you help is very welcome thanks for your request!  * do you know how to  set up gradle so the ""junit"" / mockito-extension module is build a independent artefact?@mockitoguy @timvdlippe why you want to distribute the mockito-junit-extension as independent artefact and not as part of mockito-core? from a user perspective it is convenient to have only one dependency || because mockito-core uses java 6 and junit 5 and its extensions requirejava 8 therefore we can not incorporate in core and have to publish aseparate artifacton mon 19 feb 2018 09:13 christian schwarz <notifications@githubcom>wrote:> hi @marcphilipp <https://githubcom/marcphilipp> !>> do you have time to continue with this effort? id be happy to help>> this week i can invest some hours in this pr you help is very welcome> thanks for your request!>>    - do you know how to set up gradle so the ""junit"" / mockito-extension>    module is build a independent artefact?>> @mockitoguy <https://githubcom/mockitoguy> @timvdlippe> <https://githubcom/timvdlippe> why you want to distribute the> mockito-junit-extension as independent artefact and not as part of> mockito-core? from a user perspective it is convenient to have only one> dependency>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/1221#issuecomment-366615635> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdb-w4_ovccfqnnt0j_3k0gtv5xw05ks5tws0tgajpzm4qfiqd>> > || @timvdlippe @mockitoguy what is the current state of the strictness discussion? if you made no decisson yet i would like leave the strictness toppic out of this first pr it can be added later and use `stricnesswarn` as default || @christianschwarz i think our final decision was to remove `@strictness` from test method level but keep it in the extension that leaves strictness on runner mock and soon invocation level for test method level we will need concrete use-cases (see https://githubcom/mockito/mockito/pull/1272#issuecomment-361075606) || @timvdlippe okay what you mean by?> remove @strictness from test method level but keep it in the extensionkeep the `@strictness` to be used on top-level-test-class and nested-test-classes? ```java@extendwith(mockitoextensionclass)@strictness(warn)public class nestedtests {    @nested    @strictness(silent)    class nestedtest {              }}``` || @christianschwarz on test method level eg```java@extendwith(mockitoextensionclass)@strictness(warn) // remove this onepublic class nestedtests {    @nested    @strictness(silent) // remove this one    class nestedtest {                   @strictness(lenient) // remove this one         public void test() {         }    }}``` || @timvdlippe should @extendwith(mockitoextensionclass) be supported on nested-test-classes?```java@extendwith(mockitoextensionlenientclass)public class nestedtests {    @nested    @extendwith(mockitoextensionwarnclass)    class nestedtest {              }}``` || @christianschwarz yes please in this case all invocations in `nestedtest` should have strictness `warn` while all others have `lenient` || i think using subclasses like `mockitoextensionwarn` and `mockitoextensionlenient` is not a good idea because in that case both extensions would get registered and interfere with each other || @marcphilipp hm good point we wanted to keep our api in-line with how we deal with strictness in junit4 do we have any other options to use a similar interface but removing the duplication issue? || confirmed it doesnt work `@stricness`-annotation to the rescue   || that is really unfortunate :cry: will keep on thinking for alternatives but for now we have to resort to `@strictness` || you could handle the duplication issue in the extensions by using lazy initialization and the same namespace to store the `mockitosession` in `extensioncontext` || thank you guys for picking this up!!!lets discuss the strictness annotation (and potentially other settings of the extension) ```@strictness``` annotation looks nice in the test code but it has 2 caveats: - it appears as general purpose api but it is only a setting for junit5 extension this may be confusing for users: annotation used without mockitoextension user thinks it works but it has no effect - it is not easy to discoverwhat do you think about following options: - ```@mockitoextensionsettings(strictnessstrictnesslenient)``` - ```@mockitoextensionsettings(strictnessstrictnesslenient loggermyloggerclass)``` (example future setting) - ```@mockitoextensionstrictness(strictnesslenient)```if we need to discuss the annotation more we can always ship the initial version version of junit5 support without it this way we can unblock a feature for our users while still improve the api incrementally it would be good to make the extension use strict_stubs by default it is consistent with mockitosession and it is inline with our path to stricter stubs by default in future version of mockito	i agree with @timvdlippe that were not ready for strictness per method lets see some solid use cases first to implement it cleanly we should support it for all kinds of runners not only junit5 lets stay focused on junit5 extension and revisit strictness per method later also when we merge #1272 we may not need strictness per method at allwhats the best name of the new module: mockito-junit5 mockito-jupiter? what is the typical naming convention here? || `@mockitoextensionsettings(strictnessstrictnesslenient)` looks modern and more flexible than the junit4 look alike `@extendwith(mockitoextensionlenientclass)` but i would like to shorten it to `@mockitoextension(strictnessstrictnesslenient)`but i wonder how it behave with nested test classes? || @timvdlippe @mockitoguy how should the api finally look like? what should be/ shoud not be included in first version?  || @christianschwarz the first version needs to:1 create mocks with `@mock` and `@spy` and such1 properly handle `mockitosession` even with nested classes1 have strict stub support || how should the extension look?  * `@extendwith(mockitoextensionclass)` vs  `@mockitoextension`so we leave the configurable stricness for a next step right? || `@extendwith(mockitoextensionclass)` such that users downstream can potentially introduce `@mockitoextension` if they want to that lets us stick to the mainstream junit5 notation with freedom for our users> so we leave the configurable stricness for a next step right?yes please || +1 to @timvdlippes comments@christianschwarz regarding your earlier suggestion with ```@mockitoextension(strictnessstrictnesslenient)```can mockitoextension be at the same time a) annotation for configuring our extension and b) a class referenced in jupiters ```@extendwith```?```@extendwith(mockitoextensionclass)@mockitoextension(strictnessstrictnesslenient)class junit5test {}``` || > can mockitoextension be at the same time a) annotation for configuring our extension and b) a class referenced in jupiters `@extendwith`?no that is not possiblean annotation in java is not allowed to implement any interface (other than `annotation`) any attempt to do so will result in a compiler warning similar to the following> annotation type declaration cannot have explicit superinterfaces || you could meta-annotate the annotation with `@extendwith` thoughfor example```java@extendwithmockito(strictnessstrictnesslenient)class junit5test {}``````java@extendwith(mockitoextensionclass)@retention(runtime)public @interface extendwithmockito {    strictness strictness() default strictnessstrict}``` || @timvdlippe @mockitoguy i would like to follow the proposal of @marcphilipp but leaving the strictness for now! the stricness can be added later the annotation `@extendwithmockito`  reveal clearly its intention it is even better than `@mockitoextension`  || @christianschwarz yes that seems fine lets try to finish this pr and ship as it has been lingering for quite a while now :smile:  || i am going to polish up this pr this weekend to hopefully get this close to merging it has been waiting for quite a while now :smile:  || all right i have polished up the implementation now (with help from @marcphilipp much appreciated!)the implementation now includes a `@configuredwithmockito` which is an annotation that describes how mockito should run this includes the strictness for now but is extensible to future configuration we would likethere are a couple of action points left:- @mockitoguy could you review this pr in terms of documentation/implementation?- `/gradlew build` does not include the junit5 subproject tests i have no clue why yet :cry: - running the tests directly works in intellij but if i run the module/package instead i get the following stacktrace:```mar 17 2018 3:33:58 pm orgjunitplatformlaunchercoredefaultlauncher handlethrowablewarning: testengine with id junit-jupiter failed to discover testsjavalangarraystoreexception: sunreflectannotationtypenotpresentexceptionproxy	at sunreflectannotatio notationparserparseclassarray(annotationparserjava:724)	at sunreflectannotatio notationparserparsearray(annotationparserjava:531)	at sunreflectannotatio notationparserparsemembervalue(annotationparserjava:355)	at sunreflectannotatio notationparserparseannotation2(annotationparserjava:286)	at sunreflectannotatio notationparserparseannotations2(annotationparserjava:120)	at sunreflectannotatio notationparserparseannotations(annotationparserjava:72)	at javalangclasscreateannotationdata(classjava:3521)	at javalangclassannotationdata(classjava:3510)	at javalangclassgetdeclaredannotation(classjava:3458)	at orgjunitplatformcommonsutilannotationutilsfindannotation(annotationutilsjava:135)	at orgjunitplatformcommonsutilannotationutilsfindannotation(annotationutilsjava:114)	at orgjunitjupiterenginedescriptorjupitertestdescriptordeterminedisplayname(jupitertestdescriptorjava:86)	at orgjunitjupiterenginedescriptorclasstestdescriptor<init>(classtestdescriptorjava:83)	at orgjunitjupiterenginedescriptorclasstestdescriptor<init>(classtestdescriptorjava:77)	at orgjunitjupiterenginediscoverytestcontainerresolverresolveclass(testcontainerresolverjava:100)	at orgjunitjupiterenginediscoverytestcontainerresolverresolveelement(testcontainerresolverjava:45)	at orgjunitjupiterenginediscoveryjavaelementsresolvertrytoresolvewithresolver(javaelementsresolverjava:208)	at orgjunitjupiterenginediscoveryjavaelementsresolverlambda$resolve$9(javaelementsresolverjava:195)	at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)	at javautiliteratorforeachremaining(iteratorjava:116)	at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)	at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:481)	at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:471)	at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)	at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)	at javautilstreamreferencepipelinecollect(referencepipelinejava:499)	at orgjunitjupiterenginediscoveryjavaelementsresolverresolve(javaelementsresolverjava:198)	at orgjunitjupiterenginediscoveryjavaelementsresolverlambda$resolveforallparents$5(javaelementsresolverjava:164)	at javautilcollections$singletonsetforeach(collectionsjava:4767)	at orgjunitjupiterenginediscoveryjavaelementsresolverresolveforallparents(javaelementsresolverjava:164)	at orgjunitjupiterenginediscoveryjavaelementsresolverresolvecontainerwithparents(javaelementsresolverjava:85)	at orgjunitjupiterenginediscoveryjavaelementsresolverresolveclass(javaelementsresolverjava:60)	at javautilarraylistforeach(arraylistjava:1255)	at javautilcollections$unmodifiablecollectionforeach(collectionsjava:1080)	at orgjunitjupiterenginediscoverydiscoveryselectorresolverlambda$resolve$2(discoveryselectorresolverjava:66)	at javautilarraylistforeach(arraylistjava:1255)	at orgjunitjupiterenginediscoverydiscoveryselectorresolverresolve(discoveryselectorresolverjava:65)	at orgjunitjupiterenginediscoverydiscoveryselectorresolverresolveselectors(discoveryselectorresolverjava:50)	at orgjunitjupiterenginejupitertestenginediscover(jupitertestenginejava:61)	at orgjunitplatformlaunchercoredefaultlauncherdiscoverengineroot(defaultlauncherjava:130)	at orgjunitplatformlaunchercoredefaultlauncherdiscoverroot(defaultlauncherjava:117)	at orgjunitplatformlaunchercoredefaultlauncherdiscover(defaultlauncherjava:82)	at comintellijjunit5junit5ideatestrunnerstartrunnerwithargs(junit5ideatestrunnerjava:48)	at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:47)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:242)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)mar 17 2018 3:33:58 pm orgjunitplatformlaunchercoredefaultlauncher handlethrowablewarning: testengine with id junit-jupiter failed to discover testsjavalangarraystoreexception: sunreflectannotationtypenotpresentexceptionproxy	at sunreflectannotatio notationparserparseclassarray(annotationparserjava:724)	at sunreflectannotatio notationparserparsearray(annotationparserjava:531)	at sunreflectannotatio notationparserparsemembervalue(annotationparserjava:355)	at sunreflectannotatio notationparserparseannotation2(annotationparserjava:286)	at sunreflectannotatio notationparserparseannotations2(annotationparserjava:120)	at sunreflectannotatio notationparserparseannotations(annotationparserjava:72)	at javalangclasscreateannotationdata(classjava:3521)	at javalangclassannotationdata(classjava:3510)	at javalangclassgetdeclaredannotation(classjava:3458)	at orgjunitplatformcommonsutilannotationutilsfindannotation(annotationutilsjava:135)	at orgjunitplatformcommonsutilannotationutilsfindannotation(annotationutilsjava:114)	at orgjunitjupiterenginedescriptorjupitertestdescriptordeterminedisplayname(jupitertestdescriptorjava:86)	at orgjunitjupiterenginedescriptorclasstestdescriptor<init>(classtestdescriptorjava:83)	at orgjunitjupiterenginedescriptorclasstestdescriptor<init>(classtestdescriptorjava:77)	at orgjunitjupiterenginediscoverytestcontainerresolverresolveclass(testcontainerresolverjava:100)	at orgjunitjupiterenginediscoverytestcontainerresolverresolveelement(testcontainerresolverjava:45)	at orgjunitjupiterenginediscoveryjavaelementsresolvertrytoresolvewithresolver(javaelementsresolverjava:208)	at orgjunitjupiterenginediscoveryjavaelementsresolverlambda$resolve$9(javaelementsresolverjava:195)	at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)	at javautiliteratorforeachremaining(iteratorjava:116)	at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)	at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:481)	at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:471)	at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)	at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)	at javautilstreamreferencepipelinecollect(referencepipelinejava:499)	at orgjunitjupiterenginediscoveryjavaelementsresolverresolve(javaelementsresolverjava:198)	at orgjunitjupiterenginediscoveryjavaelementsresolverlambda$resolveforallparents$5(javaelementsresolverjava:164)	at javautilcollections$singletonsetforeach(collectionsjava:4767)	at orgjunitjupiterenginediscoveryjavaelementsresolverresolveforallparents(javaelementsresolverjava:164)	at orgjunitjupiterenginediscoveryjavaelementsresolverresolvecontainerwithparents(javaelementsresolverjava:85)	at orgjunitjupiterenginediscoveryjavaelementsresolverresolveclass(javaelementsresolverjava:60)	at javautilarraylistforeach(arraylistjava:1255)	at javautilcollections$unmodifiablecollectionforeach(collectionsjava:1080)	at orgjunitjupiterenginediscoverydiscoveryselectorresolverlambda$resolve$2(discoveryselectorresolverjava:66)	at javautilarraylistforeach(arraylistjava:1255)	at orgjunitjupiterenginediscoverydiscoveryselectorresolverresolve(discoveryselectorresolverjava:65)	at orgjunitjupiterenginediscoverydiscoveryselectorresolverresolveselectors(discoveryselectorresolverjava:50)	at orgjunitjupiterenginejupitertestenginediscover(jupitertestenginejava:61)	at orgjunitplatformlaunchercoredefaultlauncherdiscoverengineroot(defaultlauncherjava:130)	at orgjunitplatformlaunchercoredefaultlauncherdiscoverroot(defaultlauncherjava:117)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:90)	at comintellijjunit5junit5ideatestrunnerstartrunnerwithargs(junit5ideatestrunnerjava:65)	at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:47)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:242)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)process finished with exit code 0empty test suite```you can run the individual tests though and see how it works i would like to finish this pr asap and publish next week to finally have mockito + junit5 working :tada:  || i was able to fix the gradle integration after following https://junitorg/junit5/docs/current/user-guide/#running-tests-build-gradle intellij still broken but i got to go now || @sbrannen whats the most consistent and popular naming convention? gradle team calls new junit5 ```junitplatform``` because in the gradle file you write this:```test {  usejunitplatform()}``` in this pr were shipping new module ```orgmockito:junit-jupiter``` (which i prefer) what is the best name? || @mockitoguy the platform is something different than jupiter the platform is a separate organisation (https://mvnrepositorycom/artifact/orgjunitplatform) which handles integration with platform-oriented clients (like gradle intellij maven etc) instead we are building an extension that is built on top of the junit api and this is called jupiter || @mockitoguy> whats the most consistent and popular naming convention? gradle team calls new junit5 junitplatformthats because the gradle `test` task actually launches the _junit platform_ -- which was released under the ""junit 5"" umbrella project"" the ""platform"" can be used to run test engines for junit jupiter (aka junit 5) junit vintage (aka junit 3 and 4) and any other testing frameworks for which there is a `testengine` (eg spek etc)so the gradle team has made the best choice in calling that support for the junit platform> in this pr were shipping new module orgmockito:junit-jupiter (which i prefer) what is the best name?`junit-jupiter` makes perfect sense here: your extension is an implementation of apis from junit jupiter so you should definitely stick with that!i do the same thing in springs support for junit jupiter for example the `springextension` in spring framework 50 resides in the `orgspringframeworktestcontextjunitjupiter` package within the `spring-test` artifactmake sense? || btw i highly recommend my explanation of what ""junit 5"" is [here](https://junitorg/junit5/docs/current/user-guide/#overview-what-is-junit-5) 😉 **_junit 5  junit platform + junit jupiter + junit vintage_** || when can we expect releasing junit5 support by mockito? || @mockitoguy feedback addressed! if no one else objects i am merging this later today and publish a new maven central release for mockito java 10/11 and junit5 compatibility! || all right lets do thisthanks @christianschwarz for the initial implementation @marcphilipp @sbrannen for the junit feedback and help and the others for reviewing merging! || "
122,1130,1228,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,add @checkreturnvalue to stubbing/verification methods introduce a new annotation `@checkreturnvalue` and add this to methods like `when` and `verify` such that static analysis can verify the value is actually used (http://errorproneinfo/bugpattern/checkreturnvalue) this makes sure developers can get warnings on build-time instead of run-time (with our internal `validatestate`)fixes #1130 # [codecov](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&elh1) report> merging [#1228](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/e10c5409e460c3ecd6b2ef9513a0b3802351d85f?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1228/graphs/treesvg?width650&srcpr&tokenmx80slder0&height150)](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1228      +/-   ##- coverage          8727%   8723%   -004%     - complexity          2305     2320      +15       files                287      287                lines               5869     5914      +45       branches             703      708       +5     + hits                5122     5159      +37     - misses               556      562       +6     - partials             191      193       +2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: || [l/configuration/plugins/defaultmockitopluginsjava](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul3bsdwdpbnmvrgvmyxvsde1vy2tpdg9qbhvnaw5zlmphdme) | `6969% <0%> (-399%)` | `10% <0%> (+4%)` | || [va/org/mockito/internal/invocation/realmethodjava](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul1jlywxnzxrob2quamf2yq) | `909% <0%> (-076%)` | `0% <0%> (ø)` | || [/internal/invocation/defaultinvocationfactoryjava](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0rlzmf1bhrjbnzvy2f0aw9urmfjdg9yes5qyxzh) | `100% <0%> (ø)` | `4% <0%> (+2%)` | :arrow_up: || [nternal/listeners/verificationstartednotifierjava](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9saxn0zw5lcnmvvmvyawzpy2f0aw9uu3rhcnrlze5vdglmawvylmphdme) | `9803% <0%> (+081%)` | `14% <0%> (+7%)` | :arrow_up: || [a/org/mockito/internal/creation/suspendmethodjava](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9tdxnwzw5ktwv0ag9klmphdme) | `4444% <0%> (+444%)` | `4% <0%> (+2%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&elfooter) last update [e10c5402d0a0a7](https://codecovio/gh/mockito/mockito/pull/1228?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || approved your changes please consider my feedback and ship at will! ||
123,904,1247,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,remove several container classes and inline code remove several classes that were containers for code that is easier to be inlined they were only referenced once or never at all this makes it easier to reason about the code while also maintaining less code and classescloses #904 # [codecov](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&elh1) report> merging [#1247](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/81d90ae0ec1da86e7bdee16f9ee66b6fc0e02f22?srcpr&eldesc) will **increase** coverage by `014%`> the diff coverage is `8333%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1247/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1247      +/-   ##+ coverage           879%   8804%   +014%     + complexity          2322     2317       -5       files                287      284       -3       lines               5869     5855      -14       branches             703      702       -1     - hits                5159     5155       -4     + misses               526      519       -7     + partials             184      181       -3```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9239% <ø> (ø)` | `92 <0> (ø)` | :arrow_down: || [va/org/mockito/internal/util/collections/setsjava](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbgxly3rpb25zl1nldhmuamf2yq) | `50% <ø> (+714%)` | `3 <0> (ø)` | :arrow_down: || [/internal/junit/mismatchreportingtestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9naxntyxrjafjlcg9ydgluz1rlc3rmaxn0zw5lci5qyxzh) | `100% <100%> (ø)` | `4 <0> (ø)` | :arrow_down: || [g/mockito/internal/matchers/text/valueprinterjava](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9tyxrjagvycy90zxh0l1zhbhvluhjpbnrlci5qyxzh) | `8333% <80%> (-054%)` | `23 <0> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&elfooter) last update [81d90aed6e1001](https://codecovio/gh/mockito/mockito/pull/1247?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || since no one reviewed this pr for a while i assume it is safe to be merged || sorry nobody picked up the work! you can try to ping us for feedback i suspect that because it was a safely looking internal refactoring we put a low priority on this in the future lets try to solicit approval for prs :) ||
124,1254,1257,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #1254 and #1256: improved check for self-invocation better checks for recursive calls and guards internally used jdk typesfixes #1254 fixes #1256 # [codecov](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&elh1) report> merging [#1257](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/442277f4647ebf24930132b080b9971d3eef9e63?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1257/graphs/treesvg?tokenmx80slder0&srcpr&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1257      +/-   ##+ coverage           879%   8794%   +003%     - complexity          2322     2326       +4       files                287      287                lines               5869     5871       +2       branches             703      703              + hits                5159     5163       +4       misses               526      526              + partials             184      182       -2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `7256% <100%> (+229%)` | `20 <6> (+4)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&elfooter) last update [442277f6139ed1](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || updated the pr- || i have merged this after your feedback which i took into consideration if you have anything further i am happy to adress it i wanted to get this out as it affects a bunch of kotlin users || great! thank you for merging! ||
125,1256,1257,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #1254 and #1256: improved check for self-invocation better checks for recursive calls and guards internally used jdk typesfixes #1254 fixes #1256 # [codecov](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&elh1) report> merging [#1257](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/442277f4647ebf24930132b080b9971d3eef9e63?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1257/graphs/treesvg?tokenmx80slder0&srcpr&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1257      +/-   ##+ coverage           879%   8794%   +003%     - complexity          2322     2326       +4       files                287      287                lines               5869     5871       +2       branches             703      703              + hits                5159     5163       +4       misses               526      526              + partials             184      182       -2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `7256% <100%> (+229%)` | `20 <6> (+4)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&elfooter) last update [442277f6139ed1](https://codecovio/gh/mockito/mockito/pull/1257?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || updated the pr- || i have merged this after your feedback which i took into consideration if you have anything further i am happy to adress it i wanted to get this out as it affects a bunch of kotlin users || great! thank you for merging! ||
126,106,1258,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"prevent class loading race condition allow singleton locking in context with class loading racesfixes #1067 fully agree will do soon || # [codecov](https://codecovio/gh/mockito/mockito/pull/1258?srcpr&elh1) report> merging [#1258](https://codecovio/gh/mockito/mockito/pull/1258?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/907e3de8a47c3733220c1ebf58741945c21df899?srcpr&eldesc) will **decrease** coverage by `<01%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1258/graphs/treesvg?srcpr&width650&tokenmx80slder0&height150)](https://codecovio/gh/mockito/mockito/pull/1258?srcpr&eltree)```diff@@               coverage diff                @@##             release/2x   #1258      +/-   ##- coverage           879%   879%   -001%     + complexity          2322    2321       -1       files                287     287                lines               5869    5868       -1       branches             703     701       -2     - hits                5159    5158       -1       misses               526     526                partials             184     184```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1258?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [eation/bytebuddy/typecachingbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1258?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvvhlwzunhy2hpbmdcexrly29kzudlbmvyyxrvci5qyxzh) | `75% <ø> (-087%)` | `3 <0> (-1)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1258?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1258?srcpr&elfooter) last update [907e3de865cf85](https://codecovio/gh/mockito/mockito/pull/1258?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @raphw to help us mockito-users it would be useful to have a short wiki entry describing purpose/use-case of the flag ""orgmockitolocksingleton"" || added a segment to the documentation || is it possible to test these changes now ? from -snapshot build for exampleive just hit this issue with sbt+mockito 2120 and id be glad to give feedback! || you should be able to clone this repository check out this branch and then `/gradlew build` the artifact which you can include in your project || ive thought about this but it is not that easy with different build tools :-)let me see whether there is something like `gradlelocal()` in sbt || good news - it works!bad news - it slows down the build!i used `/gradlew install && cp build/libs/mockito-core-2121jar /home/martin/ivy2/cache/orgmockito/mockito-core/jars/mockito-core-2120jar` and then `sbt -dorgmockitolocksingletontrue` now my build and tests pass!in my `master` branch where it uses mockito 1x the build+tests pass for 45secs in the branch with mockito 2121 + `-dorgmockitolocksingletontrue` it takes 55 secsim following https://githubcom/sbt/sbt/issues/3022 so hopefully soon ill get rid of `-dorgmockitolocksingletontrue` || >good news - it works!awesome! :)>bad news - it slows down the build!using the property or not should not affect the performance if you look at the code change regardless if we use ""classloader"" or ""bootstrap_lock"" as lock monitor we should have the same performance characteristic either of those objects is a singleton in the jvm that runs testsi suspect that your tests are slower because mockito 2x is a bit slower that 1x in general this could be because we fixed bunch of concurrency issues and added safeguards we can always try to optimize mockito - contributions are welcome :) || > using the property or not should not affect the performancehere is my setup:1) mockito 2120 + `parallelexecution in test : false` in buildsbt > 45 secs2) mockito 2121 (built from this branch) + `// parallelexecution in test : false` > 55 secsso it is not mockito 1x vs 2x but just this new lock + parallel tests3) mockito 11018 + `parallelexecution in test : true` (this is the default in sbt) > 42 secsmy team voted to go back to mockito 1x until the issue in sbt is fixed :-/  although setup 1) is not bad! || hi @mockitoguy i see your argument it is not a good default to rely on a user setting when class loading hierarchies can cause deadlocks in the first place maybe it should be the other way round? would you rather configure it using the runner in this case?and yes byte buddy is a bit slower on class creation then cglib this is due to its proper resolution of generic types and visibility bridges etc and because of its retention of meta data like annotations this is extra work that cglib never did but it helped us to solve a bunch of bugs for this reason the benchmarks are difficult to compare || > my team voted to go back to mockito 1x until the issue in sbt is fixed :-/ although setup 1) is not bad!@martin-g when the issue with sbt is fixed we suspect that you will still have the perf degradation when moving to mockito 2x (trying to manage your expectations) || >it is not a good default to rely on a user setting when class loading hierarchies can cause deadlocks in the first place maybe it should be the other way round? would you rather configure it using the runner in this case?hey @raphw! the idea with the runner is interesting! it is better because it does not introduce yet another way to configure mockito it still is not discoverable well and the user will get deadlock in the first place :)why not using bootstrap_lock always? i pushed the commit to your branch to illustrate the idea || any news on this? || @raphw @mockitoguy news ? 😄  || @elfolink thank you for pushing!@raphw are you ok with simplifying locking (my last commit)? id like to merge this pr in its current form || yes looks like an easy-enough solution and the performance hit does not seem too severe go for it! || "
127,1262,1268,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1262: update doc for answerscalls_real_methods update the documentation for the answerscalls_real_methods according to #1262 and also included a note with recommendation not to use when()thenreturn() for partial mock # [codecov](https://codecovio/gh/mockito/mockito/pull/1268?srcpr&elh1) report> merging [#1268](https://codecovio/gh/mockito/mockito/pull/1268?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/2efa9c79b63e94bdadf97efe77ed4a6f62f62cf5?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1268/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1268?srcpr&eltree)```diff@@              coverage diff              @@##             release/2x   #1268   +/-   ##  coverage           879%   879%             complexity          2322    2322             files                287     287             lines               5869    5869             branches             703     703             hits                5159    5159             misses               526     526             partials             184     184```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1268?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1268?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1268?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1268?srcpr&elfooter) last update [2efa9c7869dc9c](https://codecovio/gh/mockito/mockito/pull/1268?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || hey @seriybg this is a nice change! sorry we have not reviewed earlier it must have slipped our radar continually improving documentation is absolutely important thank you for contributing! ||
128,1130,1270,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"cleaner code for mockito users by better integration with static code checkers more @checkreturnvalue builds on #1130 #1228 note that almost all non-`void` `orgmockitomockito` methods are now annotated `@checkreturnvalue` you could consider going the other way by annotating the class as a whole `@checkreturnvalue` and adding [`@canignorereturnvalue`](https://githubcom/google/error-prone/blob/master/annotations/src/main/java/com/google/errorprone/annotations/canignorereturnvaluejava) to the non-`void` methods that form the complement || # [codecov](https://codecovio/gh/mockito/mockito/pull/1270?srcpr&elh1) report> merging [#1270](https://codecovio/gh/mockito/mockito/pull/1270?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/7d926aa078ee16b17104c114c1e81f52905158bc?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1270/graphs/treesvg?height150&width650&tokenmx80slder0&srcpr)](https://codecovio/gh/mockito/mockito/pull/1270?srcpr&eltree)```diff@@              coverage diff              @@##             release/2x   #1270   +/-   ##  coverage           882%   882%             complexity          2355    2355             files                291     291             lines               5945    5945             branches             709     709             hits                5244    5244             misses               521     521             partials             180     180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1270?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1270/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1270?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1270?srcpr&elfooter) last update [7d926aaae3aac6](https://codecovio/gh/mockito/mockito/pull/1270?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || context for this change: within a company-internal pr i found an unused `mock(someclass)` statement and thought ""itd be nice if mockito supported `@checkreturnvalue`"" then i found #1228 but noticed that the `#mock` methods werent annotated in fixing that i decided to go over the whole class for each method annotated in this pr i traced its logic most are side-effect free while the remainder throw an exception in case of misuse the only non-`void` method in `orgmockitomockito` i did not annotate is `#ignorestubs` because it returns its input  || the reason i did not include these methods in #1228 was because there were no side-effects checking them would therefore not required as it would be perfectly okay (from a mockito-perspective) that these methods are invoked and then discarded the methods i annotated do have side-effects and thus are harmful if you discard the return valuetherefore i am hesitant to accept this pr as (to my knowledge) these methods are pure and are not harmful for mockito to be invoked a lot of times || invoking these methods many times may not be harmful in a functional sense but imho `@checkreturnvalue` is more about establishing correctness ignoring the return value of any of these methods indicates a human error leading to cluttered tests in the best case and a false sense of security in the worst caselooking at guava that seems to be the way how they use the annotation for example it is applied to the whole package `comgooglecommoncollect` with some methods within that package annotated `@canignorereturnvalue` none of those are pure || i do understand that point-of-view however in that case we would need to update every public api that is non-void to have this annotation which seems counter-intuitiveanyways these are my 2 cents paging @mockito/core to give their opinion :smile:  || > \[\] in that case we would need to update every public api that is non-void to have this annotation \[\]well a single annotation in `package-infojava` takes care of that ([example](https://githubcom/google/guava/blob/master/guava/src/com/google/common/collect/package-infojava#l214)) :dbut indeed lets see how others feel about it || interesting discussion! heres how i would summarize the decision point: - a) benefit: a chance of making our customers code cleaner because they could identify and remove dead code - b) downside: hard to apply this strategy consistently we would have to review all public api and always remember to use those annotations when adding new apigiven that we already started using the annotations the downside b) already applies merging the pr does not make it any worse hence the downside can be discounted and we only have the benefit :)+1 im in favor of merging the prthank you @stephan202 for tracing the public api methods and coming up with the pr! || @timvdlippe the current `master`s last commit is e51a0515ac8440572cf1af80f7aa620d51e8075e but `git grep -i prone` doesnt show an error prone integration cant find another applicable branch using `git log -s prone -i  --all` either am i looking cross-eyed or? :) || ah my brain was derping i was working on #1339 and thought i merged it but i did not so we have to rebase after that pr is merged sorry for the confusion || no worries :smile: i see #1339 also targets the `release/2x` branch so i wont need to switch the target branch for this pr(and indeed that pr contains a bunch of `@suppresswarnings(""checkreturnvalue"")` this pr will almost certainly force the addition of a bunch more of those)ive subscribed to the other pr and will rebase again once its merged || "
129,792,1272,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"strictness configurable per mock / stubbing fixes #792### problemtoday we have strict stubs feature a key enabler for cleaner tests and improved debuggability strict stubs dont work well with ""common stubbing"" pattern they also dont like when we call stubbed methods with unexpected arguments - even though sometimes it is legit for more see #792 ### solution```java@test public void demo() {  //1 ""lenient()"" method on mocksettings interface:  foo mock  mockitomock(fooclass withsettings()lenient())  //2 ""lenient()"" method on mockito class:  mockitolenient()when(mockfoo(1))thenreturn(1)  mockitolenient()doreturn(1)when(mock)foo(1)}```for more see #792### public api changes- new methods:   - mockito#lenient()   - mocksettings#lenient()   - mockcreationsettings#islenient()   - stubbing#getstrictness()  - new interfaces:   - basestubber - extracted out from existing ""stubber"" interface so that we can reuse api with ""lenientstubber""   - lenientstubber - instance returned by ""mockitolenient()""- other changes:   - made @orgmockitonotextensible annotation public so that we can use it in subpackages # [codecov](https://codecovio/gh/mockito/mockito/pull/1272?srcpr&elh1) report> merging [#1272](https://codecovio/gh/mockito/mockito/pull/1272?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/940e9ac8eec868aa3b9ea9e73d77225dd1d30356?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `9186%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1272/graphs/treesvg?height150&width650&tokenmx80slder0&srcpr)](https://codecovio/gh/mockito/mockito/pull/1272?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1272      +/-   ##- coverage          8862%   8854%   -008%     - complexity          2358     2391      +33       files                292      296       +4       lines               5950     6005      +55       branches             719      727       +8     + hits                5273     5317      +44     - misses               497      507      +10     - partials             180      181       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1272?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/quality/strictnessjava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9xdwfsaxr5l1n0cmljdg5lc3muamf2yq) | `100% <ø> (ø)` | `1 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/junit/mockitojunitjava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9qdw5pdc9nb2nraxrvslvuaxquamf2yq) | `6666% <ø> (ø)` | `2 <0> (ø)` | :arrow_down: || [/exceptions/misusing/potentialstubbingproblemjava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl21pc3vzaw5nl1bvdgvudglhbfn0dwjiaw5nuhjvymxlbs5qyxzh) | `100% <ø> (ø)` | `1 <0> (ø)` | :arrow_down: || [eptions/misusing/unnecessarystubbingexceptionjava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl21pc3vzaw5nl1vubmvjzxnzyxj5u3r1ymjpbmdfegnlchrpb24uamf2yq) | `100% <ø> (ø)` | `1 <0> (ø)` | :arrow_down: || [mockito/internal/invocation/unusedstubsfinderjava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul1vudxnlzfn0dwjzrmluzgvylmphdme) | `0% <0%> (ø)` | `0 <0> (ø)` | :arrow_down: || [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `9166% <100%> (+166%)` | `6 <1> (+1)` | :arrow_up: || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `9775% <100%> (+005%)` | `35 <2> (+2)` | :arrow_up: || [ckito/internal/stubbing/doanswerstylestubbingjava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9eb0fuc3dlcln0ewxlu3r1ymjpbmcuamf2yq) | `100% <100%> (ø)` | `6 <6> (?)` | || [/mockito/internal/junit/unusedstubbingsfinderjava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9vbnvzzwrtdhviymluz3ngaw5kzxiuamf2yq) | `100% <100%> (ø)` | `7 <0> (ø)` | :arrow_down: || [/org/mockito/internal/handler/mockhandlerimpljava](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw5kbgvyl01vy2tiyw5kbgvysw1wbc5qyxzh) | `100% <100%> (ø)` | `12 <2> (ø)` | :arrow_down: ||  and [18 more](https://codecovio/gh/mockito/mockito/pull/1272/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1272?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1272?srcpr&elfooter) last update [940e9ac0fcc2a3](https://codecovio/gh/mockito/mockito/pull/1272?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || >as a cross-point with junit5: i would actually say that we still want method level lenient stubbing thus these two features can co-exist in my opinioncan you provide a use case (test case) that demonstrates the value? you can also reply to the long email thread we had about it on mockito mailing list :) || >moreover i see null used a lot of times which is unclear to me what the usefulness iscan you be more specific what nulls /  are you not clear about? the code changes are light on the javadoc and comments apologies! thank you for review!!! || >for example the strictnesslenient is scattered throughout the code this make it very hard to expand later on rather i would add logic to strictness with methods that based on the type determine what they should do this makes the code a lot more maintainablestrictness is a public type and we want to be very judicious adding methods to it im very curious about your idea though! perhaps we can put those methods on some new internal strictness object? let me try to work on this and get back great feedback! || hey @mockito/developers any feedback?@timvdlippe ive addressed portion of your feedback can you clarify the other portion (see my questions to your questions :) || >please address the left-over todos and add a new section in the mockitojava javadoc then you can merge this pr 👍absolutely! thank you for review! || hey guys any ideas when this will be ready to merge in and released? im just poking because were having the exact issue this would resolve at our workthank you in advance! || @mpkempson thank you for upvoting - thats what i needed! ill work on this shortly ||"
130,108,1280,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,update strict_stubs documentation for verifynomoreinteractions fixes #1086 # [codecov](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&elh1) report> merging [#1280](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/2316a320012c09c6b815bfdf00b008732a3ffe75?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1280/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1280   +/-   ##  coverage          8808%   8808%             complexity          2321     2321             files                284      284             lines               5857     5857             branches             702      702             hits                5159     5159             misses               519      519             partials             179      179```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/quality/strictnessjava](https://codecovio/gh/mockito/mockito/pull/1280/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9xdwfsaxr5l1n0cmljdg5lc3muamf2yq) | `100% <ø> (ø)` | `2 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&elfooter) last update [2316a3292b5843](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
131,1232,1301,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"extend mockitosession(builder) api to enable usage by testing frameworks the first commit in this pr fixes #1232 in the additional commits ive taken the liberty to implement my proposals from https://githubcom/mockito/mockito/issues/445#issuecomment-358407562:- add `mockitosessionbuildername(string)` to pass a name from the testing framework to the `mockitosession`- add `mockitosessionbuilderlogger(mockitosessionlogger)` to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter)- add `mockitosessionfinishmocking(throwable)` to avoid potentially confusing warnings for failing tests- add `mockitosessionsetstrictness(strictness)` to change the strictness of the current session (there were two test cases requiring that)each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to fix #1232to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the `junitrule` implementation to use it # [codecov](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&elh1) report> merging [#1301](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/56a94f04070d8b1b96e98f156ec9b19beec44d2d?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `9666%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1301/graphs/treesvg?height150&width650&tokenmx80slder0&srcpr)](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1301      +/-   ##+ coverage          8809%   8812%   +003%     - complexity          2323     2335      +12       files                284      285       +1       lines               5863     5887      +24       branches             702      708       +6     + hits                5165     5188      +23       misses               519      519              - partials             179      180       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ockito/internal/runners/defaultinternalrunnerjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9ydw5uzxjzl0rlzmf1bhrjbnrlcm5hbfj1bm5lci5qyxzh) | `9677% <ø> (ø)` | `4 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: || [/internal/junit/mismatchreportingtestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9naxntyxrjafjlcg9ydgluz1rlc3rmaxn0zw5lci5qyxzh) | `100% <100%> (ø)` | `4 <0> (ø)` | :arrow_down: || [/internal/session/mockitosessionloggeradapterjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zzxnzaw9ul01vy2tpdg9tzxnzaw9utg9nz2vyqwrhchrlci5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [kito/internal/framework/defaultmockitosessionjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9tzxnzaw9ulmphdme) | `9565% <100%> (+19%)` | `6 <4> (+4)` | :arrow_up: || [ckito/internal/junit/defaulttestfinishedeventjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0vgvzdezpbmlzagvkrxzlbnquamf2yq) | `100% <100%> (ø)` | `3 <1> (-1)` | :arrow_down: || [/mockito/internal/junit/universaltestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9vbml2zxjzywxuzxn0tglzdgvuzxiuamf2yq) | `9285% <100%> (-025%)` | `11 <0> (ø)` | || [mockito/internal/session/mockitologgeradapterjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zzxnzaw9ul01vy2tpdg9mb2dnzxjbzgfwdgvylmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [ain/java/org/mockito/internal/junit/junitrulejava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9kvw5pdfj1bguuamf2yq) | `96% <923%> (+034%)` | `4 <2> (+1)` | :arrow_up: || [internal/session/defaultmockitosessionbuilderjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zzxnzaw9ul0rlzmf1bhrnb2nraxrvu2vzc2lvbkj1awxkzxiuamf2yq) | `9583% <9473%> (-417%)` | `14 <12> (+8)` | ||  and [2 more](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&elfooter) last update [56a94f06a96433](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @marcphilipp thank you very much for your pr! it looks like this also includes several changes i introduced in https://githubcom/mockito/mockito/pull/1221/commits/68b71db63a6a90d5f7bbfd8ddead295be6972c86 for #1221 we will need to look how this mergessadly i do not have a lot of time for review but i will try to find some time as soon as possible to provide feedback initial look is promising :smile:  || @mockitoguy ive improved the documentation in 360fb5d@timvdlippe sorry i wasnt aware of your changes in #1221 there will definitely be conflicts but the general direction seems to be the same || >@mockitoguy ive improved the documentation in 360fb5dgreat! taking a look now || @marcphilipp can you configure your pr to allow our pushes? i have minor tweaks i want to do before merging and would like to push to your repo for visibility first ive tried to push to your repo branch but i got this:```~/mockito/src$ git push https://githubcom/marcphilipp/mockitogitto https://githubcom/marcphilipp/mockitogit ! [remote rejected]     marcphilipp-issues/1232-session-additions -> marcphilipp-issues/1232-session-additions (permission denied)error: failed to push some refs to https://githubcom/marcphilipp/mockitogit``` || @marcphilipp this pr is great and im almost ready to merge the updates to the docs are good im making tweaks to this pr in this branch: https://githubcom/mockito/mockito/commits/marcphilipp-issues/1232-session-additions making tweaks helps me understand the code and keeps the docs consistent if you allow upstream pushes from this pr it would be useful!we are very happy to take this contribution thank you! || hmm ""allow edits from maintainers"" is enabled so it should work:> if checked users with write access to mockito/mockito can add new commits to your `issues/1232-session-additions` branch you can always change this setting lateranyway ive sent you an invite as a collaborator to my fork that should work in any case please let me know if it did || @mockito/developers can we get your input on method naming?this pr adds:```sessionsetstrictness(strictness)```since in our api we already use ""strictness"" method i suggest we keep it consistent:```java//existing:mockitorulestrictness(strictness)mockitosession()strictness(strictness)//suggested change for this pr:sessionstrictness(strictness)```thoughts? || @mockitoguy i am okay with that :+1:  || thank you @timvdlippe for feedback! @marcphilipp thoughts on strictness vs setstrictness method? in the next day or two ill finish tweaking this pr push changes upstream to your fork and we should be ready to mergethis is very nice improvement and im looking forward eagerly to merge!!! || i went with the setter to emphasize that the old value might already have been used for previously created mocks but didn‘t want to break the api of the rule implementation however i‘d be fine with `strictness()` too! || @marcphilipp thank you for feedback we should be ready to merge soon todays mockito time budget i used on different pr but i have this one on mind every day :) || @marcphilipp before i merge i have 2 requests: - can you update the version in ""versionproperties"" to next minor number (and also the ```@since``` tags)? i believe it will e 2150 - can you add a paragraph to our main javadoc with concise summary of the public api changes check out how we have done it in the past: https://githubcom/mockito/mockito/blob/release/2x/src/main/java/org/mockito/mockitojava#l1451this is a really really nice improvement of the public api for framework integrations big thanks! || @mockitoguy done! feel free to polish what i wrotei merged master into the pr branch to resolve the conflict in versionproperties ill be on vacation the next few days but please go ahead and rebase squash or merge the commits in this branch || great thank you! making a final review and merging || "
132,1306,1307,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"update public api of invocationfactory needed for android static mocking fixes #1306a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior  a callable that throws athrowable # [codecov](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&elh1) report> merging [#1307](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/1a3bc2e7cfdaf126f67645b8a954cf315172e580?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1307/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1307      +/-   ##+ coverage          8808%   8809%   +001%     - complexity          2321     2323       +2       files                284      284                lines               5857     5863       +6       branches             702      702              + hits                5159     5165       +6       misses               519      519                partials             179      179```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [va/org/mockito/internal/invocation/realmethodjava](https://codecovio/gh/mockito/mockito/pull/1307/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul1jlywxnzxrob2quamf2yq) | `9333% <100%> (+166%)` | `0 <0> (ø)` | :arrow_down: || [/internal/invocation/defaultinvocationfactoryjava](https://codecovio/gh/mockito/mockito/pull/1307/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0rlzmf1bhrjbnzvy2f0aw9urmfjdg9yes5qyxzh) | `100% <100%> (ø)` | `4 <2> (+2)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&elfooter) last update [1a3bc2e641ef30](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || - ""r call() throws throwable"" would conflict with """"r call() throws exception"" so i cannot use subclassing- when just an anonoymous inner realmethodbehavior that wrapps the callable orgmockitousagebasicapimocksserializationtest failsi added a test case that tests the case where the invocation is handled without a throwable || reviewing || >else you should be able to update our internal fromcallable to use a realmethodbehavior and let both createinvocation call this method that should remove the need for a duplicate inner class (since these classes are in internal anyways)+1 i like @timvdlippes idea to reduce duplication i applied that idea to the changes i made on top @moltmanns branch (https://githubcom/mockito/mockito/commits/moltmann-throwcallable) || @mockitoguy- you change https://githubcom/mockito/mockito/commit/017cf577910c2156ed785a18914396bcba3d51f9 seem to break orgmockitousagebasicapimocksserializationforannotationtest  the same issue i saw- how do i apply your changes? manually via ""git am""? || >you change 017cf57 seem to break orgmockitousagebasicapimocksserializationforannotationtest  the same issue i sawouch i missed that use case we need to make the new interface serializable otherwise non-android use cases like powermockito will use the new public api and break when mocks are being serialized (unless they remember to keep the implementation classes serializable) for android use cases we dont need serialization but this new public api will be used in other context tooour strategy is that public interfaces that we expect our users to extend are marked serializable if they are needed for mockitos serialization feature>how do i apply your changes? manually via ""git am""?just pull my changes on top of your branch alternatively configure your pr to allow pushes from mockito devs (did you do it already?) || ""allow edits from maintainers"" should be enabled || @timvdlippe once the build passes im merging thanks for review! || "
133,1279,1310,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"ensure isolation of stubbings ### bugfix compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal (corner cases only possibly incorrect tests) and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test - it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the world### problemwhen stubbing with answers that call different mocked methods:```javawhen(mockfoo())the swer(() -> { othermockbar() }```we need to ensure that ```mockfoo()``` and ```othermockbar()``` dont interfere prior to this bugfix this scenario resulted in various problems like: stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see #1279### solutionthe solution is based on great pr #1296 by @r-smirnov **huge thanks** to @r-smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as ""documented mockito syntax caveat"" thank you @r-smirnov for persistence and getting this fixed! can we give an example of a test that breaks with this ""new"" behavior? || # [codecov](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&elh1) report> merging [#1310](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/ec51039968b6f9bda9f7f171f846101c0a8ebd08?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1310/graphs/treesvg?tokenmx80slder0&srcpr&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1310      +/-   ##+ coverage          8812%   8812%   +<01%       complexity          2335     2335                files                285      285                lines               5887     5888       +1       branches             708      708              + hits                5188     5189       +1       misses               519      519                partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/org/mockito/internal/handler/mockhandlerimpljava](https://codecovio/gh/mockito/mockito/pull/1310/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw5kbgvyl01vy2tiyw5kbgvysw1wbc5qyxzh) | `100% <100%> (ø)` | `12 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&elfooter) last update [ec510392d8c787](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > can we give an example of a test that breaks with this ""new"" behavior?take a look (or run) the test class attached to this pr there are test methods that demonstrate invalid behavior such as soe there are also test methods that demonstrate incorrect behavior of stubbing || @timvdlippe the ticket #1279 linked from this pr contains examples || @mockitoguy i understand that the supplied test cases are now working as intended what i meant was: are there any other tests that previously passed but now fail and what we consider the ""breaking change""? || > i understand that the supplied test cases are now working as intended what i meant was: are there any other tests that previously passed but now fail and what we consider the ""breaking change""?in our codebase (which has very comprehensive coverage) all tests were passing there are no concrete examples of tests that would be failing after this change the test class included in the pr demonstrates the change in behavior || in that case i wouldnt consider this a breaking change simply a major bugfix 😄  || >in that case i wouldnt consider this a breaking change simply a major bugfix 😄sounds good i updated the description can you review the code / approve? || thank you again @r-smirnov!!! merging || "
134,1296,1310,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"ensure isolation of stubbings ### bugfix compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal (corner cases only possibly incorrect tests) and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test - it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the world### problemwhen stubbing with answers that call different mocked methods:```javawhen(mockfoo())the swer(() -> { othermockbar() }```we need to ensure that ```mockfoo()``` and ```othermockbar()``` dont interfere prior to this bugfix this scenario resulted in various problems like: stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see #1279### solutionthe solution is based on great pr #1296 by @r-smirnov **huge thanks** to @r-smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as ""documented mockito syntax caveat"" thank you @r-smirnov for persistence and getting this fixed! can we give an example of a test that breaks with this ""new"" behavior? || # [codecov](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&elh1) report> merging [#1310](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/ec51039968b6f9bda9f7f171f846101c0a8ebd08?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1310/graphs/treesvg?tokenmx80slder0&srcpr&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1310      +/-   ##+ coverage          8812%   8812%   +<01%       complexity          2335     2335                files                285      285                lines               5887     5888       +1       branches             708      708              + hits                5188     5189       +1       misses               519      519                partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/org/mockito/internal/handler/mockhandlerimpljava](https://codecovio/gh/mockito/mockito/pull/1310/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw5kbgvyl01vy2tiyw5kbgvysw1wbc5qyxzh) | `100% <100%> (ø)` | `12 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&elfooter) last update [ec510392d8c787](https://codecovio/gh/mockito/mockito/pull/1310?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > can we give an example of a test that breaks with this ""new"" behavior?take a look (or run) the test class attached to this pr there are test methods that demonstrate invalid behavior such as soe there are also test methods that demonstrate incorrect behavior of stubbing || @timvdlippe the ticket #1279 linked from this pr contains examples || @mockitoguy i understand that the supplied test cases are now working as intended what i meant was: are there any other tests that previously passed but now fail and what we consider the ""breaking change""? || > i understand that the supplied test cases are now working as intended what i meant was: are there any other tests that previously passed but now fail and what we consider the ""breaking change""?in our codebase (which has very comprehensive coverage) all tests were passing there are no concrete examples of tests that would be failing after this change the test class included in the pr demonstrates the change in behavior || in that case i wouldnt consider this a breaking change simply a major bugfix 😄  || >in that case i wouldnt consider this a breaking change simply a major bugfix 😄sounds good i updated the description can you review the code / approve? || thank you again @r-smirnov!!! merging || "
135,1314,1319,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1314 : include all the invocation in mock verification error message have changes the verify error message to include all the invocation instead of including just one undesired invocationpreviously we have message like:```wanted 1 time:-> at but was 2 times undesired invocation:-> at ```this pr changes it to ```wanted 1 time:-> at but was 2 times:-> at -> at ```to make the error message consistent the similar changes was made for too little invocations casethe message:```wanted 3 times:-> at but was 2 times:-> at ```changed to:```wanted 3 times:-> at but was 2 times:-> at -> at ``` # [codecov](https://codecovio/gh/mockito/mockito/pull/1319?srcpr&elh1) report> merging [#1319](https://codecovio/gh/mockito/mockito/pull/1319?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/cbc7a99db706621bdb6728cb64d2b0d9be6a8034?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1319/graphs/treesvg?tokenmx80slder0&srcpr&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1319?srcpr&eltree)```diff@@               coverage diff                @@##             release/2x   #1319      +/-   ##+ coverage          8818%   882%   +001%     - complexity          2354    2355       +1       files                291     291                lines               5935    5945      +10       branches             710     712       +2     + hits                5234    5244      +10       misses               521     521                partials             180     180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1319?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ification/checkers/numberofinvocationscheckerjava](https://codecovio/gh/mockito/mockito/pull/1319/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vy2hly2tlcnmvtnvtymvyt2zjbnzvy2f0aw9uc0nozwnrzxiuamf2yq) | `9411% <100%> (-048%)` | `11 <0> (ø)` | || [mockito/internal/invocation/invocationsfinderjava](https://codecovio/gh/mockito/mockito/pull/1319/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludm9jyxrpb25zrmluzgvylmphdme) | `9733% <100%> (+019%)` | `36 <2> (+2)` | :arrow_up: || [n/checkers/atleastxnumberofinvocationscheckerjava](https://codecovio/gh/mockito/mockito/pull/1319/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vy2hly2tlcnmvqxrmzwfzdfhodw1izxjpzkludm9jyxrpb25zq2hly2tlci5qyxzh) | `9333% <100%> (ø)` | `4 <0> (ø)` | :arrow_down: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1319/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `927% <100%> (+031%)` | `91 <7> (-1)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1319?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1319?srcpr&elfooter) last update [cbc7a9957db318](https://codecovio/gh/mockito/mockito/pull/1319?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || nice contribution! we will try to review in the next couple of days || have fixed all the remarks except the imports since im not sure that the previous layouts were the correct ones || @mockitoguy thanks! i can rebase these pr if there are conflicts with the `release/2x` || @timvdlippe thanks have fixed your remark and also rebased the pr on top of `2x` branch ||
136,111,1320,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"avoid bytebuddy import issue to enable repackaging without bytebuddy this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectorytest: grep -r -e ""import org\mockito\internal\creation\bytebuddy\[^\]*$"" src/main does not return anythingoffers workaround for #1112 # [codecov](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&elh1) report> merging [#1320](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/723300cc655e14c719233901d8adfdbfbf91ab52?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1320/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1320   +/-   ##  coverage          8817%   8817%             complexity          2346     2346             files                289      289             lines               5919     5919             branches             711      711             hits                5219     5219             misses               520      520             partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/pull/1320/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7272% <ø> (-659%)` | `5 <0> (-4)` | || [ito/internal/invocation/interceptedinvocationjava](https://codecovio/gh/mockito/mockito/pull/1320/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludgvyy2vwdgvksw52b2nhdglvbi5qyxzh) | `8536% <ø> (ø)` | `25 <0> (?)` | || [/internal/invocation/defaultinvocationfactoryjava](https://codecovio/gh/mockito/mockito/pull/1320/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0rlzmf1bhrjbnzvy2f0aw9urmfjdg9yes5qyxzh) | `100% <100%> (ø)` | `8 <5> (+4)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&elfooter) last update [723300c679172a](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || hey @moltmann - thank you for another contribution! can you elaborate the goals for this pr?this pr changes only internal classes how does it help alternate mockmakers? what does ""cleanly exclude the bytebuddy subdirectory"" mean? || interceptedinvocation is used by all mockmakers hence if you want to order it correctly it should not be in a bytebuddy specific directorythere are currently two ways to build mockito without bytebuddy1 just load mockito-core and exclude netbytebuddy this leaves the bytebuddy-mockmaker in place hence there will be unresolved references into net-bytebuddy this still works as none of these references will be called and (at least on android) loading something with unresolved references just throws some log messages but nothing worse2 you can also take mockito-core unpack it and remove the dependency on netbytebuddy and remove the whole src/org/mockito/internal/creation/bytebuddy folder then you have no references into net-bytebuddy to be able to do this you need this change to clean up the directory structure of mockito as described above also if you even wanted to produce a byte-buddy-less version of mockito this change would be the first you would make || regarding my last comment: during a regular android-gradle build we run a lint checker which finds the issue (1) in my last comment you can suppress this and you are good though || thank you for explanation i updated the title and im absolutely merging! || "
137,1326,1327,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,fixes #1326 : reduce the allocation rate for the typical use of locat… …ionimpla trivial one but should be very useful as i noticed this class being instantiated quite a lot # [codecov](https://codecovio/gh/mockito/mockito/pull/1327?srcpr&elh1) report> merging [#1327](https://codecovio/gh/mockito/mockito/pull/1327?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/723300cc655e14c719233901d8adfdbfbf91ab52?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1327/graphs/treesvg?height150&srcpr&tokenmx80slder0&width650)](https://codecovio/gh/mockito/mockito/pull/1327?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1327      +/-   ##+ coverage          8817%   8817%   +<01%     - complexity          2346     2347       +1       files                289      289                lines               5919     5920       +1       branches             711      711              + hits                5219     5220       +1       misses               520      520                partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1327?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [a/org/mockito/internal/debugging/locationimpljava](https://codecovio/gh/mockito/mockito/pull/1327/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9kzwj1z2dpbmcvtg9jyxrpb25jbxbslmphdme) | `100% <100%> (ø)` | `7 <3> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1327?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1327?srcpr&elfooter) last update [723300cf0f249b](https://codecovio/gh/mockito/mockito/pull/1327?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || will do thanks! another strong memory consumer is the `throwable` stored in this same class as in most cases it seems empty yet has an array of 10 elements prepared for filling in the stacki didnt change that as im not sure when this would be safe to do ||
138,1346,1349,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fix #1346 - different mocks are used for @mock and @injectmock in the same test class with junit 5 extension fix #1346 - fix `mockitoextension` which has init mocks with two identical test instances which cause the mock to be initialized and injected two times # [codecov](https://codecovio/gh/mockito/mockito/pull/1349?srcpr&elh1) report> merging [#1349](https://codecovio/gh/mockito/mockito/pull/1349?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/34877f1d9641e44b566dd95af1869aa9a9537cc0?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1349/graphs/treesvg?height150&width650&tokenmx80slder0&srcpr)](https://codecovio/gh/mockito/mockito/pull/1349?srcpr&eltree)```diff@@              coverage diff              @@##             release/2x   #1349   +/-   ##  coverage           882%   882%             complexity          2355    2355             files                291     291             lines               5945    5945             branches             712     712             hits                5244    5244             misses               521     521             partials             180     180```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1349?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1349?srcpr&elfooter) last update [34877f1eebd15b](https://codecovio/gh/mockito/mockito/pull/1349?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || sadly this doesnt cover the case where we are using `@testinstance(testinstancelifecycleper_class)`> https://githubcom/mockito/mockito/issues/1437 ||
139,1348,1350,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"support local parameters in test methods with junit jupiter note that this implementation differs from the prototype implementation of the junitteam (https://githubcom/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/mockitoextensionjava#l41-l73) instead it will do not do any parameter resolution between test methodsfixes #1348 # [codecov](https://codecovio/gh/mockito/mockito/pull/1350?srcpr&elh1) report> merging [#1350](https://codecovio/gh/mockito/mockito/pull/1350?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/c5ebb9c7339aa04a7c2f9e5f9dd6de37d5c8e681?srcpr&eldesc) will **increase** coverage by `008%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1350/graphs/treesvg?tokenmx80slder0&height150&srcpr&width650)](https://codecovio/gh/mockito/mockito/pull/1350?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1350      +/-   ##+ coverage          8854%   8862%   +008%     + complexity          2391     2359      -32       files                296      292       -4       lines               6005     5951      -54       branches             727      719       -8     - hits                5317     5274      -43     + misses               507      497      -10     + partials             181      180       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1350?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/configuration/mockannotationprocessorjava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul01vy2tbbm5vdgf0aw9uuhjvy2vzc29ylmphdme) | `100% <100%> (ø)` | `7 <1> (+1)` | :arrow_up: || [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `90% <0%> (-167%)` | `5% <0%> (-1%)` | || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `8636% <0%> (-06%)` | `19% <0%> (ø)` | || [ito/internal/stubbing/invocationcontainerimpljava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9jbnzvy2f0aw9uq29udgfpbmvysw1wbc5qyxzh) | `9454% <0%> (-046%)` | `28% <0%> (-3%)` | || [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `9565% <0%> (-019%)` | `11% <0%> (ø)` | || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `9277% <0%> (-018%)` | `43% <0%> (-1%)` | || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `9777% <0%> (-01%)` | `21% <0%> (-1%)` | || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <0%> (-006%)` | `39% <0%> (-1%)` | || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `977% <0%> (-006%)` | `33% <0%> (-2%)` | || [/org/mockito/internal/handler/mockhandlerimpljava](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw5kbgvyl01vy2tiyw5kbgvysw1wbc5qyxzh) | `100% <0%> (ø)` | `12% <0%> (ø)` | :arrow_down: ||  and [12 more](https://codecovio/gh/mockito/mockito/pull/1350/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1350?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1350?srcpr&elfooter) last update [c5ebb9c68be01f](https://codecovio/gh/mockito/mockito/pull/1350?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > instead it will do not do any parameter resolution between test methodsi always thought that was a _cool_ feature of the original prototype but i can understand your rationale for omitting that feature however id make sure its very well documented in the user guide etc for mockitootherwise users will likely get confused quite quickly || in contrast to field names -- which are always user-defined -- i would also make a special note in the documentation that the default name for a mock created for a parameter will be something very ugly like `arg0` instead of the user-defined name **unless** the code has been compiled on java 8+ with the `-parameters` flag || regarding that latter in the prototype we added explicit support for determining the mock name here:https://githubcom/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/mockitoextensionjava#l64 _and_ we did not create the mock with a custom name if the user did not provide a custom nameso id suggest mockito do something similar || > id make sure its very well documented in the user guide etc for mockitoi think the javadoc of `mockitoextension` is quite explicit about this do you have any suggestions to extend it?> i would also make a special note in the documentation that the default namegood call will do> we did not create the mock with a custom name if the user did not provide a custom namewe can use the type name indeed || > i think the javadoc of mockitoextension is quite explicit about this do you have any suggestions to extend it?well as the code is currently implemented `supportsparameter()` will return `true` for any parameter annotated with `@mock` whether such a parameter is in a _constructor_ `@beforeall`/`@afterall` `@beforeeach`/`@aftereach` `@test` method etcand it _sounds_ like you wish to restrict usage to `@test` `@testfactory` `@parameterizedtest` and `@repeatedtest` methodsor maybe you dont want to restrict it?but its unclear what is supported and what isnti think your goal is to restrict sharing of parameter-injected mock instances between setup and test methods so you might want to restrict mock injection for lifecycle callback methodson the other hand it would be a perfectly valid use case to have a mock injected into a constructor and then store it in a `private final` field (ie immutability)in summary youll need to think through the possible use cases and document which ones you actually support and the implementation should only return `true` from `supportsparameter()` if mockito actually supports the use case || oh i was not aware of all these cases i thought it was only for test methods have to think about what we do want to support (maybe it all magically works already with this implementation) || sure id recommend you _play around_ with it a bit to get a feel for whats possiblethen youll be better equipped to make an informed decision 😉  || +1 for sharing i think `@beforeeach void f(@mock x)` `@test void f(@mock x)` could be the same object @timvdlippe as i read youre clearing the session after each test so sharing between methods would affect a single test method execution || @twisterrob please see https://githubcom/mockito/mockito/issues/1348#issuecomment-376295133 for the full explanation || @timvdlippe> maybe it all magically works already with this implementationyes that should be the casebut i still think the mockito team should provide guidance for end users demonstrating best practices when using the `mockitoextension` for junit jupiterfor example if it were my project id make sure that there are tests in place and documented examples demonstrating parameter injection for constructors lifecycle methods testable methods (eg `@test` `@testfactory` etc) _and_ id cover the use of `@testinstance(per_class)` semantics as wellim sure that either i or someone else from the junit team would be happy to review your work before you publish it 😉  || for reference https://githubcom/junit-team/junit5/issues/1345 is the issue that is blocking this pr for now but the upstream issue is actively being worked on atm || thank you guys for working on this! || the junit issue has been resolved on their master (https://githubcom/junit-team/junit5/issues/1345#issuecomment-378229606) so we have to wait for a new release and then i can continue working on this pr || @timvdlippe i wouldt hold off on working on this pr just to wait on junit jupiter 52 to be releasedthat will literally take months plus it would prevent mockito users from using the feature with junit jupiter 51x (unless we backport the convenience methods to 51x)for example in spring framework 505 (likely being released today) i already added [custom support](https://githubcom/spring-projects/spring-framework/commit/9244090ba04011902568aba4b854668312c025e1) for the jdk bug so that spring users arent affected by the issue even on junit jupiter 50x || > unless we backport the convenience methods to 51xas a user i would strongly appreciate a backport have to think whether we would like to maintain this code ourselves (like spring does) or whether we simply note the limitation that this will be addressed in the next release of junit || sure maintaining the ""workaround"" is a personal decision you have to makeas for appreciating a backport feel free to voice your opinion on the related junit jupiter issue (which i reopened for that purpose) 😉  || per https://githubcom/junit-team/junit5/issues/1345#issuecomment-378632027 this will be backported to junit 511 we just have to wait till that release is out and then i can finish up this pr :tada:  || @timvdlippe looks like 511 released couple of hours back :)https://searchmavenorg/#artifactdetails%7corgjunitjupiter%7cjunit-jupiter-engine%7c511%7cjar || awesome constructor parameter resolution has been fixed! @mockito/core ptal || 👍  || will this be getting released soon?  thank you! || this is still awaiting review of @mockito/core  || i finished reviewing and im happy to merge! theres some issue with our travis build at the moment but we should merge soon! || i rebased and will wait for travis feedback before merging || "
140,1367,1368,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,resolve the correct protection domain for the codegen package when using reflection fixes #1367 # [codecov](https://codecovio/gh/mockito/mockito/pull/1368?srcpr&elh1) report> merging [#1368](https://codecovio/gh/mockito/mockito/pull/1368?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/14586443fc107c1fcc342cf085b0c8f50f4dd5b3?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1368/graphs/treesvg?width650&srcpr&tokenmx80slder0&height150)](https://codecovio/gh/mockito/mockito/pull/1368?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1368   +/-   ##  coverage          8859%   8859%             complexity          2353     2353             files                292      292             lines               5927     5927             branches             715      716    +1       hits                5251     5251             misses               497      497             partials             179      179```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1368?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1368/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `6857% <100%> (ø)` | `5 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1368?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1368?srcpr&elfooter) last update [14586443feb398](https://codecovio/gh/mockito/mockito/pull/1368?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || probably by creating two mocks with different protection domains bur for that we would need to different signed jars not trivial to test ||
141,1364,1369,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,performance improvements use less expensive method graph compiler for inline mock maker update byte buddy for general performance improvements and bug fixes fixes #1364 also fixes javadoc warning # [codecov](https://codecovio/gh/mockito/mockito/pull/1369?srcpr&elh1) report> merging [#1369](https://codecovio/gh/mockito/mockito/pull/1369?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/217ef4d11dbb64847ff12ca78c436614be380d0e?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1369/graphs/treesvg?tokenmx80slder0&srcpr&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1369?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1369      +/-   ##+ coverage          8859%   8859%   +<01%       complexity          2353     2353                files                292      292                lines               5927     5928       +1       branches             716      716              + hits                5251     5252       +1       misses               497      497                partials             179      179```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1369?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1369/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `9292% <100%> (+007%)` | `23 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1369?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1369?srcpr&elfooter) last update [217ef4df73871d](https://codecovio/gh/mockito/mockito/pull/1369?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
142,1240,1378,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,avoid circularity: avoid endless loop during mock creation if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop (described in comment) fixes #1240it is a bit difficult to reproduce this issue in our tests it mainly happens with classes generated by kotlin or scala and requires the inline mock maker and a jdk 9 or older if we want to add such a test we can copy the test from https://githubcom/guenhter/mockito-final-class-kotlin-problem > if we want to add such a test we can copy the test from https://githubcom/guenhter/mockito-final-class-kotlin-problemyou should be able to add this to the mockito-kotlin subproject i suppose? || does it use the inline mock maker? || true of course! || added a test || does that test really reproduce the issue? that seems awfully simple yet we did not encounter it thus far 😮  || # [codecov](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&elh1) report> merging [#1378](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/cb8f3d9e9906146b8c0d8f82bbcdfa677b29f475?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `8888%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1378/graphs/treesvg?tokenmx80slder0&height150&srcpr&width650)](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1378      +/-   ##+ coverage          8861%   8861%   +<01%     - complexity          2353     2355       +2       files                292      292                lines               5936     5945       +9       branches             716      718       +2     + hits                5260     5268       +8       misses               497      497              - partials             179      180       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1378/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `9285% <8888%> (-035%)` | `25 <2> (+2)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&elfooter) last update [cb8f3d9d598719](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || it is really dependent on what classes are referenced by the generated byte code and if we are using this in the code that determines if an instance is a mock or not only if those classes are not yet loaded and if we are using some code transitively ourselves this issue reproduces so it is not so surprising that this only surfaces in an isolated unit test as this is partly global vm state dependant ||
143,1386,1387,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1386: adding atmostonce() rename threadverifiescontinuoslyinteractingmocktest and one todo hii would like to make a quick contribution on this projecti add atmostonce() it seems not to be a big feature i just want to highlight the fact you have the function atleastonce() but nothing for the atmostonce casei rename the testclass threadverifiescontinuoslyinteractingmocktest on threadverifiescontinuouslyinteractingmocktest and the todo on tostring() from hamcrestargumentmatcher # [codecov](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&elh1) report> merging [#1387](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/f5c988689df5313d3af311e78169c73e31f569da?srcpr&eldesc) will **decrease** coverage by `<01%`> the diff coverage is `6666%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1387/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1387      +/-   ##- coverage          8653%   8652%   -001%     - complexity          2478     2480       +2       files                308      308                lines               6522     6525       +3       branches             818      818              + hits                5644     5646       +2     - misses               680      681       +1       partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ito/internal/hamcrest/hamcrestargumentmatcherjava](https://codecovio/gh/mockito/mockito/pull/1387/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw1jcmvzdc9iyw1jcmvzdefyz3vtzw50twf0y2hlci5qyxzh) | `100% <ø> (ø)` | `4 <0> (ø)` | :arrow_down: || [ito/internal/verification/verificationwrapperjava](https://codecovio/gh/mockito/mockito/pull/1387/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9uv3jhchblci5qyxzh) | `9166% <0%> (-834%)` | `8 <0> (ø)` | || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1387/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9666% <100%> (+005%)` | `41 <1> (+1)` | :arrow_up: || [internal/verification/verificationmodefactoryjava](https://codecovio/gh/mockito/mockito/pull/1387/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9utw9kzuzhy3rvcnkuamf2yq) | `90% <100%> (+111%)` | `9 <1> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&elfooter) last update [f5c9886e385633](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
144,1390,1391,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,make mockitoextension constructor public it is possible to register an extension for automatic use using javas `serviceloader` mechanismhttps://junitorg/junit5/docs/current/user-guide/#extensions-registration-automaticsome projects may want to provide their own `meta-inf` file to avoid tediously adding `mockitoextension` to tests since it is very common however `serviceloader` requires the class to have a no-args *public* constructor so the current extension cannot be used with the `serviceloader` mechanismfixes #1390check list - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/2x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ would be great if you could add a test for this not sure if that is possible? it is not a blocking issue for me though || # [codecov](https://codecovio/gh/mockito/mockito/pull/1391?srcpr&elh1) report> merging [#1391](https://codecovio/gh/mockito/mockito/pull/1391?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/758ca3782fba18b8eaf1faed5d68084145f8802d?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1391/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1391?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1391   +/-   ##  coverage          8861%   8861%             complexity          2355     2355             files                292      292             lines               5945     5945             branches             718      718             hits                5268     5268             misses               497      497             partials             180      180```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1391?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1391?srcpr&elfooter) last update [758ca377e971fd](https://codecovio/gh/mockito/mockito/pull/1391?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || added a test (a bit heavyweight since it needs to be a separate project to avoid influencing others) ||
145,1401,1402,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #1401 : correctly handle varargsmatcher check for hamcrestmatchers   # [codecov](https://codecovio/gh/mockito/mockito/pull/1402?srcpr&elh1) report> merging [#1402](https://codecovio/gh/mockito/mockito/pull/1402?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/6ab43cd4651bde6aac54071caa9594dce55526f6?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1402/graphs/treesvg?height150&srcpr&width650&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1402?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1402      +/-   ##+ coverage          8861%   8861%   +<01%     - complexity          2355     2357       +2       files                292      292                lines               5945     5949       +4       branches             718      719       +1     + hits                5268     5272       +4       misses               497      497                partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1402?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/invocation/matcherapplicationstrategyjava](https://codecovio/gh/mockito/mockito/pull/1402/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul01hdgnozxjbchbsawnhdglvbln0cmf0zwd5lmphdme) | `100% <100%> (ø)` | `17 <2> (+1)` | :arrow_up: || [ito/internal/hamcrest/hamcrestargumentmatcherjava](https://codecovio/gh/mockito/mockito/pull/1402/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw1jcmvzdc9iyw1jcmvzdefyz3vtzw50twf0y2hlci5qyxzh) | `100% <100%> (ø)` | `4 <1> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1402?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1402?srcpr&elfooter) last update [6ab43cdfcd1872](https://codecovio/gh/mockito/mockito/pull/1402?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || hi @timvdlippe this change is meant to handle the situation in which we use a custom hamcrest vararg matcher as https://githubcom/mockito/mockito/blob/release/2x/src/main/java/org/mockito/hamcrest/mockitohamcrestjava#l178 wraps the actual matcher it is not possible to check if it implements varargmatcher interfaceplease see https://githubcom/mockito/mockito/issues/1401 for an example ||
146,1419,1426,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,"mockito on java 11-ea+21 fixes #1419 requires `-dnetbytebuddyexperimentaltrue` system property to be set to let bytebuddy use asm api version `asm7_expermiental` and use the same one in `inlinebytecodegenerator` # [codecov](https://codecovio/gh/mockito/mockito/pull/1426?srcpr&elh1) report> merging [#1426](https://codecovio/gh/mockito/mockito/pull/1426?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/4f72147c464c1a8a642d01fc3334e98e92b464cd?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1426/graphs/treesvg?width650&srcpr&tokenmx80slder0&height150)](https://codecovio/gh/mockito/mockito/pull/1426?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1426   +/-   ##  coverage          8861%   8861%             complexity          2357     2357             files                292      292             lines               5949     5949             branches             719      719             hits                5272     5272             misses               497      497             partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1426?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1426/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `9285% <100%> (ø)` | `25 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1426?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1426?srcpr&elfooter) last update [4f7214728fa110](https://codecovio/gh/mockito/mockito/pull/1426?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @raphw can you comment if this change looks safe to you (eg no foreseen use impact):- upgrade bytebuddy ""1810"" -> ""1813""- upgrade asm ""orgow2asm:asm:611"" -> ""orgow2asm:asm:62""@snazy thank you! ill wait for a word from @raphw and merge it || yes looks good would have pushed it myself but currently on vacation sorry for the delay || thank you for confirming! ill merge it || mockito-core-2210jar 	byte-buddy-1815jarwith orgmockitopluginsmockmaker ""mock-maker-inline"" the fix is not working with java 18_172 and java  11-ea+24without ""mock-maker-inline"" it worksorgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface deespiritorschemaentitytypeif youre not sure why youre getting this error please report to the mailing listjava               : 18jvm vendor name    : oracle corporationjvm vendor version : 25172-b11jvm name           : java hotspot(tm) 64-bit server vmjvm version        : 180_172-b11jvm info           : mixed modeos name            : mac os xos version         : 10136you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item #39 of the mockito class javadocunderlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [interface deespiritorschemaentitytype interface javaioserializable]	at deespiritfirstspiritaccesseditortestentityassociatebeforeeach(testentityassociatejava:27)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:24)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:68)	at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:47)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:242)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)caused by: orgmockitoexceptionsbasemockitoexception: could not modify all classes [interface deespiritorschemaentitytype interface javaioserializable]	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:344)	at netbytebuddytypecachefindorinsert(typecachejava:159)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:353)	 23 morecaused by: javalangillegalstateexception: byte buddy could not instrument all classes within the mocks type hierarchythis problem should never occur for javac-compiled classes this problem has been observed for classes that are: - compiled by older versions of scalac - classes that are part of the android distribution	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:164)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratormockclass(inlinebytecodegeneratorjava:141)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:344)	at netbytebuddytypecachefindorinsert(typecachejava:159)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:353)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemocktype(inlinebytebuddymockmakerjava:200)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemock(inlinebytebuddymockmakerjava:181)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:69)	at orgmockitomockitomock(mockitojava:1895)	at orgmockitomockitomock(mockitojava:1804)	 23 morecaused by: javalangnosuchfielderror: asm_api	at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapper$parameteraddingclassvisitor<init>(inlinebytecodegeneratorjava:251)	at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapper$parameteraddingclassvisitor<init>(inlinebytecodegeneratorjava:246)	at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapperwrap(inlinebytecodegeneratorjava:242)	at netbytebuddyasmasmvisitorwrapper$compoundwrap(asmvisitorwrapperjava:645)	at netbytebuddydynamicscaffoldtypewriter$default$forinlining$redefinitionclassvisitorvisit(typewriterjava:3672)	at netbytebuddyjarasmclassreaderaccept(classreaderjava:492)	at netbytebuddyjarasmclassreaderaccept(classreaderjava:355)	at netbytebuddydynamicscaffoldtypewriter$default$forinliningcreate(typewriterjava:2915)	at netbytebuddydynamicscaffoldtypewriter$defaultmake(typewriterjava:1634)	at netbytebuddydynamicscaffoldinlineredefinitiondynamictypebuildermake(redefinitiondynamictypebuilderjava:171)	at netbytebuddydynamicscaffoldinlineabstractinliningdynamictypebuildermake(abstractinliningdynamictypebuilderjava:92)	at netbytebuddydynamicdynamictype$builder$abstractbasemake(dynamictypejava:2669)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortransform(inlinebytecodegeneratorjava:215)	at suninstrumenttransformermanagertransform(transformermanagerjava:188)	at suninstrumentinstrumentationimpltransform(instrumentationimpljava:428)	at suninstrumentinstrumentationimplretransformclasses0(native method)	at suninstrumentinstrumentationimplretransformclasses(instrumentationimpljava:144)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:161)	 37 more || "
147,1438,1439,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,javadoc: #1438 update ignorestubs to include strictness it updates `ignorestubs()` docs to include `strictness` information (#1438) # [codecov](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&elh1) report> merging [#1439](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/2613e0ba972c54dab34d1e2e36d37ec95dad366f?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1439/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1439   +/-   ##  coverage          8862%   8862%             complexity          2358     2358             files                292      292             lines               5950     5950             branches             719      719             hits                5273     5273             misses               497      497             partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1439/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&elfooter) last update [2613e0bf1723c1](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || this is ready to merge ill wait until current build is complete and merge it || thank you! ||
148,793,1458,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,add stubbinglookupevent and notifier (a part of #793) this pr adds `stubbinglookupevent` and `stubbinglookupnotifier` as a part of the issue #793 # [codecov](https://codecovio/gh/mockito/mockito/pull/1458?srcpr&elh1) report> merging [#1458](https://codecovio/gh/mockito/mockito/pull/1458?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/276183b9b1835006e40015a2d5539f074ce3df13?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `923%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1458/graphs/treesvg?height150&width650&tokenmx80slder0&srcpr)](https://codecovio/gh/mockito/mockito/pull/1458?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1458      +/-   ##+ coverage          8854%   8855%   +<01%     - complexity          2393     2394       +1       files                297      298       +1       lines               6008     6021      +13       branches             727      728       +1     + hits                5320     5332      +12     - misses               507      508       +1       partials             181      181```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1458?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/org/mockito/internal/handler/mockhandlerimpljava](https://codecovio/gh/mockito/mockito/pull/1458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw5kbgvyl01vy2tiyw5kbgvysw1wbc5qyxzh) | `100% <100%> (ø)` | `10 <0> (-2)` | :arrow_down: || [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `9583% <80%> (ø)` | `11 <4> (ø)` | :arrow_down: || [ito/internal/listeners/stubbinglookupnotifierjava](https://codecovio/gh/mockito/mockito/pull/1458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9saxn0zw5lcnmvu3r1ymjpbmdmb29rdxbob3rpzmllci5qyxzh) | `9473% <9473%> (ø)` | `3 <3> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1458?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1458?srcpr&elfooter) last update [276183b0e48f42](https://codecovio/gh/mockito/mockito/pull/1458?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
149,1460,1463,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,prevent stubonly() from being verified (#1460) this pr adds assertion to verification methods to prevent stub-only mock from being verified (#1460)- `verify()`- `verifynomoreinteractions()`- `inorder()` # [codecov](https://codecovio/gh/mockito/mockito/pull/1463?srcpr&elh1) report> merging [#1463](https://codecovio/gh/mockito/mockito/pull/1463?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/ceb1d29743c1abf733c2014bb3aa0bc364cf9007?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1463/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1463?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1463      +/-   ##+ coverage          8856%   8857%   +<01%       complexity          2406     2406                files                299      299                lines               6053     6057       +4       branches             737      736       -1     + hits                5361     5365       +4       misses               511      511                partials             181      181```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1463?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1463/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `9789% <100%> (+009%)` | `37 <2> (+1)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1463/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9368% <100%> (ø)` | `90 <0> (-1)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1463?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1463?srcpr&elfooter) last update [ceb1d294f50b55](https://codecovio/gh/mockito/mockito/pull/1463?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || this was a really nice pr! thank you!@marchpig i made a couple of tweaks can you take review / rebase? happy to merge when youre ok with them || @mockitoguy thank you for review! your commits made it better! :thumbsup: || thank you for review! ||
150,1466,1543,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,"exposed new api - stubbinglookuplistener exposed new public api based on an internal api - stubbinglookuplistener - #793as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of ""onion skin api""this pr replaces #1466 - very nice pr from @marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr @marchpig thank you for understanding! # [codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elh1) report> merging [#1543](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/02c39882f3552cf1d408a11380fbb674096b8719?srcpr&eldesc) will **increase** coverage by `122%`> the diff coverage is `90%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1543/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1543      +/-   ##+ coverage          8736%   8858%   +122%     + complexity          2434     2401      -33       files                300      299       -1       lines               6259     6046     -213       branches             777      735      -42     - hits                5468     5356     -112     + misses               595      511      -84     + partials             196      179      -17```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `9583% <ø> (-017%)` | `11 <0> (-1)` | || [ito/internal/listeners/stubbinglookupnotifierjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9saxn0zw5lcnmvu3r1ymjpbmdmb29rdxbob3rpzmllci5qyxzh) | `9473% <ø> (ø)` | `3 <0> (ø)` | :arrow_down: || [/internal/junit/strictstubsrunnertestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9tdhjpy3rtdhvic1j1bm5lclrlc3rmaxn0zw5lci5qyxzh) | `100% <100%> (ø)` | `3 <1> (ø)` | :arrow_down: || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `100% <100%> (ø)` | `23 <0> (ø)` | :arrow_down: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9368% <100%> (ø)` | `91 <1> (+1)` | :arrow_up: || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `9302% <8333%> (+008%)` | `43 <2> (-1)` | :arrow_down: || [mockito/internal/stubbing/consecutivestubbingjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9db25zzwn1dgl2zvn0dwjiaw5nlmphdme) | `8571% <0%> (-1429%)` | `3% <0%> (+1%)` | || [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `9166% <0%> (-834%)` | `6% <0%> (+1%)` | || [nal/stubbing/defaultanswers/returnssmartnullsjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zu21hcnrodwxscy5qyxzh) | `8888% <0%> (-767%)` | `3% <0%> (-17%)` | || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `8695% <0%> (-638%)` | `19% <0%> (-1%)` | ||  and [24 more](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elfooter) last update [02c398849a1d85](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || it looks good to me! || ill update the version / since tags and will merge shortly (most likely tomorrow) ||"
151,793,1543,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,"exposed new api - stubbinglookuplistener exposed new public api based on an internal api - stubbinglookuplistener - #793as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of ""onion skin api""this pr replaces #1466 - very nice pr from @marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr @marchpig thank you for understanding! # [codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elh1) report> merging [#1543](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/02c39882f3552cf1d408a11380fbb674096b8719?srcpr&eldesc) will **increase** coverage by `122%`> the diff coverage is `90%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1543/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1543      +/-   ##+ coverage          8736%   8858%   +122%     + complexity          2434     2401      -33       files                300      299       -1       lines               6259     6046     -213       branches             777      735      -42     - hits                5468     5356     -112     + misses               595      511      -84     + partials             196      179      -17```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `9583% <ø> (-017%)` | `11 <0> (-1)` | || [ito/internal/listeners/stubbinglookupnotifierjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9saxn0zw5lcnmvu3r1ymjpbmdmb29rdxbob3rpzmllci5qyxzh) | `9473% <ø> (ø)` | `3 <0> (ø)` | :arrow_down: || [/internal/junit/strictstubsrunnertestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9tdhjpy3rtdhvic1j1bm5lclrlc3rmaxn0zw5lci5qyxzh) | `100% <100%> (ø)` | `3 <1> (ø)` | :arrow_down: || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `100% <100%> (ø)` | `23 <0> (ø)` | :arrow_down: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9368% <100%> (ø)` | `91 <1> (+1)` | :arrow_up: || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `9302% <8333%> (+008%)` | `43 <2> (-1)` | :arrow_down: || [mockito/internal/stubbing/consecutivestubbingjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9db25zzwn1dgl2zvn0dwjiaw5nlmphdme) | `8571% <0%> (-1429%)` | `3% <0%> (+1%)` | || [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `9166% <0%> (-834%)` | `6% <0%> (+1%)` | || [nal/stubbing/defaultanswers/returnssmartnullsjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zu21hcnrodwxscy5qyxzh) | `8888% <0%> (-767%)` | `3% <0%> (-17%)` | || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `8695% <0%> (-638%)` | `19% <0%> (-1%)` | ||  and [24 more](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elfooter) last update [02c398849a1d85](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || it looks good to me! || ill update the version / since tags and will merge shortly (most likely tomorrow) ||"
152,1541,1544,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"fixes #1541: prevent premature garbage collection of mock objects fixes #1541if using one-liner stubs (https://staticjavadocio/orgmockito/mockito-core/2234/org/mockito/mockitohtml#one_liner_stub) the mock object may be premature cleaned up and returning the mock fails with an exception this occurs because there is no strong reference to the mock itselftherefore we need to maintain a strong reference to the mock until weve returned it while making sure that the gc can still cleanup the mock correctly when neededcause implementations of `basestubbing` are intended to be cleaned up after usage we can store a strong ref to the mock there `getmock` then uses the strong ref (instead of the weak ref provided by the invocation) after cleaning up the implementations of  `basestubbing` there is no strong ref to the mock itself anymore (except the one in the test class)i tried some alternative solutions but i believe this is the only way it works----bind last mock creation to mockingprogress does not work because of this:```when(mock(testclass2class)gettestclass())thenreturn(mock(testclassclass))getmock()```bind mock of last invocation for stubbing to mockingprogress does not work because of this:```when(mock(testclassclass)getstuff())thenreturn(""x"")thenreturn(    when(mock(testclassclass)getstuff())thenreturn(""xxx"")<testclass>getmock()getstuff())getmock()``` # [codecov](https://codecovio/gh/mockito/mockito/pull/1544?srcpr&elh1) report> merging [#1544](https://codecovio/gh/mockito/mockito/pull/1544?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/30d3127ee2c4e41452787a058a31b7a553ba3b00?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1544/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1544?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1544      +/-   ##+ coverage          8858%   8858%   +<01%     - complexity          2402     2410       +8       files                299      299                lines               6044     6064      +20       branches             734      738       +4     + hits                5354     5372      +18       misses               511      511              - partials             179      181       +2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1544?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [mockito/internal/stubbing/consecutivestubbingjava](https://codecovio/gh/mockito/mockito/pull/1544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9db25zzwn1dgl2zvn0dwjiaw5nlmphdme) | `100% <100%> (+1428%)` | `2 <2> (-1)` | :arrow_down: || [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `100% <100%> (+833%)` | `5 <1> (-1)` | :arrow_down: || [va/org/mockito/internal/stubbing/basestubbingjava](https://codecovio/gh/mockito/mockito/pull/1544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9cyxnlu3r1ymjpbmcuamf2yq) | `9375% <100%> (+089%)` | `18 <3> (+2)` | :arrow_up: || [ternal/exceptions/stacktrace/stacktracefilterjava](https://codecovio/gh/mockito/mockito/pull/1544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl3n0ywnrdhjhy2uvu3rhy2tucmfjzuzpbhrlci5qyxzh) | `8461% <0%> (-1539%)` | `7% <0%> (+2%)` | || [a/org/mockito/internal/debugging/locationimpljava](https://codecovio/gh/mockito/mockito/pull/1544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9kzwj1z2dpbmcvtg9jyxrpb25jbxbslmphdme) | `923% <0%> (-77%)` | `10% <0%> (+3%)` | || [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `9655% <0%> (+071%)` | `14% <0%> (+3%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1544?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1544?srcpr&elfooter) last update [30d312738dc92d](https://codecovio/gh/mockito/mockito/pull/1544?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || this is great! i pushed a couple of commits on top of this pr can you take a look? if youre ok with those changes im merging! || lgtm thanks for your improvementsonly passing the mock was my first take but i thought passing the `invocationcontainerimpl` is more type safe than just having `object` as parameter also the ""mock retrieval logic"" would be located in one central place but im very fine with the refactoring || thank you! || "
153,151,1549,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixed issue with leftover state when stubbing with bad throwables fixed issue with leftover state when stubbing with bad throwables fixes #1514 good catch || # [codecov](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&elh1) report> merging [#1549](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/16271ee313350e47855dc4a225e1edcb048a9a91?srcpr&eldesc) will **increase** coverage by `021%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1549/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1549      +/-   ##+ coverage          8857%   8879%   +021%     - complexity          2406     2539     +133       files                299      299                lines               6057     6263     +206       branches             736      763      +27     + hits                5365     5561     +196     - misses               511      522      +11     + partials             181      180       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `9333% <100%> (+637%)` | `20 <0> (+1)` | :arrow_up: || [mockito/internal/stubbing/consecutivestubbingjava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9db25zzwn1dgl2zvn0dwjiaw5nlmphdme) | `909% <0%> (-91%)` | `4% <0%> (+2%)` | || [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `9411% <0%> (-589%)` | `7% <0%> (+2%)` | || [va/org/mockito/internal/stubbing/basestubbingjava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9cyxnlu3r1ymjpbmcuamf2yq) | `9166% <0%> (-209%)` | `30% <0%> (+12%)` | || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9339% <0%> (-029%)` | `180% <0%> (+90%)` | || [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `9655% <0%> (+055%)` | `14% <0%> (+2%)` | :arrow_up: || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `985% <0%> (+061%)` | `59% <0%> (+22%)` | :arrow_up: || [a/org/mockito/internal/debugging/locationimpljava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9kzwj1z2dpbmcvtg9jyxrpb25jbxbslmphdme) | `923% <0%> (+283%)` | `10% <0%> (+2%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&elfooter) last update [16271ee93540e7](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
154,155,1552,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,minimal test to repro generic issue with smart nulls created a minimal test that reproduces bug with smart nulls and generics see issue #1551 # [codecov](https://codecovio/gh/mockito/mockito/pull/1552?srcpr&elh1) report> merging [#1552](https://codecovio/gh/mockito/mockito/pull/1552?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/613c94a69ed6e455700544419921d1c9977844ef?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1552/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1552?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1552   +/-   ##  coverage          8857%   8857%             complexity          2406     2406             files                299      299             lines               6057     6057             branches             736      736             hits                5365     5365             misses               511      511             partials             181      181```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1552?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1552?srcpr&elfooter) last update [613c94a457f130](https://codecovio/gh/mockito/mockito/pull/1552?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || since this is a new test ill just merge it without review happy to fix / change things later if someone reviews it ||
155,155,1554,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,fixed verifyerror when junit 3 is in the classpath mockito will throw verifyerror during its junit detection when junit 3is in the classpath because the code only supports junit 4 and laterthis change will catch this error and pretend that junit is not thereissue: #1553 i would like some opinions on testing because i was not able to figure out a good way to test this i tried changing the class hierarchy of comparisonfailure using byte buddy and a custom classloader but was not able to get that to work i also thought it would be possible (though heavy) to use a gradle property to change the version of the junit dependency to run a test and add that to the test matrix but i dont expect that to work without other changes because mockito itself uses junit 4 to compile and run its own tests || # [codecov](https://codecovio/gh/mockito/mockito/pull/1554?srcpr&elh1) report> merging [#1554](https://codecovio/gh/mockito/mockito/pull/1554?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/613c94a69ed6e455700544419921d1c9977844ef?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1554/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1554?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1554   +/-   ##  coverage          8857%   8857%             complexity          2406     2406             files                299      299             lines               6057     6057             branches             736      736             hits                5365     5365             misses               511      511             partials             181      181```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1554?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [a/org/mockito/internal/junit/exceptionfactoryjava](https://codecovio/gh/mockito/mockito/pull/1554/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9fegnlchrpb25gywn0b3j5lmphdme) | `100% <100%> (ø)` | `5 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1554?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1554?srcpr&elfooter) last update [613c94af890fbb](https://codecovio/gh/mockito/mockito/pull/1554?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || im making a couple of tweaks and ill merge itdont worry about tests i dont want to keep tests that use junit3 because that version is too old maintaining it is more cost than value can you verify that this fix resolved the problem you were seeing?thank you for the contribution! || please confirm that the fix works for you and ill merge it thank you again! || verified i tested this in a small project and in the larger work project i encountered this in as well thanks again! ||
156,1551,1576,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fix/bug 1551 cce on smart not null answers this pr intends to fix #1551 for fix it the `returnssmartnulls` answer use now some reflection to find the correct return type instead of the `javautilobject`when the return type can be found it will start to retrieve empty values using the answer `returnsmoreemptyvalues` & `returnsemptyvalues` before creating a new mock instanceas you may notice in tests there is still one case where the return type cannot be found in this case the `answer` will return a `null` instead of `object` mocki think it may be possible to improve this code any suggestion will be welcome ! # [codecov](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&elh1) report> merging [#1576](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/0c4e494a16141a65f22605a57382a222040f340b?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `9523%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1576/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1576      +/-   ##+ coverage          8849%   8857%   +007%     - complexity          2408     2425      +17       files                299      299                lines               6059     6099      +40       branches             739      752      +13     + hits                5362     5402      +40     + misses               515      514       -1     - partials             182      183       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/stubbing/defaultanswers/returnssmartnullsjava](https://codecovio/gh/mockito/mockito/pull/1576/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zu21hcnrodwxscy5qyxzh) | `9655% <9523%> (+766%)` | `20 <13> (+17)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&elfooter) last update [0c4e49473a9bf5](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
157,1577,1582,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,"fix #1577: refactoring naming rule for sealed packages to better work with the java module system the java module system consideres packages of all named modules to be sealed this results in the naming strategy to rename classes such that they cannot subclass package-private types # [codecov](https://codecovio/gh/mockito/mockito/pull/1582?srcpr&elh1) report> merging [#1582](https://codecovio/gh/mockito/mockito/pull/1582?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/0c4e494a16141a65f22605a57382a222040f340b?srcpr&eldesc) will **decrease** coverage by `168%`> the diff coverage is `4476%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1582/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1582?srcpr&eltree)```diff@@               coverage diff                @@##             release/2x   #1582      +/-   ##- coverage          8849%   868%   -169%     - complexity          2408    2425      +17       files                299     300       +1       lines               6059    6246     +187       branches             739     775      +36     + hits                5362    5422      +60     - misses               515     629     +114     - partials             182     195      +13```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1582?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1582/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `96% <ø> (ø)` | `12 <0> (ø)` | :arrow_down: || [ito/internal/creation/bytebuddy/modulehandlerjava](https://codecovio/gh/mockito/mockito/pull/1582/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9kdwxlsgfuzgxlci5qyxzh) | `2211% <2211%> (ø)` | `2 <2> (?)` | || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1582/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `2105% <40%> (-4752%)` | `4 <2> (-1)` | || [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1582/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `838% <5333%> (-906%)` | `27 <2> (+2)` | || [/creation/bytebuddy/subclassbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1582/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrly29kzudlbmvyyxrvci5qyxzh) | `8333% <7727%> (-1173%)` | `21 <13> (-1)` | || [src/main/java/org/mockito/argumentmatchersjava](https://codecovio/gh/mockito/mockito/pull/1582/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9bcmd1bwvude1hdgnozxjzlmphdme) | `9908% <0%> (ø)` | `59% <0%> (ø)` | :arrow_down: || [ernal/configuration/injectingannotationenginejava](https://codecovio/gh/mockito/mockito/pull/1582/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul0luamvjdgluz0fubm90yxrpb25fbmdpbmuuamf2yq) | `100% <0%> (ø)` | `7% <0%> (-2%)` | :arrow_down: ||  and [1 more](https://codecovio/gh/mockito/mockito/pull/1582/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1582?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1582?srcpr&elfooter) last update [0c4e494dd83687](https://codecovio/gh/mockito/mockito/pull/1582?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i set myself a goal for that there is a dy ic layer api but i never really used it i need to look into the api and generate code in modules dynamically some time maybe that allows for adding proper tests  || here is a scetch for some testing of mocking modularized types:```javaimport static netbytebuddymatcherelementmatchersnamedimport javaioioexceptionimport javalangmoduleconfigurationimport javalangmodulemodulefinderimport javaniofilefilesimport javaniofilepathimport javautilcollectionsimport javautilconcurrentcallableimport javautiljarjarentryimport javautiljarjaroutputstreamimport orgmockitomockitoimport netbytebuddybytebuddyimport netbytebuddydescriptionmodifiervisibilityimport netbytebuddyimplementationfixedvalueimport netbytebuddyjarasmclasswriterimport netbytebuddyjarasmmodulevisitorimport netbytebuddyjarasmopcodesimport netbytebuddyutilityopenedclassreaderpublic class mytest {    public static void main(string[] args) throws exception {        path jar  modularjar(true true true)        modulelayer layer  layer(jar)        class<?> type  layerfindloader(""mockitotest"")loadclass(""samplemycallable"")        @suppresswarnings(""unchecked"")        callable<string> mock  (callable<string>) mockitomock(type)        mockitowhen(mockcall())thencallrealmethod()        object result  mockcall()        // we should have a check that fails mock creation of mock cannot be loaded in target class loader                systemoutprintln(mockgetclass()getname()) // orgmockitocodegen only if opened  false        systemoutprintln(result) // should be foo    }    private static path modularjar(boolean publik boolean exported boolean opened) throws ioexception {        path jar  filescreatetempfile(""sample-module"" ""jar"")        try (jaroutputstream out  new jaroutputstream(filesnewoutputstream(jar))) {            outputnextentry(new jarentry(""module-infoclass""))            outwrite(moduleinfo(exported opened))            outcloseentry()            outputnextentry(new jarentry(""sample/mycallableclass""))            outwrite(type(publik))            outcloseentry()        }        return jar    }    private static byte[] type(boolean publik) {        return new bytebuddy()            subclass(callableclass)            name(""samplemycallable"")            merge(publik ? visibilitypublic : visibilitypackage_private)            method(named(""call""))            intercept(fixedvaluevalue(""foo""))            make()            getbytes()    }    private static byte[] moduleinfo(boolean exported boolean opened) {        classwriter classwriter  new classwriter(openedclassreaderasm_api)        classwritervisit(opcodesv9 opcodesacc_module ""module-info"" null null null)        modulevisitor mv  classwritervisitmodule(""mockitotest"" 0 null)        mvvisitrequire(""javabase"" opcodesacc_mandated null)        mvvisitpackage(""sample"")        if (exported) {            mvvisitexport(""sample"" 0)        }        if (opened) {            mvvisitopen(""sample"" 0)        }        mvvisitend()        classwritervisitend()        return classwritertobytearray()    }    private static modulelayer layer(path jar) {        configuration configuration  configurationresolve(            modulefinderof(jar)            collectionssingletonlist(modulelayerboot()configuration())            modulefinderof()            collectionssingleton(""mockitotest"")        )        return modulelayerdefinemoduleswithoneloader(            configuration            collectionssingletonlist(modulelayerboot())            null        )layer()    }}```@timvdlippe could you integrate a test using java 9 into the build somehow? if you achieve that i would add some more logic that i think we should integrate for better error messages || @raphw i have added a subproject that can run on java 9 and tests the modules however the test you provided also passes on `release/2x` so you might have to update the test or its assertions to make sure we catch this regressionalso have to see how we can fix travis on java 8 with this module || "
158,1584,1585,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fix #1584 where multipleparentclassloader lacks of classloaders of superclasses the multipleparentclassloader is now composed also with classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy the problem of test case is that is not possible reflect a real osgi environment without use some test framework like pax exam (the most complicate thing is do not pollute test dependency with 10 and more dependencies) if is not a problem i can try to create test case that verify if the multiparentclassloader contains more classloaders || a job fails to install jdk11 other jobs are ok || i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top-most type this would effectively prevent mocking package-private classes and methods for such types which worked until nowi just extended the multiple parent class loader in byte buddy to allow for collecting the most specific class loaders only after this i think we can add this change probably we would also need to include all class loaders of interface types for this to work universallyi am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type tree || > i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top-most typei had a look to the implementation of `multipleparentclassloader` and it delegate to parents in the exact order they was added this means that if the classloader of the actual type (the first added) is able to load all classes other classloaders are not visited> probably we would also need to include all class loaders of interface types for this to work universallyits already like that the actual classloader is built with a composition of classloader of actual type and the classloader of all interfaces the class implements my pr simply add classloaders from superclasses> i am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type treei do not expect a hierarchy bigger than 10 classloader are filtered at most we should ensure there are no duplicated in the list (if not already) || this needs a rebase now || # [codecov](https://codecovio/gh/mockito/mockito/pull/1585?srcpr&elh1) report> merging [#1585](https://codecovio/gh/mockito/mockito/pull/1585?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/467a1bfb75b03a7ec526b5256629639cd990a7e0?srcpr&eldesc) will **increase** coverage by `11%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1585/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1585?srcpr&eltree)```diff@@               coverage diff                @@##             release/2x    #1585     +/-   ##+ coverage          8747%   8858%   +11%     + complexity          2433     2427      -6       files                300      299      -1       lines               6246     6106    -140       branches             775      753     -22     - hits                5464     5409     -55     + misses               584      514     -70     + partials             198      183     -15```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1585?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/creation/bytebuddy/subclassbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrly29kzudlbmvyyxrvci5qyxzh) | `9545% <100%> (+1212%)` | `24 <2> (+1)` | :arrow_up: || [/main/java/org/mockito/internal/util/platformjava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1bsyxrmb3jtlmphdme) | `8181% <0%> (-91%)` | `12% <0%> (-3%)` | || [creation/bytebuddy/subclassbytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrlqnvkzhlnb2nrtwfrzxiuamf2yq) | `6428% <0%> (-715%)` | `10% <0%> (ø)` | || [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6276% <0%> (-532%)` | `11% <0%> (-1%)` | || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `6857% <0%> (-249%)` | `5% <0%> (-1%)` | || [src/main/java/org/mockito/argumentmatchersjava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9bcmd1bwvude1hdgnozxjzlmphdme) | `9908% <0%> (ø)` | `59% <0%> (ø)` | :arrow_down: || [ernal/configuration/injectingannotationenginejava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul0luamvjdgluz0fubm90yxrpb25fbmdpbmuuamf2yq) | `100% <0%> (ø)` | `9% <0%> (+2%)` | :arrow_up: || [ito/internal/creation/bytebuddy/modulehandlerjava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9kdwxlsgfuzgxlci5qyxzh) | | | || [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1585/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `9285% <0%> (+482%)` | `25% <0%> (-2%)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1585?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1585?srcpr&elfooter) last update [467a1bf00da3e1](https://codecovio/gh/mockito/mockito/pull/1585?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || rebase done || we encountered an issue with java 11 which should now be fixed could you rebase again? sorry for the troublesawaiting @raphw review and then we can merge || this works for me as we now apply a filter to only add the most specific class loader in a hirarchy before we would have added several class loaders in a hierarchy what would had ruined injection and therewith mocking of package-private typeslooks good for me but i am a bit excited to see if this breaks things in a way we do not anticipate however i do not see an obvious problem which is why i suggest to merge || please also consider a release on maven central || i had attached an osgi test case but i have no idea how to integrate in the actual build system (i inexpert with gradle)it is a simple maven project that run a test case using pax-exam that cover the scenario described in the issue if in the pomxml you change the version of mockito < 22317 the test will fail with noclassdeffound with mockito version > 22318 worksi hope this will help to avoid regression[osgi-testzip](https://githubcom/mockito/mockito/files/2808558/osgi-testzip) ||
159,1587,1588,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,fixes #1587 : remove unnecessary loop from injectingannotationengine removes injectingannotationengine::processinjectmocks method that does an unnecessary loopfixes https://githubcom/mockito/mockito/issues/1587 # [codecov](https://codecovio/gh/mockito/mockito/pull/1588?srcpr&elh1) report> merging [#1588](https://codecovio/gh/mockito/mockito/pull/1588?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/be2faef4195d55484cbc58c27951849eebd9fc35?srcpr&eldesc) will **decrease** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1588/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1588?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1588      +/-   ##- coverage          8857%   8856%   -001%     + complexity          2425     2423       -2       files                299      299                lines               6099     6094       -5       branches             752      751       -1     - hits                5402     5397       -5       misses               514      514                partials             183      183```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1588?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/configuration/injectingannotationenginejava](https://codecovio/gh/mockito/mockito/pull/1588/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul0luamvjdgluz0fubm90yxrpb25fbmdpbmuuamf2yq) | `100% <100%> (ø)` | `7 <0> (-2)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1588?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1588?srcpr&elfooter) last update [be2faef55aba5f](https://codecovio/gh/mockito/mockito/pull/1588?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || travis seems happy thanks again! ||
160,1578,1596,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1578: outer class mocks unavailable from inner class i opened issue #1578 a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward  however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency  the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue  i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression (reported to be working in #353)  the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_- problem - junitrule detects an unfinished mocking session when an inner class is detected- fix - if a mockitosession has been established for junitrule then use that and init mocks of the inner class- tests - within an inner class  ensure mocks are accessible override outer class values when desired retain original values if not overwritten- demonstrated with debechtejunit:junit-hierarchicalcontextrunner:4122-snapshot # [codecov](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&elh1) report> merging [#1596](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/7a64410c8445533b1d96b0117f375ac3fa8a90ff?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1596/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1596      +/-   ##+ coverage          8754%   8754%   +<01%       complexity          2437     2437                files                300      300                lines               6255     6257       +2       branches             775      776       +1     + hits                5476     5478       +2       misses               582      582                partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ain/java/org/mockito/internal/junit/junitrulejava](https://codecovio/gh/mockito/mockito/pull/1596/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9kvw5pdfj1bguuamf2yq) | `9629% <100%> (+029%)` | `4 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&elfooter) last update [7a64410d9bdfe6](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
161,353,1596,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1578: outer class mocks unavailable from inner class i opened issue #1578 a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward  however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency  the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue  i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression (reported to be working in #353)  the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_- problem - junitrule detects an unfinished mocking session when an inner class is detected- fix - if a mockitosession has been established for junitrule then use that and init mocks of the inner class- tests - within an inner class  ensure mocks are accessible override outer class values when desired retain original values if not overwritten- demonstrated with debechtejunit:junit-hierarchicalcontextrunner:4122-snapshot # [codecov](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&elh1) report> merging [#1596](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/7a64410c8445533b1d96b0117f375ac3fa8a90ff?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1596/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1596      +/-   ##+ coverage          8754%   8754%   +<01%       complexity          2437     2437                files                300      300                lines               6255     6257       +2       branches             775      776       +1     + hits                5476     5478       +2       misses               582      582                partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ain/java/org/mockito/internal/junit/junitrulejava](https://codecovio/gh/mockito/mockito/pull/1596/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9kvw5pdfj1bguuamf2yq) | `9629% <100%> (+029%)` | `4 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&elfooter) last update [7a64410d9bdfe6](https://codecovio/gh/mockito/mockito/pull/1596?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
162,357,1612,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,return null instead of causing a cce this solves a large number of edge-cases where `null` will actuallyremove the runtime classcastexception this essentially negates thewhole mockitocast errorprone check we can still not support every usecase but causing a npe instead of a cce does not seem to make thisworsei am still running internal tests within google to see if there are anyregressions but i already saw that some of the test failures we hadwith bytebuddy were resolved with this particular patchnote that this now fully closes #357 a previous pr resolved the sameissue with returnssmartnulls: #1576fixes #357 # [codecov](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&elh1) report> merging [#1612](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/f11705be91ee3545bc006908b34425f1fc359898?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1612/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1612      +/-   ##+ coverage          8754%   8755%   +<01%     - complexity          2437     2438       +1       files                300      300                lines               6257     6259       +2       branches             776      777       +1     + hits                5478     5480       +2       misses               582      582                partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `100% <100%> (ø)` | `16 <0> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&elfooter) last update [f11705b845addc](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
163,1615,1617,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,fix issue with mocking of javautil* classes fixes #1615i hope the test is correct at least it failed before and succeeds now # [codecov](https://codecovio/gh/mockito/mockito/pull/1617?srcpr&elh1) report> merging [#1617](https://codecovio/gh/mockito/mockito/pull/1617?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/f11705be91ee3545bc006908b34425f1fc359898?srcpr&eldesc) will **decrease** coverage by `019%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1617/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1617?srcpr&eltree)```diff@@               coverage diff                @@##             release/2x    #1617     +/-   ##- coverage          8754%   8735%   -02%     + complexity          2437     2433      -4       files                300      300               lines               6257     6257               branches             776      776             - hits                5478     5466     -12     - misses               582      595     +13     + partials             197      196      -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1617?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/creation/bytebuddy/subclassbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1617/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrly29kzudlbmvyyxrvci5qyxzh) | `8446% <100%> (ø)` | `25 <0> (ø)` | :arrow_down: || [/main/java/org/mockito/internal/util/platformjava](https://codecovio/gh/mockito/mockito/pull/1617/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1bsyxrmb3jtlmphdme) | `8181% <0%> (-91%)` | `12% <0%> (-3%)` | || [creation/bytebuddy/subclassbytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1617/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrlqnvkzhlnb2nrtwfrzxiuamf2yq) | `6428% <0%> (-715%)` | `10% <0%> (ø)` | || [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1617/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6483% <0%> (-55%)` | `11% <0%> (-1%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1617?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1617?srcpr&elfooter) last update [f11705b1a3f259](https://codecovio/gh/mockito/mockito/pull/1617?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || lets also publish this one to central  || i would like to batch up the prs and issues that we have discovered so far and then publish that to maven central ||
164,1532,1619,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"new api to clean up all inline mocks after test in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with themfixes #1532 and #1533 i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it || # [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elh1) report> merging [#1619](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/af2d33be7fbfecad172cef4da2127b8d9a6fbe31?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `8571%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1619/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1619      +/-   ##+ coverage          8738%   8741%   +002%     - complexity          2435     2442       +7       files                301      301                lines               6278     6285       +7       branches             784      784              + hits                5486     5494       +8       misses               596      596              + partials             196      195       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6842% <100%> (+358%)` | `14 <2> (+3)` | :arrow_up: || [to/internal/framework/defaultmockitoframeworkjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9gcmftzxdvcmsuamf2yq) | `8947% <80%> (-1053%)` | `10 <5> (+5)` | || [ternal/util/reflection/genericmetadatasupportjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vr2vuzxjpy01ldgfkyxrhu3vwcg9ydc5qyxzh) | `8686% <0%> (-027%)` | `38% <0%> (ø)` | || [aultanswers/retrievegenericsfordefaultanswersjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxryawv2zudlbmvyawnzrm9yrgvmyxvsdefuc3dlcnmuamf2yq) | `9591% <0%> (-024%)` | `20% <0%> (-1%)` | || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9661% <0%> (ø)` | `40% <0%> (ø)` | :arrow_down: || [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7272% <0%> (ø)` | `5% <0%> (ø)` | :arrow_down: || [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `100% <0%> (+217%)` | `16% <0%> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elfooter) last update [af2d33b959cba4](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you for the pr! since this is changing / adding new public api i will review it too (many thanks to @timvdlippe for offering to review this!) ill commit to provide review by the end of this week || thanks to @mockitoguy just some context here i tried to avoid new api at first but `defaultmockitosession` seems (at least from tests) to be used within a thread and changing its default behavior to listen on events from all threads will break tests for multi-threading therefore i came up with the new api solutioni didnt know how much impact there would be to add a new method in `mockmaker` interface that requires everyone providing an implementation when they uprev their mockito to a version that has the new method but i have no clue how much work it could be if its too noisy maybe we can have a default impl (if only java 8+ is supported) or a brand new interface called `inlinemockmaker` to add that method i personally want to expose a chance to mock makers to clean up as we dont know how they handle the mapping from mock to its handler which may have other places that could cause memory leaks other than those 2 places we found we need better documentation on that but i have to admit im not good at writing api docs so ill defer to any of your suggestions in terms of documentationi hope the review wont later become a whole refactor of current implementation || i reviewed the implementation and most of it is really good it is also a very high quality pr thank you! curious are you facing this problem at g?i have a couple of concerns / design choices to discuss: a) can we make the fix more seamless? im not sure if this is possible but lets discuss goals: users dont have to remember to use trackandcleanupmocks() _when_ inline mocker is in use for example (brainstorming): 	- we introduce a new interface that inlinebytebuddymockmaker implements say: requirescleaningmocks 	- we expose a new method like frameworkgetplugins()getplugin(mockmackerclass) this way we can find out in runtime what mockmaker is in use 	- in mockito session we check if the mock maker is requirescleaningmocks 	- in session we call requirescleaningmockscleanupmock() b) mockmakercleanupmock() is an incompatible change so we cannot ship this pr in its current form mockmaker is typically provided at runtime from a different jar (example: dexmaker powermockito) i have a couple ideas but first lets explore a) great tests deep change in the internals of mockito thank you very much for the contribution!  || thanks for your review @mockitoguy dexmaker is incubating a feature in inline-dexmaker to create spies without creating new instances so that we can stub final members and we (android framework) found these mem leaks when using that i then found #1533 and reproduced #1614 that i confirmed it also happens with bytebuddy mock makers so i started the fix with help from @timvdlippe first of all i really didnt see a solution w/o tying mock lives with something and i think `mockitosession` is the most natural choice for the ""something"" so technically its already not transparent to properly use inline mock makers because sessions are necessary to make it work while its optional to use subclass mock makersi also first tried to avoid `trackandcleanupmocks()` the difficulty actually comes from the fact mockitolisteners are threadlocal before this change and its a requirement to track mocks generated from other threads because [`failontimeout`][failontimeout] basically runs tests in different threads than the thread used to run before and after before this change user can have multiple `defaultmockitosession` as long as they are in different threads (`threadsrunalltestshalfmanualtest` also verifies that behavior) and not interfering with each other however if we convert `defaultmockitosession` to have ""thread global"" influence `threadrunalltestshalfmanualtest` will fail because cross-threads mock cleanup will invalidate mocks created in tests running in a different threadi think i have a way (a bit hacky though) to make it work but i dont think its complication outweighs the new api (given that its already not transparent to users) it doesnt encourage clean tests in multi-threading scenario either imho however i can still put my thought here and let you decide if we should take it:- dont reject registration of global listeners if its from a different thread for the same type- only clean up mocks when the last `mocktracker` is unregisteredthen it basically treats the life of any `defaultmockitosession` as mock lives it doesnt allow user to precisely control mock lives but with some care users should still be able to avoid oom[failontimeout]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock() im not sure if the plugin way is still preferred over current change because for most dexmakers theyre still just implementing the basic `mockmaker` interface and nothing should break while they can choose to implement `inlinemockmaker` if clean up is necessary || just to be clear that im waiting for @mockitoguy s response on if we would like to go for that approach in exchange of removing trackandcleanupmocks() api just in case were waiting for each other and its going nowhere || as a sidenote: the refactoring with the new inlinemockmaker interface is :+1: for me :smile:  || hey @ttanxu so you youre saying that the approach i suggested in a) wouldnt work? || > oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock()great! ill review again this weekend || > as a sidenote: the refactoring with the new inlinemockmaker interface is 👍 for me 😄@timvdlippe im with you its a good idea to have a separate interface and stay compatible || hey @mockitoguy  what you suggested could solve the same issue that is solved by `inlinemockmaker` in current pr (the mockmaker contract breakage)`trackandcleanupmocks()` was introduced for other reason but could use different tech to remove its necessity i explained the detail in previous comments (mostly because of the multi-thread implementation of [`failontimeout`][1] in junit)[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || @ttanxu thank you for explanation im looking into it || my comment is short but i put a lot of consideration into this given all arguments i agree that a new api is the best way before we ship it i want to bounce one more idea what if we tie mockmaker with mockitosession? when the session completes it tears down its mockmaker/cleans up all mocks we could use threadlocal thoughts? || correct me if im wrongit seems youre suggesting one `mockmaker` per thread the critical part of this approach is the mock map in the inline mock maker needs to be a `threadlocal` which means mocks wont look have handlers tied to them in threads other than the thread where they were created and thus wont appear to be a mock and method invocations on it might trigger exceptions thats not likely a compatible change to existing use cases because if [`failontimeout`][1] is used befores and afters are executed in a different thread than the test methodif we still only have one `mockmaker` across all threads then the structure is pretty much the same as current change except that instead of calling `inlinemockmaker#clearup()` we just tear down the entire `mockmaker` im not sure if this is better than calling `clearup()` it does sound like a viable solution w/o introduction to `inlinemockmaker` as we can just swap the instance of `mockmaker` in `pluginregistry` the con is thats more of a systematic refactor than `inlinemockmaker#clearup()` approach and it reduces the cleanness of current code (we cant use final for `mockmaker` in `pluginregistry` anymore) btw this doesnt help avoid a new api `trackandclearupmocks()` in `mockitosession` ill leave this decision to you[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || great points thank you for taking the time to explain why do we need to keep track of specific mocks? can we just clear all? || oh you say we dont have to save created mocks in a list in `mocktracker`? i guess we can just clear all mocks especially considering there cant be multiple mock-tracking sessions open at the same time mocks created before the session is opened may be leakedremoving `mocktracker` can simply this change a lot especially we dont need global listeners ill update the change || actually i recall that the thought of tracking specific mocks stemmed from the thought that usually mocks have different lives eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different lives it would be nice if we can keep mocks created in beforeclass for later reusecurrent impl is half baked because there can only be one tracking session but i want to keep `cleanup(object)` signature (or we can have `cleanup(object)` instead so that we can clean up everything if object array is `null`) for `inlinemockmaker` just in case we want to support the case abovewith that said ill change `cleanup(object)` to `cleanup(object)` and use `null` array for clean up everything || oh besides if we just want to clear everything it doesnt seem natural to me to add the api to mockitosession maybe we can add an api to mockito? || thank you for considering! i want us to strive for simplicity ill think about the new api for mockito (or mockitoframework)if we have a static method like ""mockitoframework()clearallmocks()"" would it work for you? > eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different livesdo we know legit use cases for ""static"" mocks? it seems an anti-pattern || finally cleaned up all remains from previous change its a lot simpler now please take a looki can think of a case for static mocks where constructing a mock may be expensive and someone wants to reuse it across tests thats not an argument why static mocks have to be used though they can definitely reconstruct those mocks || reviewing || we are ready thank you @ttanxu and @timvdlippe for patience! this is the best pragmatic step to resolve the problem in the future perhaps we can avoid having the weak map of references in a first place@ttanxu i made some tweaks to tests documentation ive also renamed the method to ""clearmocks() -> clearinlinemocks()"" for consistency take a look and see if youre ok with this let us know and ill merge this nice work with this change!@timvdlippe i did some cosmetic changes please review if you want thanks! || i will review this on monday in the office thanks for the polish! || > test user can safely call clearinlinemocks() and clearmock() even when mock maker is not a inline mock maker@ttanxu great point! || im making the final tweaks based on the code review and im merging || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || "
165,1533,1619,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"new api to clean up all inline mocks after test in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with themfixes #1532 and #1533 i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it || # [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elh1) report> merging [#1619](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/af2d33be7fbfecad172cef4da2127b8d9a6fbe31?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `8571%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1619/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1619      +/-   ##+ coverage          8738%   8741%   +002%     - complexity          2435     2442       +7       files                301      301                lines               6278     6285       +7       branches             784      784              + hits                5486     5494       +8       misses               596      596              + partials             196      195       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6842% <100%> (+358%)` | `14 <2> (+3)` | :arrow_up: || [to/internal/framework/defaultmockitoframeworkjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9gcmftzxdvcmsuamf2yq) | `8947% <80%> (-1053%)` | `10 <5> (+5)` | || [ternal/util/reflection/genericmetadatasupportjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vr2vuzxjpy01ldgfkyxrhu3vwcg9ydc5qyxzh) | `8686% <0%> (-027%)` | `38% <0%> (ø)` | || [aultanswers/retrievegenericsfordefaultanswersjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxryawv2zudlbmvyawnzrm9yrgvmyxvsdefuc3dlcnmuamf2yq) | `9591% <0%> (-024%)` | `20% <0%> (-1%)` | || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9661% <0%> (ø)` | `40% <0%> (ø)` | :arrow_down: || [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7272% <0%> (ø)` | `5% <0%> (ø)` | :arrow_down: || [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `100% <0%> (+217%)` | `16% <0%> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elfooter) last update [af2d33b959cba4](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you for the pr! since this is changing / adding new public api i will review it too (many thanks to @timvdlippe for offering to review this!) ill commit to provide review by the end of this week || thanks to @mockitoguy just some context here i tried to avoid new api at first but `defaultmockitosession` seems (at least from tests) to be used within a thread and changing its default behavior to listen on events from all threads will break tests for multi-threading therefore i came up with the new api solutioni didnt know how much impact there would be to add a new method in `mockmaker` interface that requires everyone providing an implementation when they uprev their mockito to a version that has the new method but i have no clue how much work it could be if its too noisy maybe we can have a default impl (if only java 8+ is supported) or a brand new interface called `inlinemockmaker` to add that method i personally want to expose a chance to mock makers to clean up as we dont know how they handle the mapping from mock to its handler which may have other places that could cause memory leaks other than those 2 places we found we need better documentation on that but i have to admit im not good at writing api docs so ill defer to any of your suggestions in terms of documentationi hope the review wont later become a whole refactor of current implementation || i reviewed the implementation and most of it is really good it is also a very high quality pr thank you! curious are you facing this problem at g?i have a couple of concerns / design choices to discuss: a) can we make the fix more seamless? im not sure if this is possible but lets discuss goals: users dont have to remember to use trackandcleanupmocks() _when_ inline mocker is in use for example (brainstorming): 	- we introduce a new interface that inlinebytebuddymockmaker implements say: requirescleaningmocks 	- we expose a new method like frameworkgetplugins()getplugin(mockmackerclass) this way we can find out in runtime what mockmaker is in use 	- in mockito session we check if the mock maker is requirescleaningmocks 	- in session we call requirescleaningmockscleanupmock() b) mockmakercleanupmock() is an incompatible change so we cannot ship this pr in its current form mockmaker is typically provided at runtime from a different jar (example: dexmaker powermockito) i have a couple ideas but first lets explore a) great tests deep change in the internals of mockito thank you very much for the contribution!  || thanks for your review @mockitoguy dexmaker is incubating a feature in inline-dexmaker to create spies without creating new instances so that we can stub final members and we (android framework) found these mem leaks when using that i then found #1533 and reproduced #1614 that i confirmed it also happens with bytebuddy mock makers so i started the fix with help from @timvdlippe first of all i really didnt see a solution w/o tying mock lives with something and i think `mockitosession` is the most natural choice for the ""something"" so technically its already not transparent to properly use inline mock makers because sessions are necessary to make it work while its optional to use subclass mock makersi also first tried to avoid `trackandcleanupmocks()` the difficulty actually comes from the fact mockitolisteners are threadlocal before this change and its a requirement to track mocks generated from other threads because [`failontimeout`][failontimeout] basically runs tests in different threads than the thread used to run before and after before this change user can have multiple `defaultmockitosession` as long as they are in different threads (`threadsrunalltestshalfmanualtest` also verifies that behavior) and not interfering with each other however if we convert `defaultmockitosession` to have ""thread global"" influence `threadrunalltestshalfmanualtest` will fail because cross-threads mock cleanup will invalidate mocks created in tests running in a different threadi think i have a way (a bit hacky though) to make it work but i dont think its complication outweighs the new api (given that its already not transparent to users) it doesnt encourage clean tests in multi-threading scenario either imho however i can still put my thought here and let you decide if we should take it:- dont reject registration of global listeners if its from a different thread for the same type- only clean up mocks when the last `mocktracker` is unregisteredthen it basically treats the life of any `defaultmockitosession` as mock lives it doesnt allow user to precisely control mock lives but with some care users should still be able to avoid oom[failontimeout]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock() im not sure if the plugin way is still preferred over current change because for most dexmakers theyre still just implementing the basic `mockmaker` interface and nothing should break while they can choose to implement `inlinemockmaker` if clean up is necessary || just to be clear that im waiting for @mockitoguy s response on if we would like to go for that approach in exchange of removing trackandcleanupmocks() api just in case were waiting for each other and its going nowhere || as a sidenote: the refactoring with the new inlinemockmaker interface is :+1: for me :smile:  || hey @ttanxu so you youre saying that the approach i suggested in a) wouldnt work? || > oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock()great! ill review again this weekend || > as a sidenote: the refactoring with the new inlinemockmaker interface is 👍 for me 😄@timvdlippe im with you its a good idea to have a separate interface and stay compatible || hey @mockitoguy  what you suggested could solve the same issue that is solved by `inlinemockmaker` in current pr (the mockmaker contract breakage)`trackandcleanupmocks()` was introduced for other reason but could use different tech to remove its necessity i explained the detail in previous comments (mostly because of the multi-thread implementation of [`failontimeout`][1] in junit)[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || @ttanxu thank you for explanation im looking into it || my comment is short but i put a lot of consideration into this given all arguments i agree that a new api is the best way before we ship it i want to bounce one more idea what if we tie mockmaker with mockitosession? when the session completes it tears down its mockmaker/cleans up all mocks we could use threadlocal thoughts? || correct me if im wrongit seems youre suggesting one `mockmaker` per thread the critical part of this approach is the mock map in the inline mock maker needs to be a `threadlocal` which means mocks wont look have handlers tied to them in threads other than the thread where they were created and thus wont appear to be a mock and method invocations on it might trigger exceptions thats not likely a compatible change to existing use cases because if [`failontimeout`][1] is used befores and afters are executed in a different thread than the test methodif we still only have one `mockmaker` across all threads then the structure is pretty much the same as current change except that instead of calling `inlinemockmaker#clearup()` we just tear down the entire `mockmaker` im not sure if this is better than calling `clearup()` it does sound like a viable solution w/o introduction to `inlinemockmaker` as we can just swap the instance of `mockmaker` in `pluginregistry` the con is thats more of a systematic refactor than `inlinemockmaker#clearup()` approach and it reduces the cleanness of current code (we cant use final for `mockmaker` in `pluginregistry` anymore) btw this doesnt help avoid a new api `trackandclearupmocks()` in `mockitosession` ill leave this decision to you[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || great points thank you for taking the time to explain why do we need to keep track of specific mocks? can we just clear all? || oh you say we dont have to save created mocks in a list in `mocktracker`? i guess we can just clear all mocks especially considering there cant be multiple mock-tracking sessions open at the same time mocks created before the session is opened may be leakedremoving `mocktracker` can simply this change a lot especially we dont need global listeners ill update the change || actually i recall that the thought of tracking specific mocks stemmed from the thought that usually mocks have different lives eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different lives it would be nice if we can keep mocks created in beforeclass for later reusecurrent impl is half baked because there can only be one tracking session but i want to keep `cleanup(object)` signature (or we can have `cleanup(object)` instead so that we can clean up everything if object array is `null`) for `inlinemockmaker` just in case we want to support the case abovewith that said ill change `cleanup(object)` to `cleanup(object)` and use `null` array for clean up everything || oh besides if we just want to clear everything it doesnt seem natural to me to add the api to mockitosession maybe we can add an api to mockito? || thank you for considering! i want us to strive for simplicity ill think about the new api for mockito (or mockitoframework)if we have a static method like ""mockitoframework()clearallmocks()"" would it work for you? > eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different livesdo we know legit use cases for ""static"" mocks? it seems an anti-pattern || finally cleaned up all remains from previous change its a lot simpler now please take a looki can think of a case for static mocks where constructing a mock may be expensive and someone wants to reuse it across tests thats not an argument why static mocks have to be used though they can definitely reconstruct those mocks || reviewing || we are ready thank you @ttanxu and @timvdlippe for patience! this is the best pragmatic step to resolve the problem in the future perhaps we can avoid having the weak map of references in a first place@ttanxu i made some tweaks to tests documentation ive also renamed the method to ""clearmocks() -> clearinlinemocks()"" for consistency take a look and see if youre ok with this let us know and ill merge this nice work with this change!@timvdlippe i did some cosmetic changes please review if you want thanks! || i will review this on monday in the office thanks for the polish! || > test user can safely call clearinlinemocks() and clearmock() even when mock maker is not a inline mock maker@ttanxu great point! || im making the final tweaks based on the code review and im merging || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || "
166,1614,1619,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"new api to clean up all inline mocks after test in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with themfixes #1532 and #1533 i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it || # [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elh1) report> merging [#1619](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/af2d33be7fbfecad172cef4da2127b8d9a6fbe31?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `8571%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1619/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1619      +/-   ##+ coverage          8738%   8741%   +002%     - complexity          2435     2442       +7       files                301      301                lines               6278     6285       +7       branches             784      784              + hits                5486     5494       +8       misses               596      596              + partials             196      195       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6842% <100%> (+358%)` | `14 <2> (+3)` | :arrow_up: || [to/internal/framework/defaultmockitoframeworkjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9gcmftzxdvcmsuamf2yq) | `8947% <80%> (-1053%)` | `10 <5> (+5)` | || [ternal/util/reflection/genericmetadatasupportjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vr2vuzxjpy01ldgfkyxrhu3vwcg9ydc5qyxzh) | `8686% <0%> (-027%)` | `38% <0%> (ø)` | || [aultanswers/retrievegenericsfordefaultanswersjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxryawv2zudlbmvyawnzrm9yrgvmyxvsdefuc3dlcnmuamf2yq) | `9591% <0%> (-024%)` | `20% <0%> (-1%)` | || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9661% <0%> (ø)` | `40% <0%> (ø)` | :arrow_down: || [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7272% <0%> (ø)` | `5% <0%> (ø)` | :arrow_down: || [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `100% <0%> (+217%)` | `16% <0%> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elfooter) last update [af2d33b959cba4](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you for the pr! since this is changing / adding new public api i will review it too (many thanks to @timvdlippe for offering to review this!) ill commit to provide review by the end of this week || thanks to @mockitoguy just some context here i tried to avoid new api at first but `defaultmockitosession` seems (at least from tests) to be used within a thread and changing its default behavior to listen on events from all threads will break tests for multi-threading therefore i came up with the new api solutioni didnt know how much impact there would be to add a new method in `mockmaker` interface that requires everyone providing an implementation when they uprev their mockito to a version that has the new method but i have no clue how much work it could be if its too noisy maybe we can have a default impl (if only java 8+ is supported) or a brand new interface called `inlinemockmaker` to add that method i personally want to expose a chance to mock makers to clean up as we dont know how they handle the mapping from mock to its handler which may have other places that could cause memory leaks other than those 2 places we found we need better documentation on that but i have to admit im not good at writing api docs so ill defer to any of your suggestions in terms of documentationi hope the review wont later become a whole refactor of current implementation || i reviewed the implementation and most of it is really good it is also a very high quality pr thank you! curious are you facing this problem at g?i have a couple of concerns / design choices to discuss: a) can we make the fix more seamless? im not sure if this is possible but lets discuss goals: users dont have to remember to use trackandcleanupmocks() _when_ inline mocker is in use for example (brainstorming): 	- we introduce a new interface that inlinebytebuddymockmaker implements say: requirescleaningmocks 	- we expose a new method like frameworkgetplugins()getplugin(mockmackerclass) this way we can find out in runtime what mockmaker is in use 	- in mockito session we check if the mock maker is requirescleaningmocks 	- in session we call requirescleaningmockscleanupmock() b) mockmakercleanupmock() is an incompatible change so we cannot ship this pr in its current form mockmaker is typically provided at runtime from a different jar (example: dexmaker powermockito) i have a couple ideas but first lets explore a) great tests deep change in the internals of mockito thank you very much for the contribution!  || thanks for your review @mockitoguy dexmaker is incubating a feature in inline-dexmaker to create spies without creating new instances so that we can stub final members and we (android framework) found these mem leaks when using that i then found #1533 and reproduced #1614 that i confirmed it also happens with bytebuddy mock makers so i started the fix with help from @timvdlippe first of all i really didnt see a solution w/o tying mock lives with something and i think `mockitosession` is the most natural choice for the ""something"" so technically its already not transparent to properly use inline mock makers because sessions are necessary to make it work while its optional to use subclass mock makersi also first tried to avoid `trackandcleanupmocks()` the difficulty actually comes from the fact mockitolisteners are threadlocal before this change and its a requirement to track mocks generated from other threads because [`failontimeout`][failontimeout] basically runs tests in different threads than the thread used to run before and after before this change user can have multiple `defaultmockitosession` as long as they are in different threads (`threadsrunalltestshalfmanualtest` also verifies that behavior) and not interfering with each other however if we convert `defaultmockitosession` to have ""thread global"" influence `threadrunalltestshalfmanualtest` will fail because cross-threads mock cleanup will invalidate mocks created in tests running in a different threadi think i have a way (a bit hacky though) to make it work but i dont think its complication outweighs the new api (given that its already not transparent to users) it doesnt encourage clean tests in multi-threading scenario either imho however i can still put my thought here and let you decide if we should take it:- dont reject registration of global listeners if its from a different thread for the same type- only clean up mocks when the last `mocktracker` is unregisteredthen it basically treats the life of any `defaultmockitosession` as mock lives it doesnt allow user to precisely control mock lives but with some care users should still be able to avoid oom[failontimeout]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock() im not sure if the plugin way is still preferred over current change because for most dexmakers theyre still just implementing the basic `mockmaker` interface and nothing should break while they can choose to implement `inlinemockmaker` if clean up is necessary || just to be clear that im waiting for @mockitoguy s response on if we would like to go for that approach in exchange of removing trackandcleanupmocks() api just in case were waiting for each other and its going nowhere || as a sidenote: the refactoring with the new inlinemockmaker interface is :+1: for me :smile:  || hey @ttanxu so you youre saying that the approach i suggested in a) wouldnt work? || > oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock()great! ill review again this weekend || > as a sidenote: the refactoring with the new inlinemockmaker interface is 👍 for me 😄@timvdlippe im with you its a good idea to have a separate interface and stay compatible || hey @mockitoguy  what you suggested could solve the same issue that is solved by `inlinemockmaker` in current pr (the mockmaker contract breakage)`trackandcleanupmocks()` was introduced for other reason but could use different tech to remove its necessity i explained the detail in previous comments (mostly because of the multi-thread implementation of [`failontimeout`][1] in junit)[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || @ttanxu thank you for explanation im looking into it || my comment is short but i put a lot of consideration into this given all arguments i agree that a new api is the best way before we ship it i want to bounce one more idea what if we tie mockmaker with mockitosession? when the session completes it tears down its mockmaker/cleans up all mocks we could use threadlocal thoughts? || correct me if im wrongit seems youre suggesting one `mockmaker` per thread the critical part of this approach is the mock map in the inline mock maker needs to be a `threadlocal` which means mocks wont look have handlers tied to them in threads other than the thread where they were created and thus wont appear to be a mock and method invocations on it might trigger exceptions thats not likely a compatible change to existing use cases because if [`failontimeout`][1] is used befores and afters are executed in a different thread than the test methodif we still only have one `mockmaker` across all threads then the structure is pretty much the same as current change except that instead of calling `inlinemockmaker#clearup()` we just tear down the entire `mockmaker` im not sure if this is better than calling `clearup()` it does sound like a viable solution w/o introduction to `inlinemockmaker` as we can just swap the instance of `mockmaker` in `pluginregistry` the con is thats more of a systematic refactor than `inlinemockmaker#clearup()` approach and it reduces the cleanness of current code (we cant use final for `mockmaker` in `pluginregistry` anymore) btw this doesnt help avoid a new api `trackandclearupmocks()` in `mockitosession` ill leave this decision to you[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || great points thank you for taking the time to explain why do we need to keep track of specific mocks? can we just clear all? || oh you say we dont have to save created mocks in a list in `mocktracker`? i guess we can just clear all mocks especially considering there cant be multiple mock-tracking sessions open at the same time mocks created before the session is opened may be leakedremoving `mocktracker` can simply this change a lot especially we dont need global listeners ill update the change || actually i recall that the thought of tracking specific mocks stemmed from the thought that usually mocks have different lives eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different lives it would be nice if we can keep mocks created in beforeclass for later reusecurrent impl is half baked because there can only be one tracking session but i want to keep `cleanup(object)` signature (or we can have `cleanup(object)` instead so that we can clean up everything if object array is `null`) for `inlinemockmaker` just in case we want to support the case abovewith that said ill change `cleanup(object)` to `cleanup(object)` and use `null` array for clean up everything || oh besides if we just want to clear everything it doesnt seem natural to me to add the api to mockitosession maybe we can add an api to mockito? || thank you for considering! i want us to strive for simplicity ill think about the new api for mockito (or mockitoframework)if we have a static method like ""mockitoframework()clearallmocks()"" would it work for you? > eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different livesdo we know legit use cases for ""static"" mocks? it seems an anti-pattern || finally cleaned up all remains from previous change its a lot simpler now please take a looki can think of a case for static mocks where constructing a mock may be expensive and someone wants to reuse it across tests thats not an argument why static mocks have to be used though they can definitely reconstruct those mocks || reviewing || we are ready thank you @ttanxu and @timvdlippe for patience! this is the best pragmatic step to resolve the problem in the future perhaps we can avoid having the weak map of references in a first place@ttanxu i made some tweaks to tests documentation ive also renamed the method to ""clearmocks() -> clearinlinemocks()"" for consistency take a look and see if youre ok with this let us know and ill merge this nice work with this change!@timvdlippe i did some cosmetic changes please review if you want thanks! || i will review this on monday in the office thanks for the polish! || > test user can safely call clearinlinemocks() and clearmock() even when mock maker is not a inline mock maker@ttanxu great point! || im making the final tweaks based on the code review and im merging || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || "
167,1618,1620,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #1618 : fix strict stubbing profile serialization support when strict stubs profile is enabled mock serialization doesnt workthis pr fixes this problem # [codecov](https://codecovio/gh/mockito/mockito/pull/1620?srcpr&elh1) report> merging [#1620](https://codecovio/gh/mockito/mockito/pull/1620?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/34ebca1a8cd88465dd6e8ba395f78a6593522958?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1620/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1620?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1620   +/-   ##  coverage          8736%   8736%             complexity          2434     2434             files                300      300             lines               6259     6259             branches             777      777             hits                5468     5468             misses               595      595             partials             196      196```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1620?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `96% <ø> (ø)` | `12 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1620?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1620?srcpr&elfooter) last update [34ebca1ab8faae](https://codecovio/gh/mockito/mockito/pull/1620?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
168,1621,1624,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,handle terminal type var with bounds this pr aim to fix the issue described in #1621 the issue being that terminal type variable arguments were not looked up for their boundsfixes #1621 # [codecov](https://codecovio/gh/mockito/mockito/pull/1624?srcpr&elh1) report> merging [#1624](https://codecovio/gh/mockito/mockito/pull/1624?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/41c5606349e13a1e3e060ab8348b412662219d62?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `9545%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1624/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1624?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1624      +/-   ##+ coverage          8736%   8737%   +001%       complexity          2434     2434                files                300      301       +1       lines               6259     6275      +16       branches             777      783       +6     + hits                5468     5483      +15     - misses               595      596       +1       partials             196      196```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1624?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9661% <100%> (ø)` | `40 <0> (ø)` | :arrow_down: || [ternal/util/reflection/genericmetadatasupportjava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vr2vuzxjpy01ldgfkyxrhu3vwcg9ydc5qyxzh) | `8712% <100%> (+026%)` | `38 <0> (ø)` | :arrow_down: || [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7272% <100%> (ø)` | `5 <1> (ø)` | :arrow_down: || [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `9782% <875%> (-218%)` | `16 <0> (ø)` | || [/internal/junit/strictstubsrunnertestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9tdhjpy3rtdhvic1j1bm5lclrlc3rmaxn0zw5lci5qyxzh) | `100% <0%> (ø)` | `3% <0%> (ø)` | :arrow_down: || [ito/internal/listeners/stubbinglookupnotifierjava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9saxn0zw5lcnmvu3r1ymjpbmdmb29rdxbob3rpzmllci5qyxzh) | `9473% <0%> (ø)` | `3% <0%> (ø)` | :arrow_down: || [internal/stubbing/defaultanswers/returnsmocksjava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5ztw9ja3muamf2yq) | `100% <0%> (ø)` | `3% <0%> (-2%)` | :arrow_down: || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `100% <0%> (ø)` | `23% <0%> (ø)` | :arrow_down: || [aultanswers/retrievegenericsfordefaultanswersjava](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxryawv2zudlbmvyawnzrm9yrgvmyxvsdefuc3dlcnmuamf2yq) | `9591% <0%> (ø)` | `20% <0%> (?)` | ||  and [2 more](https://codecovio/gh/mockito/mockito/pull/1624/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1624?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1624?srcpr&elfooter) last update [41c56063f84cbf](https://codecovio/gh/mockito/mockito/pull/1624?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
169,1642,1644,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,verificationcollector to handle non-matching args and other assertions this fix for #1642 widens the catch in `verificationcollectorimpl` so that it will catch any `assertionerror` rather than just `mockitoassertionerror` in this way any comparison failures (such as the built-in argument comparison when running under junit) will also be collected rather than propagating through to the test frameworkthere are also two commits which are more cosmetic improvements to `verificationcollectorimpltest`:* rename `assertatleastonefailure()` to `assertexactlyonefailure()` (more accurate description of what it does)* change `assertfail()` to assertjs `assertbecauseexceptionwasnotthrown()` (produces better diagnostics in the case of a failure) # [codecov](https://codecovio/gh/mockito/mockito/pull/1644?srcpr&elh1) report> merging [#1644](https://codecovio/gh/mockito/mockito/pull/1644?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/b745b5d48e9c110fa419fd007b3159ff612b8643?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1644/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1644?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1644   +/-   ##  coverage          8738%   8738%             complexity          2434     2434             files                301      301             lines               6271     6271             branches             781      781             hits                5480     5480             misses               596      596             partials             195      195```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1644?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [kito/internal/junit/verificationcollectorimpljava](https://codecovio/gh/mockito/mockito/pull/1644/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9wzxjpzmljyxrpb25db2xszwn0b3jjbxbslmphdme) | `9722% <100%> (ø)` | `7 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1644?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1644?srcpr&elfooter) last update [b745b5dc7d5d8e](https://codecovio/gh/mockito/mockito/pull/1644?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
170,166,1665,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,new public api: invocationgetargumentsasmatchers() - new public api: invocationgetargumentsasmatchers() useful for advanced integrations such as mockito-scala- some internal refactorings that provide temporary help with mockito-scala integrationfixes #1664 # [codecov](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&elh1) report> merging [#1665](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/d6098a6bbdfbafd966a2078627a90d9ffbedc7ea?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `5714%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1665/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1665      +/-   ##- coverage          8739%   8735%   -004%     - complexity          2446     2447       +1       files                302      302                lines               6325     6329       +4       branches             787      787              + hits                5528     5529       +1     - misses               603      606       +3       partials             194      194```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [mockito/internal/invocation/invocationmatcherjava](https://codecovio/gh/mockito/mockito/pull/1665/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludm9jyxrpb25nyxrjagvylmphdme) | `9782% <100%> (ø)` | `25 <0> (ø)` | :arrow_down: || [/org/mockito/internal/reporting/printsettingsjava](https://codecovio/gh/mockito/mockito/pull/1665/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9yzxbvcnrpbmcvuhjpbnrtzxr0aw5ncy5qyxzh) | `100% <100%> (ø)` | `12 <1> (ø)` | :arrow_down: || [ito/internal/invocation/interceptedinvocationjava](https://codecovio/gh/mockito/mockito/pull/1665/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludgvyy2vwdgvksw52b2nhdglvbi5qyxzh) | `7826% <40%> (-508%)` | `26 <2> (+1)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&elfooter) last update [d6098a647f6792](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i agree that the pr has not a single purpose but given the changes were minimal i thought it wouldnt be a problemi can split it if you prefer so || @mockitoguy @timvdlippe hey guys thanks for your inputi took a different approach now and the amount of changes required seems lower the tldr story is that i kept the non-public-interface getters on `interceptedinvocation` and i added a new one (which is public) that exposes the arguments as matchers in this way we can delegate this transformation to the invocation which makes it more consistent across the code and also allows me to override said method to use my own matchers which have their own tostring so i can customise how they are printed without having to mess that much with the internals of mockito-coreplease let me know your thoughts || @mockitoguy ive improved the javadoc || restarted the build if it is happy ill merge! || @timvdlippe @mockitoguy sorry to bother guys but could you release this to maven central? or otherwise when is the next notable version coming out?cheers || travis should be on its way: https://githubcom/mockito/mockito/commit/8824e3e57daedce988c2cfc8d4c2b85bca488dbf || @timvdlippe much appreciated || the build failed though (#1682) and i am not sure if it has actually pushed the artifact to maven central || thank you! ||
171,1663,1667,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"improved ide experience for junit5 - visual comparison failure when junit5+mockito is used in modern ide (idea eclipse) we now show ""visual"" comparison failure pop-up for certain mockito exceptions (such as argumentsaredifferent)fixes #1663 # [codecov](https://codecovio/gh/mockito/mockito/pull/1667?srcpr&elh1) report> merging [#1667](https://codecovio/gh/mockito/mockito/pull/1667?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/a323b8132de6f6e1c29d738de245469f8ce009b0?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `913%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1667/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1667?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1667      +/-   ##- coverage          8736%   8734%   -002%       complexity          2442     2442                files                301      302       +1       lines               6293     6307      +14       branches             787      788       +1     + hits                5498     5509      +11     - misses               600      603       +3       partials             195      195```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1667?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [a/org/mockito/internal/junit/exceptionfactoryjava](https://codecovio/gh/mockito/mockito/pull/1667/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9fegnlchrpb25gywn0b3j5lmphdme) | `100% <100%> (ø)` | `3 <3> (-2)` | :arrow_down: || [exceptions/verification/argumentsaredifferentjava](https://codecovio/gh/mockito/mockito/pull/1667/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl3zlcmlmawnhdglvbi9bcmd1bwvudhnbcmveawzmzxjlbnquamf2yq) | `80% <100%> (+1333%)` | `2 <1> (+1)` | :arrow_up: || [verification/opentest4j/argumentsaredifferentjava](https://codecovio/gh/mockito/mockito/pull/1667/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl3zlcmlmawnhdglvbi9vcgvudgvzddrql0fyz3vtzw50c0fyzurpzmzlcmvudc5qyxzh) | `7777% <7777%> (ø)` | `2 <2> (?)` | || [ions/verification/junit/argumentsaredifferentjava](https://codecovio/gh/mockito/mockito/pull/1667/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl3zlcmlmawnhdglvbi9qdw5pdc9bcmd1bwvudhnbcmveawzmzxjlbnquamf2yq) | `6666% <0%> (-1112%)` | `1% <0%> (-1%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1667?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1667?srcpr&elfooter) last update [a323b8142f802e](https://codecovio/gh/mockito/mockito/pull/1667?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > do you have any instructions on how i can test this pr to verify the difference in ide behavior?* create a simple junit 5 test that fails with `argumentsaredifferent`:````javapackage mytestimport static orgmockitomockitomockimport static orgmockitomockitoverifyimport orgjunitjupiterapitestpublic class test {    @suppresswarnings(""unchecked"")    @test    public void test() {        comparable<object> c  (comparable<object>)mock(comparableclass)        ccompareto(""test"")                verify(c)compareto(""somethingelse"")    }}````* make sure that the snapshot version of mockito is on your classpath* make sure junit 5 is on the test classpath if youre using mockitos workspace you can do this with the following dependency declarations:    * `testcompile librariesjunitjupiterapi`    * `testruntime librariesjunitjupiterengine`* run the test in the ide using the junit 5 runner* in eclipse you should get the following:![argumentsaredifferent](https://user-imagesgithubusercontentcom/7224087/54569871-57966000-4a2c-11e9-8c65-d0204f46fa91png)im not sure how it looks in idea or android studio but im sure its similar || this implementation is not perfect under eclipse if youre using the junit 4 but happen to have opentest on the classpath then youll use the visual diff capability again this is because the junit 4 runner in eclipse doesnt try and catch/handle `orgopentest4jassertionfailederror` im not sure of the behaviour in ideathe only way around that would be for `exceptionfactorycreateargumentsaredifferent()` to examine the caller stack to see if it has been invoked from a junit 4 or a junit 5 context and throw the most appropriate exception this would complicate the implementation and make it run slower too it would be better imo if the junit 4 runner in the ides were made aware of the opentest4j exception and could handle it too || > this implementation is not perfect under eclipse if youre using the junit 4 but happen to have opentest on the classpath then youll use the visual diff capability againwhy do you call this behavior imperfect? || > > this implementation is not perfect under eclipse if youre using the junit 4 but happen to have opentest on the classpath then youll use the visual diff capability again>> why do you call this behavior imperfect?sorry it was a typo it should have read "" then youll *lose* the visual diff capability again"" perfect behaviour in my mind would be that it determined which runner was actually running (as opposed to merely being on the classpath) and throw the exception that was appropriate for that runner but i think this is an edge case that probably isnt worth the extra complexity not perfect but good enough || > this looks great thank you!!!> > can you do 2 more checks for us?> > * does it work with idea too?this will be difficult for me to do as i dont have idea installed but i cant see why it wouldnt work> * can you build the project and inspect all pom files (they should be somewhere under ""build"" dirs) and ensure that we dont ship the new dependency?will do i did note that i need to make sure that an optional import-package is added to the manifestmf too || > this will be difficult for me to do as i dont have idea installedgrab it from jetbrains site idea community/open source edition is free and easy to install  || > sorry it was a typogot it! thank you for confirming yes the ideal behavior is that we get clean visual diff for all ides lets move on it seems that having opentest4j + junit4 on classpath is an edge case also i would hope that eclipse will catch up and start handling opentest4j exceptions@timvdlippe this is an interesting argument for our discussion about adding hard dependency on opentest4j if we add such dependency today then eclipse + junit4 + mockito (with opentest4j) combo loses visual diff feature (unless we write code to detect the runner - a fragile complexity better avoided) just an fyi i dont mind to restart the discussionthanks guys!!! || > if we add such dependency today then eclipse + junit4 + mockito (with opentest4j) combo loses visual diff feature (unless we write code to detect the runner - a fragile complexity better avoided) i am absolutely fine with not adding the hard-dependency :smile:  || > got it! thank you for confirming yes the ideal behavior is that we get clean visual diff for all ides lets move on👍 > it seems that having opentest4j + junit4 on classpath is an edge case also i would hope that eclipse will catch up and start handling opentest4j exceptions> just to clarify (in case it wasnt clear): the problem is not merely having both opentest4j and junit4 on the class path junit 5 and opentest4j have been deliberately designed so that they can happily co-exist with junit 4 on the same classpaththe problem (in eclipse at least) is if you mix the junit 4 _runner_ with opentest4j exceptions (which this current pr will do if you have opentest4j on the classpath) - the visual diff will not work because eclipses implementation of the junit 4 runner special-cases the junit 3 & 4 `comparisonfailure` but not the opentest4j `assertionfailederror` (conversely eclipses junit 5 runner handles only `assertionfailederror` and not `comparisonfailure`) if you use the junit 5 runner in eclipse the visual diff will work even if junit 4 is on the classpath> @timvdlippe this is an interesting argument for our discussion about adding hard dependency on opentest4j if we add such dependency today then eclipse + junit4 + mockito (with opentest4j) combo loses visual diff feature (unless we write code to detect the runner - a fragile complexity better avoided) just an fyi i dont mind to restart the discussionactually the issue of losing the visual diff doesnt have anything to do with whether the dependency on opentest4j is hard or soft it has more to do with how the decision is made about which exception to throw the above problem would still occur even if we made the dependency on opentest4j a hard one unless we did the same stack trace trick (ie check which runner invoked us and throw the appropriate exception)> thanks guys!!!welcome! honoured to be able to meaningfully contribute to such a popular project! || idea verification:![idea opentest4j](https://user-imagesgithubusercontentcom/7224087/54690076-93d2d900-4b70-11e9-9ca1-313cf98be87epng)note the ""click to see difference"" link in the error output and the visual diff || could you maybe add a new subproject which has some sample tests with instructions on how to inspect the diff? that would ease future development so that we can check if regressed on that thanks for all the hard work good progress! || > > * can you build the project and inspect all pom files (they should be somewhere under ""build"" dirs) and ensure that we dont ship the new dependency?> > will do i did note that i need to make sure that an optional import-package is added to the manifestmf tooi did this - i can confirm that opentest4j does not appear as a dependency in any of the generated pom filesi also added the manifest change: `orgopentest4j` is now an optional import to the osgi manifest so that it would work properly in an osgi environment || > could you maybe add a new subproject which has some sample tests with instructions on how to inspect the diff? that would ease future development so that we can check if regressed on that thanks for all the hard work good progress!ill sleep on it but to be honest my initial thoughts are that i feel this is overreaching a little i think the mockito tests should focus on the fact that it throws `assertionfailederror` correctly which i think they already do added to which im not sure i have the timeperhaps this could be the subject of a separate issue/pr which i can get to if i find time or else someone else can take it on || > could you maybe add a new subproject which has some sample tests with instructions on how to inspect the diff? that would ease future development so that we can check if regressed on that thanks for all the hard work good progress!i suggest we move on we wont be able to automatically test how ides integrate with xunit runners manual tests will be forgotten we never had tests for this feature and it did not regress eventual regression will not be a blocker if we encounter one then we can prioritize a solution || i didnt count it as a blocker more as a future improvement i am okay with merging as-is || "
172,1599,1672,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,report initialization failures per test method prior to this commit `defaultinternalrunner` threw an exception when`mockitoannotationsinitmocks()` failed from the overridden`withbefores` method instead it now returns a `statement` that isresponsible for initializing potential exceptions are then handled byjunit regardless whether version 412 or 413-beta-2 is used insteadof reporting a class-level error junit will now report a failure foreach test method in such test classesrelated issue: junit-team/junit4#1599 - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/2x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [ ] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/1672?srcpr&elh1) report> merging [#1672](https://codecovio/gh/mockito/mockito/pull/1672?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/7c8aae0055b082b4cffb2739e4145b023d1603e9?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1672/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1672?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1672      +/-   ##+ coverage          8738%   8739%   +001%       complexity          2446     2446                files                302      302                lines               6326     6325       -1       branches             788      787       -1       hits                5528     5528                misses               603      603              + partials             195      194       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1672?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ockito/internal/runners/defaultinternalrunnerjava](https://codecovio/gh/mockito/mockito/pull/1672/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9ydw5uzxjzl0rlzmf1bhrjbnrlcm5hbfj1bm5lci5qyxzh) | `100% <100%> (+322%)` | `4 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1672?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1672?srcpr&elfooter) last update [7c8aae049e6311](https://codecovio/gh/mockito/mockito/pull/1672?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
173,1692,1693,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,"make `mockitonotextensible` service-loadable this way error prone can find the plugin when `mockito-errorprone` is added to the annotation processor classpathfixes #1692 nb: in this pr i chose to use [google autoservice](https://githubcom/google/auto/tree/master/service) as is customary for error prone plugins if preferred i can instead introduce an explicit ` meta-inf/services/comgoogleerrorpronebugpatternsbugchecker` file || @timvdlippe sure! will have a look at whats the simplest way to achieve this || # [codecov](https://codecovio/gh/mockito/mockito/pull/1693?srcpr&elh1) report> merging [#1693](https://codecovio/gh/mockito/mockito/pull/1693?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/881e09ebd33d78e9c226afa37548bf043fe82b4b?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1693/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1693?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1693   +/-   ##  coverage          1226%   1226%             complexity           318      318             files                307      307             lines               6475     6475             branches             811      811             hits                 794      794             misses              5553     5553             partials             128      128```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1693?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/errorprone/bugpatterns/mockitonotextensiblejava](https://codecovio/gh/mockito/mockito/pull/1693/diff?srcpr&eltree#diff-c3vichjvamvjdhmvzxjyb3jwcm9uzs9zcmmvbwfpbi9qyxzhl29yzy9tb2nraxrvl2vycm9ychjvbmuvynvncgf0dgvybnmvtw9ja2l0b05vdev4dgvuc2libguuamf2yq) | `0% <ø> (ø)` | `0 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1693?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1693?srcpr&elfooter) last update [881e09ef8b665e](https://codecovio/gh/mockito/mockito/pull/1693?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @stephan202 were you able to take a look at this? i wanted to fix the same in #1690 || @timvdlippe i considered several approaches and concluded that the best way forward would be to see whether/how support for this kind of ""real""/""full"" test can be added to error prones `compilationtesthelper` and `bugcheckerrefactoringtesthelper` classes the idea would be that they get another static factory method which relies on service loading rather than an explicitly provided checker class this would also benefit other non-google ep users such as @ubers [nullaway](https://githubcom/uber/nullaway)but then ""life happened"" so i didnt yet get to the point of actually trying that implementation note that even if it would work this pr would be blocked on those changes getting merged and released as part of error prone (but i assume you could help getting the changes reviewed by the ep team)so that leaves the question of timelines i can try (but wont commit) to spend some time on this later this week likely in the weekend alternatively if you agree with the suggested solution you could have a crack at an error prone pr and id be happy to be the first reviewerwrt whether this pr should be blocked on all that: i have manually tested the changes in this pr so functionally we could just merge this for now the approach taken here is [exactly](https://githubcom/uber/nullaway/blob/c3979b4241f80411dbba6aac3ff653acbb88d00b/nullaway/src/main/java/com/uber/nullaway/nullawayjava#l142) what nullaway does (but ""just merging"" is not in the spirit of the mockito project so i totally undestand not wanting to go that route)  || lets merge it for now and hope we dont regress in the future || "
174,1542,1701,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of #1556 with the tests fixed and implementation rebased on `release/2x`fixes #1542  
175,1556,1701,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of #1556 with the tests fixed and implementation rebased on `release/2x`fixes #1542  
176,1623,1708,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1623 : rename toolittleactualinvocations rename the exception toolittleactualinvocations totoofewactualinvocations as this is more correct english as thisexception is public api we rename by subclassing and deprecating theoriginal rename all tests and internal methods that were referencingthe old name by aligning with the new namecheck list - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/2x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [ ] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/1708?srcpr&elh1) report> merging [#1708](https://codecovio/gh/mockito/mockito/pull/1708?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/237e915e76a42292965dbc737c61790c32cf7735?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1708/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1708?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1708      +/-   ##+ coverage          8652%   8653%   +<01%     - complexity          2480     2481       +1       files                308      309       +1       lines               6525     6527       +2       branches             818      818              + hits                5646     5648       +2       misses               681      681                partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1708?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [tions/verification/toolittleactualinvocationsjava](https://codecovio/gh/mockito/mockito/pull/1708/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl3zlcmlmawnhdglvbi9ub29maxr0bgvby3r1ywxjbnzvy2f0aw9ucy5qyxzh) | `100% <ø> (ø)` | `1 <0> (ø)` | :arrow_down: || [ceptions/verification/toofewactualinvocationsjava](https://codecovio/gh/mockito/mockito/pull/1708/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl3zlcmlmawnhdglvbi9ub29gzxdby3r1ywxjbnzvy2f0aw9ucy5qyxzh) | `100% <100%> (ø)` | `1 <1> (?)` | || [n/checkers/atleastxnumberofinvocationscheckerjava](https://codecovio/gh/mockito/mockito/pull/1708/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vy2hly2tlcnmvqxrmzwfzdfhodw1izxjpzkludm9jyxrpb25zq2hly2tlci5qyxzh) | `9333% <100%> (ø)` | `4 <0> (ø)` | :arrow_down: || [ification/checkers/numberofinvocationscheckerjava](https://codecovio/gh/mockito/mockito/pull/1708/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vy2hly2tlcnmvtnvtymvyt2zjbnzvy2f0aw9uc0nozwnrzxiuamf2yq) | `100% <100%> (ø)` | `11 <0> (ø)` | :arrow_down: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1708/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9323% <100%> (ø)` | `91 <2> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1708?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1708?srcpr&elfooter) last update [237e915df02cef](https://codecovio/gh/mockito/mockito/pull/1708?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
177,1713,1714,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1713: fix typo in mockitojava javadoc i was confused and tried to look for `verifynomoreinvocations` when i came across this javadocshopefully this prevents further confusion # [codecov](https://codecovio/gh/mockito/mockito/pull/1714?srcpr&elh1) report> merging [#1714](https://codecovio/gh/mockito/mockito/pull/1714?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/ac012350f3464e6a65451baf2c684730348810c1?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1714/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1714?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1714   +/-   ##  coverage          8653%   8653%             complexity          2481     2481             files                309      309             lines               6527     6527             branches             818      818             hits                5648     5648             misses               681      681             partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1714?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9666% <ø> (ø)` | `41 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1714?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1714?srcpr&elfooter) last update [ac0123595bf074](https://codecovio/gh/mockito/mockito/pull/1714?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
178,298,1715,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,fixes #298: replaces objenesis references from stubbing classes with plugin equivalents this enables the ios mockito plugin(https://githubcom/google/j2objc/tree/master/testing/mockito) to upgrade to v2 # [codecov](https://codecovio/gh/mockito/mockito/pull/1715?srcpr&elh1) report> merging [#1715](https://codecovio/gh/mockito/mockito/pull/1715?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/18f06889329e23d919005f4cb925f5a35e3e25a6?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1715/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1715?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1715      +/-   ##+ coverage          8653%   8653%   +<01%       complexity          2481     2481                files                309      309                lines               6527     6528       +1       branches             818      818              + hits                5648     5649       +1       misses               681      681                partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1715?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `9333% <100%> (ø)` | `20 <0> (ø)` | :arrow_down: || [va/org/mockito/internal/stubbing/basestubbingjava](https://codecovio/gh/mockito/mockito/pull/1715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9cyxnlu3r1ymjpbmcuamf2yq) | `9393% <100%> (+018%)` | `18 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1715?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1715?srcpr&elfooter) last update [18f06886b8a4a0](https://codecovio/gh/mockito/mockito/pull/1715?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || please bump the maven version to 2271 so j2objcs build can reference this change || should i also objenesis references should be moved out of core mockito? i did the minimum to keep the patch small but a more complete change would: 1 move [objenesisinstantiator](https://githubcom/mockito/mockito/blob/release/2x/src/main/java/org/mockito/internal/creation/instance/objenesisinstantiatorjava#l11) to a bytebuddy-like subpackage such as orgmockitointernalcreationinstanceobjenesis and 1 initialize [defaultinstantiatorprovider](https://githubcom/mockito/mockito/blob/release/2x/src/main/java/org/mockito/internal/creation/instance/defaultinstantiatorproviderjava#l13) so it uses the plugin api to define its defaultthat small re-org plus the new unit test should make it much more obvious what is core and what belongs in bytecode-based mockito implementations || > should i also objenesis references should be moved out of core mockito?lets put that in a follow up issue/pr and keep this pr small i want to get this patch in but want to have the regression test in here now that way if we do decide to do the follow up pr we can refactor safely || sounds good i should have the test done later today its a little more involved than nojunitdependenciestest because the default plugins are getting loaded ill see if a set of stub plugins can be substituted (may be useful for future tests) and if not update the tests classloader to not test the list of default plugin classes || test added its not perfect since defaultmockitoplugins has bytebuddy plugin names hardwired so classes that trigger that class loading needed to be removed to fully test plugin loading code wed have to make defaultmockitopluginsdefault_plugins settable so a set of plugin stub classes can be substituted this seems like a useful but bigger change that you likely want with this pr || i think this test is fine for now thanks for adding it! ||
179,1717,1718,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,fixes #1717 : configure the methodvisitor for java 11 compatibility im looking into adding a unit test if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java 11 this should fix #1717 || # [codecov](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&elh1) report> merging [#1718](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/71603d46ebd8d1e35a55e4d54651b77ae46ccb49?srcpr&eldesc) will **decrease** coverage by `085%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1718/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1718      +/-   ##- coverage          8653%   8567%   -086%     + complexity          2481     2477       -4       files                309      309                lines               6528     6528                branches             818      818              - hits                5649     5593      -56     - misses               681      747      +66     + partials             198      188      -10```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1718/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `7816% <100%> (-986%)` | `26 <0> (-1)` | || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1718/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `2105% <0%> (-50%)` | `4% <0%> (-2%)` | || [ito/internal/creation/bytebuddy/modulehandlerjava](https://codecovio/gh/mockito/mockito/pull/1718/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9kdwxlsgfuzgxlci5qyxzh) | `961% <0%> (-1731%)` | `2% <0%> (ø)` | || [ternal/exceptions/stacktrace/stacktracefilterjava](https://codecovio/gh/mockito/mockito/pull/1718/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl3n0ywnrdhjhy2uvu3rhy2tucmfjzuzpbhrlci5qyxzh) | `6585% <0%> (-122%)` | `8% <0%> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&elfooter) last update [71603d4a626b1c](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ive added a unit test thanks to [an article](https://wwwjavacodegeekscom/2018/08/hands-on-java-constantdynamichtml) written by @raphw of course || could you update the pr to use `openedclassreaderasm_api` this way if byte buddys experimental feature is used mockito is capable of processing class files || @raphw done ive also rebased on `release/2x` || lgtm || i will merge this and publish a new version ||
180,1716,1723,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,change implementation of exceptionfactory to explicitly test for dependent classes the original implementation of conditional opentest4j support (#1667) relied on some implicit behaviour of the java classloader to generate and catch the exception at the right time it seems that this behaviour is not always exactly replicated in all environments - for example in #1716 where mockito was being used in an instrumentation test that was being run on an android emulatorthe new implementation is a bit more direct in how it tests for the dependent classes the existing test cases still pass and @matejdro confirmed that this fixed his problemfixes #1716 # [codecov](https://codecovio/gh/mockito/mockito/pull/1723?srcpr&elh1) report> merging [#1723](https://codecovio/gh/mockito/mockito/pull/1723?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/220494473031298300a4c47c247c8b778cc39164?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1723/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1723?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1723      +/-   ##+ coverage          8653%   8653%   +<01%       complexity          2481     2481                files                309      309                lines               6528     6530       +2       branches             818      818              + hits                5649     5651       +2       misses               681      681                partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1723?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [a/org/mockito/internal/junit/exceptionfactoryjava](https://codecovio/gh/mockito/mockito/pull/1723/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9fegnlchrpb25gywn0b3j5lmphdme) | `100% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1723?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1723?srcpr&elfooter) last update [2204944f3fc2fe](https://codecovio/gh/mockito/mockito/pull/1723?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i just want to note that without this patch all `mockito-android` builds after `2251` are unusable without `opentest4j` installed as a workaround so maybe you could create patch release for just android? not sure what the timeline for 3x is || @matejdro i am aiming for releasing mockito 3 today || okay never mind then :-) || whats happened with this pr - did it ever get merged into 3x or into 2x? it doesnt seem to have been merged as far as i can see are you waiting for me to rebase it onto 3x and resubmit? || this should be rebased onto 3x: https://githubcom/mockito/mockito/pull/1723#pullrequestreview-246417736 || im so sorry i didnt realise you were waiting for me to do the rebase ill get it fine in the next 14 hours or so || no problem at all dont rush! we have plenty of time to get this in there is no deadline work on this whenever you have the time to do so dont force it || ok rebased it onto `release/3x` and changed the base branch of my pull requesti also changed it to use lambdas per @tlubzs suggestion ||
181,977,1733,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,verifynointeractions guarantees no interactions with mock with #995 i provided a fix to #977 and #989however that pr targeted `master` which eventually became `old-3x` and its code didnt make it into `release/3x`#977 and #989 should be reopenedi have back-ported that pr to target `release/3x``verifyzerointeractions` is marked as `@deprecated` and a new `verifynointeractions` is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if/when this code will ship javadocs contain a placeholder `since 3xx` # [codecov](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&elh1) report> merging [#1733](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/08203aa61d1239e244340d75f2b8ede54b1eaab5?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `9696%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1733/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1733      +/-   ##+ coverage          8653%   8658%   +005%     - complexity          2481     2491      +10       files                309      310       +1       lines               6528     6561      +33       branches             818      822       +4     + hits                5649     5681      +32     - misses               681      682       +1       partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <100%> (+01%)` | `42 <1> (+1)` | :arrow_up: || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `9814% <100%> (+025%)` | `40 <3> (+3)` | :arrow_up: || [src/main/java/org/mockito/bddmockitojava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9crernb2nraxrvlmphdme) | `8823% <100%> (+048%)` | `10 <0> (ø)` | :arrow_down: || [internal/verification/verificationmodefactoryjava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9utw9kzuzhy3rvcnkuamf2yq) | `909% <100%> (+09%)` | `10 <1> (+1)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9351% <100%> (+028%)` | `93 <2> (+2)` | :arrow_up: || [/mockito/internal/verification/nointeractionsjava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vtm9jbnrlcmfjdglvbnmuamf2yq) | `8333% <8333%> (ø)` | `3 <3> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&elfooter) last update [08203aa36250bb](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for this and good catch! i still have to release mockito 3 but wasnt able to because of issues with our release mechanism i will try that next week after which we can merge this pr 😄  || mockito 3 was released so i am merging :tada:  ||
182,989,1733,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,verifynointeractions guarantees no interactions with mock with #995 i provided a fix to #977 and #989however that pr targeted `master` which eventually became `old-3x` and its code didnt make it into `release/3x`#977 and #989 should be reopenedi have back-ported that pr to target `release/3x``verifyzerointeractions` is marked as `@deprecated` and a new `verifynointeractions` is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if/when this code will ship javadocs contain a placeholder `since 3xx` # [codecov](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&elh1) report> merging [#1733](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/08203aa61d1239e244340d75f2b8ede54b1eaab5?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `9696%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1733/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1733      +/-   ##+ coverage          8653%   8658%   +005%     - complexity          2481     2491      +10       files                309      310       +1       lines               6528     6561      +33       branches             818      822       +4     + hits                5649     5681      +32     - misses               681      682       +1       partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <100%> (+01%)` | `42 <1> (+1)` | :arrow_up: || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `9814% <100%> (+025%)` | `40 <3> (+3)` | :arrow_up: || [src/main/java/org/mockito/bddmockitojava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9crernb2nraxrvlmphdme) | `8823% <100%> (+048%)` | `10 <0> (ø)` | :arrow_down: || [internal/verification/verificationmodefactoryjava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9utw9kzuzhy3rvcnkuamf2yq) | `909% <100%> (+09%)` | `10 <1> (+1)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9351% <100%> (+028%)` | `93 <2> (+2)` | :arrow_up: || [/mockito/internal/verification/nointeractionsjava](https://codecovio/gh/mockito/mockito/pull/1733/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vtm9jbnrlcmfjdglvbnmuamf2yq) | `8333% <8333%> (ø)` | `3 <3> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&elfooter) last update [08203aa36250bb](https://codecovio/gh/mockito/mockito/pull/1733?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for this and good catch! i still have to release mockito 3 but wasnt able to because of issues with our release mechanism i will try that next week after which we can merge this pr 😄  || mockito 3 was released so i am merging :tada:  ||
183,1743,1745,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1743: clarify default answer in 300 api changes postponed to 400 default answer has not been changed in 300 oh travis is deeply unhappy i would need to investigate that 😢  || please rebase this pr to fix the travis issue || # [codecov](https://codecovio/gh/mockito/mockito/pull/1745?srcpr&elh1) report> merging [#1745](https://codecovio/gh/mockito/mockito/pull/1745?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/1ec2bed8b1d901a51c6b14afc4b34374070a942d?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1745/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1745?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1745   +/-   ##  coverage          8658%   8658%             complexity          2491     2491             files                310      310             lines               6559     6559             branches             822      822             hits                5679     5679             misses               682      682             partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1745?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <ø> (ø)` | `42 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1745?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1745?srcpr&elfooter) last update [1ec2bed4ec17e3](https://codecovio/gh/mockito/mockito/pull/1745?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
184,1513,1760,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,minor bug fixes fixes #1747: removed typofixes #1513: added missing tag to fix javadocsupersedes and closes #1748 # [codecov](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&elh1) report> merging [#1760](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/7041ad81250c6512d525a84add039cd2dd3441b4?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1760/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1760   +/-   ##  coverage          8658%   8658%             complexity          2491     2491             files                310      310             lines               6559     6559             branches             822      822             hits                5679     5679             misses               682      682             partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1760/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <ø> (ø)` | `42 <0> (ø)` | :arrow_down: || [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1760/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6842% <100%> (ø)` | `14 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&elfooter) last update [7041ad86f3f388](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
185,1747,1760,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,minor bug fixes fixes #1747: removed typofixes #1513: added missing tag to fix javadocsupersedes and closes #1748 # [codecov](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&elh1) report> merging [#1760](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/7041ad81250c6512d525a84add039cd2dd3441b4?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1760/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1760   +/-   ##  coverage          8658%   8658%             complexity          2491     2491             files                310      310             lines               6559     6559             branches             822      822             hits                5679     5679             misses               682      682             partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1760/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <ø> (ø)` | `42 <0> (ø)` | :arrow_down: || [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1760/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6842% <100%> (ø)` | `14 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&elfooter) last update [7041ad86f3f388](https://codecovio/gh/mockito/mockito/pull/1760?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
186,1758,1762,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,fixes #1758: method generictypeextractor#findgenericinterface always … …returns first interface # [codecov](https://codecovio/gh/mockito/mockito/pull/1762?srcpr&elh1) report> merging [#1762](https://codecovio/gh/mockito/mockito/pull/1762?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/88117f29b8e6b385a478ff2afee9a8624bf957c8?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1762/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1762?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1762   +/-   ##  coverage          8658%   8658%             complexity          2491     2491             files                310      310             lines               6559     6559             branches             822      822             hits                5679     5679             misses               682      682             partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1762?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [internal/util/reflection/generictypeextractorjava](https://codecovio/gh/mockito/mockito/pull/1762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vr2vuzxjpy1r5cgvfehryywn0b3iuamf2yq) | `9166% <100%> (ø)` | `11 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1762?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1762?srcpr&elfooter) last update [88117f270737d2](https://codecovio/gh/mockito/mockito/pull/1762?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
187,1769,1773,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #1769: clarify default strict stubbing behaviour in 300 similar to https://githubcom/mockito/mockito/pull/1745 as requested by @timvdlippe in https://githubcom/mockito/mockito/issues/1769closes #1769 # [codecov](https://codecovio/gh/mockito/mockito/pull/1773?srcpr&elh1) report> merging [#1773](https://codecovio/gh/mockito/mockito/pull/1773?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/25119e12946d5e79a003b4e778436a647a2faef4?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1773/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1773?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1773   +/-   ##  coverage          8658%   8658%             complexity          2491     2491             files                310      310             lines               6559     6559             branches             822      822             hits                5679     5679             misses               682      682             partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1773?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/quality/strictnessjava](https://codecovio/gh/mockito/mockito/pull/1773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9xdwfsaxr5l1n0cmljdg5lc3muamf2yq) | `100% <ø> (ø)` | `1 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1773?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1773?srcpr&elfooter) last update [25119e18f2097c](https://codecovio/gh/mockito/mockito/pull/1773?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
188,178,1781,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1780: close file handle to avoid a file-handle-leak fix a small file-handle-leak which pops up when running tests with [file-leak-detector](https://file-leak-detectorkohsukeorg/) fixes #1780 good catch this always gets me as the class name is *file ||
189,1780,1781,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1780: close file handle to avoid a file-handle-leak fix a small file-handle-leak which pops up when running tests with [file-leak-detector](https://file-leak-detectorkohsukeorg/) fixes #1780 good catch this always gets me as the class name is *file ||
190,1786,1787,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"fixes #1786 : clarify differences between timeout and after tries to improve the javadoc for `timeout` to differentiate it from `after` directly in the first sentence # [codecov](https://codecovio/gh/mockito/mockito/pull/1787?srcpr&elh1) report> merging [#1787](https://codecovio/gh/mockito/mockito/pull/1787?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/16328dbe6562056d382cd5aa7cba0d6695de9665?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1787/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1787?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1787   +/-   ##  coverage          8658%   8658%             complexity          2491     2491             files                310      310             lines               6562     6562             branches             822      822             hits                5682     5682             misses               682      682             partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1787?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1787/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <ø> (ø)` | `42 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1787?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1787?srcpr&elfooter) last update [16328db2053144](https://codecovio/gh/mockito/mockito/pull/1787?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || the root cause can be fixed by pr #936 ""unification of timeout() and after() api"" || "
191,1630,1788,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,upgraded junit jupiter 511 -> 542 we need higher version of junit jupiter to reproduce and fix #1630added a test to enhance coverage # [codecov](https://codecovio/gh/mockito/mockito/pull/1788?srcpr&elh1) report> merging [#1788](https://codecovio/gh/mockito/mockito/pull/1788?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/16328dbe6562056d382cd5aa7cba0d6695de9665?srcpr&eldesc) will **decrease** coverage by `062%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1788/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1788?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1788      +/-   ##- coverage          8658%   8596%   -063%     + complexity          2491     2480      -11       files                310      310                lines               6562     6562                branches             822      822              - hits                5682     5641      -41     - misses               682      723      +41       partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1788?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/errorprone/bugpatterns/mockitointernalusagejava](https://codecovio/gh/mockito/mockito/pull/1788/diff?srcpr&eltree#diff-c3vichjvamvjdhmvzxjyb3jwcm9uzs9zcmmvbwfpbi9qyxzhl29yzy9tb2nraxrvl2vycm9ychjvbmuvynvncgf0dgvybnmvtw9ja2l0b0ludgvybmfsvxnhz2uuamf2yq) | `0% <0%> (-100%)` | `0% <0%> (-6%)` | || [o/errorprone/bugpatterns/mockitonotextensiblejava](https://codecovio/gh/mockito/mockito/pull/1788/diff?srcpr&eltree#diff-c3vichjvamvjdhmvzxjyb3jwcm9uzs9zcmmvbwfpbi9qyxzhl29yzy9tb2nraxrvl2vycm9ychjvbmuvynvncgf0dgvybnmvtw9ja2l0b05vdev4dgvuc2libguuamf2yq) | `0% <0%> (-100%)` | `0% <0%> (-4%)` | || [ternal/exceptions/stacktrace/stacktracefilterjava](https://codecovio/gh/mockito/mockito/pull/1788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl3n0ywnrdhjhy2uvu3rhy2tucmfjzuzpbhrlci5qyxzh) | `3902% <0%> (-3903%)` | `8% <0%> (ø)` | || [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `838% <0%> (-423%)` | `27% <0%> (ø)` | || [ito/internal/creation/bytebuddy/modulehandlerjava](https://codecovio/gh/mockito/mockito/pull/1788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9kdwxlsgfuzgxlci5qyxzh) | `2307% <0%> (-385%)` | `2% <0%> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1788?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1788?srcpr&elfooter) last update [16328db939ab5c](https://codecovio/gh/mockito/mockito/pull/1788?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || coverage drop is a red herring i verified the new test runs as part of ci merging! ||
192,1630,1789,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixed junit jupiter parallel issue fixes #1630this fix improves mockito junit jupiter extension however it does not completely resolve all kinds of parallel issues when nested test classes are used ill open a separate ticket for it # [codecov](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&elh1) report> merging [#1789](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/214d4652aa1971cb554c434b0ac13b376aea33a7?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1789/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1789      +/-   ##+ coverage          8658%   8659%   +<01%     - complexity          2491     2492       +1       files                310      310                lines               6562     6566       +4       branches             822      823       +1     + hits                5682     5686       +4       misses               682      682                partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [va/org/mockito/junit/jupiter/mockitoextensionjava](https://codecovio/gh/mockito/mockito/pull/1789/diff?srcpr&eltree#diff-c3vichjvamvjdhmvanvuaxqtanvwaxrlci9zcmmvbwfpbi9qyxzhl29yzy9tb2nraxrvl2p1bml0l2p1cgl0zxivtw9ja2l0b0v4dgvuc2lvbi5qyxzh) | `9148% <100%> (+079%)` | `14 <0> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&elfooter) last update [214d4655ed8a07](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || this is much nicer thank you!!! ||
193,1791,1798,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fix typo in the wiki link fixes #1791check list - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&elh1) report> merging [#1798](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/ded29efbfbd7be6e3a0a2fdae07d370d099be625?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1798/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&eltree)```diff@@              coverage diff              @@##             release/3x   #1798   +/-   ##  coverage           866%   866%             complexity          2494    2494             files                310     310             lines               6564    6564             branches             821     821             hits                5685    5685             misses               682     682             partials             197     197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1798/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <ø> (ø)` | `42 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&elfooter) last update [ded29ef1250bba](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
194,1587,1810,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"revert ""fixes #1587 : remove unnecessary loop from injectingannotationengine"" reverts mockito/mockito#1588related to #1631 heres a pseudo code to describe the issues around this issue# before 22315:	```while (clazz ! objectclazz) {	val mocks  aggregatespyormockfields(clazzgetmockfields())  val fields  aggregateinjectmocksfields(clazz)	val ret  tryconstructorinjection(clazz fields mock)  if (! retfieldwasinitializedusingconstructorinjection()) {    trysetterorpropertyinjection(clazz fields mock)  }	clazz  clazzgetsuperclass()}```# after 22315:```	val mocks  aggregatespyormockfields(clazzgetmockfields())  val fields  aggregateinjectmocksfields(clazz)	val ret  tryconstructorinjection(clazz fields mock)  if (! retfieldwasinitializedusingconstructorinjection()) {    trysetterorpropertyinjection(clazz fields mock)  }```# detailsbefore 22315 if the `@injectmocks` field has a field that not listed in the constructor argument will fill by setter/property injection at the 2nd loop 😃it may not the expected behaviors by mockito authors but some users code depends on this behaviormy suggestion is to revert the [fixes #1587 : remove unnecessary loop from injectingannotationengine by lihmeh · pull request #1588 · mockito/mockito · github](https://githubcom/mockito/mockito/pull/1588) at this time why travis fails? || this needs a rebase that should fix travis (presumably) || # [codecov](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&elh1) report> merging [#1810](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/a9c5105f8fda310a00b6d784a8bf9fb694a94610?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1810/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1810      +/-   ##+ coverage          8676%   8677%   +001%     - complexity          2494     2496       +2       files                311      311                lines               6552     6557       +5       branches             821      822       +1     + hits                5685     5690       +5       misses               670      670                partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/configuration/injectingannotationenginejava](https://codecovio/gh/mockito/mockito/pull/1810/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul0luamvjdgluz0fubm90yxrpb25fbmdpbmuuamf2yq) | `100% <100%> (ø)` | `9 <2> (+2)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&elfooter) last update [a9c5105b08d5c2](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || rebased || @timvdlippe added test case ||"
195,1771,1813,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,fixes #1771: upgrade byte-buddy to 1102 (from 1910) release notes:https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1102https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1101https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1100https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1916https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1915https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1914https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1913https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1912https://githubcom/raphw/byte-buddy/releases/tag/byte-buddy-1911relevant commits:raphw/byte-buddy@byte-buddy-1910byte-buddy-1102 # [codecov](https://codecovio/gh/mockito/mockito/pull/1813?srcpr&elh1) report> merging [#1813](https://codecovio/gh/mockito/mockito/pull/1813?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/a9c5105f8fda310a00b6d784a8bf9fb694a94610?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1813/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1813?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1813   +/-   ##  coverage          8676%   8676%             complexity          2494     2494             files                311      311             lines               6552     6552             branches             821      821             hits                5685     5685             misses               670      670             partials             197      197```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1813?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1813?srcpr&elfooter) last update [a9c5105c28c95f](https://codecovio/gh/mockito/mockito/pull/1813?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
196,181,1818,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,add duration overloads fixes #1815 add new `javatimeduration`-based public apis to `mockito` `after` and `timeout` and deprecate the corresponding `long`-based public apisplumb those `duration` instances through the internals of mockito # [codecov](https://codecovio/gh/mockito/mockito/pull/1818?srcpr&elh1) report> merging [#1818](https://codecovio/gh/mockito/mockito/pull/1818?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/68bc593ebb79efa515a211f8cdff77c7c3746a6a?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `8437%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1818/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1818?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1818      +/-   ##- coverage          8676%   8671%   -005%     - complexity          2490     2492       +2       files                311      311                lines               6542     6549       +7       branches             821      821              + hits                5676     5679       +3     - misses               670      674       +4       partials             196      196```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1818?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1818/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9351% <ø> (ø)` | `93 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1818/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9687% <100%> (+01%)` | `44 <4> (+2)` | :arrow_up: || [nternal/verification/verificationovertimeimpljava](https://codecovio/gh/mockito/mockito/pull/1818/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9ut3zlclrpbwvjbxbslmphdme) | `921% <100%> (ø)` | `16 <5> (ø)` | :arrow_down: || [erification/verificationwrapperinorderwrapperjava](https://codecovio/gh/mockito/mockito/pull/1818/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9uv3jhchblcklut3jkzxjxcmfwcgvylmphdme) | `100% <100%> (ø)` | `6 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/verification/afterjava](https://codecovio/gh/mockito/mockito/pull/1818/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by92zxjpzmljyxrpb24vqwz0zxiuamf2yq) | `7777% <50%> (-2223%)` | `4 <2> (ø)` | || [rc/main/java/org/mockito/verification/timeoutjava](https://codecovio/gh/mockito/mockito/pull/1818/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by92zxjpzmljyxrpb24vvgltzw91dc5qyxzh) | `6923% <60%> (-1259%)` | `5 <3> (ø)` | || [src/main/java/org/mockito/internal/util/timerjava](https://codecovio/gh/mockito/mockito/pull/1818/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1rpbwvylmphdme) | `8666% <909%> (+095%)` | `8 <7> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1818?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1818?srcpr&elfooter) last update [68bc5931a6f4b5](https://codecovio/gh/mockito/mockito/pull/1818?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
197,181,1819,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"deprecate mockitohamcrest this class was used during the migration period from mockito 1 andmockito 2 but is no longer necessary to be able to remove ourdependency on hamcrest we should remove mockitohamcrestin response to #1817 friendly ping on this pr || i will submit this pr next week if there are no objections || there were no objections so i am merging this || sorry im late here! i suggest we dont deprecate it the use case (as documented in the javadoc) is the following: ""hamcrest integration is provided so that users can take advantage of existing hamcrest matchers"" that use case is still valid (perhaps the docs need to be clearer to address #1817)for code that does not use hamcrest users should be following standard non-hamcrest argthat() apihope that helps! || > for code that does not use hamcrest users should be following standard non-hamcrest argthat() apithe problem is that this project requires hamcrest as compile-time dependency to be built this is a problem for users who do not want to use hamcrest but still build the source code (as they cant use the pre-built jars)if we want to keep supporting hamcrest users with this api i would suggest a `mockito-hamcrest` artifact that takes care of the integration that way those users who do *not* want to use hamcrest dont rely on it as wellwdyt? || im novice to testing because i have to wear many hats (and i avoided getting into it like the plague in the past) returning to spring development in my career and discovering mockito this year changed my [integration testing] life i rely heavily on googling stack overflow examples until it become memorized (if ever i do)  it seems like there is a much larger documented wealth of knowledge on hamcrest on stack overflow (maybe cause its been around a long time) and so its easy to find solutions to basic challenges while someone new to mockito gets used to itfor example hasentry from this so helped me today https://stackoverflowcom/questions/2580369/using-mockito-how-do-i-match-against-the-key-value-pair-of-a-mapi like timvdlippes suggestion because it leverages giving your users the ability to tap into that knowledge/solutions while slimming down the dependencies for the core mockito code basethanks for all your contributions in this area and letting us stand on your shoulders || thanks for that response @mansours ! i will look into introducing a `mockito-hamcrest` artifact and figure out a way forward tomorrow i can revert this pr given the points raised by @mockitoguy and make that work || > this is a problem for users who do not want to use hamcrest but still build the source code (as they cant use the pre-built jars)can you elaborate this problem? we use ""compileonly"" dependency for hamcrest just like we do for junit4 or opentest4j this should not cause problems for consumers || yes we are facing the same issues with junit4 and opentest4j junit4 is not an issue atm as we are also using it but opentest4j is currently an issuewe are not able to include jars as we require source code to be included and built (for security analyses) thus the inclusion of the dependencies during compile time does lead to problems when we want to build mockito in isolationi am currently investigating solutions for junit4 and opentest4j and how that could be decoupled i went ahead with this pr as it was my understanding with mockito 2 is that we wanted to remove our dependency of hamcrest therefore i assumed that deprecation was appropriate especially as there were no objections posted on this pr for almost 2 weeks i understood that this was okayi will revert the pr for us to revisit but i would like to come to a decision on our hamcrest support and whether we want to support it or not at all when we come to a decision i would like to update our javadoc and wiki on that to clarify that for our users || > especially as there were no objections posted on this pr for almost 2 weeks i understood that this was okayof course! thank you for waiting 2 weeks dont block on us> yes we are facing the same issues with junit4 and opentest4j junit4 is not an issue atm as we are also using it but opentest4j is currently an issuecan you elaborate the problem? is it a google mono-repo use case? (i dont object reworking the artifacts - i want understanding for me and others :)) || > can you elaborate the problem? is it a google mono-repo use case? (i dont object reworking the artifacts - i want understanding for me and others :))this is for every repository that includes third_party code that we need to have the original source code for security analyses that includes the mono repository as well as some other repositories that we havesince the hamcrest api is not type-safe (as it requires casting with `object` vs `t` as argument type) we would like to move away from unsafe type casts the `argumentmatcher` interface does not inherit that problem but the older hamcrest api doesby having the hamcrest-compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apii would personally say that while the hamcrest api was originally useful for defining reusable matchers the lack of type-safety does more harm than good i have received good responses when i finished the migration of the `argumentmatcher` to be typed and it already caught bugs in our tests i think we should promote the type-safe `argumentmatcher` and thus deprecate the old api but happy to disagree on that part and leave hamcrest compatibility in for example a separate artifact || > that we need to have the original source code for security analysesso the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis? (i still dont feel i fully understand this use case)> by having the hamcrest-compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apithats a fair argument> leave hamcrest compatibility in for example a separate artifactto keep backwards compatibility we would need ""mockito-core"" -> ""mockito-hamcrest"" are you thinking of reversing the dependency in future major version? || revert of this pr is in https://githubcom/mockito/mockito/commit/ad2f3526a347f37dd00c53ee664c5cd9f3738814 || > so the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis? (i still dont feel i fully understand this use case)correct since jars can be built with any arbitrary code we prefer to not check in a jar as we cant be certain that it was built from the original source code thats why we check in the original source code and build that instead> to keep backwards compatibility we would need ""mockito-core"" -> ""mockito-hamcrest"" are you thinking of reversing the dependency in future major version?yes but since maven does not allow a cyclic dependency we have to figure out what the possibilities are || "
198,1767,1821,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,guard against multiple evaluations of before statement some rules evaluate the base statement multiple times eg to executetests repeatedly the changes made in #1672 led to an exception in suchcases because the `mockitolistener` was registered multiple times nowwe only add the listener the first time the statement is evaluated inorder to restore the old behaviorfixes #1767 oh this fails a lot of tests 😢 could it be that `testfinished` needs the same treatment? || > could it be that `testfinished` needs the same treatment?it does indeed 👍  || # [codecov](https://codecovio/gh/mockito/mockito/pull/1821?srcpr&elh1) report> merging [#1821](https://codecovio/gh/mockito/mockito/pull/1821?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/2ffc8aee826fe81ed8cee1e26da1f7f329b0b2b4?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1821/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1821?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1821      +/-   ##+ coverage          8671%   8671%   +<01%       complexity          2492     2492                files                311      311                lines               6549     6551       +2       branches             821      822       +1     + hits                5679     5681       +2       misses               674      674                partials             196      196```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1821?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ockito/internal/runners/defaultinternalrunnerjava](https://codecovio/gh/mockito/mockito/pull/1821/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9ydw5uzxjzl0rlzmf1bhrjbnrlcm5hbfj1bm5lci5qyxzh) | `100% <100%> (ø)` | `4 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1821?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1821?srcpr&elfooter) last update [2ffc8ae49e41aa](https://codecovio/gh/mockito/mockito/pull/1821?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || awesome thanks! ||
199,1815,1845,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"revert ""add duration overloads fixes #1815"" reverts mockito/mockito#1818fixes #1843 # [codecov](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&elh1) report> merging [#1845](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/517faccdcf9f9d41f3664fc7955f387608a43a5e?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `96%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1845/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1845      +/-   ##+ coverage          8664%   8669%   +004%     + complexity          2507     2505       -2       files                314      314                lines               6613     6606       -7       branches             829      829              - hits                5730     5727       -3     + misses               682      678       -4       partials             201      201```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9351% <ø> (ø)` | `93 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <100%> (-011%)` | `42 <2> (-2)` | || [nternal/verification/verificationovertimeimpljava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9ut3zlclrpbwvjbxbslmphdme) | `921% <100%> (ø)` | `16 <5> (ø)` | :arrow_down: || [src/main/java/org/mockito/verification/afterjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by92zxjpzmljyxrpb24vqwz0zxiuamf2yq) | `100% <100%> (+2222%)` | `4 <2> (ø)` | :arrow_down: || [rc/main/java/org/mockito/verification/timeoutjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by92zxjpzmljyxrpb24vvgltzw91dc5qyxzh) | `8181% <100%> (+1258%)` | `5 <3> (ø)` | :arrow_down: || [erification/verificationwrapperinorderwrapperjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9uv3jhchblcklut3jkzxjxcmfwcgvylmphdme) | `100% <100%> (ø)` | `6 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/internal/util/timerjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1rpbwvylmphdme) | `8571% <90%> (-096%)` | `8 <7> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&elfooter) last update [517facc3106716](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
200,1846,1847,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixed undetected unused stubbing when matching previous stubbed call fixes #1846 # [codecov](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&elh1) report> merging [#1847](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/204f9c169aa81f613334dc4301e0a062627565a5?srcpr&eldesc) will **increase** coverage by `017%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1847/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1847      +/-   ##+ coverage          8669%   8687%   +017%     - complexity          2505     2517      +12       files                314      314                lines               6606     6619      +13       branches             829      831       +2     + hits                5727     5750      +23     + misses               678      671       -7     + partials             201      198       -3```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [to/internal/stubbing/stubbedinvocationmatcherjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvksw52b2nhdglvbk1hdgnozxiuamf2yq) | `100% <ø> (ø)` | `9 <0> (ø)` | :arrow_down: || [ito/internal/stubbing/invocationcontainerimpljava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9jbnzvy2f0aw9uq29udgfpbmvysw1wbc5qyxzh) | `9577% <100%> (+077%)` | `34 <4> (+3)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9354% <100%> (+002%)` | `93 <0> (ø)` | :arrow_down: || [ava/org/mockito/internal/reporting/pluralizerjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9yzxbvcnrpbmcvugx1cmfsaxplci5qyxzh) | `8333% <100%> (+333%)` | `6 <2> (+2)` | :arrow_up: || [ternal/exceptions/stacktrace/stacktracefilterjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl3n0ywnrdhjhy2uvu3rhy2tucmfjzuzpbhrlci5qyxzh) | `8048% <0%> (+243%)` | `10% <0%> (+2%)` | :arrow_up: || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `7368% <0%> (+263%)` | `7% <0%> (+1%)` | :arrow_up: || [creation/bytebuddy/subclassbytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrlqnvkzhlnb2nrtwfrzxiuamf2yq) | `7321% <0%> (+892%)` | `11% <0%> (+1%)` | :arrow_up: || [/main/java/org/mockito/internal/util/platformjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1bsyxrmb3jtlmphdme) | `909% <0%> (+909%)` | `15% <0%> (+3%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&elfooter) last update [204f9c1b0d15d1](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ill review by tomorrow thank you for the updates! || i tweaked the tests when the build is green ill mergethank you for this nice pr!!! ||
201,1848,1849,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,performance optimization by using methodgetparametercount() where possible hias described in #1848 we could make use of `methodgetparametercount()` in order to save some overhead from unnecessary cloning caused by `methodgetparametertypes()`as this is my first contribution to mockito let me know if i can do something to helplet me know what you thinkcheerschristoph # [codecov](https://codecovio/gh/mockito/mockito/pull/1849?srcpr&elh1) report> merging [#1849](https://codecovio/gh/mockito/mockito/pull/1849?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/204f9c169aa81f613334dc4301e0a062627565a5?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `9285%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1849/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1849?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1849      +/-   ##+ coverage          8669%   8669%   +<01%     - complexity          2505     2506       +1       files                314      314                lines               6606     6607       +1       branches             829      829              + hits                5727     5728       +1       misses               678      678                partials             201      201```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1849?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [mockito/internal/invocation/invocationmatcherjava](https://codecovio/gh/mockito/mockito/pull/1849/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludm9jyxrpb25nyxrjagvylmphdme) | `9782% <0%> (ø)` | `26 <0> (+1)` | :arrow_up: || [/mockito/internal/invocation/typesafematchingjava](https://codecovio/gh/mockito/mockito/pull/1849/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul1r5cgvtywzltwf0y2hpbmcuamf2yq) | `8823% <100%> (ø)` | `12 <3> (ø)` | :arrow_down: || [o/internal/stubbing/answers/returnsargumentatjava](https://codecovio/gh/mockito/mockito/pull/1849/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl1jldhvybnnbcmd1bwvudef0lmphdme) | `100% <100%> (ø)` | `27 <0> (ø)` | :arrow_down: || [a/org/mockito/internal/util/objectmethodsgurujava](https://codecovio/gh/mockito/mockito/pull/1849/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl09iamvjde1ldghvzhnhdxj1lmphdme) | `100% <100%> (ø)` | `9 <0> (ø)` | :arrow_down: || [nal/creation/instance/constructorinstantiatorjava](https://codecovio/gh/mockito/mockito/pull/1849/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9pbnn0yw5jzs9db25zdhj1y3rvckluc3rhbnrpyxrvci5qyxzh) | `9577% <100%> (ø)` | `36 <9> (ø)` | :arrow_down: || [ito/internal/util/reflection/fieldinitializerjava](https://codecovio/gh/mockito/mockito/pull/1849/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vrmllbgrjbml0awfsaxplci5qyxzh) | `9056% <100%> (ø)` | `18 <0> (ø)` | :arrow_down: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1849/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9354% <100%> (+002%)` | `93 <5> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1849?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1849?srcpr&elfooter) last update [204f9c1a114de1](https://codecovio/gh/mockito/mockito/pull/1849?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || after importing this change into google i realized that this change is breaking all downstream android applications should we revert this change similarly to #1845 (see full postmortem at https://githubcom/mockito/mockito/wiki/android-java-8-%60javatimeduration%60-postmortem ) given that it does not change our public api? || thats very unfortunate || > should we revert this change similarly to #1845absolutely ||
202,522,1850,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"fixes  #522 : basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for #678 is caught with the following exception:```javalangillegalstateexception: failed to install bundle: mockito-core-323jar	at orgmockitoosgitestosgitestsetup(osgitestjava:55)	 (snipped)caused by: orgosgiframeworkbundleexception: error occurred installing a bundle	at orgeclipseosgistoragestorageinstall(storagejava:739)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:187)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:179)	at orgmockitoosgitestosgitestsetup(osgitestjava:53)	 40 morecaused by: javalangillegalargumentexception: invalid range ""[160"": invalid format	at orgosgiframeworkversionrange<init>(versionrangejava:173)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports(osgimanifestbuilderfactoryjava:373)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports(osgimanifestbuilderfactoryjava:352)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:111)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:78)	at orgeclipseosgistoragestoragegetbuilder(storagejava:784)	at orgeclipseosgistoragestoragegetbuilder(storagejava:766)	at orgeclipseosgistoragestorageinstall(storagejava:706)	 43 morecaused by: javautilnosuchelementexception	at javautilstringtokenizernexttoken(stringtokenizerjava:349)	at orgosgiframeworkversionrange<init>(versionrangejava:157)	 50 more```the osgi test project consists of three source sets:1 a regular junit4 `test` source set with a single class osgitest starts an osgi framework installs mockito-core byte-buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework2 a source set `testbundle` thats built to an osgi bundle using the `bundle` task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle3 a source set `otherbundle` thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details:- the `test` source set only has compile dependencies on the osgi apis and junit4 ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used- the test cases are run by loading classes from the test bundle that all implement `runnable` this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit4 inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework- the osgi bundles are built using the [bnd gradle plugin](https://githubcom/bndtools/bnd/blob/master/bizaqutebndgradle/readmemd#gradle-plugin-for-workspace-builds) instead of the deprecated `osgi` plugin in gradle the reason is both future proofing to not impede a migration to gradle 60 in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains # [codecov](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&elh1) report> merging [#1850](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/204f9c169aa81f613334dc4301e0a062627565a5?srcpr&eldesc) will **increase** coverage by `015%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1850/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1850      +/-   ##+ coverage          8669%   8684%   +015%     - complexity          2505     2512       +7       files                314      314                lines               6606     6606                branches             829      829              + hits                5727     5737      +10     + misses               678      671       -7     + partials             201      198       -3```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/exceptions/stacktrace/stacktracefilterjava](https://codecovio/gh/mockito/mockito/pull/1850/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl3n0ywnrdhjhy2uvu3rhy2tucmfjzuzpbhrlci5qyxzh) | `8048% <0%> (+243%)` | `10% <0%> (+2%)` | :arrow_up: || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1850/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `7368% <0%> (+263%)` | `7% <0%> (+1%)` | :arrow_up: || [creation/bytebuddy/subclassbytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1850/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrlqnvkzhlnb2nrtwfrzxiuamf2yq) | `7321% <0%> (+892%)` | `11% <0%> (+1%)` | :arrow_up: || [/main/java/org/mockito/internal/util/platformjava](https://codecovio/gh/mockito/mockito/pull/1850/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1bsyxrmb3jtlmphdme) | `909% <0%> (+909%)` | `15% <0%> (+3%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&elfooter) last update [204f9c100e622d](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > this is great work thanks! only some nits and a question whether we can use the junit api to handle the tests that should improve the assertions and simplify the loading of the teststhanks for the speedy review! it was intentional not to use the junit api since its not readily available to consume as an osgi bundle in this project however i have committed a new version where the `orgjunit` package is provided to the osgi bundles as a ""system package"" and thus is loaded from the regular class loaderits still tricky to get the test cases to run inside the bundles since they arent visible to gradle in the `test` source set in fact the test classes are only available during runtime _after_ starting the osgi framework and installing their bundles to overcome that issue ive inherited from `suite` and fed it test classes loaded through the class loader of the test bundleof course using proper asserts is preferable now that they are available so i fixed that to get a clean diff from the first commit i did not yet consolidate the test classes ie theres still one test class with a single `test()` method for each previous runnable which might look a bit wasteful input on that is welcome and also if you think that the added complexity of using a suite and the way junit is provided to the inside of osgi is acceptabletechnical details:- the framework needs to be started in the suite constructor to be able to load the test classes thus `@beforeclass` can no longer be used however `@afterclass` still works for the tear down- using junit4 inside the test bundles makes bnd add a corresponding `import-package: orgjunit` to its manifest the one thats resolved by the extra system package entry this additional package import should not affect the effectiveness of the test for detecting manifest issues in fact it might even make it more like other usages of mockito || "
203,678,1850,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"fixes  #522 : basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for #678 is caught with the following exception:```javalangillegalstateexception: failed to install bundle: mockito-core-323jar	at orgmockitoosgitestosgitestsetup(osgitestjava:55)	 (snipped)caused by: orgosgiframeworkbundleexception: error occurred installing a bundle	at orgeclipseosgistoragestorageinstall(storagejava:739)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:187)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:179)	at orgmockitoosgitestosgitestsetup(osgitestjava:53)	 40 morecaused by: javalangillegalargumentexception: invalid range ""[160"": invalid format	at orgosgiframeworkversionrange<init>(versionrangejava:173)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports(osgimanifestbuilderfactoryjava:373)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports(osgimanifestbuilderfactoryjava:352)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:111)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:78)	at orgeclipseosgistoragestoragegetbuilder(storagejava:784)	at orgeclipseosgistoragestoragegetbuilder(storagejava:766)	at orgeclipseosgistoragestorageinstall(storagejava:706)	 43 morecaused by: javautilnosuchelementexception	at javautilstringtokenizernexttoken(stringtokenizerjava:349)	at orgosgiframeworkversionrange<init>(versionrangejava:157)	 50 more```the osgi test project consists of three source sets:1 a regular junit4 `test` source set with a single class osgitest starts an osgi framework installs mockito-core byte-buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework2 a source set `testbundle` thats built to an osgi bundle using the `bundle` task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle3 a source set `otherbundle` thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details:- the `test` source set only has compile dependencies on the osgi apis and junit4 ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used- the test cases are run by loading classes from the test bundle that all implement `runnable` this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit4 inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework- the osgi bundles are built using the [bnd gradle plugin](https://githubcom/bndtools/bnd/blob/master/bizaqutebndgradle/readmemd#gradle-plugin-for-workspace-builds) instead of the deprecated `osgi` plugin in gradle the reason is both future proofing to not impede a migration to gradle 60 in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains # [codecov](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&elh1) report> merging [#1850](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/204f9c169aa81f613334dc4301e0a062627565a5?srcpr&eldesc) will **increase** coverage by `015%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1850/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1850      +/-   ##+ coverage          8669%   8684%   +015%     - complexity          2505     2512       +7       files                314      314                lines               6606     6606                branches             829      829              + hits                5727     5737      +10     + misses               678      671       -7     + partials             201      198       -3```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/exceptions/stacktrace/stacktracefilterjava](https://codecovio/gh/mockito/mockito/pull/1850/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl3n0ywnrdhjhy2uvu3rhy2tucmfjzuzpbhrlci5qyxzh) | `8048% <0%> (+243%)` | `10% <0%> (+2%)` | :arrow_up: || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1850/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `7368% <0%> (+263%)` | `7% <0%> (+1%)` | :arrow_up: || [creation/bytebuddy/subclassbytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1850/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrlqnvkzhlnb2nrtwfrzxiuamf2yq) | `7321% <0%> (+892%)` | `11% <0%> (+1%)` | :arrow_up: || [/main/java/org/mockito/internal/util/platformjava](https://codecovio/gh/mockito/mockito/pull/1850/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1bsyxrmb3jtlmphdme) | `909% <0%> (+909%)` | `15% <0%> (+3%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&elfooter) last update [204f9c100e622d](https://codecovio/gh/mockito/mockito/pull/1850?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > this is great work thanks! only some nits and a question whether we can use the junit api to handle the tests that should improve the assertions and simplify the loading of the teststhanks for the speedy review! it was intentional not to use the junit api since its not readily available to consume as an osgi bundle in this project however i have committed a new version where the `orgjunit` package is provided to the osgi bundles as a ""system package"" and thus is loaded from the regular class loaderits still tricky to get the test cases to run inside the bundles since they arent visible to gradle in the `test` source set in fact the test classes are only available during runtime _after_ starting the osgi framework and installing their bundles to overcome that issue ive inherited from `suite` and fed it test classes loaded through the class loader of the test bundleof course using proper asserts is preferable now that they are available so i fixed that to get a clean diff from the first commit i did not yet consolidate the test classes ie theres still one test class with a single `test()` method for each previous runnable which might look a bit wasteful input on that is welcome and also if you think that the added complexity of using a suite and the way junit is provided to the inside of osgi is acceptabletechnical details:- the framework needs to be started in the suite constructor to be able to load the test classes thus `@beforeclass` can no longer be used however `@afterclass` still works for the tear down- using junit4 inside the test bundles makes bnd add a corresponding `import-package: orgjunit` to its manifest the one thats resolved by the extra system package entry this additional package import should not affect the effectiveness of the test for detecting manifest issues in fact it might even make it more like other usages of mockito || "
204,1853,1854,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,fixes #1853: allow @mockitosettings to be inherited - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&elh1) report> merging [#1854](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/11552b8f3da90eb5478db4c371031461d98da195?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1854/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1854   +/-   ##  coverage          8687%   8687%             complexity          2518     2518             files                314      314             lines               6620     6620             branches             831      831             hits                5751     5751             misses               671      671             partials             198      198```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&elfooter) last update [11552b89c0bce0](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > > > could you add a regression test in the junit-jupiter-test testsuite?ive just amended the commit with a test ||
205,1877,1878,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"revert ""fixed undetected unused stubbing when matching previous stubbed call"" reverts mockito/mockito#1847fixes #1877 based on feedback in #1846 # [codecov](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&elh1) report> merging [#1878](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/bc2544019b9586aad264c02aa22853e1867f1162?srcpr&eldesc) will **increase** coverage by `01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1878/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&eltree)```diff@@               coverage diff                @@##             release/3x    #1878     +/-   ##+ coverage          8673%   8684%   +01%     + complexity          2521     2518      -3       files                316      316               lines               6635     6622     -13       branches             831      829      -2     - hits                5755     5751      -4     + misses               679      672      -7     + partials             201      199      -2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ito/internal/stubbing/invocationcontainerimpljava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9jbnzvy2f0aw9uq29udgfpbmvysw1wbc5qyxzh) | `95% <ø> (-078%)` | `31 <0> (-3)` | || [to/internal/stubbing/stubbedinvocationmatcherjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvksw52b2nhdglvbk1hdgnozxiuamf2yq) | `100% <ø> (ø)` | `9 <0> (ø)` | :arrow_down: || [ava/org/mockito/internal/reporting/pluralizerjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9yzxbvcnrpbmcvugx1cmfsaxplci5qyxzh) | `80% <ø> (-334%)` | `4 <0> (-2)` | || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9351% <100%> (-003%)` | `93 <0> (ø)` | || [ito/internal/creation/bytebuddy/modulehandlerjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9kdwxlsgfuzgxlci5qyxzh) | `2692% <0%> (+096%)` | `2% <0%> (ø)` | :arrow_down: || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `7368% <0%> (+2105%)` | `7% <0%> (+1%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&elfooter) last update [bc254409ab789b](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
206,1880,1881,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,fix unnecessarystubbingexception javadoc fix #1880  
207,1875,1890,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fix mocks throwing same instance with throwable class fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with `dothrow(class)` or `thenthrow(class)`this is achieved by moving the instantiation of the throwable into a new answer called throwsexceptionclass - much like throwsexception then `thenthrow(class)` calls `the swer(answer)` with a new instance of throwsexceptionclass rather than `thenthrow(throwable)` similar for `dothrow(class)` `dothrow(throwable)` and `doanswer(answer)`fixes #1875 @timvdlippe just have a quick inquiry: the test in uninstantiablethrowabletest is failing because it expects an instantiationerror to be thrown in the middle of stubbing (check pr #1549) the new code doesnt instantiate in the middle of stubbing anymore how do i ignore the test? or do i just delete the test file? im used to using an annotation to ignore tests the pr should be ready after thats sorted and any other suggested changes  
208,1894,1895,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1894 checkstyle error on windows windows has some issues with relative paths in checkstyle config files additionally it failed with an euro sign in codeplease verify if it also works on unix env # [codecov](https://codecovio/gh/mockito/mockito/pull/1895?srcpr&elh1) report> merging [#1895](https://codecovio/gh/mockito/mockito/pull/1895?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/ab4bd0c533977497697ac4ab629f301c66596ffc&eldesc) will **not change** coverage by `%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1895/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1895?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1895   +/-   ##  coverage          8683%   8683%             complexity          2520     2520             files                318      318             lines               6626     6626             branches             830      830             hits                5754     5754             misses               672      672             partials             200      200           ```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1895?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1895?srcpr&elfooter) last update [ab4bd0c4287131](https://codecovio/gh/mockito/mockito/pull/1895?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
209,1910,1911,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,"fixes #1910: update description of argumentmatcher javadoc for any() the doc says that""any() is an alias of: anyobject() and any(javalangclass)""but in the note it says that""since mockito 210 any(class) is not anymore an alias of this method""this is confusing so the alias in the doc should exclude any(javalangclass) to simply be""any() is an alias of: anyobject()""also update the same issue of anyobject()check list - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_  "
210,190,1914,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,fix pattern matcher not matching to subregion issue #1905 talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument (provided with an invocation) to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas `matchermatch()` (see [comment](https://githubcom/mockito/mockito/issues/1905#issuecomment-615295546) in #1905) this commit fixes that by using `matcherfind()`fixes #1905  
211,1905,1914,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,fix pattern matcher not matching to subregion issue #1905 talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument (provided with an invocation) to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas `matchermatch()` (see [comment](https://githubcom/mockito/mockito/issues/1905#issuecomment-615295546) in #1905) this commit fixes that by using `matcherfind()`fixes #1905  
212,189,1942,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #1898 : return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning nullfixes #1898 # [codecov](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&elh1) report> merging [#1942](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/662017026f1cb0a50bc28cb32e4b5806dfbdb552&eldesc) will **increase** coverage by `000%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1942/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1942   +/-   ##  coverage          8667%   8668%           - complexity          2526     2527    +1       files                318      318             lines               6650     6652    +2       branches             832      833    +1     + hits                5764     5766    +2       misses               685      685             partials             201      201           ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1942/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `9791% <10000%> (+009%)` | `1700 <000> (+100)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&elfooter) last update [66201702e98392](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
213,1898,1942,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #1898 : return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning nullfixes #1898 # [codecov](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&elh1) report> merging [#1942](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/662017026f1cb0a50bc28cb32e4b5806dfbdb552&eldesc) will **increase** coverage by `000%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1942/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1942   +/-   ##  coverage          8667%   8668%           - complexity          2526     2527    +1       files                318      318             lines               6650     6652    +2       branches             832      833    +1     + hits                5764     5766    +2       misses               685      685             partials             201      201           ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1942/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `9791% <10000%> (+009%)` | `1700 <000> (+100)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&elfooter) last update [66201702e98392](https://codecovio/gh/mockito/mockito/pull/1942?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
214,1712,1949,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1712 : prepend description to assertionerror thrown in verification extended mockitoassertionerror to wrap instance of assertionerror in addition to mockitoassertionerror so that the various possible exceptions thrown for non-matching arguments have description prepended to the message oh it seems like you need to run `/gradlew spotlessapply` locally to fix the formatting issues || i think you need to rebase on release/3x to pick up the latest changes your spotless configuration locally appears to be out-of-date || are you running `/gradlew spotlessapply`? i can take a look on monday why it is not formatting as expected || thanks tim ive rebased now hopefully should fix the formatting issue just squashed the commits || # [codecov](https://codecovio/gh/mockito/mockito/pull/1949?srcpr&elh1) report> merging [#1949](https://codecovio/gh/mockito/mockito/pull/1949?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/397b4d247c74bd36761007d10f9c36f74d3aa310&eldesc) will **increase** coverage by `001%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1949/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1949?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1949      +/-   ##+ coverage          8576%   8577%   +001%     - complexity          2542     2543       +1       files                318      318                lines               7209     7215       +6       branches             861      861              + hits                6183     6189       +6       misses               810      810                partials             216      216              ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1949?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [mockito/exceptions/base/mockitoassertionerrorjava](https://codecovio/gh/mockito/mockito/pull/1949/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9legnlchrpb25zl2jhc2uvtw9ja2l0b0fzc2vydglvbkvycm9ylmphdme) | `10000% <10000%> (ø)` | `400 <100> (+100)` | || [org/mockito/internal/verification/descriptionjava](https://codecovio/gh/mockito/mockito/pull/1949/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vrgvzy3jpchrpb24uamf2yq) | `7272% <10000%> (+606%)` | `200 <000> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1949?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1949?srcpr&elfooter) last update [397b4d259478e0](https://codecovio/gh/mockito/mockito/pull/1949?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
215,1013,1955,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,"mockito #1013: defines and implements api for static mocking fixes #1013 - allows for static method mocking in mockito i thought about it but i am pretty confident that this is what its gonna be! i suggest we put the apis as incubating as we have done with the inline mock maker if we commit to the api even in a separate artifact i think the android folks will still go for it and have a similar expectation on its stabilityyou think a separate artifact would be cleaner? || i mostly prefer a conservative route if we have that option but keeping as incubating is okay with me || i think id prefer the single artifact its fully opt-in and does not touch any existing code i think this way it will be used more and well find out the adoption quicker || # [codecov](https://codecovio/gh/mockito/mockito/pull/1955?srcpr&elh1) report> merging [#1955](https://codecovio/gh/mockito/mockito/pull/1955?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/4fd405da2e199a06ca5950af910b102a62d66b21&eldesc) will **decrease** coverage by `033%`> the diff coverage is `7196%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1955/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1955?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1955      +/-   ##- coverage          8576%   8543%   -034%     - complexity          2542     2637      +95       files                318      320       +2       lines               7209     7540     +331       branches             861      892      +31     + hits                6183     6442     +259     - misses               810      859      +49     - partials             216      239      +23     ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1955?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/creation/bytebuddy/bytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `8888% <000%> (-1112%)` | `600 <000> (ø)` | || [/creation/bytebuddy/subclassbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrly29kzudlbmvyyxrvci5qyxzh) | `8416% <000%> (-071%)` | `2400 <000> (ø)` | || [reation/bytebuddy/inject/mockmethoddispatcherjava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvaw5qzwn0l01vy2tnzxrob2reaxnwyxrjagvylmphdme) | `000% <000%> (ø)` | `000 <000> (ø)` | || [ito/internal/invocation/interceptedinvocationjava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludgvyy2vwdgvksw52b2nhdglvbi5qyxzh) | `8181% <ø> (+522%)` | `2500 <000> (ø)` | || [nal/configuration/independentannotationenginejava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul0luzgvwzw5kzw50qw5ub3rhdglvbkvuz2luzs5qyxzh) | `7250% <2727%> (-1750%)` | `1200 <500> (+100)` | :arrow_down: || [nternal/configuration/mockannotationprocessorjava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul01vy2tbbm5vdgf0aw9uuhjvy2vzc29ylmphdme) | `7083% <3000%> (-2917%)` | `800 <100> (ø)` | || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `8762% <5000%> (-540%)` | `4500 <200> (+200)` | :arrow_down: || [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6282% <6326%> (+032%)` | `1800 <700> (+400)` | || [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `6821% <6562%> (-121%)` | `2100 <800> (+500)` | :arrow_down: || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `9504% <6666%> (-229%)` | `4100 <100> (+100)` | :arrow_down: ||  and [23 more](https://codecovio/gh/mockito/mockito/pull/1955/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1955?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1955?srcpr&elfooter) last update [4fd405dbdd2b10](https://codecovio/gh/mockito/mockito/pull/1955?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i just saw this and cannot believe my eyes :-) will try to review shortly!!! || awesome just discovered a remaining recursion on `thencallrealmethod` but i think i already know how to fix it  || and it works too! || i thought about splitting the `mockitoannotations` into offering two methods however since we introduce a life-cycle the ""old"" method can no longer be used safely its a rather uncommon api to use manually therefore i believe that a breaking change is a good way to notify users that they need to pay attention most people do however use the junit runner rule and extension i think and wont be affectedi considered splitting up the pr but that way i could not implement static mocks as a running feature without putting all pieces together i therefore suggest that we release it as one change that way mockito stays consistent in its offered features and we hopefully get frictionless adoption i am afraid that this change has a certain inherent complexity that would not go away even when splitting up || > its a rather uncommon api to use manually therefore i believe that a breaking change is a good way to notify users that they need to pay attentioni have seen numerous usages in google before we make this change i would like to verify that this is indeed safe to do i am not sure when i have time to do so but i think someday next week should be possible || i have not considered wide usage in this case i think its better to deprecate `initmocks` in favor of `openmocks` where the former does not misbehave unless you are using the new static mocks this way there is no api breakage and mockito continues to well-behave for unchanged user codei think such a life-cycle will be useful for other cases too for instance i think it opens a solution for https://githubcom/mockito/mockito/issues/1802 where i otherwise cannot see a solutioni updated the pr but still suggest that we do not split it up we could otherwise introduce the life-cycle in a separate pr but without a single user of the life-cycle it would be hard to capture the application of this feature in a meaningful way not considering the additional work that splitting up the pr would entail || `initmocks` is used widely in the android ecosystem as it (allegedly) has better integration with classloader like robolectric i think since then we have addressed the issues in mockito but the usage of `initmocks` remains prevalent || @raphw you also need to run `/gradlew spotlessapply` locally to format the sourcecode || i also have this problem when the mockmaker is inlinebytebuddymockmaker i use spybean to spy a spring bean and then verify the bean it throws notamockexception i debug and find the class type is not contains mockito but it contains when i use the bytebuddymockmaker and it seems not a spring bug![image](https://user-imagesgithubusercontentcom/16514353/87416376-32563980-c601-11ea-8dd6-25b0fc429c11png)i guess i find it because the mocksget(mock) cant find it the mock is cglib proxy not the original typewhen i use the verify((appgroupclusteraction) aoptestutilsgettargetobject(appgroupclusteraction)) to verify it works || "
216,1960,1961,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,document using `@mock` with method parameters although weve called it out in the [junit extension] we should alsomake sure its clear in the core documentation to make it more visiblewe can fully-quality the `@test` annotation to make clear that it has tobe with junit 5closes #1960[junit extension]: https://javadocio/doc/orgmockito/mockito-junit-jupiter/latest/org/mockito/junit/jupiter/mockitoextensionhtml # [codecov](https://codecovio/gh/mockito/mockito/pull/1961?srcpr&elh1) report> merging [#1961](https://codecovio/gh/mockito/mockito/pull/1961?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/0501e02994959c997dd0a5bdafc6288ae1e487ac&eldesc) will **increase** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1961/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1961?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1961      +/-   ##+ coverage          8577%   8580%   +002%       complexity          2543     2543                files                318      318                lines               7215     7215                branches             861      861              + hits                6189     6191       +2       misses               810      810              + partials             216      214       -2     ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1961?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1961/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9661% <ø> (ø)` | `4200 <000> (ø)` | || [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/1961/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `4148% <000%> (+212%)` | `1100% <000%> (ø%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1961?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1961?srcpr&elfooter) last update [0501e0287be4b1](https://codecovio/gh/mockito/mockito/pull/1961?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
217,1967,1968,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1967: correctly handle mocks with limited life-cycle in listeners due to the limited lifetime of static mocks they cannot be validated within a mockito session since they might have expired when the validation is applied this patch excludes static mocks from all validation to support static mocks in the regular session validation we would rather need to trigger the validation upon release of any static mock it only tests part of the issue for actually testing it we would need to run the junit tests with the inline mock maker and create subprojects for it i am going on a two week vacation tomorrow so i did not want to open that barrel of wine tonight but i validated the working manually if you have some time could you add additional subprojects? i validated the runners manually however || ah okay i got confused as the commit mentions that the issue is fixed so thats why i thought we had test the whole scenario please go on vacation we can figure it out later 😄  || # [codecov](https://codecovio/gh/mockito/mockito/pull/1968?srcpr&elh1) report> merging [#1968](https://codecovio/gh/mockito/mockito/pull/1968?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/05b39bfc5e4558f4c1c6853d5b454f534bdfefe0&eldesc) will **increase** coverage by `001%`> the diff coverage is `6521%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1968/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1968?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1968      +/-   ##+ coverage          8528%   8530%   +001%     - complexity          2591     2594       +3       files                322      322                lines               7483     7492       +9       branches             892      895       +3     + hits                6382     6391       +9       misses               862      862                partials             239      239              ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1968?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockedstaticjava](https://codecovio/gh/mockito/mockito/pull/1968/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nrzwrtdgf0awmuamf2yq) | `10000% <ø> (ø)` | `100 <000> (ø)` | || [in/java/org/mockito/internal/mockedstaticimpljava](https://codecovio/gh/mockito/mockito/pull/1968/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nrzwrtdgf0awnjbxbslmphdme) | `7466% <000%> (-205%)` | `900 <000> (ø)` | || [ternal/invocation/finder/allinvocationsfinderjava](https://codecovio/gh/mockito/mockito/pull/1968/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul2zpbmrlci9bbgxjbnzvy2f0aw9uc0zpbmrlci5qyxzh) | `8750% <000%> (-1250%)` | `400 <000> (ø)` | || [kito/internal/framework/defaultmockitosessionjava](https://codecovio/gh/mockito/mockito/pull/1968/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9tzxnzaw9ulmphdme) | `8750% <7692%> (-461%)` | `800 <200> (ø)` | || [nternal/configuration/mockannotationprocessorjava](https://codecovio/gh/mockito/mockito/pull/1968/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul01vy2tbbm5vdgf0aw9uuhjvy2vzc29ylmphdme) | `8888% <8333%> (+1805%)` | `1100 <000> (+300)` | || [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/1968/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `4148% <000%> (+212%)` | `1100% <000%> (ø%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1968?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1968?srcpr&elfooter) last update [05b39bfe4e7aa9](https://codecovio/gh/mockito/mockito/pull/1968?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i added an additional project for the junit jupiter extension and added a junit rule for the inline mock maker tests i hope this should avoid any future regressions ||
218,1855,1974,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #1855 and #939: improve error message when the inline mock maker cannot be used improves the error message and does not create a hard dependency on the compiler module it also points out that byte buddy can now emulate the attachment api using jna if its added to the class path # [codecov](https://codecovio/gh/mockito/mockito/pull/1974?srcpr&elh1) report> merging [#1974](https://codecovio/gh/mockito/mockito/pull/1974?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/6635deec58a7931745874d5d8c6034a7375fa15a&eldesc) will **decrease** coverage by `007%`> the diff coverage is `000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1974/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1974?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1974      +/-   ##- coverage          8541%   8534%   -008%       complexity          2601     2601                files                322      322                lines               7496     7505       +9       branches             897      898       +1     + hits                6403     6405       +2     - misses               855      864       +9     + partials             238      236       -2     ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1974?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1974/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `5798% <000%> (-327%)` | `1800 <000> (ø)` | || [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/1974/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `4148% <000%> (+212%)` | `1100% <000%> (ø%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1974?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1974?srcpr&elfooter) last update [6635dee12ba593](https://codecovio/gh/mockito/mockito/pull/1974?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
219,1988,1989,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,do not pass static mocks to regular listener callback does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks fixes #1988we have passed `class` objects to the listener to indicate a static mock the class object is of course itself not a regular mock and its cleaner to create a callback method of its own this way existing listeners remain logically backwards compatible including our own listener that is used within the junit runner (we have only tested the rule i added a test for the runner too) # [codecov](https://codecovio/gh/mockito/mockito/pull/1989?srcpr&elh1) report> merging [#1989](https://codecovio/gh/mockito/mockito/pull/1989?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/0c56b3a8da97fa5ccfeef2adaa0a2314db3d6bd0&eldesc) will **decrease** coverage by `004%`> the diff coverage is `7000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1989/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1989?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1989      +/-   ##- coverage          8528%   8523%   -005%     - complexity          2601     2604       +3       files                322      323       +1       lines               7510     7520      +10       branches             898      899       +1     + hits                6405     6410       +5     - misses               869      873       +4     - partials             236      237       +1     ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1989?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ito/internal/invocation/interceptedinvocationjava](https://codecovio/gh/mockito/mockito/pull/1989/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludgvyy2vwdgvksw52b2nhdglvbi5qyxzh) | `7659% <000%> (-523%)` | `2500 <000> (ø)` | || [mockito/internal/progress/mockingprogressimpljava](https://codecovio/gh/mockito/mockito/pull/1989/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9wcm9ncmvzcy9nb2nraw5nuhjvz3jlc3njbxbslmphdme) | `9772% <10000%> (+016%)` | `3600 <300> (+300)` | || [va/org/mockito/listeners/mockcreationlistenerjava](https://codecovio/gh/mockito/mockito/pull/1989/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9saxn0zw5lcnmvtw9ja0nyzwf0aw9utglzdgvuzxiuamf2yq) | `10000% <10000%> (ø)` | `100 <100> (?)` | || [ternal/invocation/finder/allinvocationsfinderjava](https://codecovio/gh/mockito/mockito/pull/1989/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul2zpbmrlci9bbgxjbnzvy2f0aw9uc0zpbmrlci5qyxzh) | `8750% <000%> (-1250%)` | `400% <000%> (-100%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1989?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1989?srcpr&elfooter) last update [0c56b3a724619b](https://codecovio/gh/mockito/mockito/pull/1989?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
220,2015,2017,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,only enable mocking of types right before instantiation to avoid circular interception of constructor creation fixes #2015  
221,2015,2018,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,only enable mocking of types right before instantiation to avoid circular interception of constructor creation fixes #2015  
222,2011,2023,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,initializes classes prior to instrumentation to avoid uncontrolled code execution fixes #2011 - triggeres initializers explicitly # [codecov](https://codecovio/gh/mockito/mockito/pull/2023?srcpr&elh1) report> merging [#2023](https://codecovio/gh/mockito/mockito/pull/2023?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/929840ab691b2f502b9958ac9483104bfd88a9ee?eldesc) will **decrease** coverage by `001%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2023/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/2023?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #2023      +/-   ##- coverage          8489%   8488%   -002%     - complexity          2702     2703       +1       files                325      325                lines               8192     8198       +6       branches             979      979              + hits                6955     6959       +4       misses               968      968              - partials             269      271       +2     ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2023?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/2023/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `9271% <10000%> (+021%)` | `3800 <100> (+100)` | || [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/2023/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `3936% <000%> (-213%)` | `1100% <000%> (ø%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2023?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2023?srcpr&elfooter) last update [929840a24d8d79](https://codecovio/gh/mockito/mockito/pull/2023?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
223,1802,2034,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,escape mock during method dispatch on mock to avoid premature garbage collection under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch to avoid this we escape the mock instance during the dispatch to make sure that the gc cannot collect the objectfixes #1802 indeed force pushed a new version just nowlets hope the jit stays dumb enough to avoid this error in the future - i was really certain that the stack allocation of the mock object would avoid the allocation but if the entire mockito call stack gets inlined that does no longer apply worst case we need to make the mockito call stack deeper then the inlining heuristic ) ||
224,198,2042,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,mock resolver plugin adds a plugin to allow for adding one or multiple mock resolvers this way instances that are provided to mockitos dsl do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as springthis works today with the subclass mock maker by accident as we read the mock state from the mock instance via a method which gets proxied if we ever find a more private appraoch this would however break springs mockito use and it is already broken with the inline mock makerby this spi spring could add an unproxy resolver to its mockito build-up and make its proxied mocks compatible with mockito other frameworks could use the same approach if desired as this spi is genericcloses #1980 # [codecov](https://codecovio/gh/mockito/mockito/pull/2042?srcpr&elh1) report> merging [#2042](https://codecovio/gh/mockito/mockito/pull/2042?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/b6ae6cf12b93ef9445e524224375aab1eb76129d?eldesc) will **increase** coverage by `003%`> the diff coverage is `6984%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2042/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/2042?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #2042      +/-   ##+ coverage          8489%   8492%   +003%     - complexity          2704     2724      +20       files                325      325                lines               8204     8320     +116       branches             979     1009      +30     + hits                6965     7066     +101     - misses               968      983      +15       partials             271      271              ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2042?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [g/mockito/internal/util/defaultmockingdetailsjava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl0rlzmf1bhrnb2nraw5nrgv0ywlscy5qyxzh) | `10000% <ø> (ø)` | `1400 <000> (ø)` | || [src/main/java/org/mockito/plugins/mockmakerjava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9wbhvnaw5zl01vy2tnywtlci5qyxzh) | `10000% <ø> (ø)` | `300 <000> (ø)` | || [o/internal/configuration/plugins/pluginloaderjava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul3bsdwdpbnmvugx1z2lutg9hzgvylmphdme) | `7931% <1428%> (-2069%)` | `900 <100> (+100)` | :arrow_down: || [ernal/configuration/plugins/plugininitializerjava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul3bsdwdpbnmvugx1z2lusw5pdglhbgl6zxiuamf2yq) | `6744% <6000%> (-648%)` | `600 <200> (+200)` | :arrow_down: || [o/internal/configuration/plugins/pluginfinderjava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul3bsdwdpbnmvugx1z2lurmluzgvylmphdme) | `8518% <6923%> (-1482%)` | `700 <200> (+200)` | :arrow_down: || [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `7790% <7500%> (+006%)` | `2300 <000> (ø)` | || [internal/configuration/plugins/pluginregistryjava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul3bsdwdpbnmvugx1z2luumvnaxn0cnkuamf2yq) | `10000% <10000%> (ø)` | `900 <100> (+100)` | || [ockito/internal/configuration/plugins/pluginsjava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul3bsdwdpbnmvugx1z2lucy5qyxzh) | `9000% <10000%> (+111%)` | `900 <100> (+100)` | || [/main/java/org/mockito/internal/util/mockutiljava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl01vy2tvdglslmphdme) | `9803% <10000%> (+060%)` | `2600 <600> (+300)` | || [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/2042/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `9547% <000%> (+275%)` | `4800% <000%> (+1000%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2042?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2042?srcpr&elfooter) last update [b6ae6cfc81b028](https://codecovio/gh/mockito/mockito/pull/2042?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
225,2040,2046,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,do not exclude synthetic constructors from instrumentation fixes #2040 byte buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic (eg bridge methods) for constructor instrumentation it is however crucial that no code is called during mock creation and that fields are copied during spy creation # [codecov](https://codecovio/gh/mockito/mockito/pull/2046?srcpr&elh1) report> merging [#2046](https://codecovio/gh/mockito/mockito/pull/2046?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/b6ae6cf12b93ef9445e524224375aab1eb76129d?eldesc) will **increase** coverage by `000%`> the diff coverage is `8333%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2046/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/2046?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #2046   +/-   ##  coverage          8489%   8490%             complexity          2704     2704             files                325      325             lines               8204     8206    +2       branches             979      979           + hits                6965     6967    +2       misses               968      968             partials             271      271           ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2046?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/creation/bytebuddy/mockmethodadvicejava](https://codecovio/gh/mockito/mockito/pull/2046/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzefkdmljzs5qyxzh) | `7790% <7500%> (+006%)` | `2300 <000> (ø)` | || [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/2046/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `9275% <10000%> (+003%)` | `3800 <000> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2046?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2046?srcpr&elfooter) last update [b6ae6cf4a40f58](https://codecovio/gh/mockito/mockito/pull/2046?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
226,206,2071,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #2061: argumentmatcher error messages use lambda class names fixes #2061 # [codecov](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&elh1) report> merging [#2071](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/b16ec17cafdbf4fb968413c4992f044c1bb9526a?eldesc) will **increase** coverage by `000%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2071/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #2071   +/-   ##  coverage          8490%   8490%           - complexity          2704     2705    +1       files                325      325             lines               8206     8210    +4       branches             979      980    +1     + hits                6967     6971    +4       misses               968      968             partials             271      271           ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ain/java/org/mockito/internal/util/stringutiljava](https://codecovio/gh/mockito/mockito/pull/2071/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1n0cmluz1v0awwuamf2yq) | `10000% <ø> (ø)` | `1300 <000> (ø)` | || [ockito/internal/matchers/text/matchertostringjava](https://codecovio/gh/mockito/mockito/pull/2071/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9tyxrjagvycy90zxh0l01hdgnozxjub1n0cmluzy5qyxzh) | `9285% <10000%> (+285%)` | `500 <000> (+100)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&elfooter) last update [b16ec170e1133b](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
227,2061,2071,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #2061: argumentmatcher error messages use lambda class names fixes #2061 # [codecov](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&elh1) report> merging [#2071](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/b16ec17cafdbf4fb968413c4992f044c1bb9526a?eldesc) will **increase** coverage by `000%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2071/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #2071   +/-   ##  coverage          8490%   8490%           - complexity          2704     2705    +1       files                325      325             lines               8206     8210    +4       branches             979      980    +1     + hits                6967     6971    +4       misses               968      968             partials             271      271           ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ain/java/org/mockito/internal/util/stringutiljava](https://codecovio/gh/mockito/mockito/pull/2071/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1n0cmluz1v0awwuamf2yq) | `10000% <ø> (ø)` | `1300 <000> (ø)` | || [ockito/internal/matchers/text/matchertostringjava](https://codecovio/gh/mockito/mockito/pull/2071/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9tyxrjagvycy90zxh0l01hdgnozxjub1n0cmluzy5qyxzh) | `9285% <10000%> (+285%)` | `500 <000> (+100)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&elfooter) last update [b16ec170e1133b](https://codecovio/gh/mockito/mockito/pull/2071?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
228,2092,2176,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"bump versionserrorprone from 240 to 251 bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2092"">#2092</a>)</li><li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2099"">#2099</a>)</li><li>false positive in <code>differentnamebutsame</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2094"">#2094</a>)</li><li>false positive in <code>unnecessaryoptionalget</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2101"">#2101</a>)</li><li>false positive in <code>unnecessarymethodreference</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2102"">#2102</a>)</li><li>fixed a regression in jdk 16-ea support (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2105"">#2105</a>)</li></ul><h2>error prone 250</h2><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/banserializableread"">banserializableread</a></li><li><a href""http://errorproneinfo/bugpattern/catchingunchecked"">catchingunchecked</a></li><li><a href""http://errorproneinfo/bugpattern/computeifabsentambiguousreference"">computeifabsentambiguousreference</a></li><li><a href""http://errorproneinfo/bugpattern/dangerousliteralnull"">dangerousliteralnull</a></li><li><a href""http://errorproneinfo/bugpattern/datechecker"">datechecker</a></li><li><a href""http://errorproneinfo/bugpattern/differentnamebutsame"">differentnamebutsame</a></li><li><a href""http://errorproneinfo/bugpattern/donotcallsuggester"">donotcallsuggester</a></li><li><a href""http://errorproneinfo/bugpattern/donotclaimannotations"">donotclaimannotations</a></li><li><a href""http://errorproneinfo/bugpattern/donotmockautovalue"">donotmockautovalue</a></li><li><a href""http://errorproneinfo/bugpattern/floggerformatstring"">floggerformatstring</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogvarargs"">floggerlogvarargs</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogwithcause"">floggerlogwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggermessageformat"">floggermessageformat</a></li><li><a href""http://errorproneinfo/bugpattern/floggerpassedaround"">floggerpassedaround</a></li><li><a href""http://errorproneinfo/bugpattern/floggerredundantisenabled"">floggerredundantisenabled</a></li><li><a href""http://errorproneinfo/bugpattern/floggerrequiredmodifiers"">floggerrequiredmodifiers</a></li><li><a href""http://errorproneinfo/bugpattern/floggersplitlogstatement"">floggersplitlogstatement</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithcause"">floggerwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithoutcause"">floggerwithoutcause</a></li><li><a href""http://errorproneinfo/bugpattern/hashcodetostring"">hashcodetostring</a></li><li><a href""http://errorproneinfo/bugpattern/identityhashmapusage"">identityhashmapusage</a></li><li><a href""http://errorproneinfo/bugpattern/immutablemembercollection"">immutablemembercollection</a></li><li><a href""http://errorproneinfo/bugpattern/immutablesetforcontains"">immutablesetforcontains</a></li><li><a href""http://errorproneinfo/bugpattern/initializeinline"">initializeinline</a></li><li><a href""http://errorproneinfo/bugpattern/invalidthrowslink"">invalidthrowslink</a></li><li><a href""http://errorproneinfo/bugpattern/isinstanceincompatibletype"">isinstanceincompatibletype</a></li><li><a href""http://errorproneinfo/bugpattern/javautildate"">javautildate</a></li><li><a href""http://errorproneinfo/bugpattern/jodaconstructors"">jodaconstructors</a></li><li><a href""http://errorproneinfo/bugpattern/jodadatetimeconstants"">jodadatetimeconstants</a></li><li><a href""http://errorproneinfo/bugpattern/longfloatconversion"">longfloatconversion</a></li><li><a href""http://errorproneinfo/bugpattern/membername"">membername</a></li><li><a href""http://errorproneinfo/bugpattern/misplacedscopeannotations"">misplacedscopeannotations</a></li><li><a href""http://errorproneinfo/bugpattern/objectequalsforprimitives"">objectequalsforprimitives</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/returnsnullcollection"">returnsnullcollection</a></li></ul><!-- raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75""><code>5e733ac</code></a> release error prone 251</li><li><a href""https://githubcom/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e""><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href""https://githubcom/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1""><code>6861403</code></a> dont set checks as <code>disableable  false</code> in external</li><li><a href""https://githubcom/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a""><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href""https://githubcom/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111""><code>7a65117</code></a> <code>symbolislocal</code> was renamed in jdk 16</li><li><a href""https://githubcom/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d""><code>fb6d049</code></a> dont suggest private constructors for abstract classes</li><li><a href""https://githubcom/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40""><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href""https://githubcom/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06""><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href""https://githubcom/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3""><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li><li><a href""https://githubcom/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175""><code>0951985</code></a> generate javadoc in ci pipeline</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v240v251"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2092"">#2092</a>)</li><li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2099"">#2099</a>)</li><li>false positive in <code>differentnamebutsame</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2094"">#2094</a>)</li><li>false positive in <code>unnecessaryoptionalget</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2101"">#2101</a>)</li><li>false positive in <code>unnecessarymethodreference</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2102"">#2102</a>)</li><li>fixed a regression in jdk 16-ea support (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2105"">#2105</a>)</li></ul><h2>error prone 250</h2><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/banserializableread"">banserializableread</a></li><li><a href""http://errorproneinfo/bugpattern/catchingunchecked"">catchingunchecked</a></li><li><a href""http://errorproneinfo/bugpattern/computeifabsentambiguousreference"">computeifabsentambiguousreference</a></li><li><a href""http://errorproneinfo/bugpattern/dangerousliteralnull"">dangerousliteralnull</a></li><li><a href""http://errorproneinfo/bugpattern/datechecker"">datechecker</a></li><li><a href""http://errorproneinfo/bugpattern/differentnamebutsame"">differentnamebutsame</a></li><li><a href""http://errorproneinfo/bugpattern/donotcallsuggester"">donotcallsuggester</a></li><li><a href""http://errorproneinfo/bugpattern/donotclaimannotations"">donotclaimannotations</a></li><li><a href""http://errorproneinfo/bugpattern/donotmockautovalue"">donotmockautovalue</a></li><li><a href""http://errorproneinfo/bugpattern/floggerformatstring"">floggerformatstring</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogvarargs"">floggerlogvarargs</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogwithcause"">floggerlogwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggermessageformat"">floggermessageformat</a></li><li><a href""http://errorproneinfo/bugpattern/floggerpassedaround"">floggerpassedaround</a></li><li><a href""http://errorproneinfo/bugpattern/floggerredundantisenabled"">floggerredundantisenabled</a></li><li><a href""http://errorproneinfo/bugpattern/floggerrequiredmodifiers"">floggerrequiredmodifiers</a></li><li><a href""http://errorproneinfo/bugpattern/floggersplitlogstatement"">floggersplitlogstatement</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithcause"">floggerwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithoutcause"">floggerwithoutcause</a></li><li><a href""http://errorproneinfo/bugpattern/hashcodetostring"">hashcodetostring</a></li><li><a href""http://errorproneinfo/bugpattern/identityhashmapusage"">identityhashmapusage</a></li><li><a href""http://errorproneinfo/bugpattern/immutablemembercollection"">immutablemembercollection</a></li><li><a href""http://errorproneinfo/bugpattern/immutablesetforcontains"">immutablesetforcontains</a></li><li><a href""http://errorproneinfo/bugpattern/initializeinline"">initializeinline</a></li><li><a href""http://errorproneinfo/bugpattern/invalidthrowslink"">invalidthrowslink</a></li><li><a href""http://errorproneinfo/bugpattern/isinstanceincompatibletype"">isinstanceincompatibletype</a></li><li><a href""http://errorproneinfo/bugpattern/javautildate"">javautildate</a></li><li><a href""http://errorproneinfo/bugpattern/jodaconstructors"">jodaconstructors</a></li><li><a href""http://errorproneinfo/bugpattern/jodadatetimeconstants"">jodadatetimeconstants</a></li><li><a href""http://errorproneinfo/bugpattern/longfloatconversion"">longfloatconversion</a></li><li><a href""http://errorproneinfo/bugpattern/membername"">membername</a></li><li><a href""http://errorproneinfo/bugpattern/misplacedscopeannotations"">misplacedscopeannotations</a></li><li><a href""http://errorproneinfo/bugpattern/objectequalsforprimitives"">objectequalsforprimitives</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/returnsnullcollection"">returnsnullcollection</a></li></ul><!-- raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75""><code>5e733ac</code></a> release error prone 251</li><li><a href""https://githubcom/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e""><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href""https://githubcom/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1""><code>6861403</code></a> dont set checks as <code>disableable  false</code> in external</li><li><a href""https://githubcom/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a""><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href""https://githubcom/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111""><code>7a65117</code></a> <code>symbolislocal</code> was renamed in jdk 16</li><li><a href""https://githubcom/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d""><code>fb6d049</code></a> dont suggest private constructors for abstract classes</li><li><a href""https://githubcom/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40""><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href""https://githubcom/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06""><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href""https://githubcom/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3""><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li><li><a href""https://githubcom/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175""><code>0951985</code></a> generate javadoc in ci pipeline</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v240v251"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> errorprone is catching actual issues i will work through them ||"
229,2094,2176,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"bump versionserrorprone from 240 to 251 bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2092"">#2092</a>)</li><li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2099"">#2099</a>)</li><li>false positive in <code>differentnamebutsame</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2094"">#2094</a>)</li><li>false positive in <code>unnecessaryoptionalget</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2101"">#2101</a>)</li><li>false positive in <code>unnecessarymethodreference</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2102"">#2102</a>)</li><li>fixed a regression in jdk 16-ea support (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2105"">#2105</a>)</li></ul><h2>error prone 250</h2><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/banserializableread"">banserializableread</a></li><li><a href""http://errorproneinfo/bugpattern/catchingunchecked"">catchingunchecked</a></li><li><a href""http://errorproneinfo/bugpattern/computeifabsentambiguousreference"">computeifabsentambiguousreference</a></li><li><a href""http://errorproneinfo/bugpattern/dangerousliteralnull"">dangerousliteralnull</a></li><li><a href""http://errorproneinfo/bugpattern/datechecker"">datechecker</a></li><li><a href""http://errorproneinfo/bugpattern/differentnamebutsame"">differentnamebutsame</a></li><li><a href""http://errorproneinfo/bugpattern/donotcallsuggester"">donotcallsuggester</a></li><li><a href""http://errorproneinfo/bugpattern/donotclaimannotations"">donotclaimannotations</a></li><li><a href""http://errorproneinfo/bugpattern/donotmockautovalue"">donotmockautovalue</a></li><li><a href""http://errorproneinfo/bugpattern/floggerformatstring"">floggerformatstring</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogvarargs"">floggerlogvarargs</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogwithcause"">floggerlogwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggermessageformat"">floggermessageformat</a></li><li><a href""http://errorproneinfo/bugpattern/floggerpassedaround"">floggerpassedaround</a></li><li><a href""http://errorproneinfo/bugpattern/floggerredundantisenabled"">floggerredundantisenabled</a></li><li><a href""http://errorproneinfo/bugpattern/floggerrequiredmodifiers"">floggerrequiredmodifiers</a></li><li><a href""http://errorproneinfo/bugpattern/floggersplitlogstatement"">floggersplitlogstatement</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithcause"">floggerwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithoutcause"">floggerwithoutcause</a></li><li><a href""http://errorproneinfo/bugpattern/hashcodetostring"">hashcodetostring</a></li><li><a href""http://errorproneinfo/bugpattern/identityhashmapusage"">identityhashmapusage</a></li><li><a href""http://errorproneinfo/bugpattern/immutablemembercollection"">immutablemembercollection</a></li><li><a href""http://errorproneinfo/bugpattern/immutablesetforcontains"">immutablesetforcontains</a></li><li><a href""http://errorproneinfo/bugpattern/initializeinline"">initializeinline</a></li><li><a href""http://errorproneinfo/bugpattern/invalidthrowslink"">invalidthrowslink</a></li><li><a href""http://errorproneinfo/bugpattern/isinstanceincompatibletype"">isinstanceincompatibletype</a></li><li><a href""http://errorproneinfo/bugpattern/javautildate"">javautildate</a></li><li><a href""http://errorproneinfo/bugpattern/jodaconstructors"">jodaconstructors</a></li><li><a href""http://errorproneinfo/bugpattern/jodadatetimeconstants"">jodadatetimeconstants</a></li><li><a href""http://errorproneinfo/bugpattern/longfloatconversion"">longfloatconversion</a></li><li><a href""http://errorproneinfo/bugpattern/membername"">membername</a></li><li><a href""http://errorproneinfo/bugpattern/misplacedscopeannotations"">misplacedscopeannotations</a></li><li><a href""http://errorproneinfo/bugpattern/objectequalsforprimitives"">objectequalsforprimitives</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/returnsnullcollection"">returnsnullcollection</a></li></ul><!-- raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75""><code>5e733ac</code></a> release error prone 251</li><li><a href""https://githubcom/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e""><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href""https://githubcom/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1""><code>6861403</code></a> dont set checks as <code>disableable  false</code> in external</li><li><a href""https://githubcom/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a""><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href""https://githubcom/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111""><code>7a65117</code></a> <code>symbolislocal</code> was renamed in jdk 16</li><li><a href""https://githubcom/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d""><code>fb6d049</code></a> dont suggest private constructors for abstract classes</li><li><a href""https://githubcom/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40""><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href""https://githubcom/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06""><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href""https://githubcom/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3""><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li><li><a href""https://githubcom/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175""><code>0951985</code></a> generate javadoc in ci pipeline</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v240v251"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2092"">#2092</a>)</li><li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2099"">#2099</a>)</li><li>false positive in <code>differentnamebutsame</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2094"">#2094</a>)</li><li>false positive in <code>unnecessaryoptionalget</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2101"">#2101</a>)</li><li>false positive in <code>unnecessarymethodreference</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2102"">#2102</a>)</li><li>fixed a regression in jdk 16-ea support (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2105"">#2105</a>)</li></ul><h2>error prone 250</h2><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/banserializableread"">banserializableread</a></li><li><a href""http://errorproneinfo/bugpattern/catchingunchecked"">catchingunchecked</a></li><li><a href""http://errorproneinfo/bugpattern/computeifabsentambiguousreference"">computeifabsentambiguousreference</a></li><li><a href""http://errorproneinfo/bugpattern/dangerousliteralnull"">dangerousliteralnull</a></li><li><a href""http://errorproneinfo/bugpattern/datechecker"">datechecker</a></li><li><a href""http://errorproneinfo/bugpattern/differentnamebutsame"">differentnamebutsame</a></li><li><a href""http://errorproneinfo/bugpattern/donotcallsuggester"">donotcallsuggester</a></li><li><a href""http://errorproneinfo/bugpattern/donotclaimannotations"">donotclaimannotations</a></li><li><a href""http://errorproneinfo/bugpattern/donotmockautovalue"">donotmockautovalue</a></li><li><a href""http://errorproneinfo/bugpattern/floggerformatstring"">floggerformatstring</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogvarargs"">floggerlogvarargs</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogwithcause"">floggerlogwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggermessageformat"">floggermessageformat</a></li><li><a href""http://errorproneinfo/bugpattern/floggerpassedaround"">floggerpassedaround</a></li><li><a href""http://errorproneinfo/bugpattern/floggerredundantisenabled"">floggerredundantisenabled</a></li><li><a href""http://errorproneinfo/bugpattern/floggerrequiredmodifiers"">floggerrequiredmodifiers</a></li><li><a href""http://errorproneinfo/bugpattern/floggersplitlogstatement"">floggersplitlogstatement</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithcause"">floggerwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithoutcause"">floggerwithoutcause</a></li><li><a href""http://errorproneinfo/bugpattern/hashcodetostring"">hashcodetostring</a></li><li><a href""http://errorproneinfo/bugpattern/identityhashmapusage"">identityhashmapusage</a></li><li><a href""http://errorproneinfo/bugpattern/immutablemembercollection"">immutablemembercollection</a></li><li><a href""http://errorproneinfo/bugpattern/immutablesetforcontains"">immutablesetforcontains</a></li><li><a href""http://errorproneinfo/bugpattern/initializeinline"">initializeinline</a></li><li><a href""http://errorproneinfo/bugpattern/invalidthrowslink"">invalidthrowslink</a></li><li><a href""http://errorproneinfo/bugpattern/isinstanceincompatibletype"">isinstanceincompatibletype</a></li><li><a href""http://errorproneinfo/bugpattern/javautildate"">javautildate</a></li><li><a href""http://errorproneinfo/bugpattern/jodaconstructors"">jodaconstructors</a></li><li><a href""http://errorproneinfo/bugpattern/jodadatetimeconstants"">jodadatetimeconstants</a></li><li><a href""http://errorproneinfo/bugpattern/longfloatconversion"">longfloatconversion</a></li><li><a href""http://errorproneinfo/bugpattern/membername"">membername</a></li><li><a href""http://errorproneinfo/bugpattern/misplacedscopeannotations"">misplacedscopeannotations</a></li><li><a href""http://errorproneinfo/bugpattern/objectequalsforprimitives"">objectequalsforprimitives</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/returnsnullcollection"">returnsnullcollection</a></li></ul><!-- raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75""><code>5e733ac</code></a> release error prone 251</li><li><a href""https://githubcom/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e""><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href""https://githubcom/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1""><code>6861403</code></a> dont set checks as <code>disableable  false</code> in external</li><li><a href""https://githubcom/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a""><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href""https://githubcom/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111""><code>7a65117</code></a> <code>symbolislocal</code> was renamed in jdk 16</li><li><a href""https://githubcom/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d""><code>fb6d049</code></a> dont suggest private constructors for abstract classes</li><li><a href""https://githubcom/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40""><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href""https://githubcom/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06""><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href""https://githubcom/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3""><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li><li><a href""https://githubcom/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175""><code>0951985</code></a> generate javadoc in ci pipeline</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v240v251"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> errorprone is catching actual issues i will work through them ||"
230,2105,2176,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,"bump versionserrorprone from 240 to 251 bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2092"">#2092</a>)</li><li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2099"">#2099</a>)</li><li>false positive in <code>differentnamebutsame</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2094"">#2094</a>)</li><li>false positive in <code>unnecessaryoptionalget</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2101"">#2101</a>)</li><li>false positive in <code>unnecessarymethodreference</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2102"">#2102</a>)</li><li>fixed a regression in jdk 16-ea support (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2105"">#2105</a>)</li></ul><h2>error prone 250</h2><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/banserializableread"">banserializableread</a></li><li><a href""http://errorproneinfo/bugpattern/catchingunchecked"">catchingunchecked</a></li><li><a href""http://errorproneinfo/bugpattern/computeifabsentambiguousreference"">computeifabsentambiguousreference</a></li><li><a href""http://errorproneinfo/bugpattern/dangerousliteralnull"">dangerousliteralnull</a></li><li><a href""http://errorproneinfo/bugpattern/datechecker"">datechecker</a></li><li><a href""http://errorproneinfo/bugpattern/differentnamebutsame"">differentnamebutsame</a></li><li><a href""http://errorproneinfo/bugpattern/donotcallsuggester"">donotcallsuggester</a></li><li><a href""http://errorproneinfo/bugpattern/donotclaimannotations"">donotclaimannotations</a></li><li><a href""http://errorproneinfo/bugpattern/donotmockautovalue"">donotmockautovalue</a></li><li><a href""http://errorproneinfo/bugpattern/floggerformatstring"">floggerformatstring</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogvarargs"">floggerlogvarargs</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogwithcause"">floggerlogwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggermessageformat"">floggermessageformat</a></li><li><a href""http://errorproneinfo/bugpattern/floggerpassedaround"">floggerpassedaround</a></li><li><a href""http://errorproneinfo/bugpattern/floggerredundantisenabled"">floggerredundantisenabled</a></li><li><a href""http://errorproneinfo/bugpattern/floggerrequiredmodifiers"">floggerrequiredmodifiers</a></li><li><a href""http://errorproneinfo/bugpattern/floggersplitlogstatement"">floggersplitlogstatement</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithcause"">floggerwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithoutcause"">floggerwithoutcause</a></li><li><a href""http://errorproneinfo/bugpattern/hashcodetostring"">hashcodetostring</a></li><li><a href""http://errorproneinfo/bugpattern/identityhashmapusage"">identityhashmapusage</a></li><li><a href""http://errorproneinfo/bugpattern/immutablemembercollection"">immutablemembercollection</a></li><li><a href""http://errorproneinfo/bugpattern/immutablesetforcontains"">immutablesetforcontains</a></li><li><a href""http://errorproneinfo/bugpattern/initializeinline"">initializeinline</a></li><li><a href""http://errorproneinfo/bugpattern/invalidthrowslink"">invalidthrowslink</a></li><li><a href""http://errorproneinfo/bugpattern/isinstanceincompatibletype"">isinstanceincompatibletype</a></li><li><a href""http://errorproneinfo/bugpattern/javautildate"">javautildate</a></li><li><a href""http://errorproneinfo/bugpattern/jodaconstructors"">jodaconstructors</a></li><li><a href""http://errorproneinfo/bugpattern/jodadatetimeconstants"">jodadatetimeconstants</a></li><li><a href""http://errorproneinfo/bugpattern/longfloatconversion"">longfloatconversion</a></li><li><a href""http://errorproneinfo/bugpattern/membername"">membername</a></li><li><a href""http://errorproneinfo/bugpattern/misplacedscopeannotations"">misplacedscopeannotations</a></li><li><a href""http://errorproneinfo/bugpattern/objectequalsforprimitives"">objectequalsforprimitives</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/returnsnullcollection"">returnsnullcollection</a></li></ul><!-- raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75""><code>5e733ac</code></a> release error prone 251</li><li><a href""https://githubcom/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e""><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href""https://githubcom/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1""><code>6861403</code></a> dont set checks as <code>disableable  false</code> in external</li><li><a href""https://githubcom/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a""><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href""https://githubcom/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111""><code>7a65117</code></a> <code>symbolislocal</code> was renamed in jdk 16</li><li><a href""https://githubcom/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d""><code>fb6d049</code></a> dont suggest private constructors for abstract classes</li><li><a href""https://githubcom/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40""><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href""https://githubcom/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06""><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href""https://githubcom/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3""><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li><li><a href""https://githubcom/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175""><code>0951985</code></a> generate javadoc in ci pipeline</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v240v251"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2092"">#2092</a>)</li><li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2099"">#2099</a>)</li><li>false positive in <code>differentnamebutsame</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2094"">#2094</a>)</li><li>false positive in <code>unnecessaryoptionalget</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2101"">#2101</a>)</li><li>false positive in <code>unnecessarymethodreference</code> (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2102"">#2102</a>)</li><li>fixed a regression in jdk 16-ea support (<a href""https://github-redirectdependabotcom/google/error-prone/issues/2105"">#2105</a>)</li></ul><h2>error prone 250</h2><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/banserializableread"">banserializableread</a></li><li><a href""http://errorproneinfo/bugpattern/catchingunchecked"">catchingunchecked</a></li><li><a href""http://errorproneinfo/bugpattern/computeifabsentambiguousreference"">computeifabsentambiguousreference</a></li><li><a href""http://errorproneinfo/bugpattern/dangerousliteralnull"">dangerousliteralnull</a></li><li><a href""http://errorproneinfo/bugpattern/datechecker"">datechecker</a></li><li><a href""http://errorproneinfo/bugpattern/differentnamebutsame"">differentnamebutsame</a></li><li><a href""http://errorproneinfo/bugpattern/donotcallsuggester"">donotcallsuggester</a></li><li><a href""http://errorproneinfo/bugpattern/donotclaimannotations"">donotclaimannotations</a></li><li><a href""http://errorproneinfo/bugpattern/donotmockautovalue"">donotmockautovalue</a></li><li><a href""http://errorproneinfo/bugpattern/floggerformatstring"">floggerformatstring</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogvarargs"">floggerlogvarargs</a></li><li><a href""http://errorproneinfo/bugpattern/floggerlogwithcause"">floggerlogwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggermessageformat"">floggermessageformat</a></li><li><a href""http://errorproneinfo/bugpattern/floggerpassedaround"">floggerpassedaround</a></li><li><a href""http://errorproneinfo/bugpattern/floggerredundantisenabled"">floggerredundantisenabled</a></li><li><a href""http://errorproneinfo/bugpattern/floggerrequiredmodifiers"">floggerrequiredmodifiers</a></li><li><a href""http://errorproneinfo/bugpattern/floggersplitlogstatement"">floggersplitlogstatement</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithcause"">floggerwithcause</a></li><li><a href""http://errorproneinfo/bugpattern/floggerwithoutcause"">floggerwithoutcause</a></li><li><a href""http://errorproneinfo/bugpattern/hashcodetostring"">hashcodetostring</a></li><li><a href""http://errorproneinfo/bugpattern/identityhashmapusage"">identityhashmapusage</a></li><li><a href""http://errorproneinfo/bugpattern/immutablemembercollection"">immutablemembercollection</a></li><li><a href""http://errorproneinfo/bugpattern/immutablesetforcontains"">immutablesetforcontains</a></li><li><a href""http://errorproneinfo/bugpattern/initializeinline"">initializeinline</a></li><li><a href""http://errorproneinfo/bugpattern/invalidthrowslink"">invalidthrowslink</a></li><li><a href""http://errorproneinfo/bugpattern/isinstanceincompatibletype"">isinstanceincompatibletype</a></li><li><a href""http://errorproneinfo/bugpattern/javautildate"">javautildate</a></li><li><a href""http://errorproneinfo/bugpattern/jodaconstructors"">jodaconstructors</a></li><li><a href""http://errorproneinfo/bugpattern/jodadatetimeconstants"">jodadatetimeconstants</a></li><li><a href""http://errorproneinfo/bugpattern/longfloatconversion"">longfloatconversion</a></li><li><a href""http://errorproneinfo/bugpattern/membername"">membername</a></li><li><a href""http://errorproneinfo/bugpattern/misplacedscopeannotations"">misplacedscopeannotations</a></li><li><a href""http://errorproneinfo/bugpattern/objectequalsforprimitives"">objectequalsforprimitives</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/returnsnullcollection"">returnsnullcollection</a></li></ul><!-- raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75""><code>5e733ac</code></a> release error prone 251</li><li><a href""https://githubcom/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e""><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href""https://githubcom/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1""><code>6861403</code></a> dont set checks as <code>disableable  false</code> in external</li><li><a href""https://githubcom/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a""><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href""https://githubcom/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111""><code>7a65117</code></a> <code>symbolislocal</code> was renamed in jdk 16</li><li><a href""https://githubcom/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d""><code>fb6d049</code></a> dont suggest private constructors for abstract classes</li><li><a href""https://githubcom/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40""><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href""https://githubcom/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06""><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href""https://githubcom/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3""><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li><li><a href""https://githubcom/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175""><code>0951985</code></a> generate javadoc in ci pipeline</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v240v251"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> errorprone is catching actual issues i will work through them ||"
231,2173,2179,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fix reversed order of verify parameters for consistency the parameters of the methodmockedstaticverify(verificationmode verification)have been swapped tomockedstaticverify(verification verificationmode)as this order is already used inmockitoverify(t verificationmode)fixes: #2173check list - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/2179?srcpr&elh1) report> merging [#2179](https://codecovio/gh/mockito/mockito/pull/2179?srcpr&eldesc) (3e37299) into [release/3x](https://codecovio/gh/mockito/mockito/commit/79f06bae95074c7c6d8ce862db100ab74edddf6e?eldesc) (79f06ba) will **increase** coverage by `000%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2179/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/2179?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #2179   +/-   ##  coverage          8487%   8487%           - complexity          2721     2722    +1       files                325      325             lines               8278     8280    +2       branches             989      989           + hits                7026     7028    +2       misses               981      981             partials             271      271           ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2179?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockedstaticjava](https://codecovio/gh/mockito/mockito/pull/2179/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nrzwrtdgf0awmuamf2yq) | `10000% <10000%> (ø)` | `100 <100> (ø)` | || [in/java/org/mockito/internal/mockedstaticimpljava](https://codecovio/gh/mockito/mockito/pull/2179/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nrzwrtdgf0awnjbxbslmphdme) | `7922% <10000%> (+055%)` | `1200 <100> (+100)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2179?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2179?srcpr&elfooter) last update [79f06ba3e37299](https://codecovio/gh/mockito/mockito/pull/2179?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
232,2154,2193,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,fixes #2154 : javalangobject is now instrumented again seems like ```// the object type does not ever need instrumentationtargetsremove(objectclass)```in `orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(set<class<?>> boolean)` was a bit over the top i e it does seem to break mocking of `tostring` when inherited from `javalangobject`i added a test for this which should have been there in the first place due to this i am still not sure if removing the line is safe even if the whole test suite is green please review carefully yeah good point i dont know why i ever added that ||
233,2235,2236,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,bugfix/2235 verify on a wrapped mock fails pr for #2235: verify() on a wrapped mock fails with unfinishedverificationexception  
234,2238,2241,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,fixes #2238: do not omit stack frames of causing class this pr will fix this problems described in #2238 the main cause wasnt the `hiderecursivecall` method but `tryinvoke` methodin `tryinvoke` the original stacktrace will be passed through the configured filter after it has been modified by `hiderecursivecall`when calling `hiderecursivecall` the second argument (`current`) is set the the length of the stack trace of the causing exceptionthis will omit too much stack frames ultimately skipping the lines containing of the root exception causein this patch `tryinvoke` will try to find a better starting frame when an exception is caughtit will do this by investigating the created stack trace and look for the first entry matching the class name of the `instance` object given to `tryinvoke` this offset will then be given to `hiderecursivecall` as `current` argument instead of using the stack trace lengthif there is no `instance` object (`null`) the length of the stack trace is used (like before)  
235,218,2259,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,"""but invoked here"" lists the invocation parameters supersedes and closes #2188  "
236,2242,2263,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,fixes #2242 : make exceptions for inorderverify more standard / spec… …ific*adds nullinsteadofmockexception and notamockexception checks to inorderverify() *before* checking if mocks were passed in during creation of inordersee https://githubcom/mockito/mockito/issues/2242 for a description of the issueinorderverify(mock) now first checks if the passed argument is null and if the mock is in fact a mock and gives appropriate exception messages before checking if the passed in argument was passed during creation of inorder object and therefore giving a less specific error message<!-- hey thanks for the contribution this is awesomeas you may have read project members have somehow an opinionated view on what and how should bemockito eg we dont want mockito to be a feature bloatthere may be a thorough review with feedback -> code change loop--><!--which branch : - on mockito 3x make your pull request target `release/3x`- on mockito 2x make your pull request target `release/2x` (2x is in mainte ce mode)--><!--if you have a suggestion for this template you can fix it in the github/pull_request_templatemd file-->## checklist - [x ] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [ x] pr should be motivated ie what does it fix why and if relevant how - [ x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x ] avoid other runtime dependencies - [x ] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x ] the pull request follows coding style - [ x] mention `fixes #<issue number>` in the description _if relevant_ - [ x] at least one commit should mention `fixes #<issue number>` _if relevant_ indeed thanks! ||
237,2266,2267,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,include cause when fieldreader fails to access field fixes #2266simply passes the exception cause to the thrown mockitoexception # [codecov](https://codecovio/gh/mockito/mockito/pull/2267?srcpr&elh1&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) report> merging [#2267](https://codecovio/gh/mockito/mockito/pull/2267?srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (37e96c7) into [release/3x](https://codecovio/gh/mockito/mockito/commit/2fa2a635e63c3a2f3010b73d6416506d56e0e614?eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (2fa2a63) will **increase** coverage by `002%`> the diff coverage is `n/a`> :exclamation: current head 37e96c7 differs from pull request most recent head 51c6ea9 consider uploading reports for the commit 51c6ea9 to get more accurate results[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2267/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)](https://codecovio/gh/mockito/mockito/pull/2267?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)```diff@@                coverage diff                @@##             release/3x    #2267      +/-   ##+ coverage          8482%   8484%   +002%       complexity          2734     2734                files                326      326                lines               8342     8342                branches             997      997              + hits                7076     7078       +2       misses               990      990              + partials             276      274       -2     ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2267?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) | coverage δ | complexity δ | ||---|---|---|---|| [/mockito/internal/util/reflection/fieldreaderjava](https://codecovio/gh/mockito/mockito/pull/2267/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vrmllbgrszwfkzxiuamf2yq) | `7777% <ø> (ø)` | `400 <000> (ø)` | || [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/2267/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `4148% <000%> (+212%)` | `1100% <000%> (ø%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2267?srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2267?srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) last update [2fa2a6351c6ea9](https://codecovio/gh/mockito/mockito/pull/2267?srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) read the [comment docs](https://docscodecovio/docs/pull-request-comments?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) || i can confirm that the regression test fails when the change to fieldreader is reverted ||
238,2273,2274,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,fixes #2273 : add missing parenthesis to javadoc example adds the missing parenthesis to the argumentmatcher javadoc example## checklist - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&elh1&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) report> merging [#2274](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (f47120d) into [release/3x](https://codecovio/gh/mockito/mockito/commit/c86fe047d557bd2ec364d59a99430792f3920e96?eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (c86fe04) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2274/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)```diff@@                coverage diff                @@##             release/3x    #2274      +/-   ##+ coverage          8488%   8489%   +001%     - complexity          2734     2736       +2       files                326      326                lines               8342     8342                branches             997      997              + hits                7081     7082       +1     + misses               987      986       -1       partials             274      274              ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) | coverage δ | complexity δ | ||---|---|---|---|| [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/2274/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `3936% <000%> (-213%)` | `1100% <000%> (ø%)` | || [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/2274/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `8471% <000%> (+043%)` | `3900% <000%> (+100%)` | || [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/2274/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6971% <000%> (+057%)` | `5100% <000%> (+100%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) last update [c86fe04f47120d](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) read the [comment docs](https://docscodecovio/docs/pull-request-comments?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) ||
239,2257,2298,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> @dependabot rebase || @dependabot squash and merge ||"
240,2260,2298,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> @dependabot rebase || @dependabot squash and merge ||"
241,2282,2298,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> @dependabot rebase || @dependabot squash and merge ||"
242,2324,2298,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,"bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> @dependabot rebase || @dependabot squash and merge ||"
243,230,2306,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,use the parent classloader if the context classloader is a child of it this should only affect cases that previously would have thrown anexceptionfixes #2303 there are some formatting issues that should be automatically fixed if you run `/gradlew spotlessapply` locally || formatting issues fixed || # [codecov](https://codecovio/gh/mockito/mockito/pull/2306?srcpr&elh1&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) report> merging [#2306](https://codecovio/gh/mockito/mockito/pull/2306?srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (97903b9) into [main](https://codecovio/gh/mockito/mockito/commit/c2715ea34a4f32325aad9f00221a24ce6c95bc86?eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (c2715ea) will **decrease** coverage by `005%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2306/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)](https://codecovio/gh/mockito/mockito/pull/2306?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)```diff@@             coverage diff              @@##               main    #2306      +/-   ##- coverage     8468%   8463%   -006%     - complexity     2761     2766       +5       files           328      328                lines          8410     8428      +18       branches       1004     1011       +7     + hits           7122     7133      +11     - misses         1008     1015       +7       partials        280      280              ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2306?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) | coverage δ | ||---|---|---|| [/creation/bytebuddy/subclassbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/2306/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrly29kzudlbmvyyxrvci5qyxzh) | `7928% <10000%> (-433%)` | :arrow_down: || [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/2306/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `3939% <000%> (+202%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2306?srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2306?srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) last update [c2715ea97903b9](https://codecovio/gh/mockito/mockito/pull/2306?srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) read the [comment docs](https://docscodecovio/docs/pull-request-comments?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) || thanks @charlesmunger for working on this and the regression test! || i have since encountered two cases where this pr introduces breakage 1 mocking a private abstract class while using https://githubcom/google/gwtmockito this worked before because gwtmockito was stripping final and other modifiers off of loaded classes but now the changed loader behavior causes it to fail2 a custom classloader that instruments some but not all of the packages it loads delegating others to its parentit turns out that the root of these problems is `loaderbuilderbuild(mockmethodinterceptorclassgetclassloader())` i didnt actually intend to include that it came from the 2x release branch when i initially forked the repo and was removed in 9bc9be6d0fb1809346dcd02b22ced477816e0fc1 originally sorry for the error! ill send a pr to fix ||
244,2303,2312,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,undo parent for multipleparentsclassloader 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1 which breaks behavior under some classloaders that special-case mockito classes use of an explicit parent with `multipleparentsclassloader` appears to be discouraged in the documentation alsofollowup for #2303 # [codecov](https://codecovio/gh/mockito/mockito/pull/2312?srcpr&elh1&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) report> merging [#2312](https://codecovio/gh/mockito/mockito/pull/2312?srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (62bd555) into [main](https://codecovio/gh/mockito/mockito/commit/d4753548bc3e9be3f95395c52ce856b5cf518b13?eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (d475354) will **increase** coverage by `004%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2312/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)](https://codecovio/gh/mockito/mockito/pull/2312?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)```diff@@             coverage diff              @@##               main    #2312      +/-   ##+ coverage     8461%   8465%   +004%     - complexity     2766     2768       +2       files           328      328                lines          8428     8428                branches       1011     1011              + hits           7131     7135       +4       misses         1015     1015              + partials        282      278       -4     ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2312?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) | coverage δ | ||---|---|---|| [/creation/bytebuddy/subclassbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/2312/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrly29kzudlbmvyyxrvci5qyxzh) | `8071% <10000%> (+142%)` | :arrow_up: || [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/2312/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `3939% <000%> (+202%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2312?srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2312?srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) last update [d47535462bd555](https://codecovio/gh/mockito/mockito/pull/2312?srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) read the [comment docs](https://docscodecovio/docs/pull-request-comments?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) || i spent some time thinking about it and reduced the test case to something understandable ||
245,2303,2318,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,check package-privacy of method params this patch handles methods where an interface uses a package-private type as a param or return value - without it the generated mock class will produce abstractmethoderror since its methods do not actually override the methods of the interfacesfollowup on #2303 i have run this through googles internal tests and it doesnt break anything ||
